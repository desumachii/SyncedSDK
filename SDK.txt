Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x38, Size: 0x8]
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 0x8]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 0x8]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 0x8]
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 0x8]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 0x8]
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 0x10]
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 0x10]
	Actor*[] LevelSequenceActors;//[Offset: 0x88, Size: 0x10]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x98, Size: 0x10]
	StreamingLevelsToConsider StreamingLevelsToConsider;//[Offset: 0xa8, Size: 0x28]
	FString StreamingLevelsPrefix;//[Offset: 0xd0, Size: 0x10]
	Level* CurrentLevelPendingVisibility;//[Offset: 0xe0, Size: 0x8]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0xe8, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xf0, Size: 0x8]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0xf8, Size: 0x8]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x100, Size: 0x8]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11e, Size: 0x1]
	NavigationSystemBase* NavigationSystem;//[Offset: 0x120, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x128, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x130, Size: 0x8]
	AISystemBase* AISystem;//[Offset: 0x138, Size: 0x8]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x140, Size: 0x8]
	Level*[] Levels;//[Offset: 0x148, Size: 0x10]
	LevelCollection[] LevelCollections;//[Offset: 0x158, Size: 0x10]
	GameInstance* OwningGameInstance;//[Offset: 0x188, Size: 0x8]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x190, Size: 0x10]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x1a0, Size: 0x8]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x1a8, Size: 0x8]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate;//[Offset: 0x208, Size: 0x10]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate_OnGameThread;//[Offset: 0x218, Size: 0x10]
	WorldComposition* WorldComposition;//[Offset: 0x5a8, Size: 0x8]
	NextReplica* NextReplica;//[Offset: 0x5b0, Size: 0x8]
	WorldPSCPool PSCPool;//[Offset: 0x660, Size: 0x58]
	SceneComponent*[] DirtyTransformComponents;//[Offset: 0x780, Size: 0x10]
	WorldSettings* K2_GetWorldSettings();// 0x4cb7eb0
	void HandleTimelineScrubbed();// 0x4cb7e90

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x305c9c0

--------------------------------
Class: WorldSettings.Info.Actor.Object
	int VisibilityCellSize;//[Offset: 0x2f0, Size: 0x4]
	byte VisibilityAggressiveness;//[Offset: 0x2f4, Size: 0x1]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f5, Size: 0x1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f5, Size: 0x1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f5, Size: 0x1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2f5, Size: 0x1]
	Box2D ValidArea;//[Offset: 0x2f8, Size: 0x14]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 0x1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x320, Size: 0x1]
	bool bEnableNextReplica;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x320, Size: 0x1]
	<NextReplicaLevelLayerSettings*> ReplicaLevelLayerSettings;//[Offset: 0x328, Size: 0x50]
	bool bEnablePersistentLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x378, Size: 0x1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x378, Size: 0x1]
	bool bForceNoCombineStaticMesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x378, Size: 0x1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x390, Size: 0x1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x390, Size: 0x1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x390, Size: 0x1]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x390, Size: 0x1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x390, Size: 0x1]
	bool bGPULightmass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x390, Size: 0x1]
	bool bUseTwoLevelBVH;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x390, Size: 0x1]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x390, Size: 0x1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x391, Size: 0x1]
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x391, Size: 0x1]
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x398, Size: 0x8]
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x3a0, Size: 0x8]
	float WorldToMeters;//[Offset: 0x3a8, Size: 0x4]
	float KillZ;//[Offset: 0x3ac, Size: 0x4]
	class DamageType* KillZDamageType;//[Offset: 0x3b0, Size: 0x8]
	float WorldGravityZ;//[Offset: 0x3b8, Size: 0x4]
	float GlobalGravityZ;//[Offset: 0x3bc, Size: 0x4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x3c0, Size: 0x8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x3c8, Size: 0x8]
	class GameModeBase* DefaultGameMode;//[Offset: 0x3d0, Size: 0x8]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x3d8, Size: 0x8]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x3e0, Size: 0x4]
	Vector DefaultColorScale;//[Offset: 0x3e4, Size: 0xc]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x3f0, Size: 0x4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x3f4, Size: 0x4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x3f8, Size: 0x4]
	MaterialInterface*[] CustomGBufferMaterials;//[Offset: 0x400, Size: 0x10]
	float NextLightMassGITime;//[Offset: 0x410, Size: 0x4]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x418, Size: 0x20]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x438, Size: 0x24]
	float MonoCullingDistance;//[Offset: 0x45c, Size: 0x4]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x460, Size: 0x8]
	float TimeDilation;//[Offset: 0x468, Size: 0x4]
	float MatineeTimeDilation;//[Offset: 0x46c, Size: 0x4]
	float DemoPlayTimeDilation;//[Offset: 0x470, Size: 0x4]
	float MinGlobalTimeDilation;//[Offset: 0x474, Size: 0x4]
	float MaxGlobalTimeDilation;//[Offset: 0x478, Size: 0x4]
	float MinUndilatedFrameTime;//[Offset: 0x47c, Size: 0x4]
	float MaxUndilatedFrameTime;//[Offset: 0x480, Size: 0x4]
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x484, Size: 0x40]
	PlayerState* Pauser;//[Offset: 0x4c8, Size: 0x8]
	NetViewer[] ReplicationViewers;//[Offset: 0x4d0, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x4e0, Size: 0x10]
	PlayerState* PauserPlayerState;//[Offset: 0x4f0, Size: 0x8]
	int MaxNumberOfBookmarks;//[Offset: 0x4f8, Size: 0x4]
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x500, Size: 0x8]
	BookmarkBase*[] BookmarkArray;//[Offset: 0x508, Size: 0x10]
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x518, Size: 0x8]
	void OnRep_WorldGravityZ();// 0x26314b0

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x30, Size: 0x40]
	ActorLiteComponentTickFunction LiteComponentActorTick;//[Offset: 0x70, Size: 0x40]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1]
	bool bHidden;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 0x1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb0, Size: 0x1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bRelevantForLevelBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb1, Size: 0x1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb1, Size: 0x1]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb1, Size: 0x1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb1, Size: 0x1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb2, Size: 0x1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb2, Size: 0x1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb2, Size: 0x1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb2, Size: 0x1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb2, Size: 0x1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb2, Size: 0x1]
	bool bDisableOccludedTrianglesOptimizationForHLOD;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb2, Size: 0x1]
	bool bIgnoreReplicaLevelStreaming;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb2, Size: 0x1]
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb3, Size: 0x1]
	bool bIsInstancedMeshActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb3, Size: 0x1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb3, Size: 0x1]
	bool bCanCreateDynamicCluster;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb3, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb3, Size: 0x1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb3, Size: 0x1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb3, Size: 0x1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb4, Size: 0x1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb5, Size: 0x1]
	enum UpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0xb6, Size: 0x1]
	enum DefaultUpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0xb7, Size: 0x1]
	byte RemoteRole;//[Offset: 0xb8, Size: 0x1]
	RepMovement ReplicatedMovement;//[Offset: 0xbc, Size: 0x34]
	float InitialLifeSpan;//[Offset: 0xf0, Size: 0x4]
	float CustomTimeDilation;//[Offset: 0xf4, Size: 0x4]
	RepAttachment AttachmentReplication;//[Offset: 0x100, Size: 0x40]
	Actor* Owner;//[Offset: 0x140, Size: 0x8]
	FName NetDriverName;//[Offset: 0x148, Size: 0x8]
	byte Role;//[Offset: 0x150, Size: 0x1]
	byte NetDormancy;//[Offset: 0x151, Size: 0x1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0x152, Size: 0x1]
	byte AutoReceiveInput;//[Offset: 0x153, Size: 0x1]
	int InputPriority;//[Offset: 0x154, Size: 0x4]
	InputComponent* InputComponent;//[Offset: 0x158, Size: 0x8]
	float NetCullDistanceSquared;//[Offset: 0x160, Size: 0x4]
	int NetTag;//[Offset: 0x164, Size: 0x4]
	bool bUseNetUpdateDirtyFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]
	bool bUseNetCullDistanceSquaredToRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169, Size: 0x1]
	float NetUpdateFrequency;//[Offset: 0x16c, Size: 0x4]
	float MinNetUpdateFrequency;//[Offset: 0x170, Size: 0x4]
	float NetPriority;//[Offset: 0x174, Size: 0x4]
	Pawn* Instigator;//[Offset: 0x180, Size: 0x8]
	Actor*[] Children;//[Offset: 0x188, Size: 0x10]
	SceneComponent* RootComponent;//[Offset: 0x198, Size: 0x8]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x1a0, Size: 0x10]
	FName[] Layers;//[Offset: 0x1b8, Size: 0x10]
	ChildActorComponent* ParentComponent;//[Offset: 0x1c8, Size: 0x8]
	FName[] Tags;//[Offset: 0x1d8, Size: 0x10]
	delegate OnTakeAnyDamage;//[Offset: 0x1e8, Size: 0x1]
	delegate OnTakePointDamage;//[Offset: 0x1e9, Size: 0x1]
	delegate OnTakeRadialDamage;//[Offset: 0x1ea, Size: 0x1]
	delegate OnActorBeginOverlap;//[Offset: 0x1eb, Size: 0x1]
	delegate OnActorEndOverlap;//[Offset: 0x1ec, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x1ed, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x1ee, Size: 0x1]
	delegate OnClicked;//[Offset: 0x1ef, Size: 0x1]
	delegate OnReleased;//[Offset: 0x1f0, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x1f1, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x1f2, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x1f3, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x1f4, Size: 0x1]
	delegate OnActorHit;//[Offset: 0x1f5, Size: 0x1]
	delegate OnDestroyed;//[Offset: 0x1f6, Size: 0x1]
	delegate OnEndPlay;//[Offset: 0x1f7, Size: 0x1]
	ActorComponent*[] InstanceComponents;//[Offset: 0x258, Size: 0x10]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x268, Size: 0x10]
	LiteComponent*[] LiteComponents;//[Offset: 0x288, Size: 0x10]
	ActorPreSaveData PreSaveData;//[Offset: 0x298, Size: 0x50]
	bool WasRecentlyRendered(float Tolerance);// 0x4b3b760
	void UserConstructionScript();// 0x305c9c0
	void UnregisterLiteComponent(LiteComponent* Component);// 0x4b3b6e0
	void TearOff();// 0x188d0c0
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x4b3b620
	void SetTickGroup(byte NewTickGroup);// 0x4b3b510
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x4b3b590
	void SetReplicates(bool bInReplicates);// 0x4b3b480
	void SetReplicateMovement(bool bInReplicateMovement);// 0x4b3b3f0
	void SetOwner(Actor* NewOwner);// 0x4b3b360
	void SetNetDormancy(byte NewDormancy);// 0x4b3b2e0
	void SetLifeSpan(float InLifespan);// 0x4b3b260
	void SetAutoDestroyWhenFinished(bool bVal);// 0x4b3b1d0
	void SetActorTickInterval(float TickInterval);// 0x4b3b150
	void SetActorTickEnabled(bool bEnabled);// 0x4b3b0c0
	void SetActorScale3D(Vector NewScale3D);// 0x4b3b030
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x4b3afa0
	void SetActorHiddenInGame(bool bNewHidden);// 0x4b3af10
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x4b3ae80
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x4b3adf0
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x4b3ad60
	void RegisterLiteComponent(LiteComponent* Component);// 0x4b3ace0
	void ReceiveTick(float DeltaSeconds);// 0x305c9c0
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x305c9c0
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x305c9c0
	void ReceiveInitializeLiteComponent();// 0x305c9c0
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x305c9c0
	void ReceiveEndPlay(byte EndPlayReason);// 0x305c9c0
	void ReceiveDestroyed();// 0x305c9c0
	void ReceiveBeginPlay();// 0x305c9c0
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x305c9c0
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x305c9c0
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x305c9c0
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x305c9c0
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x305c9c0
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x305c9c0
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x305c9c0
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x305c9c0
	void ReceiveActorEndCursorOver();// 0x305c9c0
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x305c9c0
	void ReceiveActorBeginCursorOver();// 0x305c9c0
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x4b3abd0
	void OnRep_ReplicateMovement();// 0x188cec0
	void OnRep_ReplicatedMovement();// 0x2641550
	void OnRep_Owner();// 0x2875920
	void OnRep_Instigator();// 0x260b430
	void OnRep_AttachmentReplication();// 0xb04ed0
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x4b3aa40
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x4b3a9b0
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x4b3a8c0
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4b3a6c0
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x4b3a5e0
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4b3a3e0
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4b3a240
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4b3a0a0
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4b39ea0
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4b39cf0
	void K2_OnReset();// 0x305c9c0
	void K2_OnEndViewTarget(PlayerController* PC, float ViewTargetBlendOutTime);// 0x305c9c0
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x305c9c0
	SceneComponent* K2_GetRootComponent();// 0x4b39cd0
	ActorComponent*[] K2_GetComponentsByClass(class ActorComponent ComponentClass);// 0x4b39bf0
	Rotator K2_GetActorRotation();// 0x4b39b30
	Vector K2_GetActorLocation();// 0x4b39ab0
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x4b399b0
	void K2_DestroyComponent(ActorComponent* Component);// 0x4b39930
	void K2_DestroyActor();// 0x4b39910
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x4b39750
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x4b39590
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x4b39440
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x4b392f0
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4b390f0
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4b38f50
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4b38db0
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4b38bb0
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4b38a10
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4b38870
	bool IsOverlappingActor(const Actor* Other);// 0x4b387e0
	bool IsChildActor();// 0x4b387b0
	bool IsActorTickEnabled();// 0x4b38780
	bool IsActorBeingDestroyed();// 0x4b38750
	bool HasAuthority();// 0x4b38720
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x4b38680
	Vector GetVelocity();// 0x18d2d50
	Transform GetTransform();// 0x4b38630
	bool GetTickableWhenPaused();// 0x4b38600
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x4b38560
	byte GetRemoteRole();// 0x3d1cec0
	ChildActorComponent* GetParentComponent();// 0x42c3f50
	Actor* GetParentActor();// 0x4b38530
	Actor* GetOwner();// 0x4b38510
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x4b38460
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x4b38370
	byte GetLocalRole();// 0x4b38350
	float GetLifeSpan();// 0x4b38310
	Controller* GetInstigatorController();// 0x4b382e0
	Pawn* GetInstigator();// 0x4b382b0
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x4b381b0
	float GetInputAxisValue(const FName InputAxisName);// 0x4b38110
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x4b38020
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x4b37f80
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x4b37ee0
	float GetGameTimeSinceCreation();// 0x4b37eb0
	float GetDotProductTo(const Actor* OtherActor);// 0x4b37e10
	float GetDistanceTo(const Actor* OtherActor);// 0x4b37d70
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x4b37c70
	ActorComponent*[] GetComponentsByInterface(class Interface Interface);// 0x4b37b90
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x4b37b00
	FName GetAttachParentSocketName();// 0x4b379c0
	Actor* GetAttachParentActor();// 0x4b37990
	void GetAttachedActors(out Actor*[] OutActors, bool bResetArray);// 0x4b37a00
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x4b37890
	Vector GetActorUpVector();// 0x4b37820
	float GetActorTimeDilation();// 0x4b377f0
	float GetActorTickInterval();// 0x4b377c0
	Vector GetActorScale3D();// 0x4b37780
	Vector GetActorRightVector();// 0x4b37710
	Vector GetActorRelativeScale3D();// 0x4b376d0
	Vector GetActorForwardVector();// 0x4b37660
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x4b37570
	bool GetActorEnableCollision();// 0x4b37540
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent, bool bIncludeFromChildActors, bool bIncludeUnregisterComponents);// 0x4b37370
	void ForceNetUpdate();// 0x4b37350
	void FlushNetDormancy();// 0x4b37330
	void FinishAddComponent(ActorComponent* Component, bool bManualAttachment, out const Transform RelativeTransform);// 0x4b371d0
	LiteComponent* FindLiteComponentByClass(class LiteComponent ComponentClass);// 0x4b37140
	void EnableInput(PlayerController* PlayerController);// 0x2928f70
	void DisableInput(PlayerController* PlayerController);// 0x4b370b0
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x4b37020
	bool CanCreateDynamicCluster();// 0x10b48d0
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x4b36f90
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x4b36f00
	ActorComponent* AddComponentByClass(class ActorComponent Class, bool bManualAttachment, out const Transform RelativeTransform, bool bDeferredFinish);// 0x4b36d50
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0x4b36b90
	bool ActorHasTag(FName Tag);// 0x4b36b00

--------------------------------
Class: LiteComponent.Object
	Actor* OwnerPrivate;//[Offset: 0x98, Size: 0x8]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	bool bSupportTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1]
	void SetIsReplicated(bool ShouldReplicate);// 0x4c25be0
	void ReceiveTick(float DeltaSeconds);// 0x305c9c0
	void ReceiveEndPlay();// 0x305c9c0
	void ReceiveBeginPlay();// 0x305c9c0
	bool IsDedicatedServer();// 0x12c2120
	bool HasAuthority();// 0x4c25750

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0xa0, Size: 0x40]
	FName[] ComponentTags;//[Offset: 0xe0, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0xf0, Size: 0x10]
	int UCSSerializationIndex;//[Offset: 0x104, Size: 0x4]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x108, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x108, Size: 0x1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x109, Size: 0x1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10a, Size: 0x1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10a, Size: 0x1]
	bool bEnableOnDedicatedServer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10a, Size: 0x1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10a, Size: 0x1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10a, Size: 0x1]
	enum CreationMethod;//[Offset: 0x10c, Size: 0x1]
	delegate OnComponentActivated;//[Offset: 0x10d, Size: 0x1]
	delegate OnComponentDeactivated;//[Offset: 0x10e, Size: 0x1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x110, Size: 0x10]
	void ToggleActive();// 0x2875eb0
	void SetTickGroup(byte NewTickGroup);// 0x4b3eb70
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x4b3ecb0
	void SetTickableBySlot(bool bNewTickable, FName Slot);// 0x4b3ebf0
	void SetIsReplicated(bool ShouldReplicate);// 0x4b3eae0
	void SetComponentTickInterval(float TickInterval);// 0x4b3ea60
	void SetComponentTickEnabled(bool bEnabled);// 0x4b3e9d0
	void SetAutoActivate(bool bNewAutoActivate);// 0x4b3e940
	void SetActiveBySlot(bool bNewActive, FName Slot);// 0x4b3e880
	void SetActive(bool bNewActive, bool bReset);// 0x4b3e7b0
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x26419a0
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x4b3e720
	void ReceiveTick(float DeltaSeconds);// 0x305c9c0
	void ReceiveEndPlay(byte EndPlayReason);// 0x305c9c0
	void ReceiveBeginPlay();// 0x305c9c0
	void OnRep_IsActive();// 0x188cec0
	void K2_DestroyComponent(Object* Object);// 0x4b3e620
	bool IsComponentTickEnabled();// 0x4b3e5f0
	bool IsBeingDestroyed();// 0x4b3e5c0
	bool IsActive();// 0x4b3e580
	Actor* GetOwner();// 0x28a80d0
	float GetComponentTickInterval();// 0x4164fa0
	void Deactivate();// 0x188dba0
	bool ComponentHasTag(FName Tag);// 0x4b3e370
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x4b3e220
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x4b3e190
	void Activate(bool bReset);// 0x41656c0

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 0x1]
	byte EndTickGroup;//[Offset: 0x9, Size: 0x1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	byte ParallelExecuteGroup;//[Offset: 0xb, Size: 0x1]
	float TickInterval;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 0x8]
	FName MemberName;//[Offset: 0x8, Size: 0x8]
	Guid MemberGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 0x4]
	int B;//[Offset: 0x4, Size: 0x4]
	int C;//[Offset: 0x8, Size: 0x4]
	int D;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	float DamageImpulse;//[Offset: 0x2c, Size: 0x4]
	float DestructibleImpulse;//[Offset: 0x30, Size: 0x4]
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 0x4]
	float DamageFalloff;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 0x8]
	Vector2D Max;//[Offset: 0x8, Size: 0x8]
	byte bIsValid;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: NextReplicaLevelLayerSettings.Object
	<SoftObjectPath> Levels;//[Offset: 0x28, Size: 0x50]
	SoftObjectPath ReplicaLevel;//[Offset: 0x78, Size: 0x18]
	Transform LevelTransform;//[Offset: 0x90, Size: 0x30]
	float LevelCellSize;//[Offset: 0xc0, Size: 0x4]
	int FarHLODCellCombineSize;//[Offset: 0xc4, Size: 0x4]
	bool bRemoveOccludedTriangles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 0x8]
	FString SubPathString;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 0x10]
	Vector Translation;//[Offset: 0x10, Size: 0xc]
	Vector Scale3D;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x28, Size: 0x18]
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x40, Size: 0x4]
	FName DefaultAgentName;//[Offset: 0x44, Size: 0x8]
	bool bIsOverriden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x320, Size: 0x4]
	int Priority;//[Offset: 0x324, Size: 0x4]
	float FluidFriction;//[Offset: 0x328, Size: 0x4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x32c, Size: 0x1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x32c, Size: 0x1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x2e8, Size: 0x1]
	Color BrushColor;//[Offset: 0x2ec, Size: 0x4]
	int PolyFlags;//[Offset: 0x2f0, Size: 0x4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f4, Size: 0x1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f4, Size: 0x1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f4, Size: 0x1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2f4, Size: 0x1]
	Model* Brush;//[Offset: 0x2f8, Size: 0x8]
	BrushComponent* BrushComponent;//[Offset: 0x300, Size: 0x8]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x308, Size: 0x1]
	GeomSelection[] SavedSelections;//[Offset: 0x310, Size: 0x10]

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 0x1]
	byte G;//[Offset: 0x1, Size: 0x1]
	byte R;//[Offset: 0x2, Size: 0x1]
	byte A;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: Model.Object

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x670, Size: 0x8]
	BodySetup* BrushBodySetup;//[Offset: 0x678, Size: 0x8]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float MinDrawDistance;//[Offset: 0x3b0, Size: 0x4]
	float LDMaxDrawDistance;//[Offset: 0x3b4, Size: 0x4]
	float CachedMaxDrawDistance;//[Offset: 0x3b8, Size: 0x4]
	byte DepthPriorityGroup;//[Offset: 0x3bc, Size: 0x1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x3bd, Size: 0x1]
	byte IndirectLightingCacheQuality;//[Offset: 0x3be, Size: 0x1]
	enum LightmapType;//[Offset: 0x3bf, Size: 0x1]
	bool bUseMaxLODAsImposter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c0, Size: 0x1]
	bool bBatchImpostersAsInstances;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c0, Size: 0x1]
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c0, Size: 0x1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c0, Size: 0x1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c1, Size: 0x1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c1, Size: 0x1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c1, Size: 0x1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c1, Size: 0x1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c1, Size: 0x1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c1, Size: 0x1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c1, Size: 0x1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c1, Size: 0x1]
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c2, Size: 0x1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c2, Size: 0x1]
	bool bRenderInDepthPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c2, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c2, Size: 0x1]
	bool bReceivesDecals2;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c2, Size: 0x1]
	bool bDitheredFading;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c2, Size: 0x1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c2, Size: 0x1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c2, Size: 0x1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c3, Size: 0x1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c3, Size: 0x1]
	byte OccluderType;//[Offset: 0x3c4, Size: 0x1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c5, Size: 0x1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c5, Size: 0x1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c5, Size: 0x1]
	bool bContributeToGI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c8, Size: 0x1]
	bool bIsLandScapeStaticMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c8, Size: 0x1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3cc, Size: 0x1]
	bool InteractiveNode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3cc, Size: 0x1]
	bool InteractiveWaterNode;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3cc, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3cc, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3cc, Size: 0x1]
	bool bShouldBlockRain;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3cc, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3cc, Size: 0x1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3cc, Size: 0x1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3cd, Size: 0x1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3cd, Size: 0x1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3cd, Size: 0x1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3cd, Size: 0x1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3cd, Size: 0x1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3cd, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3cd, Size: 0x1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3cd, Size: 0x1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3ce, Size: 0x1]
	bool bExcludeFromLightAttachmentGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3ce, Size: 0x1]
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3ce, Size: 0x1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3ce, Size: 0x1]
	bool bCacheShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3ce, Size: 0x1]
	bool bRenderInNearASM;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3ce, Size: 0x1]
	bool bRenderInFarASM;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3ce, Size: 0x1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3ce, Size: 0x1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3cf, Size: 0x1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3cf, Size: 0x1]
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3cf, Size: 0x1]
	bool bFillCollisionUnderneathForNavmesh;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3cf, Size: 0x1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3cf, Size: 0x1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3cf, Size: 0x1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3cf, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3cf, Size: 0x1]
	bool bRenderOnlyCustomDepth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d0, Size: 0x1]
	bool bIgnorePrimitiveManager;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d0, Size: 0x1]
	bool bIgnorePhysicsCulling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d0, Size: 0x1]
	bool bIgnoreCSMShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d0, Size: 0x1]
	byte DisableTickInDistance;//[Offset: 0x3d1, Size: 0x1]
	bool bEvaluateRayTracingWaterCaustics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d2, Size: 0x1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x3d3, Size: 0x1]
	<int,bool> VisibleInShadowPass;//[Offset: 0x3d8, Size: 0x50]
	byte CanCharacterStepUpOn;//[Offset: 0x428, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x429, Size: 0x1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x42a, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x42c, Size: 0x4]
	CustomPrimitiveData CustomPrimitiveData;//[Offset: 0x430, Size: 0x10]
	CustomPrimitiveData CustomPrimitiveDataInternal;//[Offset: 0x440, Size: 0x10]
	int TranslucencySortPriority;//[Offset: 0x450, Size: 0x4]
	int BaseSortPriority;//[Offset: 0x454, Size: 0x4]
	int VisibilityId;//[Offset: 0x458, Size: 0x4]
	int[] VisibilityIDs;//[Offset: 0x460, Size: 0x10]
	VisibilityRootMaps(UInt32Property)[] VisibilityRootMaps;//[Offset: 0x470, Size: 0x10]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x480, Size: 0x10]
	int8 VirtualTextureLodBias;//[Offset: 0x490, Size: 0x1]
	int8 VirtualTextureCullMips;//[Offset: 0x491, Size: 0x1]
	int8 VirtualTextureMinCoverage;//[Offset: 0x492, Size: 0x1]
	enum VirtualTextureRenderPassType;//[Offset: 0x493, Size: 0x1]
	float LpvBiasMultiplier;//[Offset: 0x498, Size: 0x4]
	float BoundsScale;//[Offset: 0x4a4, Size: 0x4]
	Actor*[] MoveIgnoreActors;//[Offset: 0x4b8, Size: 0x10]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x4c8, Size: 0x10]
	BodyInstance BodyInstance;//[Offset: 0x4e8, Size: 0x148]
	delegate OnComponentHit;//[Offset: 0x630, Size: 0x1]
	delegate OnComponentBeginOverlap;//[Offset: 0x631, Size: 0x1]
	delegate OnComponentEndOverlap;//[Offset: 0x632, Size: 0x1]
	delegate OnComponentWake;//[Offset: 0x633, Size: 0x1]
	delegate OnComponentSleep;//[Offset: 0x634, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x636, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x637, Size: 0x1]
	delegate OnClicked;//[Offset: 0x638, Size: 0x1]
	delegate OnReleased;//[Offset: 0x639, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x63a, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x63b, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x63c, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x63d, Size: 0x1]
	float PMAlwaysLoadDistance;//[Offset: 0x640, Size: 0x4]
	float PMInvisibleDistance;//[Offset: 0x644, Size: 0x4]
	byte PMStateController;//[Offset: 0x649, Size: 0x1]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x668, Size: 0x8]
	bool WasRecentlyRendered(float Tolerance);// 0x4c78450
	void WakeRigidBody(FName BoneName);// 0xbb6750
	void WakeAllRigidBodies();// 0x28193a0
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x4c783a0
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0x4c782d0
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x4c78250
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x4c781c0
	void SetSimulatePhysics(bool bSimulate);// 0x4c78130
	void SetShouldBlockRain(bool bInShouldBlockRain);// 0x4c780a0
	void SetRuntimeVirtualTextureType(enum NewType);// 0x4c78020
	void SetRenderInMainPass(bool bValue);// 0x4c77f90
	void SetRenderCustomDepth(bool bValue);// 0x4c77f00
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x4c77e70
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x4c77840
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x4c77d60
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x4c77c50
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x4c77c50
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x4c77b30
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x4c77a10
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x4c778d0
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x4c778d0
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x4c777b0
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x4c77720
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x3f79220
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x4c77650
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x4c77580
	void SetMassScale(FName BoneName, float InMassScale);// 0x4c774b0
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x4c773b0
	void SetLinearDamping(float InDamping);// 0x4c77330
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x4c77210
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);// 0x4c77180
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0x4c770f0
	void SetForceDisableCulling(const bool bForceVisible);// 0x4c77060
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);// 0x4c76fd0
	void SetEvaluateRayTracingWaterCaustics(bool bNewEvaluate);// 0x4c76f40
	void SetEnableGravity(bool bGravityEnabled);// 0x4c76eb0
	void SetCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0x4c76de0
	void SetCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0x4c76d10
	void SetCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0x4c76c50
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);// 0x4c76b80
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x4c76b00
	void SetCustomDepthStencilValue(int Value);// 0x4c76a80
	void SetCullDistance(float NewCullDistance);// 0x4c76a00
	void SetConstraintMode(byte ConstraintMode);// 0x4c76980
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x4c768c0
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x4c76840
	void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps);// 0x4c76770
	void SetCollisionObjectType(byte Channel);// 0x4c766f0
	void SetCollisionEnabled(byte NewType);// 0x4c76670
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x4c765a0
	void SetCastShadow(bool NewCastShadow);// 0x4c76510
	void SetCastInsetShadow(bool bInCastInsetShadow);// 0x4c76480
	void SetBoundsScale(float NewBoundsScale);// 0x4c76400
	void SetAngularDamping(float InDamping);// 0x4c76380
	void SetAllUseCCD(bool InUseCCD);// 0x4c762f0
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x4b7be00
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x4c76210
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x4c760f0
	void SetAllMassScale(float InMassScale);// 0x4c76070
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x4c75f70
	void PutRigidBodyToSleep(FName BoneName);// 0x4c75ef0
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x4c75b60
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x4c75820
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x4c754d0
	bool K2_IsQueryCollisionEnabled();// 0x4c75490
	bool K2_IsPhysicsCollisionEnabled();// 0x4c75450
	bool K2_IsCollisionEnabled();// 0x4c75410
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x4c750c0
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x4c75030
	bool IsOverlappingActor(const Actor* Other);// 0x4c74fa0
	bool IsGravityEnabled();// 0x2775220
	bool IsAnyRigidBodyAwake();// 0x4c74f70
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x4c74ea0
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x4c74dd0
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x4c74da0
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x4c74cb0
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x4c74c10
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x4c74b70
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x4c74aa0
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x4c74aa0
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0x4c749f0
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x4c74900
	int GetNumMaterials();// 0x4c748d0
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x4c747f0
	MaterialInterface* GetMaterial(int ElementIndex);// 0x4c74750
	float GetMassScale(FName BoneName);// 0x4c746b0
	float GetMass();// 0x4c74670
	float GetLinearDamping();// 0x4c74630
	Vector GetInertiaTensor(FName BoneName);// 0x4c74580
	bool GetGenerateOverlapEvents();// 0x4c74550
	byte GetCollisionResponseToChannel(byte Channel);// 0x4c744c0
	FName GetCollisionProfileName();// 0x4c74480
	byte GetCollisionObjectType();// 0x4c74450
	byte GetCollisionEnabled();// 0x109f3b0
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x4c74310
	Vector GetCenterOfMass(FName BoneName);// 0x4c74270
	float GetAngularDamping();// 0x4c74230
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0x4c74120
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x4c74050
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x4c73fb0
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x4c73f30
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x4c73eb0
	void ClearMoveIgnoreComponents();// 0x4c73e80
	void ClearMoveIgnoreActors();// 0x4c73e60
	bool CanCharacterStepUp(Pawn* Pawn);// 0x4c73dc0
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x4c73b60
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x4c73c80
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x4c73b60
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x4c739a0
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x4c737e0
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x4c736b0
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x4c73590
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0x4c73460
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0x4c73330
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0x4c73210
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x4c730f0
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x4c72fb0
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x4c72e90

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0x1e8, Size: 0x8]
	SceneComponent* AttachParent;//[Offset: 0x1f0, Size: 0x8]
	FName AttachSocketName;//[Offset: 0x1f8, Size: 0x8]
	SceneComponent*[] AttachChildren;//[Offset: 0x200, Size: 0x10]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0x210, Size: 0x10]
	Vector RelativeLocation;//[Offset: 0x24c, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x258, Size: 0xc]
	Vector RelativeScale3D;//[Offset: 0x264, Size: 0xc]
	Vector ComponentVelocity;//[Offset: 0x270, Size: 0xc]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27c, Size: 0x1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x27c, Size: 0x1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x27c, Size: 0x1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x27c, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x27c, Size: 0x1]
	bool bShouldBeAttached;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x27c, Size: 0x1]
	bool bShouldSnapLocationWhenAttached;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x27c, Size: 0x1]
	bool bShouldSnapRotationWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27d, Size: 0x1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x27d, Size: 0x1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x27d, Size: 0x1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x27d, Size: 0x1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x27d, Size: 0x1]
	byte Mobility;//[Offset: 0x27f, Size: 0x1]
	byte DetailMode;//[Offset: 0x280, Size: 0x1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x281, Size: 0x1]
	bool bCanOptimizeTransformForChild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x351, Size: 0x1]
	bool bCanOptimizeTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x352, Size: 0x1]
	void ToggleVisibility(bool bPropagateToChildren);// 0x4c859f0
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x4c85930
	void SetWorldScale3D(Vector NewScale);// 0x4c85750
	void SetVisibilityBySlot(bool bNewVisible, FName SlotName);// 0x4c85690
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x4c855c0
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0x4c85530
	void SetRelativeScale3D(Vector NewScale3D);// 0x4c854a0
	void SetMobility(byte NewMobility);// 0x4c85420
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x4c85350
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x4c851b0
	void ResetRelativeTransform();// 0x4c85190
	void OnRep_Visibility(bool OldValue);// 0x4c84fb0
	void OnRep_Transform();// 0x4c84f90
	void OnRep_AttachSocketName();// 0x4c84f70
	void OnRep_AttachParent();// 0x4c84f70
	void OnRep_AttachChildren();// 0x4c84f50
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4c84d50
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4c84bb0
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4c849c0
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4c84820
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4c84620
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4c84480
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4c84290
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4c840f0
	Transform K2_GetComponentToWorld();// 0x4c84090
	Vector K2_GetComponentScale();// 0x4c84050
	Rotator K2_GetComponentRotation();// 0x4c84010
	Vector K2_GetComponentLocation();// 0x4c83fd0
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x4c83e80
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x4c83cd0
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x4c83b80
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4c83980
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4c837e0
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4c83640
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4c834a0
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4c83300
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4c83100
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4c82f60
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4c82dc0
	bool IsVisible();// 0x4c82d90
	bool IsSimulatingPhysics(FName BoneName);// 0x4c82cf0
	bool IsAnySimulatingPhysics();// 0x4c82cc0
	Vector GetUpVector();// 0x4c82b30
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0x4c82a30
	Rotator GetSocketRotation(FName InSocketName);// 0x4c82980
	Quat GetSocketQuaternion(FName InSocketName);// 0x4c828e0
	Vector GetSocketLocation(FName InSocketName);// 0x4c82830
	bool GetShouldUpdatePhysicsVolume();// 0x4c82800
	Vector GetRightVector();// 0x4c827c0
	Transform GetRelativeTransform();// 0x4c82760
	PhysicsVolume* GetPhysicsVolume();// 0x4c82730
	void GetParentComponents(out SceneComponent*[] Parents);// 0x4c82680
	int GetNumChildrenComponents();// 0x4c82650
	Vector GetForwardVector();// 0x4c60e30
	Vector GetComponentVelocity();// 0x4c82610
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x4c82510
	SceneComponent* GetChildComponent(int ChildIndex);// 0x4c82480
	FName GetAttachSocketName();// 0x4c82460
	SceneComponent* GetAttachParent();// 0x4c82440
	FName[] GetAllSocketNames();// 0x4c823c0
	bool DoesSocketExist(FName InSocketName);// 0x4c82320
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x4c82250

--------------------------------
Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x28, Size: 0x58]
	FName BoneName;//[Offset: 0x80, Size: 0x8]
	byte PhysicsType;//[Offset: 0x88, Size: 0x1]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89, Size: 0x1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x89, Size: 0x1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x89, Size: 0x1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x89, Size: 0x1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x89, Size: 0x1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x89, Size: 0x1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x89, Size: 0x1]
	bool bSupportUVsAndFaceRemap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 0x1]
	byte CollisionReponse;//[Offset: 0x8b, Size: 0x1]
	byte CollisionTraceFlag;//[Offset: 0x8c, Size: 0x1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x90, Size: 0x8]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x98, Size: 0x10]
	bool bForceIgnoreDDC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	BodyInstance DefaultInstance;//[Offset: 0x128, Size: 0x148]
	Vector BuildScale3D;//[Offset: 0x278, Size: 0xc]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 0x10]
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 0x10]
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 0x10]
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 0x10]
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: KSphereElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	float Radius;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: KShapeElem
	float RestOffset;//[Offset: 0x8, Size: 0x4]
	FName Name;//[Offset: 0xc, Size: 0x8]
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: KBoxElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float X;//[Offset: 0x48, Size: 0x4]
	float Y;//[Offset: 0x4c, Size: 0x4]
	float Z;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 0x4]
	float Yaw;//[Offset: 0x4, Size: 0x4]
	float Roll;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: KSphylElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius;//[Offset: 0x48, Size: 0x4]
	float Length;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x30, Size: 0x10]
	int[] IndexData;//[Offset: 0x40, Size: 0x10]
	Box ElemBox;//[Offset: 0x50, Size: 0x1c]
	Transform Transform;//[Offset: 0x70, Size: 0x30]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 0xc]
	Vector Max;//[Offset: 0xc, Size: 0xc]
	byte IsValid;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius0;//[Offset: 0x48, Size: 0x4]
	float Radius1;//[Offset: 0x4c, Size: 0x4]
	float Length;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4]
	byte FrictionCombineMode;//[Offset: 0x2c, Size: 0x1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	float Restitution;//[Offset: 0x30, Size: 0x4]
	byte RestitutionCombineMode;//[Offset: 0x34, Size: 0x1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	float Density;//[Offset: 0x38, Size: 0x4]
	float RaiseMassToPower;//[Offset: 0x3c, Size: 0x4]
	float DestructibleDamageThresholdScale;//[Offset: 0x40, Size: 0x4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x48, Size: 0x8]
	byte SurfaceType;//[Offset: 0x50, Size: 0x1]
	float TireFrictionScale;//[Offset: 0x54, Size: 0x4]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0, Size: 0x8]
	float FrictionScale;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 0x1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BodyInstance
	byte ObjectType;//[Offset: 0x6, Size: 0x1]
	byte CollisionEnabled;//[Offset: 0x8, Size: 0x1]
	enum SleepFamily;//[Offset: 0xa, Size: 0x1]
	byte DOFMode;//[Offset: 0xb, Size: 0x1]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bIgnoreAnalyticCollisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	FName CollisionProfileName;//[Offset: 0x1c, Size: 0x8]
	byte PositionSolverIterationCount;//[Offset: 0x24, Size: 0x1]
	byte VelocitySolverIterationCount;//[Offset: 0x25, Size: 0x1]
	CollisionResponse CollisionResponses;//[Offset: 0x28, Size: 0x30]
	float MaxDepenetrationVelocity;//[Offset: 0x58, Size: 0x4]
	float MassInKgOverride;//[Offset: 0x5c, Size: 0x4]
	float LinearDamping;//[Offset: 0x68, Size: 0x4]
	float AngularDamping;//[Offset: 0x6c, Size: 0x4]
	Vector CustomDOFPlaneNormal;//[Offset: 0x70, Size: 0xc]
	Vector COMNudge;//[Offset: 0x7c, Size: 0xc]
	float MassScale;//[Offset: 0x88, Size: 0x4]
	Vector InertiaTensorScale;//[Offset: 0x8c, Size: 0xc]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa8, Size: 0x10]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xb8, Size: 0x8]
	float MaxAngularVelocity;//[Offset: 0xc0, Size: 0x4]
	float CustomSleepThresholdMultiplier;//[Offset: 0xc4, Size: 0x4]
	float StabilizationThresholdMultiplier;//[Offset: 0xc8, Size: 0x4]
	float PhysicsBlendWeight;//[Offset: 0xcc, Size: 0x4]
	PhysicalMaterial*[] PhysicalMaterials_Replica;//[Offset: 0x108, Size: 0x10]
	UInt32Property OwnerActorID;//[Size: 0x4]
	UInt32Property OwnerComponentID;//[Size: 0x4]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 0x20]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 0x1]
	byte WorldDynamic;//[Offset: 0x1, Size: 0x1]
	byte Pawn;//[Offset: 0x2, Size: 0x1]
	byte Visibility;//[Offset: 0x3, Size: 0x1]
	byte Camera;//[Offset: 0x4, Size: 0x1]
	byte PhysicsBody;//[Offset: 0x5, Size: 0x1]
	byte Vehicle;//[Offset: 0x6, Size: 0x1]
	byte Destructible;//[Offset: 0x7, Size: 0x1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 0x1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 0x1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 0x1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 0x1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 0x1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 0x1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 0x1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 0x1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 0x1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 0x1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 0x1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 0x1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 0x1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 0x1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 0x1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 0x1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 0x1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 0x1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 0x1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 0x1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 0x1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 0x1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 0x1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 0x1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 0x8]
	byte Response;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	int FaceIndex;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]
	float Distance;//[Offset: 0xc, Size: 0x4]
	Vector_NetQuantize Location;//[Offset: 0x10, Size: 0xc]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x1c, Size: 0xc]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x28, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x34, Size: 0xc]
	Vector_NetQuantize TraceStart;//[Offset: 0x40, Size: 0xc]
	Vector_NetQuantize TraceEnd;//[Offset: 0x4c, Size: 0xc]
	float PenetrationDepth;//[Offset: 0x58, Size: 0x4]
	int Item;//[Offset: 0x5c, Size: 0x4]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x60, Size: 0x8]
	Actor* Actor;//[Offset: 0x68, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x70, Size: 0x8]
	FName BoneName;//[Offset: 0x78, Size: 0x8]
	FName MyBoneName;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x38, Size: 0x8]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x50, Size: 0x10]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse);// 0x4c3ada0
	PhysicalMaterialMask* GetPhysicalMaterialMask();// 0x4164ed0
	PhysicalMaterial* GetPhysicalMaterialFromMap(int Index);// 0x4c3a4b0
	PhysicalMaterial* GetPhysicalMaterial();// 0x188cba0
	MaterialParameterInfo GetParameterInfo(byte Association, FName ParameterName, MaterialFunctionInterface* LayerFunction);// 0x4c3a3a0
	Material* GetBaseMaterial();// 0x4c3a370

--------------------------------
Class: PhysicalMaterialMask.Object
	int UVChannelIndex;//[Offset: 0x28, Size: 0x4]
	byte AddressX;//[Offset: 0x2c, Size: 0x1]
	byte AddressY;//[Offset: 0x2d, Size: 0x1]

--------------------------------
Class: MaterialFunctionInterface.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	enum MaterialFunctionUsage;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 0x8c]

--------------------------------
Class: SubsurfaceProfileStruct
	LinearColor SurfaceAlbedo;//[Offset: 0x0, Size: 0x10]
	LinearColor MeanFreePathColor;//[Offset: 0x10, Size: 0x10]
	float MeanFreePathDistance;//[Offset: 0x20, Size: 0x4]
	float WorldUnitScale;//[Offset: 0x24, Size: 0x4]
	bool bEnableBurley;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float ScatterRadius;//[Offset: 0x2c, Size: 0x4]
	LinearColor SubsurfaceColor;//[Offset: 0x30, Size: 0x10]
	LinearColor FalloffColor;//[Offset: 0x40, Size: 0x10]
	LinearColor BoundaryColorBleed;//[Offset: 0x50, Size: 0x10]
	float ExtinctionScale;//[Offset: 0x60, Size: 0x4]
	float NormalScale;//[Offset: 0x64, Size: 0x4]
	float ScatteringDistribution;//[Offset: 0x68, Size: 0x4]
	float IOR;//[Offset: 0x6c, Size: 0x4]
	float Roughness0;//[Offset: 0x70, Size: 0x4]
	float Roughness1;//[Offset: 0x74, Size: 0x4]
	float LobeMix;//[Offset: 0x78, Size: 0x4]
	LinearColor TransmissionTintColor;//[Offset: 0x7c, Size: 0x10]

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 0x4]
	float G;//[Offset: 0x4, Size: 0x4]
	float B;//[Offset: 0x8, Size: 0x4]
	float A;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte Association;//[Offset: 0x8, Size: 0x1]
	int Index;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8]
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x90, Size: 0x8]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x98, Size: 0x8]
	ScalarMaterialInput Metallic;//[Offset: 0xd8, Size: 0xc]
	ScalarMaterialInput Specular;//[Offset: 0xec, Size: 0xc]
	ScalarMaterialInput Anisotropy;//[Offset: 0x100, Size: 0xc]
	VectorMaterialInput Normal;//[Offset: 0x114, Size: 0xc]
	VectorMaterialInput Tangent;//[Offset: 0x128, Size: 0xc]
	ColorMaterialInput EmissiveColor;//[Offset: 0x13c, Size: 0xc]
	byte MaterialDomain;//[Offset: 0x150, Size: 0x1]
	byte BlendMode;//[Offset: 0x151, Size: 0x1]
	byte DecalBlendMode;//[Offset: 0x152, Size: 0x1]
	byte MaterialDecalResponse;//[Offset: 0x153, Size: 0x1]
	byte ShadingModel;//[Offset: 0x154, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x155, Size: 0x1]
	MaterialShadingModelField ShadingModels;//[Offset: 0x156, Size: 0x2]
	float OpacityMaskClipValue;//[Offset: 0x158, Size: 0x4]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x15c, Size: 0xc]
	ScalarMaterialInput Refraction;//[Offset: 0x170, Size: 0xc]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x184, Size: 0x10]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x19c, Size: 0xc]
	ShadingModelMaterialInput ShadingModelFromMaterialExpression;//[Offset: 0x1b0, Size: 0xc]
	ScalarMaterialInput HeightOffset;//[Offset: 0x1c4, Size: 0xc]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d8, Size: 0x1]
	bool bEnableLowResTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d8, Size: 0x1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d8, Size: 0x1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d8, Size: 0x1]
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d8, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d8, Size: 0x1]
	bool bCacheWPO;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d8, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d8, Size: 0x1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d9, Size: 0x1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d9, Size: 0x1]
	byte TranslucencyLightingMode;//[Offset: 0x1da, Size: 0x1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1db, Size: 0x1]
	int NumCustomizedUVs;//[Offset: 0x1dc, Size: 0x4]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x1e0, Size: 0x4]
	float TranslucentShadowDensityScale;//[Offset: 0x1e4, Size: 0x4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x1e8, Size: 0x4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x1ec, Size: 0x4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x1f0, Size: 0x4]
	float TranslucentBackscatteringExponent;//[Offset: 0x1f4, Size: 0x4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x1f8, Size: 0x10]
	float TranslucentShadowStartOffset;//[Offset: 0x208, Size: 0x4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20c, Size: 0x1]
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20c, Size: 0x1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20c, Size: 0x1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20c, Size: 0x1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20c, Size: 0x1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x20c, Size: 0x1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x20c, Size: 0x1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x20c, Size: 0x1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20d, Size: 0x1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20d, Size: 0x1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20d, Size: 0x1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20d, Size: 0x1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20d, Size: 0x1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x20d, Size: 0x1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x20d, Size: 0x1]
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x20d, Size: 0x1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20e, Size: 0x1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20e, Size: 0x1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20e, Size: 0x1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20e, Size: 0x1]
	bool bUsedWithGeometryCollections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20e, Size: 0x1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x20e, Size: 0x1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x20e, Size: 0x1]
	bool bUsedWithWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 0x1]
	bool bUsedWithRTWaterCaustics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x210, Size: 0x1]
	bool bUsedWithFur;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x210, Size: 0x1]
	bool bUsedWithHairStrands;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x210, Size: 0x1]
	bool bUsedWithLidarPointCloud;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x210, Size: 0x1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214, Size: 0x1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x214, Size: 0x1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x214, Size: 0x1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x214, Size: 0x1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x214, Size: 0x1]
	bool bForwardRenderUsePreintegratedGFForSimpleIBL;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21c, Size: 0x1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21c, Size: 0x1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x21c, Size: 0x1]
	byte D3D11TessellationMode;//[Offset: 0x21d, Size: 0x1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21e, Size: 0x1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21e, Size: 0x1]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x21e, Size: 0x1]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x21e, Size: 0x1]
	byte ShadingRate;//[Offset: 0x21f, Size: 0x1]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 0x1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x220, Size: 0x1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x220, Size: 0x1]
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x220, Size: 0x1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x220, Size: 0x1]
	bool bCastRayTracedShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x220, Size: 0x1]
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x220, Size: 0x1]
	bool bIsSky;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x220, Size: 0x1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x221, Size: 0x1]
	bool bOutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x221, Size: 0x1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x221, Size: 0x1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x221, Size: 0x1]
	byte BlendableLocation;//[Offset: 0x222, Size: 0x1]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x223, Size: 0x1]
	bool bEnableStencilTest;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x223, Size: 0x1]
	byte StencilCompare;//[Offset: 0x224, Size: 0x1]
	byte StencilRefValue;//[Offset: 0x225, Size: 0x1]
	byte RefractionMode;//[Offset: 0x226, Size: 0x1]
	int BlendablePriority;//[Offset: 0x228, Size: 0x4]
	bool bIsBlendable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22c, Size: 0x1]
	bool bUseDownsampledSceneColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22c, Size: 0x1]
	UInt32Property UsageFlagWarnings;//[Size: 0x4]
	float RefractionDepthBias;//[Offset: 0x234, Size: 0x4]
	Guid StateId;//[Offset: 0x238, Size: 0x10]
	float MaxDisplacement;//[Offset: 0x248, Size: 0x4]
	MaterialCachedExpressionData CachedExpressionData;//[Offset: 0x2d8, Size: 0x288]

--------------------------------
Class: ScalarMaterialInput.MaterialInput

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: VectorMaterialInput.MaterialInput

--------------------------------
Class: ColorMaterialInput.MaterialInput

--------------------------------
Class: MaterialShadingModelField
	uint16 ShadingModelField;//[Offset: 0x0, Size: 0x2]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: ShadingModelMaterialInput.MaterialInput

--------------------------------
Class: MaterialCachedExpressionData
	MaterialCachedParameters Parameters;//[Offset: 0x0, Size: 0x1f0]
	Object*[] ReferencedTextures;//[Offset: 0x1f0, Size: 0x10]
	Object*[] ReferencedDataBuffers;//[Offset: 0x200, Size: 0x10]
	MaterialFunctionInfo[] FunctionInfos;//[Offset: 0x210, Size: 0x10]
	MaterialParameterCollectionInfo[] ParameterCollectionInfos;//[Offset: 0x220, Size: 0x10]
	MaterialFunctionInterface*[] DefaultLayers;//[Offset: 0x230, Size: 0x10]
	MaterialFunctionInterface*[] DefaultLayerBlends;//[Offset: 0x240, Size: 0x10]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x250, Size: 0x10]
	FName[] DynamicParameterNames;//[Offset: 0x260, Size: 0x10]
	bool[] QualityLevelsUsed;//[Offset: 0x270, Size: 0x10]
	bool bHasRuntimeVirtualTextureOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1]
	bool bHasSceneColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x280, Size: 0x1]

--------------------------------
Class: MaterialCachedParameters
	MaterialCachedParameterEntry Entries;//[Offset: 0x0, Size: 0x40]
	float[] ScalarValues;//[Offset: 0x180, Size: 0x10]
	LinearColor[] VectorValues;//[Offset: 0x190, Size: 0x10]
	Texture*[] TextureValues;//[Offset: 0x1a0, Size: 0x10]
	DataBuffer*[] DataBufferValues;//[Offset: 0x1b0, Size: 0x10]
	Font*[] FontValues;//[Offset: 0x1c0, Size: 0x10]
	int[] FontPageValues;//[Offset: 0x1d0, Size: 0x10]
	RuntimeVirtualTexture*[] RuntimeVirtualTextureValues;//[Offset: 0x1e0, Size: 0x10]

--------------------------------
Class: MaterialCachedParameterEntry
	NameHashes(UInt64Property)[] NameHashes;//[Offset: 0x0, Size: 0x10]
	MaterialParameterInfo[] ParameterInfos;//[Offset: 0x10, Size: 0x10]
	Guid[] ExpressionGuids;//[Offset: 0x20, Size: 0x10]
	bool[] Overrides;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Texture.StreamableRenderAsset.Object
	Guid LightingGuid;//[Offset: 0x68, Size: 0x10]
	int LevelIndex;//[Offset: 0x78, Size: 0x4]
	int LODBias;//[Offset: 0x7c, Size: 0x4]
	byte CompressionSettings;//[Offset: 0x80, Size: 0x1]
	byte Filter;//[Offset: 0x81, Size: 0x1]
	enum MipLoadOptions;//[Offset: 0x82, Size: 0x1]
	byte LODGroup;//[Offset: 0x83, Size: 0x1]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x84, Size: 0x1]
	bool VirtualTextureStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x84, Size: 0x1]
	bool CompressionYCoCg;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x84, Size: 0x1]
	bool bNotOfflineProcessed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x84, Size: 0x1]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x84, Size: 0x1]
	AssetUserData*[] AssetUserData;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: StreamableRenderAsset.Object
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0x40, Size: 0x8]
	int NumCinematicMipLevels;//[Offset: 0x48, Size: 0x4]
	int StreamingIndex;//[Offset: 0x4c, Size: 0x4]
	int CachedCombinedLODBias;//[Offset: 0x50, Size: 0x4]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 0x1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54, Size: 0x1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x54, Size: 0x1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x54, Size: 0x1]

--------------------------------
Class: DataBuffer.Object
	enum Format;//[Offset: 0x28, Size: 0x1]
	bool bGPUWritable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	int Size;//[Offset: 0x2c, Size: 0x4]
	byte[] Data;//[Offset: 0x30, Size: 0x10]
	void UpdateVectors(out const UpdateVectorIndex[] Datas, bool SizeToFit);// 0x4b80700
	void UpdateIntegers(out const UpdateIntegerIndex[] Datas, bool SizeToFit);// 0x4b80600
	void UpdateFloats(out const UpdateFloatIndex[] Datas, bool SizeToFit);// 0x4b80500
	void SetZero();// 0x4b804c0
	int NumElements();// 0x4b80410
	void Allocate(int Count);// 0x4b7f5e0

--------------------------------
Class: UpdateVectorIndex
	int DestIndex;//[Offset: 0x0, Size: 0x4]
	Vector4 Value;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: UpdateIntegerIndex
	int DestIndex;//[Offset: 0x0, Size: 0x4]
	int Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: UpdateFloatIndex
	int DestIndex;//[Offset: 0x0, Size: 0x4]
	float Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 0x1]
	FontCharacter[] Characters;//[Offset: 0x38, Size: 0x10]
	Texture2D*[] Textures;//[Offset: 0x48, Size: 0x10]
	int IsRemapped;//[Offset: 0x58, Size: 0x4]
	float EmScale;//[Offset: 0x5c, Size: 0x4]
	float Ascent;//[Offset: 0x60, Size: 0x4]
	float Descent;//[Offset: 0x64, Size: 0x4]
	float Leading;//[Offset: 0x68, Size: 0x4]
	int Kerning;//[Offset: 0x6c, Size: 0x4]
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 0xb0]
	int NumCharacters;//[Offset: 0x120, Size: 0x4]
	int[] MaxCharHeight;//[Offset: 0x128, Size: 0x10]
	float ScalingFactor;//[Offset: 0x138, Size: 0x4]
	int LegacyFontSize;//[Offset: 0x13c, Size: 0x4]
	FName LegacyFontName;//[Offset: 0x140, Size: 0x8]
	CompositeFont CompositeFont;//[Offset: 0x148, Size: 0x38]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 0x4]
	int StartV;//[Offset: 0x4, Size: 0x4]
	int USize;//[Offset: 0x8, Size: 0x4]
	int VSize;//[Offset: 0xc, Size: 0x4]
	byte TextureIndex;//[Offset: 0x10, Size: 0x1]
	int VerticalOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: Texture2D.Texture.StreamableRenderAsset.Object
	int FirstResourceMemMip;//[Offset: 0x178, Size: 0x4]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17c, Size: 0x1]
	byte AddressX;//[Offset: 0x17d, Size: 0x1]
	byte AddressY;//[Offset: 0x17e, Size: 0x1]
	IntPoint ImportedSize;//[Offset: 0x180, Size: 0x8]
	int Blueprint_GetSizeY();// 0x4cade60
	int Blueprint_GetSizeX();// 0x4cade30

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 0x10]
	float Height;//[Offset: 0x10, Size: 0x4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	byte CharacterSet;//[Offset: 0x18, Size: 0x1]
	FString Chars;//[Offset: 0x20, Size: 0x10]
	FString UnicodeRange;//[Offset: 0x30, Size: 0x10]
	FString CharsFilePath;//[Offset: 0x40, Size: 0x10]
	FString CharsFileWildcard;//[Offset: 0x50, Size: 0x10]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	LinearColor ForegroundColor;//[Offset: 0x64, Size: 0x10]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74, Size: 0x1]
	int TexturePageWidth;//[Offset: 0x78, Size: 0x4]
	int TexturePageMaxHeight;//[Offset: 0x7c, Size: 0x4]
	int XPadding;//[Offset: 0x80, Size: 0x4]
	int YPadding;//[Offset: 0x84, Size: 0x4]
	int ExtendBoxTop;//[Offset: 0x88, Size: 0x4]
	int ExtendBoxBottom;//[Offset: 0x8c, Size: 0x4]
	int ExtendBoxRight;//[Offset: 0x90, Size: 0x4]
	int ExtendBoxLeft;//[Offset: 0x94, Size: 0x4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	int Kerning;//[Offset: 0x9c, Size: 0x4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	int DistanceFieldScaleFactor;//[Offset: 0xa4, Size: 0x4]
	float DistanceFieldScanRadiusScale;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 0x10]
	CompositeFallbackFont FallbackTypeface;//[Offset: 0x10, Size: 0x18]
	CompositeSubFont[] SubTypefaces;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 0x8]
	FontData Font;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 0x10]
	enum Hinting;//[Offset: 0x10, Size: 0x1]
	enum LoadingPolicy;//[Offset: 0x11, Size: 0x1]
	int SubFaceIndex;//[Offset: 0x14, Size: 0x4]
	Object* FontFaceAsset;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 0x10]
	float ScalingFactor;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 0x10]
	FString Cultures;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: RuntimeVirtualTexture.Object
	int TileCount;//[Offset: 0x28, Size: 0x4]
	int TileSize;//[Offset: 0x2c, Size: 0x4]
	int TileBorderSize;//[Offset: 0x30, Size: 0x4]
	enum MaterialType;//[Offset: 0x34, Size: 0x1]
	bool bCompressTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	bool bClearTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 0x1]
	bool bPrivateSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bAdaptive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bContinuousUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	int RemoveLowMips;//[Offset: 0x3c, Size: 0x4]
	byte LODGroup;//[Offset: 0x40, Size: 0x1]
	int Size;//[Offset: 0x44, Size: 0x4]
	RuntimeVirtualTextureStreamingProxy* StreamingTexture;//[Offset: 0x48, Size: 0x8]
	int GetTileSize();// 0x4c7dc90
	int GetTileCount();// 0x4c7dc30
	int GetTileBorderSize();// 0x4c7dbf0
	int GetSize();// 0x4c7db60
	int GetPageTableSize();// 0x4c7db30

--------------------------------
Class: RuntimeVirtualTextureStreamingProxy.Texture2D.Texture.StreamableRenderAsset.Object

--------------------------------
Class: MaterialFunctionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface* Function;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 0x10]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	Guid ID;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x28, Size: 0x10]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	StaticMesh* GrassMesh;//[Offset: 0x40, Size: 0x8]
	float GrassDensity;//[Offset: 0x48, Size: 0x4]
	float PlacementJitter;//[Offset: 0x4c, Size: 0x4]
	int StartCullDistance;//[Offset: 0x50, Size: 0x4]
	int EndCullDistance;//[Offset: 0x54, Size: 0x4]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 0x8]
	PerPlatformFloat GrassDensity;//[Offset: 0x8, Size: 0x4]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float PlacementJitter;//[Offset: 0x10, Size: 0x4]
	PerPlatformInt StartCullDistance;//[Offset: 0x14, Size: 0x4]
	PerPlatformInt EndCullDistance;//[Offset: 0x18, Size: 0x4]
	int MinLOD;//[Offset: 0x1c, Size: 0x4]
	enum Scaling;//[Offset: 0x20, Size: 0x1]
	FloatInterval ScaleX;//[Offset: 0x24, Size: 0x8]
	FloatInterval ScaleY;//[Offset: 0x2c, Size: 0x8]
	FloatInterval ScaleZ;//[Offset: 0x34, Size: 0x8]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x3f, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool bKeepInstanceBufferCPUCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]

--------------------------------
Class: StaticMesh.StreamableRenderAsset.Object
	int SplinePriority;//[Offset: 0x80, Size: 0x4]
	byte SplineType;//[Offset: 0x84, Size: 0x1]
	SoftObjectPath SoftStaticPhysicsAssetPath;//[Offset: 0x88, Size: 0x18]
	byte[] OccluderRawData;//[Offset: 0xa0, Size: 0x10]
	byte OccluderType;//[Offset: 0xb0, Size: 0x1]
	PerPlatformInt MinLOD;//[Offset: 0xc8, Size: 0x4]
	float LpvBiasMultiplier;//[Offset: 0xcc, Size: 0x4]
	StaticMaterial[] StaticMaterials;//[Offset: 0xd0, Size: 0x10]
	float LightmapUVDensity;//[Offset: 0xe0, Size: 0x4]
	int LightMapResolution;//[Offset: 0xe4, Size: 0x4]
	int LightMapCoordinateIndex;//[Offset: 0xe8, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0xec, Size: 0x4]
	bool bForceNoImposter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	bool bForceNoShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0xf8, Size: 0x8]
	StaticPhysicsAsset* PhysicsAssetForRuntime;//[Offset: 0x100, Size: 0x8]
	int LodForCollision;//[Offset: 0x108, Size: 0x4]
	int LODForCastShadow;//[Offset: 0x10c, Size: 0x4]
	bool bSupportGPUDriven;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	bool bSupportVertexCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 0x1]
	bool bSupportNormalAndTangentCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112, Size: 0x1]
	bool bSupportNorAndTanQuatCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x113, Size: 0x1]
	bool bVertexCompressionCustomSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 0x1]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x115, Size: 0x1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x115, Size: 0x1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x115, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x115, Size: 0x1]
	bool bSupportPhysicalMaterialMasks;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x115, Size: 0x1]
	bool bIsBuiltAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x115, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x115, Size: 0x1]
	bool bSupportGpuUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x116, Size: 0x1]
	bool bNoBuildInReplica;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x116, Size: 0x1]
	StaticMeshSocket*[] Sockets;//[Offset: 0x138, Size: 0x10]
	Vector PositiveBoundsExtension;//[Offset: 0x158, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0x164, Size: 0xc]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x170, Size: 0x1c]
	int ElementToIgnoreForTexFactor;//[Offset: 0x18c, Size: 0x4]
	AssetUserData*[] AssetUserData;//[Offset: 0x190, Size: 0x10]
	Object* EditableMesh;//[Offset: 0x1a0, Size: 0x8]
	NavCollisionBase* NavCollision;//[Offset: 0x1a8, Size: 0x8]
	void RemoveSocket(StaticMeshSocket* Socket);// 0x4ca6c20
	int GetNumSections(int InLOD);// 0x4ca6970
	int GetNumLODs();// 0x4ca6940
	void GetMinimumLODForPlatforms(out <FName,int> PlatformMinimumLODs);// 0x4ca67c0
	int GetMinimumLODForPlatform(out const FName PlatformName);// 0x4ca6740
	int GetMaterialIndex(FName MaterialSlotName);// 0x4ca66b0
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x4ca6620
	BoxSphereBounds GetBounds();// 0x4ca6470
	Box GetBoundingBox();// 0x4ca6420
	StaticMeshSocket* FindSocket(FName InSocketName);// 0x4ca6330
	static StaticMeshDescription* CreateStaticMeshDescription(Object* Outer);// 0x4ca62b0
	void BuildFromStaticMeshDescriptions(out const StaticMeshDescription*[] StaticMeshDescriptions, bool bBuildSimpleCollision);// 0x4ca61b0
	void AddSocket(StaticMeshSocket* Socket);// 0x4ca6130
	FName AddMaterial(MaterialInterface* Material);// 0x4ca60a0

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x48, Size: 0xc]
	FString Tag;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 0xc]
	Vector BoxExtent;//[Offset: 0xc, Size: 0xc]
	float SphereRadius;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: StaticMeshDescription.MeshDescriptionBase.Object
	void SetVertexInstanceUV(VertexInstanceID VertexInstanceID, Vector2D UV, int UVIndex);// 0x4253ac0
	void SetPolygonGroupMaterialSlotName(PolygonGroupID PolygonGroupID, out const FName SlotName);// 0x42539e0
	Vector2D GetVertexInstanceUV(VertexInstanceID VertexInstanceID, int UVIndex);// 0x4253910
	void CreateCube(Vector Center, Vector HalfExtents, PolygonGroupID PolygonGroup, out PolygonID PolygonID_PlusX, out PolygonID PolygonID_MinusX, out PolygonID PolygonID_PlusY, out PolygonID PolygonID_MinusY, out PolygonID PolygonID_PlusZ, out PolygonID PolygonID_MinusZ);// 0x42535e0

--------------------------------
Class: MeshDescriptionBase.Object
	void SetVertexPosition(VertexID VertexID, out const Vector Position);// 0x424ae00
	void SetPolygonVertexInstance(PolygonID PolygonID, int PerimeterIndex, VertexInstanceID VertexInstanceID);// 0x424acf0
	void SetPolygonPolygonGroup(PolygonID PolygonID, PolygonGroupID PolygonGroupID);// 0x424ac30
	void ReversePolygonFacing(PolygonID PolygonID);// 0x424abb0
	void ReserveNewVertices(int NumberOfNewVertices);// 0x424ab30
	void ReserveNewVertexInstances(int NumberOfNewVertexInstances);// 0x424a930
	void ReserveNewTriangles(int NumberOfNewTriangles);// 0x424aab0
	void ReserveNewPolygons(const int NumberOfNewPolygons);// 0x424aa30
	void ReserveNewPolygonGroups(int NumberOfNewPolygonGroups);// 0x424a9b0
	void ReserveNewEdges(int NumberOfNewEdges);// 0x424a930
	bool IsVertexValid(VertexID VertexID);// 0x424a8a0
	bool IsVertexOrphaned(VertexID VertexID);// 0x424a810
	bool IsVertexInstanceValid(VertexInstanceID VertexInstanceID);// 0x424a780
	bool IsTriangleValid(const TriangleID TriangleID);// 0x424a6f0
	bool IsTrianglePartOfNgon(TriangleID TriangleID);// 0x424a660
	bool IsPolygonValid(PolygonID PolygonID);// 0x424a5d0
	bool IsPolygonGroupValid(PolygonGroupID PolygonGroupID);// 0x424a540
	bool IsEmpty();// 0x424a510
	bool IsEdgeValid(EdgeID EdgeID);// 0x424a480
	bool IsEdgeInternalToPolygon(EdgeID EdgeID, PolygonID PolygonID);// 0x424a3b0
	bool IsEdgeInternal(EdgeID EdgeID);// 0x424a320
	void GetVertexVertexInstances(VertexID VertexID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x424a230
	Vector GetVertexPosition(VertexID VertexID);// 0x424a190
	EdgeID GetVertexPairEdge(VertexID VertexID0, VertexID VertexID1);// 0x424a0c0
	VertexID GetVertexInstanceVertex(VertexInstanceID VertexInstanceID);// 0x424a020
	EdgeID GetVertexInstancePairEdge(VertexInstanceID VertexInstanceID0, VertexInstanceID VertexInstanceID1);// 0x4249f50
	VertexInstanceID GetVertexInstanceForTriangleVertex(TriangleID TriangleID, VertexID VertexID);// 0x4249e80
	VertexInstanceID GetVertexInstanceForPolygonVertex(PolygonID PolygonID, VertexID VertexID);// 0x4249db0
	void GetVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID, out TriangleID[] OutConnectedTriangleIDs);// 0x4249cc0
	void GetVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID, out PolygonID[] OutConnectedPolygonIDs);// 0x4249bd0
	void GetVertexConnectedTriangles(VertexID VertexID, out TriangleID[] OutConnectedTriangleIDs);// 0x4249ae0
	void GetVertexConnectedPolygons(VertexID VertexID, out PolygonID[] OutConnectedPolygonIDs);// 0x42499f0
	void GetVertexConnectedEdges(VertexID VertexID, out EdgeID[] OutEdgeIDs);// 0x4249900
	void GetVertexAdjacentVertices(VertexID VertexID, out VertexID[] OutAdjacentVertexIDs);// 0x4249810
	void GetTriangleVertices(TriangleID TriangleID, out VertexID[] OutVertexIDs);// 0x4249720
	void GetTriangleVertexInstances(TriangleID TriangleID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x4249630
	VertexInstanceID GetTriangleVertexInstance(TriangleID TriangleID, int Index);// 0x4249560
	PolygonGroupID GetTrianglePolygonGroup(TriangleID TriangleID);// 0x42494c0
	PolygonID GetTrianglePolygon(TriangleID TriangleID);// 0x4249420
	void GetTriangleEdges(TriangleID TriangleID, out EdgeID[] OutEdgeIDs);// 0x4249330
	void GetTriangleAdjacentTriangles(TriangleID TriangleID, out TriangleID[] OutTriangleIDs);// 0x4249240
	void GetPolygonVertices(PolygonID PolygonID, out VertexID[] OutVertexIDs);// 0x4249150
	void GetPolygonVertexInstances(PolygonID PolygonID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x4249060
	void GetPolygonTriangles(PolygonID PolygonID, out TriangleID[] OutTriangleIDs);// 0x4248f70
	PolygonGroupID GetPolygonPolygonGroup(PolygonID PolygonID);// 0x4248ed0
	void GetPolygonPerimeterEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x4248de0
	void GetPolygonInternalEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x4248cf0
	void GetPolygonGroupPolygons(PolygonGroupID PolygonGroupID, out PolygonID[] OutPolygonIDs);// 0x4248c00
	void GetPolygonAdjacentPolygons(PolygonID PolygonID, out PolygonID[] OutPolygonIDs);// 0x4248b10
	int GetNumVertexVertexInstances(VertexID VertexID);// 0x4248a80
	int GetNumVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID);// 0x42489f0
	int GetNumVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID);// 0x4248960
	int GetNumVertexConnectedTriangles(VertexID VertexID);// 0x42488d0
	int GetNumVertexConnectedPolygons(VertexID VertexID);// 0x4248840
	int GetNumVertexConnectedEdges(VertexID VertexID);// 0x42487b0
	int GetNumPolygonVertices(PolygonID PolygonID);// 0x4248720
	int GetNumPolygonTriangles(PolygonID PolygonID);// 0x4248690
	int GetNumPolygonInternalEdges(PolygonID PolygonID);// 0x4248600
	int GetNumPolygonGroupPolygons(PolygonGroupID PolygonGroupID);// 0x4248570
	int GetNumEdgeConnectedTriangles(EdgeID EdgeID);// 0x42484e0
	int GetNumEdgeConnectedPolygons(EdgeID EdgeID);// 0x4248450
	void GetEdgeVertices(const EdgeID EdgeID, out VertexID[] OutVertexIDs);// 0x4248360
	VertexID GetEdgeVertex(EdgeID EdgeID, int VertexNumber);// 0x4248290
	void GetEdgeConnectedTriangles(EdgeID EdgeID, out TriangleID[] OutConnectedTriangleIDs);// 0x42481a0
	void GetEdgeConnectedPolygons(EdgeID EdgeID, out PolygonID[] OutConnectedPolygonIDs);// 0x42480b0
	void Empty();// 0x4248090
	void DeleteVertexInstance(VertexInstanceID VertexInstanceID, out VertexID[] OrphanedVertices);// 0x4247fa0
	void DeleteVertex(VertexID VertexID);// 0x4247f20
	void DeleteTriangle(TriangleID TriangleID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroupsPtr);// 0x4247d60
	void DeletePolygonGroup(PolygonGroupID PolygonGroupID);// 0x4247ce0
	void DeletePolygon(PolygonID PolygonID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroups);// 0x4247b20
	void DeleteEdge(EdgeID EdgeID, out VertexID[] OrphanedVertices);// 0x4247a30
	void CreateVertexWithID(VertexID VertexID);// 0x42479b0
	void CreateVertexInstanceWithID(VertexInstanceID VertexInstanceID, VertexID VertexID);// 0x42478f0
	VertexInstanceID CreateVertexInstance(VertexID VertexID);// 0x4247850
	VertexID CreateVertex();// 0x4247810
	void CreateTriangleWithID(TriangleID TriangleID, PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x4247670
	TriangleID CreateTriangle(PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x4247500
	void CreatePolygonWithID(PolygonID PolygonID, PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x4247360
	void CreatePolygonGroupWithID(PolygonGroupID PolygonGroupID);// 0x42472e0
	PolygonGroupID CreatePolygonGroup();// 0x42472a0
	PolygonID CreatePolygon(PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x4247130
	void CreateEdgeWithID(EdgeID EdgeID, VertexID VertexID0, VertexID VertexID1);// 0x4247020
	EdgeID CreateEdge(VertexID VertexID0, VertexID VertexID1);// 0x4246f50
	void ComputePolygonTriangulation(PolygonID PolygonID);// 0x4246ed0

--------------------------------
Class: VertexID.ElementID

--------------------------------
Class: ElementID
	int IDValue;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: PolygonID.ElementID

--------------------------------
Class: VertexInstanceID.ElementID

--------------------------------
Class: PolygonGroupID.ElementID

--------------------------------
Class: TriangleID.ElementID

--------------------------------
Class: EdgeID.ElementID

--------------------------------
Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 0x14]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float LocalUVDensities;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: StaticPhysicsAsset.Object
	BodySetup* BodySetup;//[Offset: 0x30, Size: 0x8]
	PhysicalMaterial*[] PhysicalMaterials;//[Offset: 0x38, Size: 0x10]
	SoftObjectPath SoftStaticMeshPath;//[Offset: 0x48, Size: 0x18]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	float EmissiveBoost;//[Offset: 0x0, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x4, Size: 0x4]
	float ExportResolutionScale;//[Offset: 0x8, Size: 0x4]
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 0x4]
	int UVChannelIndex;//[Offset: 0x4, Size: 0x4]
	FName TextureName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, LinearColor Value);// 0x4c3b380
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x4c3b2b0
	void SetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, Texture* Value);// 0x4c3b1c0
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x4c3b100
	void SetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, float Value);// 0x4c3b010
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x4c3af40
	void SetDataBufferParameterValue(FName ParameterName, DataBuffer* Value);// 0x4c3ace0
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x4c3abd0
	LinearColor K2_GetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x4c3ab20
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x4c3aa80
	Texture* K2_GetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x4c3a930
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x4c3a8a0
	float K2_GetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x4c3a760
	float K2_GetScalarParameterValue(FName ParameterName);// 0x4c3a6c0
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0x4c3a550
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x4c3a2f0
	void CopyInterpParameters(MaterialInstance* Source);// 0x4c3a270

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x90, Size: 0x8]
	MaterialInterface* Parent;//[Offset: 0xd0, Size: 0x8]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 0x1]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xe0, Size: 0x10]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0xf0, Size: 0x10]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x100, Size: 0x10]
	DataBufferParameterValue[] DataBufferParameterValues;//[Offset: 0x110, Size: 0x10]
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0x120, Size: 0x10]
	FontParameterValue[] FontParameterValues;//[Offset: 0x130, Size: 0x10]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x140, Size: 0x8]
	StaticParameterSet StaticParameters;//[Offset: 0x158, Size: 0x40]
	MaterialCachedParameters CachedLayerParameters;//[Offset: 0x198, Size: 0x1f0]
	Object*[] CachedReferencedTextures;//[Offset: 0x388, Size: 0x10]
	Object*[] CachedReferencedDataBuffers;//[Offset: 0x398, Size: 0x10]

--------------------------------
Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	float ParameterValue;//[Offset: 0x10, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	LinearColor ParameterValue;//[Offset: 0x10, Size: 0x10]
	Guid ExpressionGUID;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Texture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: DataBufferParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	DataBuffer* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: RuntimeVirtualTextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	RuntimeVirtualTexture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Font* FontValue;//[Offset: 0x10, Size: 0x8]
	int FontPage;//[Offset: 0x18, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x1c, Size: 0x10]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	byte BlendMode;//[Offset: 0x2, Size: 0x1]
	byte ShadingModel;//[Offset: 0x3, Size: 0x1]
	float OpacityMaskClipValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 0x10]
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 0x10]
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x20, Size: 0x10]
	StaticMaterialLayersParameter[] MaterialLayersParameters;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: StaticSwitchParameter.StaticParameterBase
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]

--------------------------------
Class: StaticParameterBase
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: StaticComponentMaskParameter.StaticParameterBase
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1]

--------------------------------
Class: StaticTerrainLayerWeightParameter.StaticParameterBase
	int WeightmapIndex;//[Offset: 0x24, Size: 0x4]
	bool bWeightBasedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: StaticMaterialLayersParameter.StaticParameterBase
	MaterialLayersFunctions Value;//[Offset: 0x28, Size: 0x40]

--------------------------------
Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 0x10]
	bool[] LayerStates;//[Offset: 0x20, Size: 0x10]
	FString KeyString;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f0, Size: 0x1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f0, Size: 0x1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f0, Size: 0x1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2f0, Size: 0x1]
	float BaseEyeHeight;//[Offset: 0x2f4, Size: 0x4]
	byte AutoPossessPlayer;//[Offset: 0x2f8, Size: 0x1]
	enum AutoPossessAI;//[Offset: 0x2f9, Size: 0x1]
	byte RemoteViewPitch;//[Offset: 0x2fa, Size: 0x1]
	class Controller* AIControllerClass;//[Offset: 0x300, Size: 0x8]
	PlayerState* PlayerState;//[Offset: 0x308, Size: 0x8]
	Controller* LastHitBy;//[Offset: 0x318, Size: 0x8]
	Controller* Controller;//[Offset: 0x320, Size: 0x8]
	Vector ControlInputVector;//[Offset: 0x32c, Size: 0xc]
	Vector LastControlInputVector;//[Offset: 0x338, Size: 0xc]
	void SpawnDefaultController();// 0x2906630
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x4c5ab90
	void ReceiveUnpossessed(Controller* OldController);// 0x305c9c0
	void ReceivePossessed(Controller* NewController);// 0x305c9c0
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x4c5aa20
	void OnRep_PlayerState();// 0x77ee80
	void OnRep_Controller();// 0xca5ab0
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x4c5a7e0
	Vector K2_GetMovementInputVector();// 0x4c5a6b0
	bool IsPlayerControlled();// 0x29c4210
	bool IsPawnControlled();// 0x4c5a7b0
	bool IsMoveInputIgnored();// 0x4c5a780
	bool IsLocallyControlled();// 0x4c5a750
	bool IsControlled();// 0x4c5a720
	bool IsBotControlled();// 0x4c5a6f0
	Vector GetPendingMovementInputVector();// 0x4c5a6b0
	Vector GetNavAgentLocation();// 0x4c5a5f0
	PawnMovementComponent* GetMovementComponent();// 0x27c6e10
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x4c5a570
	Vector GetLastMovementInputVector();// 0x4c5a530
	Rotator GetControlRotation();// 0x4c5a4b0
	Controller* GetController();// 0x2c985e0
	Rotator GetBaseAimRotation();// 0x4c5a3b0
	void DetachFromControllerPendingDestroy();// 0x4c5a390
	Vector ConsumeMovementInputVector();// 0x4c5a350
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x4c59e90
	void AddControllerYawInput(float Val);// 0x4c59d30
	void AddControllerRollInput(float Val);// 0x4c59cb0
	void AddControllerPitchInput(float Val);// 0x4c59c30

--------------------------------
Class: Controller.Actor.Object
	PlayerState* PlayerState;//[Offset: 0x2f0, Size: 0x8]
	delegate OnInstigatedAnyDamage;//[Offset: 0x300, Size: 0x10]
	FName StateName;//[Offset: 0x310, Size: 0x8]
	Pawn* Pawn;//[Offset: 0x318, Size: 0x8]
	Character* Character;//[Offset: 0x328, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x330, Size: 0x8]
	Rotator ControlRotation;//[Offset: 0x350, Size: 0xc]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x35c, Size: 0x1]
	void UnPossess();// 0x4b7c6c0
	void StopMovement();// 0x29065f0
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x4b7c5d0
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x4b7c540
	void SetIgnoreLookInput(bool bNewLookInput);// 0x4b7c4b0
	void SetControlRotation(out const Rotator NewRotation);// 0x4b7c420
	void ResetIgnoreMoveInput();// 0x2906610
	void ResetIgnoreLookInput();// 0x2707920
	void ResetIgnoreInputFlags();// 0x4b7c400
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0x305c9c0
	void ReceivePossess(Pawn* PossessedPawn);// 0x305c9c0
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x305c9c0
	void Possess(Pawn* InPawn);// 0x4b7c380
	void OnRep_PlayerState();// 0x2707250
	void OnRep_Pawn();// 0x77ee80
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x4b7c260
	Pawn* K2_GetPawn();// 0x4b7c230
	bool IsPlayerController();// 0x4b7c200
	bool IsMoveInputIgnored();// 0x4b7c1d0
	bool IsLookInputIgnored();// 0x4b7c1a0
	bool IsLocalPlayerController();// 0x4b7c150
	bool IsLocalController();// 0x4b7c120
	Actor* GetViewTarget();// 0x29c7eb0
	Rotator GetDesiredRotation();// 0x4b7bf20
	Rotator GetControlRotation();// 0x4b7bee0
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x4b7be00
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x4b7bd20
	PlayerController* CastToPlayerController();// 0x4b7bcf0

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x2e8, Size: 0x4]
	int PlayerId;//[Offset: 0x2ec, Size: 0x4]
	byte Ping;//[Offset: 0x2f0, Size: 0x1]
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f2, Size: 0x1]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f2, Size: 0x1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f2, Size: 0x1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2f2, Size: 0x1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2f2, Size: 0x1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2f2, Size: 0x1]
	int StartTime;//[Offset: 0x2f4, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x2f8, Size: 0x8]
	FString SavedNetworkAddress;//[Offset: 0x308, Size: 0x10]
	UniqueNetIdRepl UniqueId;//[Offset: 0x318, Size: 0x28]
	Pawn* PawnPrivate;//[Offset: 0x348, Size: 0x8]
	FString PlayerNamePrivate;//[Offset: 0x3c8, Size: 0x10]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x305c9c0
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x305c9c0
	void OnRep_UniqueId();// 0x77ed40
	void OnRep_Score();// 0x26314b0
	void OnRep_PlayerName();// 0xbb6730
	void OnRep_PlayerId();// 0xcbca30
	void OnRep_bIsInactive();// 0x284f290
	FString GetPlayerName();// 0x4c6fcf0

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x348, Size: 0x8]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x350, Size: 0x8]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x358, Size: 0x8]
	BasedMovementInfo BasedMovement;//[Offset: 0x360, Size: 0x30]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x390, Size: 0x30]
	float AnimRootMotionTranslationScale;//[Offset: 0x3c0, Size: 0x4]
	Vector BaseTranslationOffset;//[Offset: 0x3c4, Size: 0xc]
	Quat BaseRotationOffset;//[Offset: 0x3d0, Size: 0x10]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x3e0, Size: 0x4]
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x3e4, Size: 0x4]
	byte ReplicatedMovementMode;//[Offset: 0x3e8, Size: 0x1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e9, Size: 0x1]
	float CrouchedEyeHeight;//[Offset: 0x3ec, Size: 0x4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f0, Size: 0x1]
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f0, Size: 0x1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3f0, Size: 0x1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3f0, Size: 0x1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3f0, Size: 0x1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3f0, Size: 0x1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3f0, Size: 0x1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3f0, Size: 0x1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f1, Size: 0x1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f1, Size: 0x1]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3f1, Size: 0x1]
	float JumpKeyHoldTime;//[Offset: 0x3f4, Size: 0x4]
	float JumpForceTimeRemaining;//[Offset: 0x3f8, Size: 0x4]
	float ProxyJumpForceStartedTime;//[Offset: 0x3fc, Size: 0x4]
	float JumpMaxHoldTime;//[Offset: 0x400, Size: 0x4]
	int JumpMaxCount;//[Offset: 0x404, Size: 0x4]
	int JumpCurrentCount;//[Offset: 0x408, Size: 0x4]
	delegate OnReachedJumpApex;//[Offset: 0x420, Size: 0x10]
	delegate MovementModeChangedDelegate;//[Offset: 0x440, Size: 0x10]
	delegate OnCharacterMovementUpdated;//[Offset: 0x450, Size: 0x10]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x460, Size: 0x38]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x4a0, Size: 0x40]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x4e0, Size: 0x10]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x4f0, Size: 0x98]
	void UnCrouch(bool bClientSimulation);// 0x4b73c90
	void StopJumping();// 0xca5a90
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x4b73c00
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags, Vector_NetQuantize10 ClientVelocity);// 0x4b73700
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, View(UInt32Property) View, byte ClientMovementMode, Vector_NetQuantize10 ClientVelocity);// 0x4b73410
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, View0(UInt32Property) View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, View(UInt32Property) View, byte ClientMovementMode, Vector_NetQuantize10 ClientVelocity);// 0x4b72fd0
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, View0(UInt32Property) View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, View(UInt32Property) View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode, Vector_NetQuantize10 ClientVelocity);// 0x4b72b10
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, View0(UInt32Property) View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, View(UInt32Property) View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode, Vector_NetQuantize10 ClientVelocity);// 0x4b72650
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, View(UInt32Property) View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode, Vector_NetQuantize10 ClientVelocity);// 0x4b722d0
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x4b72230
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x4b720a0
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x4b71ee0
	void OnRep_RootMotion();// 0x4b71ec0
	void OnRep_ReplicatedBasedMovement();// 0x4b71ea0
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0x4b71e80
	void OnRep_IsCrouched();// 0x2814290
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x305c9c0
	void OnLanded(out const HitResult Hit);// 0x305c9c0
	void OnJumped();// 0x4b71e60
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x4b71d40
	void K2_UpdateCustomMovement(float DeltaTime);// 0x305c9c0
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x305c9c0
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x305c9c0
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x305c9c0
	void Jump();// 0x2819380
	bool IsPlayingRootMotion();// 0x4b70670
	bool IsPlayingNetworkedRootMotionMontage();// 0x4b70640
	bool IsJumpProvidingForce();// 0x4b70610
	bool HasAnyRootMotion();// 0x4b705e0
	AnimMontage* GetCurrentMontage();// 0x4b6ff50
	Vector GetBaseTranslationOffset();// 0x4b6ff20
	Rotator GetBaseRotationOffsetRotator();// 0x4b6fed0
	float GetAnimRootMotionTranslationScale();// 0x4b6fe00
	void Crouch(bool bClientSimulation);// 0x4b6fd70
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x4b6fa20
	void ClientCheatWalk();// 0x4b6fa00
	void ClientCheatGhost();// 0x4b6f9e0
	void ClientCheatFly();// 0x4b6f9c0
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x4b6f520
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x4b6f230
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x4b6efc0
	void ClientAckGoodMove(float Timestamp);// 0x4b6ef40
	bool CanJumpInternal();// 0x4b6ef10
	bool CanJump();// 0x4b6eee0
	bool CanCrouch();// 0x4b6eeb0
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x4b6edd0

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* AnimationTexture;//[Offset: 0x9b0, Size: 0x8]
	Matrix[] CachedAnimationBoneMatrixData;//[Offset: 0x9b8, Size: 0x10]
	bool bIgnoreDirtyOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c8, Size: 0x1]
	byte bIgnoreDirtyOpt_onlyTransform;//[Offset: 0x9c9, Size: 0x1]
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x9d0, Size: 0x8]
	class AnimInstance* AnimClass;//[Offset: 0x9d8, Size: 0x8]
	AnimInstance* AnimScriptInstance;//[Offset: 0x9e0, Size: 0x8]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x9e8, Size: 0x8]
	SingleAnimationPlayData AnimationData;//[Offset: 0x9f0, Size: 0x18]
	Vector RootBoneTranslation;//[Offset: 0xa18, Size: 0xc]
	Vector LineCheckBoundsScale;//[Offset: 0xa24, Size: 0xc]
	AnimInstance*[] LinkedInstances;//[Offset: 0xa50, Size: 0x10]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0xa60, Size: 0x10]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0xa70, Size: 0x10]
	float GlobalAnimRateScale;//[Offset: 0xaa0, Size: 0x4]
	byte KinematicBonesUpdateType;//[Offset: 0xaa4, Size: 0x1]
	byte PhysicsTransformUpdateMode;//[Offset: 0xaa5, Size: 0x1]
	byte AnimationMode;//[Offset: 0xaa7, Size: 0x1]
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa9, Size: 0x1]
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xaa9, Size: 0x1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xaa9, Size: 0x1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xaa9, Size: 0x1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xaa9, Size: 0x1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaaa, Size: 0x1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaaa, Size: 0x1]
	bool bUpdateCurvesFromMasterComponent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xaaa, Size: 0x1]
	bool bDisableRigidBodyAnimNode;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xaaa, Size: 0x1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xaaa, Size: 0x1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xaaa, Size: 0x1]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaab, Size: 0x1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xaab, Size: 0x1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xaab, Size: 0x1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xaab, Size: 0x1]
	bool bDeferKinematicBoneUpdate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xaab, Size: 0x1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xaab, Size: 0x1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaac, Size: 0x1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaac, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xaac, Size: 0x1]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xaac, Size: 0x1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xaac, Size: 0x1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xaac, Size: 0x1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xaac, Size: 0x1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xaac, Size: 0x1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaad, Size: 0x1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaad, Size: 0x1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xaad, Size: 0x1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xaad, Size: 0x1]
	bool bUseBendingElements;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xaad, Size: 0x1]
	bool bUseTetrahedralConstraints;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xaad, Size: 0x1]
	bool bUseThinShellVolumeConstraints;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xaad, Size: 0x1]
	bool bUseSelfCollisions;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xaad, Size: 0x1]
	bool bUseContinuousCollisionDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaae, Size: 0x1]
	bool bPropagateCurvesToSlaves;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaae, Size: 0x1]
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xaae, Size: 0x1]
	bool bSkipBoundsUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xaae, Size: 0x1]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xaae, Size: 0x1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0xab0, Size: 0x2]
	enum MassMode;//[Offset: 0xab2, Size: 0x1]
	float UniformMass;//[Offset: 0xab4, Size: 0x4]
	float TotalMass;//[Offset: 0xab8, Size: 0x4]
	float Density;//[Offset: 0xabc, Size: 0x4]
	float MinPerParticleMass;//[Offset: 0xac0, Size: 0x4]
	float ClothBlendWeight;//[Offset: 0xac4, Size: 0x4]
	float EdgeStiffness;//[Offset: 0xac8, Size: 0x4]
	float BendingStiffness;//[Offset: 0xacc, Size: 0x4]
	float AreaStiffness;//[Offset: 0xad0, Size: 0x4]
	float VolumeStiffness;//[Offset: 0xad4, Size: 0x4]
	float StrainLimitingStiffness;//[Offset: 0xad8, Size: 0x4]
	float ShapeTargetStiffness;//[Offset: 0xadc, Size: 0x4]
	FName[] DisallowedAnimCurves;//[Offset: 0xae0, Size: 0x10]
	BodySetup* BodySetup;//[Offset: 0xaf0, Size: 0x8]
	delegate OnConstraintBroken;//[Offset: 0xb00, Size: 0x10]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0xb10, Size: 0x8]
	float TeleportDistanceThreshold;//[Offset: 0xbf8, Size: 0x4]
	float TeleportRotationThreshold;//[Offset: 0xbfc, Size: 0x4]
	UInt32Property LastPoseTickFrame;//[Size: 0x4]
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0xc60, Size: 0x8]
	delegate OnAnimInitialized;//[Offset: 0xd30, Size: 0x10]
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x4c8e540
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x4c8e4b0
	void ToggleDisablePostProcessBlueprint();// 0x4c8e490
	void TermBodiesBelow(FName ParentBoneName);// 0x4c8e410
	void SuspendClothingSimulation();// 0x4c8e3f0
	void Stop();// 0x4c8e3d0
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x4c8e300
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x1075060
	void SetTeleportRotationThreshold(float Threshold);// 0x4c8e280
	void SetTeleportDistanceThreshold(float Threshold);// 0x4c8e200
	void SetPosition(float InPos, bool bFireNotifies);// 0x4c8e130
	void SetPlayRate(float Rate);// 0x4c8e0b0
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x4c8e030
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x4c8df20
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x4c8de10
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x4c8dd80
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x4c8dc70
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x4c8dbb0
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0x4c8db20
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x4c8da90
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x4c8d9c0
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x4c8d8b0
	void SetClothMaxDistanceScale(float Scale);// 0x4c8d830
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x4c8d760
	void SetAnimClass(class Object NewClass);// 0x4c8d5d0
	void SetAnimationMode(byte InAnimationMode);// 0x4c8d6e0
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x4c8d660
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x4c8d480
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);// 0x4c8d2b0
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x4c8d380
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x4c8d220
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x4c8d100
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x4c8cfe0
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x4c8ce80
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x4c8cdf0
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x4c8cd20
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x4c8cc00
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x4c8ca90
	void ResumeClothingSimulation();// 0x4c8ca70
	void ResetClothTeleportMode();// 0x4c8ca50
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0x4c8c9d0
	void ResetAllowedAnimCurveEvaluation();// 0x4c8c9b0
	void ResetAllBodiesSimulatePhysics();// 0x4c8c990
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x4c8c8c0
	void Play(bool bLooping);// 0x4c8c830
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x4c8c690
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x4c8c5d0
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x4c8c550
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x4c8c350
	bool IsPlaying();// 0x4c8c320
	bool IsClothingSimulationSuspended();// 0x4c8c2f0
	bool IsBodyGravityEnabled(FName BoneName);// 0x4c8c260
	bool HasValidAnimationInstance();// 0x4c8c230
	float GetTeleportRotationThreshold();// 0x4c8c200
	float GetTeleportDistanceThreshold();// 0x4c8c200
	Vector GetSkeletalCenterOfMass();// 0x4c8c1c0
	AnimInstance* GetPostProcessInstance();// 0x4c8c190
	float GetPosition();// 0x4c8c160
	float GetPlayRate();// 0x4c8c130
	float GetMorphTarget(FName MorphTargetName);// 0x4c8c090
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x4c8c000
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x4c8bf70
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x4c8be80
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x4c8bdf0
	bool GetDisablePostProcessBlueprint();// 0x4c8bdc0
	bool GetDisableAnimCurves();// 0x4c8bd90
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x4c8bc10
	float GetClothMaxDistanceScale();// 0x4c8bbb0
	ClothingSimulationInteractor* GetClothingSimulationInteractor();// 0x4c8bbe0
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x4c8bae0
	Texture2D* GetBoneAnimationTexture();// 0x4c8bac0
	AnimInstance* GetAnimInstance();// 0x4c8ba60
	class Object GetAnimClass();// 0x4c8ba30
	byte GetAnimationMode();// 0x4c8ba90
	bool GetAllowRigidBodyAnimNode();// 0x4c8b9d0
	bool GetAllowedAnimCurveEvaluate();// 0x4c8ba00
	void GenerateAnimatationMatrixTexture();// 0x4c8b9b0
	void ForceClothNextUpdateTeleportAndReset();// 0x4c8b990
	void ForceClothNextUpdateTeleport();// 0x4c8b970
	FName FindConstraintBoneName(int ConstraintIndex);// 0x4c8b8e0
	void ClearMorphTargets();// 0x4c8b8c0
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x4c8b790
	void BindClothToMasterPoseComponent();// 0x4c8b770
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x4c8b6a0
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x4c8b530
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x4c8b3c0
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x4c8b2a0

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x750, Size: 0x8]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x758, Size: 0x8]
	enum[] SkinCacheUsage;//[Offset: 0x760, Size: 0x10]
	Texture* MorphTexture_Lod0;//[Offset: 0x770, Size: 0x8]
	Texture* MorphTexture_Lod1;//[Offset: 0x778, Size: 0x8]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x888, Size: 0x8]
	int ForcedLodModel;//[Offset: 0x890, Size: 0x4]
	int MinLodModel;//[Offset: 0x894, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x8bc, Size: 0x4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x8c8, Size: 0x10]
	enum VisibilityBasedAnimTickOption;//[Offset: 0x90c, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x910, Size: 0x1]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x910, Size: 0x1]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x910, Size: 0x1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x910, Size: 0x1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x910, Size: 0x1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x910, Size: 0x1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x910, Size: 0x1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x910, Size: 0x1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x911, Size: 0x1]
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x911, Size: 0x1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x911, Size: 0x1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x911, Size: 0x1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x911, Size: 0x1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x911, Size: 0x1]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x911, Size: 0x1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x911, Size: 0x1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x912, Size: 0x1]
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x912, Size: 0x1]
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x912, Size: 0x1]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x912, Size: 0x1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x912, Size: 0x1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x914, Size: 0x4]
	BoxSphereBounds CachedWorldSpaceBounds;//[Offset: 0x928, Size: 0x1c]
	Matrix CachedWorldToLocalTransform;//[Offset: 0x950, Size: 0x40]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x4c93840
	void UnHideBoneByName(FName BoneName);// 0x4c937c0
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x4c93600
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x4c93440
	void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex);// 0x4c93300
	void ShowAllMaterialSections(int LODIndex);// 0x4c93280
	void SetVisibilityBasedAnimTickOption(enum InVisibilityBasedAnimTickOption);// 0x4c93200
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x4c93120
	bool SetSkinWeightProfile(FName InProfileName);// 0x4c93090
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x4c92fb0
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0x4c92ee0
	void SetRenderStatic(bool bNewValue);// 0x4c92e50
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x4c92d80
	void SetMinLOD(int InNewMinLOD);// 0x4c92d00
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0x4c92c30
	void SetForcedLOD(int InNewForcedLOD);// 0x4c92bb0
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x4c92b20
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x4c92a90
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x4c92a10
	bool IsUsingSkinWeightProfile();// 0x4c929e0
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0x4c92920
	bool IsBoneHiddenByName(FName BoneName);// 0x4c92890
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x4c926b0
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, out float OutTwistAngle, out float OutSwingAngle);// 0x4c92590
	FName GetSocketBoneName(FName InSocketName);// 0x4c92460
	Vector GetRefPosePosition(int BoneIndex);// 0x4c923c0
	FName GetParentBone(FName BoneName);// 0x4c92330
	int GetNumLODs();// 0x4c92300
	int GetNumBones();// 0x4c922d0
	int GetForcedLOD();// 0x4c922a0
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0x4c921a0
	FName GetCurrentSkinWeightProfileName();// 0x4c92180
	FName GetBoneName(int BoneIndex);// 0x4c920f0
	int GetBoneIndex(FName BoneName);// 0x4c92050
	void ForceRefreshAnimationAndSkincache();// 0x4c92030
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x4c91ea0
	void ClearVertexColorOverride(int LODIndex);// 0x4c91e20
	void ClearSkinWeightProfile();// 0x4c91e00
	void ClearSkinWeightOverride(int LODIndex);// 0x4c91d80
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x4c91cc0

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x670, Size: 0x10]
	MaterialInterface* OverlayMaterial;//[Offset: 0x680, Size: 0x8]
	float OverlayMaterialMaxDrawDistance;//[Offset: 0x688, Size: 0x4]
	bool bEnableMaterialParameterCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6a0, Size: 0x1]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x4c3e560
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x4c3e490
	void SetOverlayMaterialMaxDrawDistance(float InMaxDrawDistance);// 0x4c3e340
	void SetOverlayMaterial(MaterialInterface* NewOverlayMaterial);// 0x4c3e2c0
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x4c3e120
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x4c3e080
	MaterialInterface* GetOverlayMaterial();// 0x4c3e050
	FName[] GetMaterialSlotNames();// 0x4c3df50
	MaterialInterface*[] GetMaterials();// 0x4c3dfd0
	int GetMaterialIndex(FName MaterialSlotName);// 0x4c3deb0
	void ForceUpdateAllTexturesStreaming();// 0x4c3de90
	bool DoesAllTexturesStreamingFinished_LOD(int LODIndex, int Bios);// 0x4c3dca0
	bool DoesAllTexturesStreamingFinished(int Bios);// 0x4c3dc10
	void ChangeMaterials();// 0x4c3dbf0

--------------------------------
Class: SkeletalMesh.StreamableRenderAsset.Object
	Skeleton* Skeleton;//[Offset: 0x80, Size: 0x8]
	BoxSphereBounds ImportedBounds;//[Offset: 0x88, Size: 0x1c]
	BoxSphereBounds ExtendedBounds;//[Offset: 0xa4, Size: 0x1c]
	Vector PositiveBoundsExtension;//[Offset: 0xc0, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0xcc, Size: 0xc]
	SkeletalMaterial[] Materials;//[Offset: 0xd8, Size: 0x10]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xe8, Size: 0x10]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xf8, Size: 0x10]
	int LODForCastShadow;//[Offset: 0x158, Size: 0x4]
	PerPlatformInt MinLOD;//[Offset: 0x15c, Size: 0x4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x160, Size: 0x1]
	byte SkelMirrorAxis;//[Offset: 0x161, Size: 0x1]
	byte SkelMirrorFlipAxis;//[Offset: 0x162, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x163, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x163, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x163, Size: 0x1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x163, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x163, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0x168, Size: 0x8]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x170, Size: 0x8]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x178, Size: 0x8]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x180, Size: 0x10]
	MorphTarget*[] MorphTargets;//[Offset: 0x190, Size: 0x10]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x318, Size: 0x8]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x320, Size: 0x10]
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x330, Size: 0x30]
	AssetUserData*[] AssetUserData;//[Offset: 0x360, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x370, Size: 0x10]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x390, Size: 0x10]
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0x107d1f0
	int NumSockets();// 0x4c89600
	FString[] K2_GetAllMorphTargetNames();// 0x4c89520
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x4c89460
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x4c893d0
	int GetNumSections(int InLOD);// 0x4c89340
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x4c892b0
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x4c89220
	BoxSphereBounds GetImportedBounds();// 0x4c891d0
	BoxSphereBounds GetBounds();// 0x4c89180
	SkeletalMeshSocket* FindSocketInfo(FName InSocketName, out Transform OutTransform, out int OutBoneIndex, out int OutIndex);// 0x4c88fb0
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x4c88ee0
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x4c88e50

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x38, Size: 0x10]
	Transform[] RefLocalPoses;//[Offset: 0x48, Size: 0x10]
	Guid VirtualBoneGuid;//[Offset: 0x170, Size: 0x10]
	VirtualBone[] VirtualBones;//[Offset: 0x180, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x190, Size: 0x10]
	SmartNameContainer SmartNames;//[Offset: 0x1f0, Size: 0x50]
	BlendProfile*[] BlendProfiles;//[Offset: 0x270, Size: 0x10]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x280, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x358, Size: 0x10]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ParentIndex;//[Offset: 0x8, Size: 0x4]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 0x8]
	FName TargetBoneName;//[Offset: 0x8, Size: 0x8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	FName BoneName;//[Offset: 0x30, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x38, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x50, Size: 0xc]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x4c92770
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x4c924f0

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 0x8]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10]
	float BlendScale;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	FName[] SlotNames;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x30, Size: 0x4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x34, Size: 0x1]
	PerPlatformBool bSupportLODStreaming;//[Offset: 0x35, Size: 0x1]
	PerPlatformInt MaxNumStreamedLODs;//[Offset: 0x38, Size: 0x4]
	PerPlatformInt MaxNumOptionalLODs;//[Offset: 0x3c, Size: 0x4]
	float DefaultDensityFactor;//[Offset: 0x40, Size: 0x4]
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: PerPlatformBool
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 0x1]
	BoneFilter[] BoneList;//[Offset: 0x10, Size: 0x10]
	FName[] BonesToPrioritize;//[Offset: 0x20, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x30, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x38, Size: 0x8]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x40, Size: 0x3c]

--------------------------------
Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName BoneName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa8, Size: 0x4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xb0, Size: 0x10]
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xd0, Size: 0x8]
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xd8, Size: 0x8]
	byte AdditiveAnimType;//[Offset: 0x150, Size: 0x1]
	byte RefPoseType;//[Offset: 0x151, Size: 0x1]
	AnimSequence* RefPoseSeq;//[Offset: 0x158, Size: 0x8]
	int RefFrameIndex;//[Offset: 0x160, Size: 0x4]
	FName RetargetSource;//[Offset: 0x164, Size: 0x8]
	enum Interpolation;//[Offset: 0x16c, Size: 0x1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x16e, Size: 0x1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f, Size: 0x1]
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 0x1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x178, Size: 0x10]

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x80, Size: 0x10]
	float SequenceLength;//[Offset: 0x90, Size: 0x4]
	float RateScale;//[Offset: 0x94, Size: 0x4]
	RawCurveTracks RawCurveData;//[Offset: 0x98, Size: 0x10]
	float GetPlayLength();// 0x4b51520

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 0x4]
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 0x4]
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 0x4]
	FName NotifyName;//[Offset: 0x40, Size: 0x8]
	AnimNotify* Notify;//[Offset: 0x48, Size: 0x8]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 0x8]
	float Duration;//[Offset: 0x58, Size: 0x4]
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 0x30]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	byte MontageTickType;//[Offset: 0x91, Size: 0x1]
	float NotifyTriggerChance;//[Offset: 0x94, Size: 0x4]
	byte NotifyFilterType;//[Offset: 0x98, Size: 0x1]
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 0x4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	int TrackIndex;//[Offset: 0xa4, Size: 0x4]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 0x8]
	int SlotIndex;//[Offset: 0x10, Size: 0x4]
	int SegmentIndex;//[Offset: 0x14, Size: 0x4]
	byte LinkMethod;//[Offset: 0x18, Size: 0x1]
	byte CachedLinkMethod;//[Offset: 0x19, Size: 0x1]
	float SegmentBeginTime;//[Offset: 0x1c, Size: 0x4]
	float SegmentLength;//[Offset: 0x20, Size: 0x4]
	float LinkValue;//[Offset: 0x24, Size: 0x4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x305c9c0
	FString GetNotifyName();// 0x106a700

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x305c9c0
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x305c9c0
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x305c9c0
	FString GetNotifyName();// 0x106a700

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xa8, Size: 0x30]
	float BlendInTime;//[Offset: 0xd8, Size: 0x4]
	AlphaBlend BlendOut;//[Offset: 0xe0, Size: 0x30]
	float BlendOutTime;//[Offset: 0x110, Size: 0x4]
	float BlendOutTriggerTime;//[Offset: 0x114, Size: 0x4]
	FName SyncGroup;//[Offset: 0x118, Size: 0x8]
	int SyncSlotIndex;//[Offset: 0x120, Size: 0x4]
	MarkerSyncData MarkerData;//[Offset: 0x128, Size: 0x20]
	CompositeSection[] CompositeSections;//[Offset: 0x148, Size: 0x10]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x158, Size: 0x10]
	BranchingPoint[] BranchingPoints;//[Offset: 0x168, Size: 0x10]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1]
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x17b, Size: 0x1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x180, Size: 0x10]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x190, Size: 0x10]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1a8, Size: 0x28]
	FName TimeStretchCurveName;//[Offset: 0x1d0, Size: 0x8]
	float GetDefaultBlendOutTime();// 0x408c4c0

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AlphaBlend
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 0x8]
	float BlendTime;//[Offset: 0x8, Size: 0x4]
	enum BlendOption;//[Offset: 0x24, Size: 0x1]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 0x80]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	float GetFloatValue(float InTime);// 0x26f2ee0

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x4b7c040
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x4b7bf60

--------------------------------
Class: RichCurve.RealCurve.IndexedCurve
	RichCurveKey[] Keys;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: RealCurve.IndexedCurve
	float DefaultValue;//[Offset: 0x68, Size: 0x4]
	byte PreInfinityExtrap;//[Offset: 0x6c, Size: 0x1]
	byte PostInfinityExtrap;//[Offset: 0x6d, Size: 0x1]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 0x60]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 0x1]
	byte TangentMode;//[Offset: 0x1, Size: 0x1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 0x1]
	float Time;//[Offset: 0x4, Size: 0x4]
	float Value;//[Offset: 0x8, Size: 0x4]
	float ArriveTangent;//[Offset: 0xc, Size: 0x4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 0x4]
	float LeaveTangent;//[Offset: 0x14, Size: 0x4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 0x8]
	float StartTime;//[Offset: 0x38, Size: 0x4]
	FName NextSectionName;//[Offset: 0x3c, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 0x8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 0x8]
	float StartPos;//[Offset: 0x8, Size: 0x4]
	float AnimStartTime;//[Offset: 0xc, Size: 0x4]
	float AnimEndTime;//[Offset: 0x10, Size: 0x4]
	float AnimPlayRate;//[Offset: 0x14, Size: 0x4]
	int LoopingCount;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 0x8]
	float DisplayTime;//[Offset: 0x38, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 0x4]
	float TriggerTime;//[Offset: 0x4, Size: 0x4]
	byte NotifyEventType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 0x4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 0x4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 0x10]
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 0x4]
	float Alpha;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x18, Size: 0x80]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 0x8]
	SmartName Name;//[Offset: 0x8, Size: 0xc]
	int CurveTypeFlags;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AnimBoneCompressionSettings.Object
	AnimBoneCompressionCodec*[] Codecs;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AnimBoneCompressionCodec.Object
	FString Description;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AnimCurveCompressionSettings.Object
	AnimCurveCompressionCodec* Codec;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimCurveCompressionCodec.Object

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte TerminationCriterion;//[Offset: 0x0, Size: 0x1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 0x4]
	float NumOfVertPercentage;//[Offset: 0x8, Size: 0x4]
	UInt32Property MaxNumOfTriangles;//[Size: 0x4]
	UInt32Property MaxNumOfVerts;//[Size: 0x4]
	float MaxDeviationPercentage;//[Offset: 0x14, Size: 0x4]
	byte ReductionMethod;//[Offset: 0x18, Size: 0x1]
	byte SilhouetteImportance;//[Offset: 0x19, Size: 0x1]
	byte TextureImportance;//[Offset: 0x1a, Size: 0x1]
	byte ShadingImportance;//[Offset: 0x1b, Size: 0x1]
	byte SkinningImportance;//[Offset: 0x1c, Size: 0x1]
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1]
	float WeldingThreshold;//[Offset: 0x20, Size: 0x4]
	float NormalsThreshold;//[Offset: 0x24, Size: 0x4]
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 0x4]
	bool bEnforceBoneBoundaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	float VolumeImportance;//[Offset: 0x30, Size: 0x4]
	bool bLockEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	bool bLockColorBounaries;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1]
	int BaseLOD;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	class Object* ParentClass;//[Offset: 0x50, Size: 0x8]
	byte BlueprintType;//[Offset: 0x58, Size: 0x1]
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	int BlueprintSystemVersion;//[Offset: 0x5c, Size: 0x4]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x60, Size: 0x8]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x68, Size: 0x10]
	TimelineTemplate*[] Timelines;//[Offset: 0x78, Size: 0x10]
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x88, Size: 0x10]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x98, Size: 0x8]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 0x8]
	class Object* GeneratedClass;//[Offset: 0x30, Size: 0x8]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 0x10]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 0x10]
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 0x10]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 0x8]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 0x48]
	FName AttachToName;//[Offset: 0x80, Size: 0x8]
	FName ParentComponentOrVariableName;//[Offset: 0x88, Size: 0x8]
	FName ParentComponentOwnerClassName;//[Offset: 0x90, Size: 0x8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	SCS_Node*[] ChildNodes;//[Offset: 0xa0, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xb0, Size: 0x10]
	Guid VariableGuid;//[Offset: 0xc0, Size: 0x10]
	FName InternalVariableName;//[Offset: 0xd0, Size: 0x8]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x0, Size: 0x10]
	bool bHasValidCookedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* PropertyScope;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 0x8]
	FString DataValue;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 0x4]
	byte LengthMode;//[Offset: 0x2c, Size: 0x1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 0x1]
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 0x10]
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 0x10]
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 0x10]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 0x10]
	Guid TimelineGuid;//[Offset: 0x80, Size: 0x10]
	FName VariableName;//[Offset: 0x90, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x98, Size: 0x8]
	FName UpdateFunctionName;//[Offset: 0xa0, Size: 0x8]
	FName FinishedFunctionName;//[Offset: 0xa8, Size: 0x8]

--------------------------------
Class: TTEventTrack.TTTrackBase
	FName FunctionName;//[Offset: 0x18, Size: 0x8]
	CurveFloat* CurveKeys;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x8, Size: 0x8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: TTFloatTrack.TTPropertyTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TTPropertyTrack.TTTrackBase
	FName PropertyName;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: TTVectorTrack.TTPropertyTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	Vector GetVectorValue(float InTime);// 0x4b80370

--------------------------------
Class: TTLinearColorTrack.TTPropertyTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	float AdjustHue;//[Offset: 0x230, Size: 0x4]
	float AdjustSaturation;//[Offset: 0x234, Size: 0x4]
	float AdjustBrightness;//[Offset: 0x238, Size: 0x4]
	float AdjustBrightnessCurve;//[Offset: 0x23c, Size: 0x4]
	float AdjustVibrance;//[Offset: 0x240, Size: 0x4]
	float AdjustMinAlpha;//[Offset: 0x244, Size: 0x4]
	float AdjustMaxAlpha;//[Offset: 0x248, Size: 0x4]
	LinearColor GetLinearColorValue(float InTime);// 0x4b802a0
	LinearColor GetClampedLinearColorValue(float InTime);// 0x4b7f910

--------------------------------
Class: BPComponentClassOverride
	FName ComponentName;//[Offset: 0x0, Size: 0x8]
	class Object* ComponentClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 0x10]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 0x8]
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 0x20]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 0x48]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 0x8]
	FName SCSVariableName;//[Offset: 0x8, Size: 0x8]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeItem> SourceItems;//[Offset: 0x28, Size: 0x50]
	<FName,NodeItem> TargetItems;//[Offset: 0x78, Size: 0x50]
	<FName,FName> SourceToTarget;//[Offset: 0xc8, Size: 0x50]
	Object* SourceAsset;//[Offset: 0x118, Size: 0x28]
	Object* TargetAsset;//[Offset: 0x140, Size: 0x28]

--------------------------------
Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 0x8]
	Transform Transform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 0x14]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 0x4]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 0x10]
	SkeletalMeshBuildSettings BuildSettings;//[Offset: 0x18, Size: 0x38]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x50, Size: 0x3c]
	BoneReference[] BonesToRemove;//[Offset: 0x90, Size: 0x10]
	BoneReference[] BonesToPrioritize;//[Offset: 0xa0, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0xb0, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0xb8, Size: 0x8]
	AnimSequence* BakePoseOverride;//[Offset: 0xc0, Size: 0x8]
	FString SourceImportFilename;//[Offset: 0xc8, Size: 0x10]
	enum SkinCacheUsage;//[Offset: 0xd8, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd9, Size: 0x1]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd9, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd9, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd9, Size: 0x1]

--------------------------------
Class: SkeletalMeshBuildSettings
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bComputeWeightedNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	float ThresholdPosition;//[Offset: 0x4, Size: 0x4]
	float ThresholdTangentNormal;//[Offset: 0x8, Size: 0x4]
	float ThresholdUV;//[Offset: 0xc, Size: 0x4]
	float MorphThresholdPosition;//[Offset: 0x10, Size: 0x4]
	bool bGenerateVertexBentNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	FText PairedMeshToGenerateVertexBentNormal;//[Offset: 0x18, Size: 0x18]
	float VertexBentNormalRayLength;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x30, Size: 0x10]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x40, Size: 0x10]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x50, Size: 0x10]
	SolverIterations SolverIterations;//[Offset: 0x60, Size: 0x18]
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x120, Size: 0x8]
	BodySetup*[] BodySetup;//[Offset: 0x128, Size: 0x10]

--------------------------------
Class: SkeletalBodySetup.BodySetup.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x298, Size: 0x10]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 0x8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 0x24]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 0x8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	float OrientationStrength;//[Offset: 0xc, Size: 0x4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 0x4]
	float PositionStrength;//[Offset: 0x14, Size: 0x4]
	float VelocityStrength;//[Offset: 0x18, Size: 0x4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 0x4]
	float MaxAngularForce;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 0x1b8]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1e0, Size: 0x10]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1f0, Size: 0x104]

--------------------------------
Class: ConstraintInstance
	FName JointName;//[Offset: 0x18, Size: 0x8]
	FName ConstraintBone1;//[Offset: 0x20, Size: 0x8]
	FName ConstraintBone2;//[Offset: 0x28, Size: 0x8]
	Vector Pos1;//[Offset: 0x30, Size: 0xc]
	Vector PriAxis1;//[Offset: 0x3c, Size: 0xc]
	Vector SecAxis1;//[Offset: 0x48, Size: 0xc]
	Vector Pos2;//[Offset: 0x54, Size: 0xc]
	Vector PriAxis2;//[Offset: 0x60, Size: 0xc]
	Vector SecAxis2;//[Offset: 0x6c, Size: 0xc]
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 0xc]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 0x104]

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 0x4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 0x4]
	float LinearBreakThreshold;//[Offset: 0x8, Size: 0x4]
	float AngularBreakThreshold;//[Offset: 0xc, Size: 0x4]
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 0x1c]
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 0x20]
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 0x1c]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 0x4c]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 0x4c]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 0x1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 0x1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 0x1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 0x1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float limit;//[Offset: 0x14, Size: 0x4]
	byte XMotion;//[Offset: 0x18, Size: 0x1]
	byte YMotion;//[Offset: 0x19, Size: 0x1]
	byte ZMotion;//[Offset: 0x1a, Size: 0x1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float Restitution;//[Offset: 0x8, Size: 0x4]
	float ContactDistance;//[Offset: 0xc, Size: 0x4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 0x4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 0x4]
	byte Swing1Motion;//[Offset: 0x1c, Size: 0x1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 0x1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 0x4]
	byte TwistMotion;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 0xc]
	Vector VelocityTarget;//[Offset: 0xc, Size: 0xc]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 0x10]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 0x10]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 0x10]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float MaxForce;//[Offset: 0x8, Size: 0x4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 0x10]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 0x10]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 0x10]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 0xc]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 0xc]
	byte AngularDriveMode;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 0x104]
	FName ProfileName;//[Offset: 0x104, Size: 0x8]

--------------------------------
Class: SolverIterations
	int SolverIterations;//[Offset: 0x0, Size: 0x4]
	int JointIterations;//[Offset: 0x4, Size: 0x4]
	int CollisionIterations;//[Offset: 0x8, Size: 0x4]
	int SolverPushOutIterations;//[Offset: 0xc, Size: 0x4]
	int JointPushOutIterations;//[Offset: 0x10, Size: 0x4]
	int CollisionPushOutIterations;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x28, Size: 0x8]
	byte RootMotionMode;//[Offset: 0x30, Size: 0x1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1]
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 0x1]
	bool bReceiveNotifiesFromLinkedInstances;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31, Size: 0x1]
	bool bPropagateNotifiesToLinkedInstances;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31, Size: 0x1]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31, Size: 0x1]
	delegate OnMontageBlendingOut;//[Offset: 0x40, Size: 0x10]
	delegate OnMontageStarted;//[Offset: 0x50, Size: 0x10]
	delegate OnMontageEnded;//[Offset: 0x60, Size: 0x10]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x70, Size: 0x10]
	delegate OnMontageSectionChanged;//[Offset: 0x80, Size: 0x10]
	AnimNotifyQueue NotifyQueue;//[Offset: 0x128, Size: 0x70]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x198, Size: 0x10]
	AnimNotifyEventReference[] ActiveAnimNotifyEventReference;//[Offset: 0x1a8, Size: 0x10]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x26c4950
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x4b47bc0
	Pawn* TryGetPawnOwner();// 0x107b800
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x4b47af0
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x4b47a20
	void SetRootMotionMode(byte Value);// 0x4b479a0
	void SetReceiveNotifiesFromLinkedInstances(bool bSet);// 0x4b47910
	void SetPropagateNotifiesToLinkedInstances(bool bSet);// 0x4b47880
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x4b477b0
	void SavePoseSnapshot(FName SnapshotName);// 0x4b47720
	void ResetDynamics(enum InTeleportType);// 0x4b476a0
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x4b47460
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x4b472a0
	AnimMontage* PlayMultipleSlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x4b47020
	AnimMontage* PlayLoopingSlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x4b46de0
	void Montage_StopGroupByName(float InBlendOutTime, FName GroupName);// 0x4b46d10
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x4b46c40
	void Montage_SetStoppedBlendOutTime(float InBlendOutTime, const AnimMontage* Montage);// 0x4b46b70
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x4b46aa0
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x4b469d0
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x4b468d0
	void Montage_SetNextPosition(const AnimMontage* Montage, float NewPosition);// 0x4b46800
	void Montage_Resume(const AnimMontage* Montage);// 0x4b46780
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x4b465f0
	void Montage_Pause(const AnimMontage* Montage);// 0x4b46570
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x4b464b0
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x4b463f0
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x4b46360
	bool Montage_IsActive(const AnimMontage* Montage);// 0x4b462d0
	float Montage_GetPosition(const AnimMontage* Montage);// 0x4b46230
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x4b46190
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x4b46100
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x4b46070
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x4b45fd0
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x26c4950
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x4b45f10
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x4b45e90
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x4b45d40
	bool IsSlotWithGroupPlaying(FName SlotNodeName, FName InGroupName);// 0x4b45c80
	bool IsSlotWithGroupActive(FName SlotNodeName, FName InGroupName);// 0x4b45bc0
	bool IsSlotPlaying(FName SlotNodeName);// 0x2663cb0
	bool IsSlotActive(FName SlotNodeName);// 0x4b45b30
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x4b45a70
	bool IsGroupPlaying(FName InGroupName);// 0x4b459e0
	bool IsGroupActive(FName InGroupName);// 0x4b45950
	bool IsAnyMontagePlaying();// 0x4b45920
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x4b45860
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x4b45750
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x4b456b0
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x4b455f0
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x4b45530
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x4b45470
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x4b453b0
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x4b452f0
	bool GetReceiveNotifiesFromLinkedInstances();// 0x4b452c0
	bool GetPropagateNotifiesToLinkedInstances();// 0x4b45290
	SkeletalMeshComponent* GetOwningComponent();// 0x4b45260
	Actor* GetOwningActor();// 0x4b45230
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x4b451a0
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x4b45110
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x4b45020
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x4b44f90
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x4b44ed0
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x4b44e10
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x4b44d50
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x4b44c90
	float GetInstanceMachineWeight(int MachineIndex);// 0x4b44c00
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x4b44b70
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x4b44ae0
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x4b44a50
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x4b449c0
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x4b44930
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x4b448a0
	float GetCurveValue(FName CurveName);// 0x4b44800
	FName GetCurrentStateName(int MachineIndex);// 0x4b44770
	AnimMontage* GetCurrentActiveMontage();// 0x4b44740
	void GetAllCurveNames(out FName[] OutNames);// 0x4b44690
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0x4b445a0
	bool DeactivateMontage(float InBlendOutTime, const AnimMontage* Montage);// 0x4b444d0
	void ClearMorphTargets();// 0x4b444b0
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x4b443b0
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x305c9c0
	void BlueprintPostEvaluateAnimation();// 0x305c9c0
	void BlueprintLinkedAnimationLayersInitialized();// 0x305c9c0
	void BlueprintInitializeAnimation();// 0x305c9c0
	void BlueprintBeginPlay();// 0x305c9c0

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 0x10]
	FName[] BoneNames;//[Offset: 0x10, Size: 0x10]
	FName SkeletalMeshName;//[Offset: 0x20, Size: 0x8]
	FName SnapshotName;//[Offset: 0x28, Size: 0x8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 0x8]
	FName NextMarkerName;//[Offset: 0x8, Size: 0x8]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0x10, Size: 0x10]
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x20, Size: 0x50]

--------------------------------
Class: AnimNotifyEventReference
	Object* NotifySource;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 0x10]
	Guid AssetGuid;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingInfo
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0x10, Size: 0x20]

--------------------------------
Class: SkeletalMeshSamplingRegion
	FName Name;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 0x10]
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	bool bIncludeOrExclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SkeletalMeshSamplingBuiltData
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingLODBuiltData

--------------------------------
Class: SkeletalMeshSamplingRegionBuiltData

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	PerPlatformBool DefaultProfile;//[Offset: 0x8, Size: 0x1]
	PerPlatformInt DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 0x10]
	Plane YPlane;//[Offset: 0x10, Size: 0x10]
	Plane ZPlane;//[Offset: 0x20, Size: 0x10]
	Plane WPlane;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ClothingSimulationInteractor.Object
	void SetAnimDriveSpringStiffness(float InStiffness);// 0x42a6eb0
	void PhysicsAssetUpdated();// 0x188cec0
	void EnableGravityOverride(out const Vector InVector);// 0x42a6e20
	void DisableGravityOverride();// 0x2875ed0
	void ClothConfigUpdated();// 0x188cea0

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 0x8]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	float SavedPosition;//[Offset: 0xc, Size: 0x4]
	float SavedPlayRate;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 0x4]
	byte Weights;//[Offset: 0x30, Size: 0x1]

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x278, Size: 0x8]
	float GravityScale;//[Offset: 0x280, Size: 0x4]
	float MaxStepHeight;//[Offset: 0x284, Size: 0x4]
	float JumpZVelocity;//[Offset: 0x288, Size: 0x4]
	float JumpOffJumpZFactor;//[Offset: 0x28c, Size: 0x4]
	float WalkableFloorAngle;//[Offset: 0x290, Size: 0x4]
	float WalkableFloorZ;//[Offset: 0x294, Size: 0x4]
	byte MovementMode;//[Offset: 0x298, Size: 0x1]
	byte CustomMovementMode;//[Offset: 0x299, Size: 0x1]
	enum NetworkSmoothingMode;//[Offset: 0x29a, Size: 0x1]
	float GroundFriction;//[Offset: 0x29c, Size: 0x4]
	float MaxWalkSpeed;//[Offset: 0x2bc, Size: 0x4]
	float MaxWalkSpeedCrouched;//[Offset: 0x2c0, Size: 0x4]
	float MaxSwimSpeed;//[Offset: 0x2c4, Size: 0x4]
	float MaxFlySpeed;//[Offset: 0x2c8, Size: 0x4]
	float MaxCustomMovementSpeed;//[Offset: 0x2cc, Size: 0x4]
	float MaxAcceleration;//[Offset: 0x2d0, Size: 0x4]
	float MinAnalogWalkSpeed;//[Offset: 0x2d4, Size: 0x4]
	float BrakingFrictionFactor;//[Offset: 0x2d8, Size: 0x4]
	float BrakingFriction;//[Offset: 0x2dc, Size: 0x4]
	float BrakingSubStepTime;//[Offset: 0x2e0, Size: 0x4]
	float BrakingDecelerationWalking;//[Offset: 0x2e4, Size: 0x4]
	float BrakingDecelerationFalling;//[Offset: 0x2e8, Size: 0x4]
	float BrakingDecelerationSwimming;//[Offset: 0x2ec, Size: 0x4]
	float BrakingDecelerationFlying;//[Offset: 0x2f0, Size: 0x4]
	float AirControl;//[Offset: 0x2f4, Size: 0x4]
	float AirControlBoostMultiplier;//[Offset: 0x2f8, Size: 0x4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x2fc, Size: 0x4]
	float FallingLateralFriction;//[Offset: 0x300, Size: 0x4]
	float CrouchedHalfHeight;//[Offset: 0x304, Size: 0x4]
	float Buoyancy;//[Offset: 0x308, Size: 0x4]
	float PerchRadiusThreshold;//[Offset: 0x30c, Size: 0x4]
	float PerchAdditionalHeight;//[Offset: 0x310, Size: 0x4]
	Rotator RotationRate;//[Offset: 0x314, Size: 0xc]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 0x1]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x320, Size: 0x1]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x320, Size: 0x1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x320, Size: 0x1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x320, Size: 0x1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x320, Size: 0x1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x320, Size: 0x1]
	bool bEnableServerDualMoveScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x321, Size: 0x1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x321, Size: 0x1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x321, Size: 0x1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x321, Size: 0x1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x321, Size: 0x1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x321, Size: 0x1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x321, Size: 0x1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x322, Size: 0x1]
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x322, Size: 0x1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x322, Size: 0x1]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x322, Size: 0x1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x322, Size: 0x1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x322, Size: 0x1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x322, Size: 0x1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x323, Size: 0x1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x328, Size: 0x8]
	float MaxOutOfWaterStepHeight;//[Offset: 0x330, Size: 0x4]
	float OutofWaterZ;//[Offset: 0x334, Size: 0x4]
	float Mass;//[Offset: 0x338, Size: 0x4]
	float StandingDownwardForceScale;//[Offset: 0x33c, Size: 0x4]
	float InitialPushForceFactor;//[Offset: 0x340, Size: 0x4]
	float PushForceFactor;//[Offset: 0x344, Size: 0x4]
	float PushForcePointZOffsetFactor;//[Offset: 0x348, Size: 0x4]
	float TouchForceFactor;//[Offset: 0x34c, Size: 0x4]
	float MinTouchForce;//[Offset: 0x350, Size: 0x4]
	float MaxTouchForce;//[Offset: 0x354, Size: 0x4]
	float RepulsionForce;//[Offset: 0x358, Size: 0x4]
	Vector Acceleration;//[Offset: 0x35c, Size: 0xc]
	Quat LastUpdateRotation;//[Offset: 0x370, Size: 0x10]
	Vector LastUpdateLocation;//[Offset: 0x380, Size: 0xc]
	Vector LastUpdateVelocity;//[Offset: 0x38c, Size: 0xc]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x398, Size: 0x4]
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x39c, Size: 0x4]
	float ServerLastClientAdjustmentTime;//[Offset: 0x3a0, Size: 0x4]
	Vector PendingImpulseToApply;//[Offset: 0x3a4, Size: 0xc]
	Vector PendingForceToApply;//[Offset: 0x3b0, Size: 0xc]
	float AnalogInputModifier;//[Offset: 0x3bc, Size: 0x4]
	float MaxSimulationTimeStep;//[Offset: 0x3cc, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x3d0, Size: 0x4]
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x3d4, Size: 0x4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x3d8, Size: 0x4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x3dc, Size: 0x4]
	float MaxDepenetrationWithPawn;//[Offset: 0x3e0, Size: 0x4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x3e4, Size: 0x4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x3e8, Size: 0x4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x3ec, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x3f0, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x3f4, Size: 0x4]
	float NetProxyShrinkRadius;//[Offset: 0x3f8, Size: 0x4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x3fc, Size: 0x4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x400, Size: 0x4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x404, Size: 0x4]
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x408, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x40c, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x410, Size: 0x4]
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x414, Size: 0x4]
	float LedgeCheckThreshold;//[Offset: 0x418, Size: 0x4]
	float JumpOutOfWaterPitch;//[Offset: 0x41c, Size: 0x4]
	FindFloorResult CurrentFloor;//[Offset: 0x420, Size: 0x94]
	byte DefaultLandMovementMode;//[Offset: 0x588, Size: 0x1]
	byte DefaultWaterMovementMode;//[Offset: 0x589, Size: 0x1]
	float RootMotionMoveAlpha;//[Offset: 0x58c, Size: 0x4]
	byte GroundMovementMode;//[Offset: 0x59c, Size: 0x1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59d, Size: 0x1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59d, Size: 0x1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59d, Size: 0x1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59d, Size: 0x1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59d, Size: 0x1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59d, Size: 0x1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59d, Size: 0x1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x59d, Size: 0x1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59e, Size: 0x1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59e, Size: 0x1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59e, Size: 0x1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59e, Size: 0x1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59e, Size: 0x1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59e, Size: 0x1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59e, Size: 0x1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x59e, Size: 0x1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59f, Size: 0x1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59f, Size: 0x1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59f, Size: 0x1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59f, Size: 0x1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59f, Size: 0x1]
	bool bAllowRVOAvoidanceAffectVelocity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59f, Size: 0x1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59f, Size: 0x1]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a0, Size: 0x1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a0, Size: 0x1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a0, Size: 0x1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a0, Size: 0x1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a0, Size: 0x1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a0, Size: 0x1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a1, Size: 0x1]
	float AvoidanceConsiderationRadius;//[Offset: 0x5b4, Size: 0x4]
	Vector RequestedVelocity;//[Offset: 0x5b8, Size: 0xc]
	int AvoidanceUID;//[Offset: 0x5c4, Size: 0x4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x5c8, Size: 0x4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x5cc, Size: 0x4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x5d0, Size: 0x4]
	float AvoidanceWeight;//[Offset: 0x5d4, Size: 0x4]
	Vector PendingLaunchVelocity;//[Offset: 0x5d8, Size: 0xc]
	float NavMeshProjectionInterval;//[Offset: 0x688, Size: 0x4]
	float NavMeshProjectionTimer;//[Offset: 0x68c, Size: 0x4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x690, Size: 0x4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x694, Size: 0x4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x698, Size: 0x4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x69c, Size: 0x4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x6a0, Size: 0x40]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x6f8, Size: 0x4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x748, Size: 0x38]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x840, Size: 0x40]
	Vector AnimRootMotionVelocity;//[Offset: 0x880, Size: 0xc]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x4b75e40
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x4b75dc0
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x4b75d00
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x4b75c70
	void SetGroupsToIgnore(int GroupFlags);// 0x4b75bf0
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x4b75b60
	void SetGroupsToAvoid(int GroupFlags);// 0x4b75ae0
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x4b75a50
	void SetAvoidanceGroup(int GroupFlags);// 0x4b759d0
	void SetAvoidanceEnabled(bool bEnable);// 0x4b75940
	float K2_GetWalkableFloorZ();// 0x4b75910
	float K2_GetWalkableFloorAngle();// 0x4b758e0
	float K2_GetModifiedMaxAcceleration();// 0x4b758a0
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x4b75750
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x4b75550
	bool IsWalking();// 0x4b75520
	bool IsWalkable(out const HitResult Hit);// 0x4b75430
	float GetValidPerchRadius();// 0x4b75400
	float GetPerchRadiusThreshold();// 0x4b753d0
	PrimitiveComponent* GetMovementBase();// 0x4b753a0
	float GetMinAnalogSpeed();// 0x4b75360
	float GetMaxJumpHeightWithJumpTime();// 0x4b75320
	float GetMaxJumpHeight();// 0x4b752e0
	float GetMaxBrakingDeceleration();// 0x4b752a0
	float GetMaxAcceleration();// 0x4b75260
	Vector GetLastUpdateVelocity();// 0x4b75230
	Rotator GetLastUpdateRotation();// 0x4b751e0
	Vector GetLastUpdateLocation();// 0x4b751b0
	Vector GetImpartedMovementBaseVelocity();// 0x4b75170
	Vector GetCurrentAcceleration();// 0x4b75130
	Character* GetCharacterOwner();// 0x4b75110
	float GetAnalogInputModifier();// 0x4b750e0
	void DisableMovement();// 0x4b750c0
	void ClearAccumulatedForces();// 0x2902c90
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4b74ec0
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x4b74d60
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x4b74c80
	void AddForce(Vector Force);// 0x4b74bf0

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x260, Size: 0x8]
	Vector K2_GetInputVector();// 0x4c5a670
	bool IsMoveInputIgnored();// 0x2c65450
	Vector GetPendingInputVector();// 0x4c5a670
	Pawn* GetPawnOwner();// 0x4c5a640
	Vector GetLastInputVector();// 0x4c5a4f0
	Vector ConsumeInputVector();// 0x4c5a310
	void AddInputVector(Vector WorldVector, bool bForce);// 0x4c59db0

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0x220, Size: 0x30]
	float FixedPathBrakingDistance;//[Offset: 0x250, Size: 0x4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x254, Size: 0x1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x254, Size: 0x1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x254, Size: 0x1]
	MovementProperties MovementState;//[Offset: 0x255, Size: 0x1]
	Object* PathFollowingComp;//[Offset: 0x258, Size: 0x8]
	void StopMovementKeepPathing();// 0x4c45c70
	void StopActiveMovement();// 0x28e7710
	bool IsSwimming();// 0x4c45aa0
	bool IsMovingOnGround();// 0x4b75520
	bool IsFlying();// 0x4c45a70
	bool IsFalling();// 0x2ce0510
	bool IsCrouching();// 0x4c45a40

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0x1e0, Size: 0x8]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0x1e8, Size: 0x8]
	Vector Velocity;//[Offset: 0x1f4, Size: 0xc]
	Vector PlaneConstraintNormal;//[Offset: 0x200, Size: 0xc]
	Vector PlaneConstraintOrigin;//[Offset: 0x20c, Size: 0xc]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x218, Size: 0x1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x218, Size: 0x1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x218, Size: 0x1]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x218, Size: 0x1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x218, Size: 0x1]
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x218, Size: 0x1]
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x218, Size: 0x1]
	enum PlaneConstraintAxisSetting;//[Offset: 0x21b, Size: 0x1]
	void StopMovementImmediately();// 0x2db7a60
	void SnapUpdatedComponentToPlane();// 0x278d040
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x4c42180
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x4c420f0
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x4c42060
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x4c41f80
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x2c8c1c0
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x26a3ab0
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x4c41e80
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x4c419c0
	float K2_GetModifiedMaxSpeed();// 0x4c41980
	float K2_GetMaxSpeedModifier();// 0x4c41940
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x4c418b0
	Vector GetPlaneConstraintOrigin();// 0x4c41870
	Vector GetPlaneConstraintNormal();// 0x4c41830
	enum GetPlaneConstraintAxisSetting();// 0x4c41810
	PhysicsVolume* GetPhysicsVolume();// 0x4c417e0
	float GetMaxSpeed();// 0x4c417a0
	float GetGravityZ();// 0x4c41760
	Vector ConstrainNormalToPlane(Vector Normal);// 0x4c416b0
	Vector ConstrainLocationToPlane(Vector Location);// 0x4c41600
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x4c41550

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	float FloorDist;//[Offset: 0x4, Size: 0x4]
	float LineDist;//[Offset: 0x8, Size: 0x4]
	HitResult HitResult;//[Offset: 0xc, Size: 0x88]

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bHasOverrideSourcesWithIgnoreZAccumulate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x29, Size: 0x1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float BlendWeight;//[Offset: 0x4, Size: 0x4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 0x4]
	float AgentHeight;//[Offset: 0x8, Size: 0x4]
	float AgentStepHeight;//[Offset: 0xc, Size: 0x4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 0x4]
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x688, Size: 0x4]
	float CapsuleRadius;//[Offset: 0x68c, Size: 0x4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x4b73a60
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x4b73990
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x4b738c0
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x4b704f0
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x4b70400
	float GetUnscaledCapsuleRadius();// 0x4b703e0
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x4b703b0
	float GetUnscaledCapsuleHalfHeight();// 0x4b70390
	float GetShapeScale();// 0x4b70270
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x4b70150
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x4b70040
	float GetScaledCapsuleRadius();// 0x4b70000
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x4b6ffb0
	float GetScaledCapsuleHalfHeight();// 0x4b6ff80

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ShapeBodySetup;//[Offset: 0x670, Size: 0x8]
	class NavAreaBase* AreaClass;//[Offset: 0x678, Size: 0x8]
	Color ShapeColor;//[Offset: 0x680, Size: 0x4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x684, Size: 0x1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x684, Size: 0x1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x684, Size: 0x1]

--------------------------------
Class: NavAreaBase.Object

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8]
	FName BoneName;//[Offset: 0x8, Size: 0x8]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 0xc]
	Rotator Rotation;//[Offset: 0x1c, Size: 0xc]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 0x4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 0x98]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 0x8]
	float Position;//[Offset: 0x10, Size: 0x4]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 0xc]
	Rotator Rotation;//[Offset: 0x20, Size: 0xc]
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 0x8]
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 0x8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 0x38]
	Vector_NetQuantize10 Acceleration;//[Offset: 0x80, Size: 0xc]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x8c, Size: 0xc]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x360, Size: 0x8]
	Pawn* AcknowledgedPawn;//[Offset: 0x368, Size: 0x8]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x370, Size: 0x8]
	HUD* MyHUD;//[Offset: 0x378, Size: 0x8]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x380, Size: 0x8]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x388, Size: 0x8]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	Rotator TargetViewRotation;//[Offset: 0x394, Size: 0xc]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x3ac, Size: 0x4]
	Actor*[] HiddenActors;//[Offset: 0x3b8, Size: 0x10]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x3c8, Size: 0x10]
	Actor*[] ShowOnlyActors;//[Offset: 0x3e0, Size: 0x10]
	PrimitiveComponent*[] ShowOnlyPrimitiveComponents;//[Offset: 0x3f0, Size: 0x10]
	float LastSpectatorStateSynchTime;//[Offset: 0x404, Size: 0x4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x408, Size: 0xc]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x414, Size: 0xc]
	int ClientCap;//[Offset: 0x420, Size: 0x4]
	CheatManager* CheatManager;//[Offset: 0x428, Size: 0x8]
	class CheatManager* CheatClass;//[Offset: 0x430, Size: 0x8]
	PlayerInput* PlayerInput;//[Offset: 0x438, Size: 0x8]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x440, Size: 0x10]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c0, Size: 0x1]
	byte NetPlayerIndex;//[Offset: 0x4c4, Size: 0x1]
	NetConnection* PendingSwapConnection;//[Offset: 0x500, Size: 0x8]
	NetConnection* NetConnection;//[Offset: 0x508, Size: 0x8]
	float InputYawScale;//[Offset: 0x51c, Size: 0x4]
	float InputPitchScale;//[Offset: 0x520, Size: 0x4]
	float InputRollScale;//[Offset: 0x524, Size: 0x4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x528, Size: 0x1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x528, Size: 0x1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x528, Size: 0x1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x528, Size: 0x1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x528, Size: 0x1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x528, Size: 0x1]
	float ForceFeedbackScale;//[Offset: 0x52c, Size: 0x4]
	Key[] ClickEventKeys;//[Offset: 0x530, Size: 0x10]
	byte DefaultMouseCursor;//[Offset: 0x540, Size: 0x1]
	byte CurrentMouseCursor;//[Offset: 0x541, Size: 0x1]
	byte DefaultClickTraceChannel;//[Offset: 0x542, Size: 0x1]
	byte CurrentClickTraceChannel;//[Offset: 0x543, Size: 0x1]
	float HitResultTraceDistance;//[Offset: 0x544, Size: 0x4]
	uint16 SeamlessTravelCount;//[Offset: 0x548, Size: 0x2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x54a, Size: 0x2]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x5c0, Size: 0x8]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c8, Size: 0x1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x5e0, Size: 0x8]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x638, Size: 0x8]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x644, Size: 0x1]
	Vector SpawnLocation;//[Offset: 0x648, Size: 0xc]
	bool WasInputKeyJustReleased(Key Key);// 0x4c6bc10
	bool WasInputKeyJustPressed(Key Key);// 0x4c6bb20
	void ToggleSpeaking(bool bInSpeaking);// 0x4c6ba90
	void TestServerLevelVisibilityChange(const FName PackageName, const FName Filename);// 0x28006c0
	void SwitchLevel(FString URL);// 0x4c6b9f0
	void StopHapticEffect(enum Hand);// 0x4c6b970
	void StartFire(byte FireModeNum);// 0x4c6b8f0
	void SetVirtualJoystickVisibility(bool bVisible);// 0x4c6b860
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x4c6b6e0
	void SetName(FString S);// 0x4c6b640
	void SetMouseLocation(const int X, const int Y);// 0x4c6b580
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x4c6b4c0
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x4c6b3c0
	void SetDisableHaptics(bool bNewDisabled);// 0x4c6b330
	void SetControllerLightColor(Color Color);// 0x4c6b2c0
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x4c6b100
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x4c6afe0
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0x4c6af10
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x4c6ae20
	void ServerViewPrevPlayer();// 0x4c6add0
	void ServerViewNextPlayer();// 0x4c6ad80
	void ServerVerifyViewTarget();// 0x4c6ad30
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0x4c6ac70
	void ServerUpdateLevelVisibility(const UpdateLevelVisibilityLevelInfo LevelVisibility);// 0x4c6abb0
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x4c6aa90
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x4c6a930
	void ServerToggleAILogging();// 0x4c6a8e0
	void ServerShortTimeout();// 0x4c6a890
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x4c6a7d0
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x4c6a6a0
	void ServerRestartPlayer();// 0x4c6a650
	void ServerPause();// 0x4c6a600
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x4c6a550
	void ServerMutePlayer(UniqueNetIdRepl PlayerId);// 0x4c6a3f0
	void ServerExecRPC(FString Msg);// 0x4c6a330
	void ServerExec(FString Msg);// 0x26b5760
	void ServerCheckClientPossessionReliable();// 0x4c6a2e0
	void ServerCheckClientPossession();// 0x4c6a290
	void ServerChangeName(FString S);// 0x4c6a1d0
	void ServerCamera(FName NewMode);// 0x4c6a110
	void ServerAcknowledgePossession(Pawn* P);// 0x4c6a050
	void SendToConsole(FString Command);// 0x4c69fb0
	void RestartLevel();// 0x4c69f90
	void ResetControllerLightColor();// 0x4c69f70
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x4c69e40
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x4c69cf0
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x4c69a70
	void Pause();// 0x4c69a50
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x4c699c0
	void LocalTravel(FString URL);// 0x4c69920
	void K2_ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);// 0x4c69770
	bool IsInputKeyDown(Key Key);// 0x4c69680
	void GetViewportSize(out int SizeX, out int SizeY);// 0x4c695a0
	SpectatorPawn* GetSpectatorPawn();// 0x4c69580
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x4c69490
	Vector GetInputVectorKeyState(Key Key);// 0x4c69390
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x4c69210
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x4c69130
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x4c68fa0
	float GetInputKeyTimeDown(Key Key);// 0x4c68eb0
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x4c68d90
	float GetInputAnalogKeyState(Key Key);// 0x4c68ca0
	HUD* GetHUD();// 0xcbced0
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x4c68ae0
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x4c68940
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x4c687a0
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x4c68620
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x4c684a0
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x4c68320
	Vector GetFocalLocation();// 0x4c682e0
	void FOV(float NewFOV);// 0x4c68260
	void EnableCheats();// 0x291c410
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x4c680e0
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x4c67fe0
	void ConsoleKey(Key Key);// 0x4c67f00
	void ClientWasKicked(const FText KickReason);// 0x4c67e40
	void ClientVoiceHandshakeComplete();// 0x4c67e20
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0x4c67d80
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x4c67bd0
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x4c67ab0
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x4c67940
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x4c677d0
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x4c67670
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x4c675a0
	void ClientStopCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x4c674d0
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0x4c67400
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x4c67370
	void ClientStartOnlineSession();// 0x28d45f0
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x4c672e0
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x4c671f0
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x4c67160
	void ClientSetHUD(class HUD NewHUDClass);// 0x4c670d0
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x4c66fd0
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x4c66e60
	void ClientSetCameraMode(FName NewCamMode);// 0x4c66dd0
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0x4c66c40
	void ClientSetBlockOnAsyncLoading();// 0x28d4970
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0x4c66b80
	void ClientReturnToMainMenu(FString ReturnReason);// 0x4c66ae0
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x4c66a50
	void ClientRestart(Pawn* NewPawn);// 0x4c669c0
	void ClientReset();// 0x4c669a0
	void ClientRepObjRef(Object* Object);// 0x4c66910
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x4c66790
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x4c66640
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x4c66530
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x4c663e0
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x4c662e0
	void ClientPlayForceFeedback_Internal(ForceFeedbackEffect* ForceFeedbackEffect, ForceFeedbackParameters Params);// 0x4c661f0
	void ClientPlayCameraShakeFromSource(class CameraShake Shake, CameraShakeSourceComponent* SourceComponent);// 0x4c66130
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x4c65fd0
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0x4c65d30
	void ClientMutePlayer(UniqueNetIdRepl PlayerId);// 0x4c65c10
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x4c65af0
	void ClientIgnoreMoveInput(bool bIgnore);// 0x4c65a60
	void ClientIgnoreLookInput(bool bIgnore);// 0x4c659d0
	void ClientGotoState(FName NewState);// 0x4c65940
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x4c65870
	void ClientForceGarbageCollection();// 0x4c65850
	void ClientFlushLevelStreaming();// 0x4c65830
	void ClientEndOnlineSession();// 0x4c65810
	void ClientEnableNetworkVoice(bool bEnable);// 0x4c65780
	void ClientCommitMapChange();// 0x4c65760
	void ClientClearCameraLensEffects();// 0x4c65740
	void ClientCapBandwidth(int Cap);// 0x4c656b0
	void ClientCancelPendingMapChange();// 0x275a820
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x4c65590
	void ClearAudioListenerOverride();// 0x4c65570
	void ClearAudioListenerAttenuationOverride();// 0x4c65550
	bool CanRestartPlayer();// 0x4c65520
	void Camera(FName NewMode);// 0x4c65490
	void AddYawInput(float Val);// 0x4c65410
	void AddRollInput(float Val);// 0x4c65390
	void AddPitchInput(float Val);// 0x4c65310
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x4c65280

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 0x8]
	int CurrentNetSpeed;//[Offset: 0x38, Size: 0x4]
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 0x4]
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x2e8, Size: 0x8]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f0, Size: 0x1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f0, Size: 0x1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f0, Size: 0x1]
	int CurrentTargetIndex;//[Offset: 0x2f4, Size: 0x4]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f8, Size: 0x1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f8, Size: 0x1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f8, Size: 0x1]
	Actor*[] PostRenderedActors;//[Offset: 0x300, Size: 0x10]
	FName[] DebugDisplay;//[Offset: 0x318, Size: 0x10]
	FName[] ToggledDebugCategories;//[Offset: 0x328, Size: 0x10]
	Canvas* Canvas;//[Offset: 0x338, Size: 0x8]
	Canvas* DebugCanvas;//[Offset: 0x340, Size: 0x8]
	DebugTextInfo[] DebugTextList;//[Offset: 0x348, Size: 0x10]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x358, Size: 0x8]
	Actor* ShowDebugTargetActor;//[Offset: 0x360, Size: 0x8]
	void ShowHUD();// 0x26314b0
	void ShowDebugToggleSubCategory(FName Category);// 0x4bae2e0
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x4bae260
	void ShowDebug(FName DebugType);// 0x4bae1d0
	void SetShowDebugTarget(Actor* Actor);// 0x4bae150
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x4badd50
	void RemoveAllDebugStrings();// 0x4badd30
	void ReceiveHitBoxRelease(const FName BoxName);// 0x305c9c0
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0x305c9c0
	void ReceiveHitBoxClick(const FName BoxName);// 0x305c9c0
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x305c9c0
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x305c9c0
	Vector Project(Vector Location);// 0x4badc80
	void PreviousDebugTarget();// 0x13d5870
	void NextDebugTarget();// 0x77ee60
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x4bad7b0
	PlayerController* GetOwningPlayerController();// 0x1918110
	Pawn* GetOwningPawn();// 0x4bad780
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x4bad570
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x4bad3e0
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x4bacfc0
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x4bacda0
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x4bacbf0
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x4bac930
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x4bac730
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x4bac3a0
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x4bac1c0
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x4bac050
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x4babcf0
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x4bab970

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 0x4]
	float OrgY;//[Offset: 0x2c, Size: 0x4]
	float ClipX;//[Offset: 0x30, Size: 0x4]
	float ClipY;//[Offset: 0x34, Size: 0x4]
	Color DrawColor;//[Offset: 0x38, Size: 0x4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	int SizeX;//[Offset: 0x40, Size: 0x4]
	int SizeY;//[Offset: 0x44, Size: 0x4]
	Plane ColorModulate;//[Offset: 0x50, Size: 0x10]
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 0x8]
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 0x8]
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 0x8]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x4b71c20
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x4b71b40
	Vector K2_Project(Vector WorldLocation);// 0x4b71a90
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x4b71970
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x4b716f0
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x4b71370
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x4b711e0
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x4b710c0
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x4b70ea0
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x4b70d50
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0x4b70c00
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackGroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x4b707c0
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x4b706a0

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 0x8]
	Vector2D V0_UV;//[Offset: 0x8, Size: 0x8]
	LinearColor V0_Color;//[Offset: 0x10, Size: 0x10]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 0x8]
	Vector2D V1_UV;//[Offset: 0x28, Size: 0x8]
	LinearColor V1_Color;//[Offset: 0x30, Size: 0x10]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 0x8]
	Vector2D V2_UV;//[Offset: 0x48, Size: 0x8]
	LinearColor V2_Color;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 0x8]
	Vector SrcActorOffset;//[Offset: 0x8, Size: 0xc]
	Vector SrcActorDesiredOffset;//[Offset: 0x14, Size: 0xc]
	FString DebugText;//[Offset: 0x20, Size: 0x10]
	float TimeRemaining;//[Offset: 0x30, Size: 0x4]
	float Duration;//[Offset: 0x34, Size: 0x4]
	Color TextColor;//[Offset: 0x38, Size: 0x4]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	Vector OrigActorLocation;//[Offset: 0x40, Size: 0xc]
	Font* Font;//[Offset: 0x50, Size: 0x8]
	float FontScale;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x2e8, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x2f0, Size: 0x8]
	float DefaultFOV;//[Offset: 0x300, Size: 0x4]
	float DefaultOrthoWidth;//[Offset: 0x308, Size: 0x4]
	float DefaultAspectRatio;//[Offset: 0x310, Size: 0x4]
	CameraCacheEntry CameraCache;//[Offset: 0x360, Size: 0x6e0]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0xa40, Size: 0x6e0]
	TViewTarget ViewTarget;//[Offset: 0x1120, Size: 0x6f0]
	TViewTarget PendingViewTarget;//[Offset: 0x1810, Size: 0x6f0]
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x1f30, Size: 0x6e0]
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x2610, Size: 0x6e0]
	CameraModifier*[] ModifierList;//[Offset: 0x2cf0, Size: 0x10]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x2d00, Size: 0x10]
	float FreeCamDistance;//[Offset: 0x2d10, Size: 0x4]
	Vector FreeCamOffset;//[Offset: 0x2d14, Size: 0xc]
	Vector ViewTargetOffset;//[Offset: 0x2d20, Size: 0xc]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x2d40, Size: 0x10]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x2d50, Size: 0x8]
	CameraAnimInst* AnimInstPool;//[Offset: 0x2d58, Size: 0x8]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x2d98, Size: 0x10]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x2db8, Size: 0x10]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x2dc8, Size: 0x10]
	CameraActor* AnimCameraActor;//[Offset: 0x2dd8, Size: 0x8]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2de0, Size: 0x1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2de0, Size: 0x1]
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2de0, Size: 0x1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2de0, Size: 0x1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2de1, Size: 0x1]
	float ViewPitchMin;//[Offset: 0x2de4, Size: 0x4]
	float ViewPitchMax;//[Offset: 0x2de8, Size: 0x4]
	float ViewYawMin;//[Offset: 0x2dec, Size: 0x4]
	float ViewYawMax;//[Offset: 0x2df0, Size: 0x4]
	float ViewRollMin;//[Offset: 0x2df4, Size: 0x4]
	float ViewRollMax;//[Offset: 0x2df8, Size: 0x4]
	float ServerUpdateCameraTimeout;//[Offset: 0x2e00, Size: 0x4]
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0x4c61de0
	void StopCameraFade();// 0x4c61dc0
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x4c61cf0
	void StopAllInstancesOfCameraShakeFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x4c61c20
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0x4c61b50
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x4c61a80
	void StopAllCameraShakes(bool bImmediately);// 0x4c619f0
	void StopAllCameraAnims(bool bImmediate);// 0x276e410
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x4c61820
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x4c61700
	void SetGameCameraCutThisFrame();// 0x4c616e0
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x4c61640
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x4b97fd0
	CameraShake* PlayCameraShakeFromSource(class CameraShake ShakeClass, CameraShakeSourceComponent* SourceComponent);// 0x4c61570
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x4c61400
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x4c61120
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x4c60fa0
	void OnPhotographySessionStart();// 0xcbca30
	void OnPhotographySessionEnd();// 0x284f290
	void OnPhotographyMultiPartCaptureStart();// 0xbb6730
	void OnPhotographyMultiPartCaptureEnd();// 0x26314b0
	PlayerController* GetOwningPlayerController();// 0x4c60dc0
	float GetFOVAngle();// 0x4c60b00
	Rotator GetCameraRotation();// 0x4c60ac0
	Vector GetCameraLocation();// 0x4c60a80
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x4c609e0
	void FadeOutBlackBarByAspectRatio(float BlendTime);// 0x4c60960
	void ClearCameraLensEffects();// 0x2814290
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x305c9c0
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x4c608c0
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x4c60820

--------------------------------
Class: CameraShake.Object
	int CameraShakeType;//[Offset: 0x28, Size: 0x4]
	float CameraShakeScaleInADS;//[Offset: 0x2c, Size: 0x4]
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	float OscillationDuration;//[Offset: 0x34, Size: 0x4]
	float OscillationBlendInTime;//[Offset: 0x38, Size: 0x4]
	float OscillationBlendOutTime;//[Offset: 0x3c, Size: 0x4]
	ROscillator RotOscillation;//[Offset: 0x40, Size: 0x24]
	VOscillator LocOscillation;//[Offset: 0x64, Size: 0x24]
	FOscillator FOVOscillation;//[Offset: 0x88, Size: 0xc]
	float AnimPlayRate;//[Offset: 0x94, Size: 0x4]
	float AnimScale;//[Offset: 0x98, Size: 0x4]
	float AnimBlendInTime;//[Offset: 0x9c, Size: 0x4]
	float AnimBlendOutTime;//[Offset: 0xa0, Size: 0x4]
	float RandomAnimSegmentDuration;//[Offset: 0xa4, Size: 0x4]
	CameraAnim* Anim;//[Offset: 0xa8, Size: 0x8]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xc8, Size: 0x8]
	float ShakeScale;//[Offset: 0x158, Size: 0x4]
	float OscillatorTimeRemaining;//[Offset: 0x15c, Size: 0x4]
	CameraAnimInst* AnimInst;//[Offset: 0x160, Size: 0x8]
	void ReceiveStopShake(bool bImmediately);// 0x305c9c0
	void ReceivePlayShake(float Scale);// 0x305c9c0
	bool ReceiveIsFinished();// 0xb72190
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x305c9c0

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 0xc]
	FOscillator Yaw;//[Offset: 0xc, Size: 0xc]
	FOscillator Roll;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float Frequency;//[Offset: 0x4, Size: 0x4]
	byte InitialOffset;//[Offset: 0x8, Size: 0x1]
	enum Waveform;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 0xc]
	FOscillator Y;//[Offset: 0xc, Size: 0xc]
	FOscillator Z;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 0x8]
	float AnimLength;//[Offset: 0x30, Size: 0x4]
	Box BoundingBox;//[Offset: 0x34, Size: 0x1c]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	float BaseFOV;//[Offset: 0x54, Size: 0x4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 0x640]
	float BasePostProcessBlendWeight;//[Offset: 0x6a0, Size: 0x4]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 0x10]
	FName GroupName;//[Offset: 0x40, Size: 0x8]
	Color GroupColor;//[Offset: 0x48, Size: 0x4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 0x10]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 0x8]
	byte ActiveCondition;//[Offset: 0x50, Size: 0x1]
	FString TrackTitle;//[Offset: 0x58, Size: 0x10]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: PostProcessSettings
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 0x1]
	bool bOverride_LPMHDRMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 0x1]
	bool bOverride_LPMExposure;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 0x1]
	bool bOverride_LPMShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 0x1]
	bool bOverride_EnableLPM;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 0x1]
	bool bOverride_SSSRMaxTraversalIterations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 0x1]
	bool bOverride_SSSRMinTraversalOccupancy;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 0x1]
	bool bOverride_SSSRMostDetailedLevel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 0x1]
	bool bOverride_SSSRDepthBufferThickness;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 0x1]
	bool bOverride_SSSRRoughnessThreshold;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 0x1]
	bool bOverride_SSSRQuality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 0x1]
	bool bOverride_EnableSSSR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 0x1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 0x1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 0x1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 0x1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 0x1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 0x1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 0x1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 0x1]
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 0x1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 0x1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 0x1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 0x1]
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 0x1]
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverride_AutoExposureBiasCurve;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverride_AutoExposureMeterMask;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverride_AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bOverride_LocalExposureContrastScale;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bOverride_LocalExposureHighlightContrastScale;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bOverride_LocalExposureShadowContrastScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bOverride_LocalExposureDetailStrength;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bOverride_LocalExposureBlurredLuminanceBlend;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bOverride_LocalExposureBlurredLuminanceKernelSizePercent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bOverride_LocalExposureMiddleGreyBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 0x1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 0x1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 0x1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 0x1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 0x1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 0x1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 0x1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bOverride_AmbientOcclusionSkeletalMeshIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bOverride_AmbientOcclusionSkeletalMeshRadius;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bOverride_ScreenSpaceShadowThreshold;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bOverride_ScreenSpaceShadowFadeDistance;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bOverride_ScreenSpaceShadowFadeTransitionDistance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]
	bool bOverride_ScreenSpaceShadowIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]
	bool bOverride_RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bOverride_EnableReflectionNormalize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bOverride_ReflectionCaptureMipBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bOverride_ReflectionCaptureMipScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bOverride_SSRMipBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	bool bOverride_SSRMipScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 0x1]
	bool bOverride_RayTracingAOSamplesPerPixel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 0x1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18, Size: 0x1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18, Size: 0x1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 0x1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19, Size: 0x1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19, Size: 0x1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x19, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x19, Size: 0x1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x19, Size: 0x1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a, Size: 0x1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a, Size: 0x1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a, Size: 0x1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1a, Size: 0x1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1a, Size: 0x1]
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1a, Size: 0x1]
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1a, Size: 0x1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1a, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1b, Size: 0x1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1b, Size: 0x1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1b, Size: 0x1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1b, Size: 0x1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1b, Size: 0x1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1b, Size: 0x1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1b, Size: 0x1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 0x1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 0x1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 0x1]
	bool bOverride_MotionBlurTargetFPS;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 0x1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c, Size: 0x1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionViewOffset;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionForUI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d, Size: 0x1]
	bool bOverride_ReflectionsType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxRoughness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxBounces;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 0x1]
	bool bOverride_RayTracingReflectionsSamplesPerPixel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20, Size: 0x1]
	bool bOverride_RayTracingReflectionsShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20, Size: 0x1]
	bool bOverride_RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x20, Size: 0x1]
	bool bOverride_TranslucencyType;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x20, Size: 0x1]
	bool bOverride_RayTracingTranslucencyMaxRoughness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x20, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefractionRays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 0x1]
	bool bOverride_RayTracingTranslucencySamplesPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21, Size: 0x1]
	bool bOverride_RayTracingTranslucencyShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x21, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x21, Size: 0x1]
	bool bOverride_RayTracingGI;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21, Size: 0x1]
	bool bOverride_RayTracingGIMaxBounces;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x21, Size: 0x1]
	bool bOverride_RayTracingGISamplesPerPixel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x21, Size: 0x1]
	bool bOverride_PathTracingMaxBounces;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x21, Size: 0x1]
	bool bOverride_PathTracingSamplesPerPixel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22, Size: 0x1]
	bool bOverride_RayTracingWaterCausticsType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22, Size: 0x1]
	bool bOverride_RayTracingWaterCausticsBufferScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22, Size: 0x1]
	bool bOverride_RayTracingWaterCausticsFollowCamera;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22, Size: 0x1]
	bool bOverride_RayTracingWaterCausticsLookAt;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x22, Size: 0x1]
	bool bOverride_RayTracingWaterCausticsRange;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22, Size: 0x1]
	bool bOverride_RayTracingWaterCausticsColor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22, Size: 0x1]
	bool bOverride_RayTracingWaterCausticsNumDenoisePasses;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x22, Size: 0x1]
	bool bOverride_RayTracingWaterCausticsDispersionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23, Size: 0x1]
	bool bOverride_RayTracingWaterCausticsDispersionOffset;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x23, Size: 0x1]
	bool bOverride_RayTracingWaterCausticsReflectiveIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x23, Size: 0x1]
	bool bOverride_RayTracingWaterCausticsReflectedRayTMax;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x23, Size: 0x1]
	bool bOverride_RayTracingWaterCausticsReflectedRayTMin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x23, Size: 0x1]
	bool bOverride_RayTracingWaterCausticsRefractiveIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x23, Size: 0x1]
	bool bOverride_RayTracingWaterCausticsRefractedRayTMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x23, Size: 0x1]
	bool bOverride_RayTracingWaterCausticsRefractedRayTMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x23, Size: 0x1]
	bool bOverride_RayTracingWaterCausticsFresnelBaseReflectFraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	bool bOverride_RayTracingWaterCausticsReflectBackFaceCullingThreshold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1]
	bool bOverride_RayTracingWaterCausticsRefractBackFaceCullingThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 0x1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	byte BloomMethod;//[Offset: 0x29, Size: 0x1]
	byte AutoExposureMethod;//[Offset: 0x2a, Size: 0x1]
	float WhiteTemp;//[Offset: 0x2c, Size: 0x4]
	float WhiteTint;//[Offset: 0x30, Size: 0x4]
	Vector4 ColorSaturation;//[Offset: 0x40, Size: 0x10]
	Vector4 ColorContrast;//[Offset: 0x50, Size: 0x10]
	Vector4 ColorGamma;//[Offset: 0x60, Size: 0x10]
	Vector4 ColorGain;//[Offset: 0x70, Size: 0x10]
	Vector4 ColorOffset;//[Offset: 0x80, Size: 0x10]
	Vector4 ColorSaturationShadows;//[Offset: 0x90, Size: 0x10]
	Vector4 ColorContrastShadows;//[Offset: 0xa0, Size: 0x10]
	Vector4 ColorGammaShadows;//[Offset: 0xb0, Size: 0x10]
	Vector4 ColorGainShadows;//[Offset: 0xc0, Size: 0x10]
	Vector4 ColorOffsetShadows;//[Offset: 0xd0, Size: 0x10]
	Vector4 ColorSaturationMidtones;//[Offset: 0xe0, Size: 0x10]
	Vector4 ColorContrastMidtones;//[Offset: 0xf0, Size: 0x10]
	Vector4 ColorGammaMidtones;//[Offset: 0x100, Size: 0x10]
	Vector4 ColorGainMidtones;//[Offset: 0x110, Size: 0x10]
	Vector4 ColorOffsetMidtones;//[Offset: 0x120, Size: 0x10]
	Vector4 ColorSaturationHighlights;//[Offset: 0x130, Size: 0x10]
	Vector4 ColorContrastHighlights;//[Offset: 0x140, Size: 0x10]
	Vector4 ColorGammaHighlights;//[Offset: 0x150, Size: 0x10]
	Vector4 ColorGainHighlights;//[Offset: 0x160, Size: 0x10]
	Vector4 ColorOffsetHighlights;//[Offset: 0x170, Size: 0x10]
	float ColorCorrectionHighlightsMin;//[Offset: 0x180, Size: 0x4]
	float ColorCorrectionShadowsMax;//[Offset: 0x184, Size: 0x4]
	float BlueCorrection;//[Offset: 0x188, Size: 0x4]
	float ExpandGamut;//[Offset: 0x18c, Size: 0x4]
	float FilmSlope;//[Offset: 0x190, Size: 0x4]
	float FilmToe;//[Offset: 0x194, Size: 0x4]
	float FilmShoulder;//[Offset: 0x198, Size: 0x4]
	float FilmBlackClip;//[Offset: 0x19c, Size: 0x4]
	float FilmWhiteClip;//[Offset: 0x1a0, Size: 0x4]
	LinearColor FilmWhitePoint;//[Offset: 0x1a4, Size: 0x10]
	LinearColor FilmShadowTint;//[Offset: 0x1b4, Size: 0x10]
	float FilmShadowTintBlend;//[Offset: 0x1c4, Size: 0x4]
	float FilmShadowTintAmount;//[Offset: 0x1c8, Size: 0x4]
	float FilmSaturation;//[Offset: 0x1cc, Size: 0x4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1d0, Size: 0x10]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1e0, Size: 0x10]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1f0, Size: 0x10]
	float FilmContrast;//[Offset: 0x200, Size: 0x4]
	float FilmToeAmount;//[Offset: 0x204, Size: 0x4]
	float FilmHealAmount;//[Offset: 0x208, Size: 0x4]
	float FilmDynamicRange;//[Offset: 0x20c, Size: 0x4]
	LinearColor SceneColorTint;//[Offset: 0x210, Size: 0x10]
	float LPMHDRMax;//[Offset: 0x220, Size: 0x4]
	float LPMExposure;//[Offset: 0x224, Size: 0x4]
	float LPMShoulder;//[Offset: 0x228, Size: 0x4]
	bool EnableLPM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22c, Size: 0x1]
	int SSSRMaxTraversalIterations;//[Offset: 0x230, Size: 0x4]
	int SSSRMinTraversalOccupancy;//[Offset: 0x234, Size: 0x4]
	int SSSRMostDetailedLevel;//[Offset: 0x238, Size: 0x4]
	float SSSRDepthBufferThickness;//[Offset: 0x23c, Size: 0x4]
	float SSSRRoughnessThreshold;//[Offset: 0x240, Size: 0x4]
	int SSSRQuality;//[Offset: 0x244, Size: 0x4]
	bool EnableSSSR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x248, Size: 0x1]
	float SceneFringeIntensity;//[Offset: 0x24c, Size: 0x4]
	float ChromaticAberrationStartOffset;//[Offset: 0x250, Size: 0x4]
	float BloomIntensity;//[Offset: 0x254, Size: 0x4]
	float BloomThreshold;//[Offset: 0x258, Size: 0x4]
	float BloomSizeScale;//[Offset: 0x25c, Size: 0x4]
	float Bloom1Size;//[Offset: 0x260, Size: 0x4]
	float Bloom2Size;//[Offset: 0x264, Size: 0x4]
	float Bloom3Size;//[Offset: 0x268, Size: 0x4]
	float Bloom4Size;//[Offset: 0x26c, Size: 0x4]
	float Bloom5Size;//[Offset: 0x270, Size: 0x4]
	float Bloom6Size;//[Offset: 0x274, Size: 0x4]
	LinearColor Bloom1Tint;//[Offset: 0x278, Size: 0x10]
	LinearColor Bloom2Tint;//[Offset: 0x288, Size: 0x10]
	LinearColor Bloom3Tint;//[Offset: 0x298, Size: 0x10]
	LinearColor Bloom4Tint;//[Offset: 0x2a8, Size: 0x10]
	LinearColor Bloom5Tint;//[Offset: 0x2b8, Size: 0x10]
	LinearColor Bloom6Tint;//[Offset: 0x2c8, Size: 0x10]
	float BloomConvolutionSize;//[Offset: 0x2d8, Size: 0x4]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x2e0, Size: 0x8]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x2e8, Size: 0x8]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2f0, Size: 0x4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2f4, Size: 0x4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2f8, Size: 0x4]
	float BloomConvolutionBufferScale;//[Offset: 0x2fc, Size: 0x4]
	Texture* BloomDirtMask;//[Offset: 0x300, Size: 0x8]
	float BloomDirtMaskIntensity;//[Offset: 0x308, Size: 0x4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x30c, Size: 0x10]
	LinearColor AmbientCubemapTint;//[Offset: 0x31c, Size: 0x10]
	float AmbientCubemapIntensity;//[Offset: 0x32c, Size: 0x4]
	TextureCube* AmbientCubemap;//[Offset: 0x330, Size: 0x8]
	float CameraShutterSpeed;//[Offset: 0x338, Size: 0x4]
	float CameraISO;//[Offset: 0x33c, Size: 0x4]
	float DepthOfFieldFstop;//[Offset: 0x340, Size: 0x4]
	float DepthOfFieldMinFstop;//[Offset: 0x344, Size: 0x4]
	int DepthOfFieldBladeCount;//[Offset: 0x348, Size: 0x4]
	float AutoExposureBias;//[Offset: 0x34c, Size: 0x4]
	float AutoExposureBiasBackup;//[Offset: 0x350, Size: 0x4]
	bool bOverride_AutoExposureBiasBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x354, Size: 0x1]
	bool AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x358, Size: 0x1]
	CurveFloat* AutoExposureBiasCurve;//[Offset: 0x360, Size: 0x8]
	Texture* AutoExposureMeterMask;//[Offset: 0x368, Size: 0x8]
	float AutoExposureLowPercent;//[Offset: 0x370, Size: 0x4]
	float AutoExposureHighPercent;//[Offset: 0x374, Size: 0x4]
	float AutoExposureMinBrightness;//[Offset: 0x378, Size: 0x4]
	float AutoExposureMaxBrightness;//[Offset: 0x37c, Size: 0x4]
	float AutoExposureSpeedUp;//[Offset: 0x380, Size: 0x4]
	float AutoExposureSpeedDown;//[Offset: 0x384, Size: 0x4]
	float HistogramLogMin;//[Offset: 0x388, Size: 0x4]
	float HistogramLogMax;//[Offset: 0x38c, Size: 0x4]
	float AutoExposureCalibrationConstant;//[Offset: 0x390, Size: 0x4]
	float LocalExposureContrastScale;//[Offset: 0x394, Size: 0x4]
	float LocalExposureHighlightContrastScale;//[Offset: 0x398, Size: 0x4]
	float LocalExposureShadowContrastScale;//[Offset: 0x39c, Size: 0x4]
	float LocalExposureDetailStrength;//[Offset: 0x3a0, Size: 0x4]
	float LocalExposureBlurredLuminanceBlend;//[Offset: 0x3a4, Size: 0x4]
	float LocalExposureBlurredLuminanceKernelSizePercent;//[Offset: 0x3a8, Size: 0x4]
	float LocalExposureMiddleGreyBias;//[Offset: 0x3ac, Size: 0x4]
	float LensFlareIntensity;//[Offset: 0x3b0, Size: 0x4]
	LinearColor LensFlareTint;//[Offset: 0x3b4, Size: 0x10]
	float LensFlareBokehSize;//[Offset: 0x3c4, Size: 0x4]
	float LensFlareThreshold;//[Offset: 0x3c8, Size: 0x4]
	Texture* LensFlareBokehShape;//[Offset: 0x3d0, Size: 0x8]
	LinearColor LensFlareTints;//[Offset: 0x3d8, Size: 0x10]
	float VignetteIntensity;//[Offset: 0x458, Size: 0x4]
	float GrainJitter;//[Offset: 0x45c, Size: 0x4]
	float GrainIntensity;//[Offset: 0x460, Size: 0x4]
	float AmbientOcclusionIntensity;//[Offset: 0x464, Size: 0x4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x468, Size: 0x4]
	float AmbientOcclusionRadius;//[Offset: 0x46c, Size: 0x4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x470, Size: 0x1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x474, Size: 0x4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x478, Size: 0x4]
	float AmbientOcclusionDistance;//[Offset: 0x47c, Size: 0x4]
	float AmbientOcclusionPower;//[Offset: 0x480, Size: 0x4]
	float AmbientOcclusionBias;//[Offset: 0x484, Size: 0x4]
	float AmbientOcclusionQuality;//[Offset: 0x488, Size: 0x4]
	float AmbientOcclusionMipBlend;//[Offset: 0x48c, Size: 0x4]
	float AmbientOcclusionMipScale;//[Offset: 0x490, Size: 0x4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x494, Size: 0x4]
	float AmbientOcclusionSkeletalMeshIntensity;//[Offset: 0x498, Size: 0x4]
	float AmbientOcclusionSkeletalMeshRadius;//[Offset: 0x49c, Size: 0x4]
	float ScreenSpaceShadowThreshold;//[Offset: 0x4a0, Size: 0x4]
	float ScreenSpaceShadowFadeDistance;//[Offset: 0x4a4, Size: 0x4]
	float ScreenSpaceShadowFadeTransitionDistance;//[Offset: 0x4a8, Size: 0x4]
	float ScreenSpaceShadowIntensity;//[Offset: 0x4ac, Size: 0x4]
	bool RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4b0, Size: 0x1]
	int RayTracingAOSamplesPerPixel;//[Offset: 0x4b4, Size: 0x4]
	LinearColor IndirectLightingColor;//[Offset: 0x4b8, Size: 0x10]
	float IndirectLightingIntensity;//[Offset: 0x4c8, Size: 0x4]
	bool EnableReflectionNormalize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4cc, Size: 0x1]
	float ReflectionCaptureMipBias;//[Offset: 0x4d0, Size: 0x4]
	float ReflectionCaptureMipScale;//[Offset: 0x4d4, Size: 0x4]
	float SSRMipBias;//[Offset: 0x4d8, Size: 0x4]
	float SSRMipScale;//[Offset: 0x4dc, Size: 0x4]
	enum RayTracingGIType;//[Offset: 0x4e0, Size: 0x1]
	int RayTracingGIMaxBounces;//[Offset: 0x4e4, Size: 0x4]
	int RayTracingGISamplesPerPixel;//[Offset: 0x4e8, Size: 0x4]
	enum RayTracingWaterCausticsType;//[Offset: 0x4ec, Size: 0x1]
	enum RayTracingWaterCausticsBufferScale;//[Offset: 0x4ed, Size: 0x1]
	bool RayTracingWaterCausticsFollowCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4f0, Size: 0x1]
	Vector RayTracingWaterCausticsLookAt;//[Offset: 0x4f4, Size: 0xc]
	Vector RayTracingWaterCausticsRange;//[Offset: 0x500, Size: 0xc]
	LinearColor RayTracingWaterCausticsColor;//[Offset: 0x50c, Size: 0x10]
	int RayTracingWaterCausticsNumDenoisePasses;//[Offset: 0x51c, Size: 0x4]
	float RayTracingWaterCausticsDispersionIntensity;//[Offset: 0x520, Size: 0x4]
	float RayTracingWaterCausticsDispersionOffset;//[Offset: 0x524, Size: 0x4]
	float RayTracingWaterCausticsReflectiveIntensity;//[Offset: 0x528, Size: 0x4]
	float RayTracingWaterCausticsReflectedRayTMax;//[Offset: 0x52c, Size: 0x4]
	float RayTracingWaterCausticsReflectedRayTMin;//[Offset: 0x530, Size: 0x4]
	float RayTracingWaterCausticsRefractiveIntensity;//[Offset: 0x534, Size: 0x4]
	float RayTracingWaterCausticsRefractedRayTMax;//[Offset: 0x538, Size: 0x4]
	float RayTracingWaterCausticsRefractedRayTMin;//[Offset: 0x53c, Size: 0x4]
	float RayTracingWaterCausticsFresnelBaseReflectFraction;//[Offset: 0x540, Size: 0x4]
	float RayTracingWaterCausticsReflectBackFaceCullingThreshold;//[Offset: 0x544, Size: 0x4]
	float RayTracingWaterCausticsRefractBackFaceCullingThreshold;//[Offset: 0x548, Size: 0x4]
	float ColorGradingIntensity;//[Offset: 0x54c, Size: 0x4]
	Texture* ColorGradingLUT;//[Offset: 0x550, Size: 0x8]
	float DepthOfFieldSensorWidth;//[Offset: 0x558, Size: 0x4]
	float DepthOfFieldFocalDistance;//[Offset: 0x55c, Size: 0x4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x560, Size: 0x4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x564, Size: 0x4]
	float DepthOfFieldFocalRegion;//[Offset: 0x568, Size: 0x4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x56c, Size: 0x4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x570, Size: 0x4]
	float DepthOfFieldScale;//[Offset: 0x574, Size: 0x4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x578, Size: 0x4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x57c, Size: 0x4]
	float DepthOfFieldOcclusion;//[Offset: 0x580, Size: 0x4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x584, Size: 0x4]
	float DepthOfFieldVignetteSize;//[Offset: 0x588, Size: 0x4]
	float MotionBlurAmount;//[Offset: 0x58c, Size: 0x4]
	float MotionBlurMax;//[Offset: 0x590, Size: 0x4]
	int MotionBlurTargetFPS;//[Offset: 0x594, Size: 0x4]
	float MotionBlurPerObjectSize;//[Offset: 0x598, Size: 0x4]
	float LPVIntensity;//[Offset: 0x59c, Size: 0x4]
	float LPVVplInjectionBias;//[Offset: 0x5a0, Size: 0x4]
	float LPVSize;//[Offset: 0x5a4, Size: 0x4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x5a8, Size: 0x4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x5ac, Size: 0x4]
	float LPVGeometryVolumeBias;//[Offset: 0x5b0, Size: 0x4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x5b4, Size: 0x4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x5b8, Size: 0x4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x5bc, Size: 0x4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x5c0, Size: 0x4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x5c4, Size: 0x4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x5c8, Size: 0x4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x5cc, Size: 0x4]
	enum ReflectionsType;//[Offset: 0x5d0, Size: 0x1]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x5d4, Size: 0x4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x5d8, Size: 0x4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x5dc, Size: 0x4]
	Vector ScreenSpaceReflectionViewOffset;//[Offset: 0x5e0, Size: 0xc]
	bool ScreenSpaceReflectionForUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5ec, Size: 0x1]
	float RayTracingReflectionsMaxRoughness;//[Offset: 0x5f0, Size: 0x4]
	int RayTracingReflectionsMaxBounces;//[Offset: 0x5f4, Size: 0x4]
	int RayTracingReflectionsSamplesPerPixel;//[Offset: 0x5f8, Size: 0x4]
	enum RayTracingReflectionsShadows;//[Offset: 0x5fc, Size: 0x1]
	bool RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5fd, Size: 0x1]
	enum TranslucencyType;//[Offset: 0x5fe, Size: 0x1]
	float RayTracingTranslucencyMaxRoughness;//[Offset: 0x600, Size: 0x4]
	int RayTracingTranslucencyRefractionRays;//[Offset: 0x604, Size: 0x4]
	int RayTracingTranslucencySamplesPerPixel;//[Offset: 0x608, Size: 0x4]
	enum RayTracingTranslucencyShadows;//[Offset: 0x60c, Size: 0x1]
	bool RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60d, Size: 0x1]
	int PathTracingMaxBounces;//[Offset: 0x610, Size: 0x4]
	int PathTracingSamplesPerPixel;//[Offset: 0x614, Size: 0x4]
	float LPVFadeRange;//[Offset: 0x618, Size: 0x4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x61c, Size: 0x4]
	float ScreenPercentage;//[Offset: 0x620, Size: 0x4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x628, Size: 0x10]

--------------------------------
Class: TextureCube.Texture.StreamableRenderAsset.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 0x4]
	Object* Object;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 0x8]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 0x8]
	float PlayRate;//[Offset: 0x50, Size: 0x4]
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 0x8]
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 0x8]
	byte PlaySpace;//[Offset: 0x78, Size: 0x1]
	void Stop(bool bImmediate);// 0x4b6b430
	void SetScale(float NewDuration);// 0x4b6b320
	void SetDuration(float NewDuration);// 0x4b6afa0

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 0x8]
	Actor* GroupActor;//[Offset: 0x30, Size: 0x8]
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 0x18]
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 0x18]
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 0x10]
	FName LookAtGroupName;//[Offset: 0xb0, Size: 0x8]
	float LinCurveTension;//[Offset: 0xb8, Size: 0x4]
	float AngCurveTension;//[Offset: 0xbc, Size: 0x4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1]
	byte RotMode;//[Offset: 0xc4, Size: 0x1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 0x4]
	Vector OutVal;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	byte InterpMode;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 0xc]
	Rotator ResetRotation;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	float FOV;//[Offset: 0x18, Size: 0x4]
	float DesiredFOV;//[Offset: 0x1c, Size: 0x4]
	float OrthoWidth;//[Offset: 0x20, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x24, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x28, Size: 0x4]
	float AspectRatio;//[Offset: 0x2c, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x34, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x38, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x640]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x680, Size: 0x8]

--------------------------------
Class: CameraShakeSourceComponent.SceneComponent.ActorComponent.Object
	enum Attenuation;//[Offset: 0x3a8, Size: 0x1]
	float InnerAttenuationRadius;//[Offset: 0x3ac, Size: 0x4]
	float OuterAttenuationRadius;//[Offset: 0x3b0, Size: 0x4]
	class CameraShake* CameraShake;//[Offset: 0x3b8, Size: 0x8]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 0x1]
	void StopAllCameraShakes(bool bImmediately);// 0x4b73b70
	void PlayCameraShake(class CameraShake InCameraShake);// 0x4b721b0
	void Play();// 0x4b72080
	float GetAttenuationFactor(out const Vector Location);// 0x4b6fe30

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	byte Priority;//[Offset: 0x2c, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 0x8]
	float AlphaInTime;//[Offset: 0x38, Size: 0x4]
	float AlphaOutTime;//[Offset: 0x3c, Size: 0x4]
	float Alpha;//[Offset: 0x40, Size: 0x4]
	bool IsDisabled();// 0x106f800
	Actor* GetViewTarget();// 0x188cba0
	void EnableModifier();// 0x2875920
	void DisableModifier(bool bImmediate);// 0x290adf0
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x305c9c0
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x305c9c0

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x338, Size: 0x8]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x340, Size: 0x8]
	PlayerCameraManager* BaseCamera;//[Offset: 0x348, Size: 0x8]
	Transform RelativeTransform;//[Offset: 0x350, Size: 0x30]
	float BaseFOV;//[Offset: 0x380, Size: 0x4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x384, Size: 0x1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x384, Size: 0x1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x388, Size: 0x10]
	float DistFromCamera;//[Offset: 0x398, Size: 0x4]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x2e8, Size: 0x8]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f0, Size: 0x1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f0, Size: 0x1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f0, Size: 0x1]
	delegate OnParticleSpawn;//[Offset: 0x2f8, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x308, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x318, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x328, Size: 0x10]
	void ToggleActive();// 0x4b87ec0
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x4b87df0
	void SetTemplate(ParticleSystem* NewTemplate);// 0xbb6750
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x4b87d30
	void SetFloatParameter(FName ParameterName, float Param);// 0x4b87c60
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x4b87b90
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x4b87ad0
	void OnRep_bCurrentlyActive();// 0xbb6730
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x4b87a40
	bool IsActive();// 0x4b87a10
	void Deactivate();// 0x4b879f0
	void Activate();// 0x4b879d0

--------------------------------
Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x670, Size: 0x8]
	ParticleEffectType* OverriddenEffectType;//[Offset: 0x678, Size: 0x8]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x680, Size: 0x10]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x690, Size: 0x10]
	bool bRenderAfterDLSS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6a1, Size: 0x1]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6a1, Size: 0x1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6a1, Size: 0x1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6a1, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6a1, Size: 0x1]
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6a1, Size: 0x1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6a2, Size: 0x1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6a2, Size: 0x1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6a2, Size: 0x1]
	byte LODMethod;//[Offset: 0x6ad, Size: 0x1]
	enum RequiredSignificance;//[Offset: 0x6ae, Size: 0x1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x6b0, Size: 0x10]
	delegate OnParticleSpawn;//[Offset: 0x6c0, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x6d0, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x6e0, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x6f0, Size: 0x10]
	bool bOldPositionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x700, Size: 0x1]
	Vector OldPosition;//[Offset: 0x704, Size: 0xc]
	Vector PartSysVelocity;//[Offset: 0x710, Size: 0xc]
	float WarmupTime;//[Offset: 0x71c, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x720, Size: 0x4]
	float SecondsBeforeInactive;//[Offset: 0x728, Size: 0x4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x730, Size: 0x4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x750, Size: 0x10]
	float CustomTimeDilation;//[Offset: 0x768, Size: 0x4]
	SceneComponent* AutoAttachParent;//[Offset: 0x7c0, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x7c8, Size: 0x8]
	enum AutoAttachLocationRule;//[Offset: 0x7d0, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x7d1, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x7d2, Size: 0x1]
	delegate OnSystemFinished;//[Offset: 0x800, Size: 0x10]
	float FadeOutCountDown;//[Offset: 0x888, Size: 0x4]
	bool bRequireDFAO;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8a0, Size: 0x1]
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x4c572e0
	void SetTemplate(ParticleSystem* NewTemplate);// 0x4c57260
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x4c571a0
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x4c56c80
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x4c56b80
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x4c56a70
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x4c56960
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x4c56860
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x4c56750
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x4c56680
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x4c563e0
	int GetNumActiveParticles();// 0x4c562c0
	MaterialInterface* GetNamedMaterial(FName InName);// 0x4c56220
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x4c560e0
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x4c55fc0
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x4c55eb0
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x4c55da0
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x4c55c80
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x4c55b70
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x4c55a90
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x4c558e0
	void FadeOut();// 0x4c558c0
	void EndTrails();// 0x4c558a0
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x4c557d0
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x4c555f0

--------------------------------
Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x4c574c0
	void SetUseAutoManageAttachment(bool bAutoManage);// 0x4c57430
	void SetIntParameter(FName ParameterName, int Param);// 0x4c570d0
	void SetFloatParameter(FName ParameterName, float Param);// 0x4c57000
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x4c56f30
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x4c56e60
	void SetBoolParameter(FName ParameterName, bool Param);// 0x4c56d90
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x4c56500
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x4c56310
	void ReleaseToPool();// 0x4c562f0
	FXSystemAsset* GetFXSystemAsset();// 0x4c561f0

--------------------------------
Class: ParticleSystem.FXSystemAsset.Object
	bool bShouldIgnorePrimitiveManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	float InvisibleDistance;//[Offset: 0x34, Size: 0x4]
	bool bDisableTickForLoopWhenHideInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bEnableDynamicSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	float UpdateTime_FPS;//[Offset: 0x3c, Size: 0x4]
	float UpdateTime_Delta;//[Offset: 0x40, Size: 0x4]
	float WarmupTime;//[Offset: 0x44, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x48, Size: 0x4]
	ParticleEmitter*[] Emitters;//[Offset: 0x50, Size: 0x10]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x60, Size: 0x8]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x68, Size: 0x8]
	float LODDistanceCheckTime;//[Offset: 0x70, Size: 0x4]
	float MacroUVRadius;//[Offset: 0x74, Size: 0x4]
	float[] LODDistances;//[Offset: 0x78, Size: 0x10]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x88, Size: 0x10]
	Box FixedRelativeBoundingBox;//[Offset: 0x98, Size: 0x1c]
	float SecondsBeforeInactive;//[Offset: 0xb4, Size: 0x4]
	float Delay;//[Offset: 0xb8, Size: 0x4]
	float DelayLow;//[Offset: 0xbc, Size: 0x4]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc1, Size: 0x1]
	bool bAllowManagedTicking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc1, Size: 0x1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc1, Size: 0x1]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc1, Size: 0x1]
	byte SystemUpdateMode;//[Offset: 0xc2, Size: 0x1]
	byte LODMethod;//[Offset: 0xc3, Size: 0x1]
	enum InsignificantReaction;//[Offset: 0xc4, Size: 0x1]
	byte OcclusionBoundsMethod;//[Offset: 0xc5, Size: 0x1]
	ParticleEffectType* EffectType;//[Offset: 0xc8, Size: 0x8]
	enum MaxSignificanceLevel;//[Offset: 0xd1, Size: 0x1]
	UInt32Property MinTimeBetweenTicks;//[Size: 0x4]
	float InsignificanceDelay;//[Offset: 0xd8, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xdc, Size: 0xc]
	Box CustomOcclusionBounds;//[Offset: 0xe8, Size: 0x1c]
	LODSoloTrack[] SoloTracking;//[Offset: 0x108, Size: 0x10]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0x118, Size: 0x10]
	bool ContainsEmitterType(class Object typeData);// 0x4c55740

--------------------------------
Class: FXSystemAsset.Object
	UInt32Property MaxPoolSize;//[Size: 0x4]
	UInt32Property PoolPrimeSize;//[Size: 0x4]

--------------------------------
Class: ParticleEmitter.Object
	float InteractiveFieldAffectStrength;//[Offset: 0x28, Size: 0x4]
	FName EmitterName;//[Offset: 0x2c, Size: 0x8]
	int SubUVDataOffset;//[Offset: 0x34, Size: 0x4]
	byte EmitterRenderMode;//[Offset: 0x38, Size: 0x1]
	enum SignificanceLevel;//[Offset: 0x39, Size: 0x1]
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b, Size: 0x1]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3b, Size: 0x1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3b, Size: 0x1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3b, Size: 0x1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3b, Size: 0x1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x40, Size: 0x10]
	int PeakActiveParticles;//[Offset: 0x50, Size: 0x4]
	int InitialAllocationCount;//[Offset: 0x54, Size: 0x4]
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 0x4]
	UInt32Property DetailModeBitmask;//[Size: 0x4]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 0x8]
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 0x10]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 0x8]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 0x8]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 0x8]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 0x10]
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 0x10]
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 0x10]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 0x10]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 0x10]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	int PeakActiveParticles;//[Offset: 0xb4, Size: 0x4]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 0x8]
	float MinFacingCameraBlendDistance;//[Offset: 0x38, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x3c, Size: 0x4]
	Vector EmitterOrigin;//[Offset: 0x40, Size: 0xc]
	Rotator EmitterRotation;//[Offset: 0x4c, Size: 0xc]
	byte ScreenAlignment;//[Offset: 0x58, Size: 0x1]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	byte SortMode;//[Offset: 0x5a, Size: 0x1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1]
	float EmitterDuration;//[Offset: 0x5c, Size: 0x4]
	RawDistributionFloat SpawnRate;//[Offset: 0x60, Size: 0x30]
	ParticleBurst[] BurstList;//[Offset: 0x90, Size: 0x10]
	float EmitterDelay;//[Offset: 0xa0, Size: 0x4]
	float EmitterDelayLow;//[Offset: 0xa4, Size: 0x4]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	byte InterpolationMethod;//[Offset: 0xa9, Size: 0x1]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa, Size: 0x1]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaa, Size: 0x1]
	byte ParticleBurstMethod;//[Offset: 0xab, Size: 0x1]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1]
	byte OpacitySourceMode;//[Offset: 0xad, Size: 0x1]
	byte EmitterNormalsMode;//[Offset: 0xae, Size: 0x1]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaf, Size: 0x1]
	int SubImages_Horizontal;//[Offset: 0xb0, Size: 0x4]
	int SubImages_Vertical;//[Offset: 0xb4, Size: 0x4]
	float RandomImageTime;//[Offset: 0xb8, Size: 0x4]
	int RandomImageChanges;//[Offset: 0xbc, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 0xc]
	float MacroUVRadius;//[Offset: 0xcc, Size: 0x4]
	enum UVFlippingMode;//[Offset: 0xd0, Size: 0x1]
	byte BoundingMode;//[Offset: 0xd1, Size: 0x1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd2, Size: 0x1]
	Vector NormalsSphereCenter;//[Offset: 0xd4, Size: 0xc]
	float AlphaThreshold;//[Offset: 0xe0, Size: 0x4]
	int EmitterLoops;//[Offset: 0xe4, Size: 0x4]
	Texture2D* CutoutTexture;//[Offset: 0xe8, Size: 0x8]
	int MaxDrawCount;//[Offset: 0xf0, Size: 0x4]
	float EmitterDurationLow;//[Offset: 0xf4, Size: 0x4]
	Vector NormalsCylinderDirection;//[Offset: 0xf8, Size: 0xc]
	FName[] NamedMaterialOverrides;//[Offset: 0x108, Size: 0x10]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1]
	byte LODValidity;//[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4]
	float MaxValue;//[Offset: 0x24, Size: 0x4]
	DistributionFloat* Distribution;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x20]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: DistributionLookupTable
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	float TimeBias;//[Offset: 0x4, Size: 0x4]
	float[] Values;//[Offset: 0x8, Size: 0x10]
	byte Op;//[Offset: 0x18, Size: 0x1]
	byte EntryCount;//[Offset: 0x19, Size: 0x1]
	byte EntryStride;//[Offset: 0x1a, Size: 0x1]
	byte SubEntryStride;//[Offset: 0x1b, Size: 0x1]
	byte LockFlag;//[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 0x4]
	int CountLow;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x38, Size: 0x30]
	RawDistributionFloat RateScale;//[Offset: 0x68, Size: 0x30]
	byte ParticleBurstMethod;//[Offset: 0x98, Size: 0x1]
	ParticleBurst[] BurstList;//[Offset: 0xa0, Size: 0x10]
	RawDistributionFloat BurstScale;//[Offset: 0xb0, Size: 0x30]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 0x1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bBurstGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Frequency;//[Offset: 0x4, Size: 0x4]
	int ParticleFrequency;//[Offset: 0x8, Size: 0x4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	FName CustomName;//[Offset: 0x10, Size: 0x8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x38, Size: 0x1]
	RawDistributionVector OffsetAmount;//[Offset: 0x40, Size: 0x48]
	OrbitOptions OffsetOptions;//[Offset: 0x88, Size: 0x4]
	RawDistributionVector RotationAmount;//[Offset: 0x90, Size: 0x48]
	OrbitOptions RotationOptions;//[Offset: 0xd8, Size: 0x4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xe0, Size: 0x48]
	OrbitOptions RotationRateOptions;//[Offset: 0x128, Size: 0x4]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4]
	float MaxValue;//[Offset: 0x24, Size: 0x4]
	Vector MinValueVec;//[Offset: 0x28, Size: 0xc]
	Vector MaxValueVec;//[Offset: 0x34, Size: 0xc]
	DistributionVector* Distribution;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x30, Size: 0x1]
	FName EventName;//[Offset: 0x34, Size: 0x8]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 0x10]
	int ActiveTab;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 0x10]
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 0x10]
	float ViewStartInput;//[Offset: 0x20, Size: 0x4]
	float ViewEndInput;//[Offset: 0x24, Size: 0x4]
	float ViewStartOutput;//[Offset: 0x28, Size: 0x4]
	float ViewEndOutput;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 0x8]
	Color CurveColor;//[Offset: 0x8, Size: 0x4]
	FString CurveName;//[Offset: 0x10, Size: 0x10]
	int bHideCurve;//[Offset: 0x20, Size: 0x4]
	int bColorCurve;//[Offset: 0x24, Size: 0x4]
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 0x4]
	int bClamp;//[Offset: 0x2c, Size: 0x4]
	float ClampLow;//[Offset: 0x30, Size: 0x4]
	float ClampHigh;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: ParticleEffectType.Object
	bool bCullByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bCullByMaxTimeWithoutRender;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	float MaxTickDistance;//[Offset: 0x2c, Size: 0x4]
	float MaxTimeWithoutRender;//[Offset: 0x30, Size: 0x4]
	float MaxTimeWithoutTick;//[Offset: 0x34, Size: 0x4]
	bool bHighPriorityForGlobalBudget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte ParamType;//[Offset: 0x8, Size: 0x1]
	float Scalar;//[Offset: 0xc, Size: 0x4]
	float Scalar_Low;//[Offset: 0x10, Size: 0x4]
	Vector Vector;//[Offset: 0x14, Size: 0xc]
	Vector Vector_Low;//[Offset: 0x20, Size: 0xc]
	Color Color;//[Offset: 0x2c, Size: 0x4]
	Actor* Actor;//[Offset: 0x30, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: CameraCacheEntry
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x6d0]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x6d0]
	PlayerState* PlayerState;//[Offset: 0x6e0, Size: 0x8]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	ActiveCameraShakeInfo[] ActiveShakes;//[Offset: 0x48, Size: 0x10]
	<class CameraShake,PooledCameraShakes> ExpiredPooledShakesMap;//[Offset: 0x58, Size: 0x50]
	float SplitScreenShakeScale;//[Offset: 0xa8, Size: 0x4]
	void RemoveCameraShakesByType(int InType, bool bImmediately);// 0x4b6ace0

--------------------------------
Class: ActiveCameraShakeInfo
	CameraShake* ShakeInstance;//[Offset: 0x0, Size: 0x8]
	CameraShakeSourceComponent* ShakeSource;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: PooledCameraShakes
	CameraShake*[] PooledShakes;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x2e8, Size: 0x1]
	CameraComponent* CameraComponent;//[Offset: 0x2f0, Size: 0x8]
	SceneComponent* SceneComponent;//[Offset: 0x2f8, Size: 0x8]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x308, Size: 0x1]
	float AspectRatio;//[Offset: 0x30c, Size: 0x4]
	float FOVAngle;//[Offset: 0x310, Size: 0x4]
	float PostProcessBlendWeight;//[Offset: 0x314, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x320, Size: 0x640]
	int GetAutoActivatePlayerIndex();// 0x4b6a980

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x3a8, Size: 0x4]
	float OrthoWidth;//[Offset: 0x3ac, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x3b0, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x3b4, Size: 0x4]
	float AspectRatio;//[Offset: 0x3b8, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3bc, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3bc, Size: 0x1]
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3bc, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3bc, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x3bd, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x3f0, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x420, Size: 0x640]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x4b6b3a0
	void SetProjectionMode(byte InProjectionMode);// 0x4b6b2a0
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x4b6b220
	void SetOrthoWidth(float InOrthoWidth);// 0x4b6b1a0
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x4b6b120
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x4b6b0a0
	void SetFieldOfView(float InFieldOfView);// 0x4b6b020
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x4b6af10
	void SetAspectRatio(float InAspectRatio);// 0x4b6adb0
	void RemoveBlendable(interface class InBlendableObject);// 0x4b6abb0
	void OnCameraMeshHiddenChanged();// 0xae2270
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x4b6a9b0
	void AddOrUpdateBlendable(interface class InBlendableObject, float InWeight);// 0x4b6a830

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 0x8]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 0x8]
	void Walk();// 0x2875c10
	void ViewSelf();// 0x260b450
	void ViewPlayer(FString S);// 0x4b7a0f0
	void ViewClass(class Actor DesiredClass);// 0x4b370b0
	void ViewActor(FName ActorName);// 0x2928f70
	void UpdateSafeArea();// 0x4b7a0d0
	void ToggleServerStatReplicatorUpdateStatNet();// 0x4b7a0b0
	void ToggleServerStatReplicatorClientOverwrite();// 0x4b7a090
	void ToggleDebugCamera();// 0x4b7a070
	void ToggleAILogging();// 0x4b7a050
	void TestCollisionDistance();// 0x4b7a030
	void TeleportTo(float LocX, float LocY, float LocZ, float RotPitch, float RotYaw, float RotRoll, bool UsingCurControllerPawn);// 0x4b79e10
	void Teleport();// 0x188d0c0
	void Summon(FString ClassName);// 0x4b79d70
	void StreamLevelOut(FName PackageName);// 0x2862a60
	void StreamLevelIn(FName PackageName);// 0x4b79ce0
	void SpawnServerStatReplicator();// 0x4b79cc0
	void Slomo(float NewTimeDilation);// 0x4b79c40
	void SetWorldOrigin();// 0x4b79c20
	void SetMouseSensitivityToDefault();// 0xcbe100
	void ServerToggleAILogging();// 0x4b79b40
	void RotateDebugCamera(float InPitch, float InYaw, float InRoll);// 0x4b79a30
	void ReceiveInitCheatManager();// 0x305c9c0
	void ReceiveEndPlay();// 0x305c9c0
	void PlayersOnly();// 0x260b410
	void OnlyLoadLevel(FName PackageName);// 0x4b799a0
	void LogLoc();// 0x4b79980
	void InvertMouse();// 0x4b79960
	void God();// 0xcac2b0
	void Ghost();// 0x2875920
	void FreezeFrame(float Delay);// 0x4b798e0
	void Fly();// 0x2875ed0
	void FlushLog();// 0x27bbeb0
	void EnableOrthoDebugCameraView(float WorldX, float WorldY, float WorldZOffset, float WorldWidth);// 0x4b79790
	void EnableDebugCamera();// 0x27bc740
	void DumpVoiceMutingState();// 0x4b79770
	void DumpPartyState();// 0x4b79750
	void DumpOnlineSessionState();// 0x4b79730
	void DumpChatState();// 0x4b79710
	void DisableOrthoDebugCameraView();// 0x4b796f0
	void DisableDebugCamera();// 0x27bb600
	void DestroyTarget();// 0xb04eb0
	void DestroyServerStatReplicator();// 0x4b796d0
	void DestroyPawns(class Pawn AClass);// 0x4b79640
	void DestroyAllPawnsExceptTarget();// 0x4b79620
	void DestroyAll(class Actor AClass);// 0x4b79590
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x4b794c0
	void DebugCapsuleSweepPawn();// 0x27426d0
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x4b79430
	void DebugCapsuleSweepClear();// 0x264d260
	void DebugCapsuleSweepChannel(byte Channel);// 0x4b793b0
	void DebugCapsuleSweepCapture();// 0x273dba0
	void DebugCapsuleSweep();// 0x2739690
	void DamageTarget(float DamageAmount);// 0x28dd610
	void CheatScript(FString ScriptName);// 0x4b792d0
	void ChangeSize(float F);// 0x4b79250
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x4b79090
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x4b78ec0
	void BugIt(FString ScreenShotDescription);// 0x4b78e20

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x660, Size: 0x1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x660, Size: 0x1]
	bool bIsOrbitingSelectedActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x660, Size: 0x1]
	bool bOrbitPivotUseCenter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x660, Size: 0x1]
	bool bEnableBufferVisualization;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x660, Size: 0x1]
	bool bEnableBufferVisualizationFullMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x660, Size: 0x1]
	bool bIsBufferVisualizationInputSetup;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x660, Size: 0x1]
	bool bLastDisplayEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x660, Size: 0x1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x668, Size: 0x8]
	byte SelectActorCollisionChannel;//[Offset: 0x670, Size: 0x1]
	Actor* SelectedActor;//[Offset: 0x678, Size: 0x8]
	PrimitiveComponent* SelectedComponent;//[Offset: 0x680, Size: 0x8]
	HitResult SelectedHitPoint;//[Offset: 0x688, Size: 0x88]
	PlayerController* OriginalControllerRef;//[Offset: 0x710, Size: 0x8]
	Player* OriginalPlayer;//[Offset: 0x718, Size: 0x8]
	float SpeedScale;//[Offset: 0x720, Size: 0x4]
	float InitialMaxSpeed;//[Offset: 0x724, Size: 0x4]
	float InitialAccel;//[Offset: 0x728, Size: 0x4]
	float InitialDecel;//[Offset: 0x72c, Size: 0x4]
	void ToggleDisplay();// 0x4b804e0
	void ShowDebugSelectedInfo();// 0x26b50f0
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x4b80440
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x305c9c0
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x305c9c0
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x305c9c0
	Actor* GetSelectedActor();// 0x4b80340

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x670, Size: 0x4]
	float FrustumAngle;//[Offset: 0x674, Size: 0x4]
	float FrustumAspectRatio;//[Offset: 0x678, Size: 0x4]
	float FrustumStartDist;//[Offset: 0x67c, Size: 0x4]
	float FrustumEndDist;//[Offset: 0x680, Size: 0x4]
	Texture* Texture;//[Offset: 0x688, Size: 0x8]

--------------------------------
Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0x120, Size: 0x10]
	FName[] InvertedAxis;//[Offset: 0x160, Size: 0x10]
	void SetMouseSensitivity(const float Sensitivity);// 0x4c70570
	void SetBind(FName BindName, FString Command);// 0x2cfbf50
	void InvertAxisKey(const Key AxisKey);// 0x4c6fdf0
	void InvertAxis(const FName AxisName);// 0x4c6fd70
	void ClearSmoothing();// 0x4c6f8e0

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 0x18]
	FString Command;//[Offset: 0x18, Size: 0x10]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x118, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x128, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x138, Size: 0x28]
	delegate ForegroundColorDelegate;//[Offset: 0x160, Size: 0x10]
	Margin Padding;//[Offset: 0x170, Size: 0x10]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x180, Size: 0x10]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x190, Size: 0x10]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x1a0, Size: 0x10]
	WidgetTree* WidgetTree;//[Offset: 0x1b0, Size: 0x8]
	int Priority;//[Offset: 0x1b8, Size: 0x4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1bc, Size: 0x1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1bc, Size: 0x1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1bc, Size: 0x1]
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1bc, Size: 0x1]
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1bc, Size: 0x1]
	bool bCookedWidgetTree;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1bc, Size: 0x1]
	enum TickFrequency;//[Offset: 0x1c8, Size: 0x1]
	InputComponent* InputComponent;//[Offset: 0x1d0, Size: 0x8]
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x1d8, Size: 0x10]
	void UnregisterInputComponent();// 0x4162d60
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x4162c80
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x4162ba0
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0x4162b20
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0x4162aa0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x305c9c0
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x41629e0
	void StopListeningForAllInputActions();// 0x41629c0
	void StopAnimationsAndLatentActions();// 0x41629a0
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x4162920
	void StopAllAnimations();// 0x4162900
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x4162630
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x4162560
	void SetPadding(Margin InPadding);// 0x41624d0
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x4162450
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x4162390
	void SetInputActionPriority(int NewPriority);// 0x4162140
	void SetInputActionBlocking(bool bShouldBlock);// 0x41620b0
	void SetForegroundColor(SlateColor InForegroundColor);// 0x4161f40
	void SetDesiredSizeInViewport(Vector2D Size);// 0x4161dc0
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x4161cc0
	void SetAnchorsInViewport(Anchors Anchors);// 0x4161c30
	void SetAlignmentInViewport(Vector2D Alignment);// 0x4161bb0
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x4161b30
	void RemoveFromViewport();// 0x1086080
	void RegisterInputComponent();// 0x4161b10
	void PreConstruct(bool IsDesignTime);// 0x305c9c0
	void PlaySound(SoundBase* SoundToPlay);// 0x4161a90
	UMGSequencePlayer* PlayAnimationTimeRange(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x41618a0
	UMGSequencePlayer* PlayAnimationReverse(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x4161790
	UMGSequencePlayer* PlayAnimationForward(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x4161680
	UMGSequencePlayer* PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x41614c0
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x4161420
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x305c9c0
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x305c9c0
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x305c9c0
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x305c9c0
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x305c9c0
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x305c9c0
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x305c9c0
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x305c9c0
	void OnPaint(out PaintContext Context);// 0x305c9c0
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x305c9c0
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x305c9c0
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x305c9c0
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x305c9c0
	void OnMouseCaptureLost();// 0x305c9c0
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x305c9c0
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x305c9c0
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x305c9c0
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x305c9c0
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x305c9c0
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x305c9c0
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x305c9c0
	void OnInitialized();// 0x305c9c0
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x305c9c0
	void OnFocusLost(FocusEvent InFocusEvent);// 0x305c9c0
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x305c9c0
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x305c9c0
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x305c9c0
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x305c9c0
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x305c9c0
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x305c9c0
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x4161390
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x4161300
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x305c9c0
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x305c9c0
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x4161180
	bool IsPlayingAnimation();// 0x4161150
	bool IsListeningForInputAction(FName ActionName);// 0x41610c0
	bool IsInViewport();// 0x4160ef0
	bool IsInteractable();// 0x305c9c0
	bool IsAnyAnimationPlaying();// 0x4161090
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x4161000
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x4160f70
	Pawn* GetOwningPlayerPawn();// 0x4160f20
	bool GetIsVisible();// 0x4160ef0
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x4160e50
	Anchors GetAnchorsInViewport();// 0x4160e10
	Vector2D GetAlignmentInViewport();// 0x4160dd0
	void Destruct();// 0x305c9c0
	void Construct();// 0x305c9c0
	void CancelLatentActions();// 0x4160d70
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x4160c90
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x4160bb0
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0x4160a40
	void ApplyAnimEdgeState(WidgetAnimation* InAnimation, bool bInStartEdge);// 0x4160970
	void AddToViewport(int ZOrder);// 0x41608f0
	bool AddToPlayerScreen(int ZOrder);// 0x4160860

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 0x8]
	PanelWidget* CachedParent;//[Offset: 0x30, Size: 0x8]
	delegate bIsEnabledDelegate;//[Offset: 0x38, Size: 0x10]
	FText ToolTipText;//[Offset: 0x48, Size: 0x18]
	delegate ToolTipTextDelegate;//[Offset: 0x60, Size: 0x10]
	Widget* ToolTipWidget;//[Offset: 0x70, Size: 0x8]
	delegate ToolTipWidgetDelegate;//[Offset: 0x78, Size: 0x10]
	delegate VisibilityDelegate;//[Offset: 0x88, Size: 0x10]
	WidgetTransform RenderTransform;//[Offset: 0x98, Size: 0x1c]
	Vector2D RenderTransformPivot;//[Offset: 0xb4, Size: 0x8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 0x1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 0x1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbc, Size: 0x1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xbc, Size: 0x1]
	SlateAccessibleWidgetData* AccessibleWidgetData;//[Offset: 0xc0, Size: 0x8]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1]
	byte Cursor;//[Offset: 0xc9, Size: 0x1]
	enum Clipping;//[Offset: 0xca, Size: 0x1]
	enum Visibility;//[Offset: 0xcb, Size: 0x1]
	float RenderOpacity;//[Offset: 0xcc, Size: 0x4]
	WidgetNavigation* Navigation;//[Offset: 0xd0, Size: 0x8]
	enum FlowDirectionPreference;//[Offset: 0xd8, Size: 0x1]
	PropertyBinding*[] NativeBindings;//[Offset: 0x100, Size: 0x10]
	void SetVisibility(enum InVisibility);// 0x4166430
	void SetUserFocus(PlayerController* PlayerController);// 0x4166210
	void SetToolTipText(out const FText InToolTipText);// 0x4166140
	void SetToolTip(Widget* Widget);// 0x41660c0
	void SetRenderTranslation(Vector2D Translation);// 0x4165fb0
	void SetRenderTransformPivot(Vector2D Pivot);// 0x4165f30
	void SetRenderTransformAngle(float Angle);// 0x4165eb0
	void SetRenderTransform(WidgetTransform InTransform);// 0x4165dd0
	void SetRenderShear(Vector2D Shear);// 0x4165d50
	void SetRenderScale(Vector2D Scale);// 0x4165cd0
	void SetRenderOpacity(float InOpacity);// 0x4165c50
	void SetNavigationRuleExplicit(enum Direction, Widget* InWidget);// 0x4165b00
	void SetNavigationRuleCustomBoundary(enum Direction, delegate InCustomDelegate);// 0x4165a20
	void SetNavigationRuleCustom(enum Direction, delegate InCustomDelegate);// 0x4165940
	void SetNavigationRuleBase(enum Direction, enum Rule);// 0x4165880
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x4165770
	void SetKeyboardFocus();// 0x4165750
	void SetIsEnabled(bool bInIsEnabled);// 0x41656c0
	void SetFocus();// 0x4165620
	void SetCursor(byte InCursor);// 0x41655a0
	void SetClipping(enum InClipping);// 0x4165520
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x4165460
	void ResetCursor();// 0x4165440
	void RemoveFromParent();// 0x2875ed0
	EventReply OnReply__DelegateSignature();// 0x305c9c0
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x305c9c0
	bool IsVisible();// 0x4165410
	bool IsHovered();// 0x3d09cc0
	bool IsDirectlyHovered();// 0x106f800
	void InvalidateLayoutAndVolatility();// 0x41653f0
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x4165360
	bool HasUserFocus(PlayerController* PlayerController);// 0x41652d0
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0x4165210
	bool HasMouseCapture();// 0x41651e0
	bool HasKeyboardFocus();// 0x41651b0
	bool HasFocusedDescendants();// 0x4165180
	bool HasAnyUserFocus();// 0x4165150
	Widget* GetWidget__DelegateSignature();// 0x305c9c0
	enum GetVisibility();// 0x4165120
	Geometry GetTickSpaceGeometry();// 0x4165000
	FText GetText__DelegateSignature();// 0x305c9c0
	enum GetSlateVisibility__DelegateSignature();// 0x305c9c0
	SlateColor GetSlateColor__DelegateSignature();// 0x305c9c0
	SlateBrush GetSlateBrush__DelegateSignature();// 0x305c9c0
	float GetRenderTransformAngle();// 0x4164fa0
	float GetRenderOpacity();// 0x4164f70
	PanelWidget* GetParent();// 0x4164f40
	Geometry GetPaintSpaceGeometry();// 0x4164f00
	PlayerController* GetOwningPlayer();// 0x4164ed0
	LocalPlayer* GetOwningLocalPlayer();// 0x4164ea0
	byte GetMouseCursor__DelegateSignature();// 0x305c9c0
	LinearColor GetLinearColor__DelegateSignature();// 0x305c9c0
	bool GetIsEnabled();// 0x4164e70
	int GetInt32__DelegateSignature();// 0x305c9c0
	GameInstance* GetGameInstance();// 0x4164e40
	float GetFloat__DelegateSignature();// 0x305c9c0
	Vector2D GetDesiredSize();// 0x4164dd0
	enum GetClipping();// 0x4164da0
	enum GetCheckBoxState__DelegateSignature();// 0x305c9c0
	Geometry GetCachedGeometry();// 0x4164d60
	bool GetBool__DelegateSignature();// 0x305c9c0
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x305c9c0
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x305c9c0
	void ForceVolatile(bool bForce);// 0x4164cd0
	void ForceLayoutPrepass();// 0x4164cb0

--------------------------------
Class: Visual.Object

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 0x8]
	Widget* Content;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x110, Size: 0x10]
	Widget*[] CachedContents;//[Offset: 0x120, Size: 0x10]
	bool RemoveChildAt(int Index);// 0x4152150
	bool RemoveChild(Widget* Content);// 0x41520c0
	bool HasChild(Widget* Content);// 0x4151f40
	bool HasAnyChildren();// 0x4151f10
	int GetChildrenCount();// 0x4151bc0
	int GetChildIndex(const Widget* Content);// 0x4151b30
	Widget* GetChildAt(int Index);// 0x4151aa0
	Widget*[] GetAllChildren();// 0x4151a20
	void ClearChildren();// 0x28b2f90
	PanelSlot* AddChild(Widget* Content);// 0x4151850

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x350, Size: 0x10]
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	FString DisplayLabel;//[Offset: 0x368, Size: 0x10]
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x4166720
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x4166640
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0x41665c0
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0x4166540
	float GetStartTime();// 0x4164fd0
	float GetEndTime();// 0x4164e10
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x4164bd0
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x4164af0

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneEvaluationTemplate PrecompiledEvaluationTemplate;//[Offset: 0x50, Size: 0x2f0]
	enum DefaultCompletionMode;//[Offset: 0x340, Size: 0x1]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 0x1]
	bool bPlayableDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x342, Size: 0x1]
	MovieSceneObjectBindingID[] FindBindingsByTag(FName InBindingName);// 0x3fcdba0
	MovieSceneObjectBindingID FindBindingByTag(FName InBindingName);// 0x3fcdaf0

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 0x10]
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 0x10]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 0x10]
	<FName,MovieSceneObjectBindingIDs> BindingGroups;//[Offset: 0x80, Size: 0x50]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0xd0, Size: 0x10]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0xe0, Size: 0x8]
	MovieSceneFrameRange SelectionRange;//[Offset: 0xe8, Size: 0x10]
	MovieSceneFrameRange PlaybackRange;//[Offset: 0xf8, Size: 0x10]
	FrameRate TickResolution;//[Offset: 0x108, Size: 0x8]
	FrameRate DisplayRate;//[Offset: 0x110, Size: 0x8]
	enum EvaluationType;//[Offset: 0x118, Size: 0x1]
	enum ClockSource;//[Offset: 0x119, Size: 0x1]
	SoftObjectPath CustomClockSourcePath;//[Offset: 0x120, Size: 0x18]
	MovieSceneMarkedFrame[] MarkedFrames;//[Offset: 0x138, Size: 0x10]

--------------------------------
Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 0x30]
	FName[] Tags;//[Offset: 0x30, Size: 0x10]
	bool bContinuouslyRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	Guid Guid;//[Offset: 0x44, Size: 0x10]
	FString Name;//[Offset: 0x58, Size: 0x10]
	Object* ObjectTemplate;//[Offset: 0x68, Size: 0x8]
	Guid[] ChildPossessables;//[Offset: 0x70, Size: 0x10]
	enum Ownership;//[Offset: 0x80, Size: 0x1]
	FName LevelName;//[Offset: 0x84, Size: 0x8]

--------------------------------
Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 0x10]
	Guid Guid;//[Offset: 0x10, Size: 0x10]
	FString Name;//[Offset: 0x20, Size: 0x10]
	class Object* PossessedObjectClass;//[Offset: 0x30, Size: 0x8]
	Guid ParentGuid;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 0x10]
	FString BindingName;//[Offset: 0x10, Size: 0x10]
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x4]
	bool bIsEvalDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: MovieSceneObjectBindingIDs
	MovieSceneObjectBindingID[] IDs;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MovieSceneObjectBindingID
	int SequenceID;//[Offset: 0x0, Size: 0x4]
	enum Space;//[Offset: 0x4, Size: 0x1]
	Guid Guid;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MovieSceneFrameRange

--------------------------------
Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 0x4]
	int Denominator;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneMarkedFrame
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	FString Label;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationTemplate
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 0x50]
	MovieSceneEvaluationField EvaluationField;//[Offset: 0xa0, Size: 0x30]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0xd0, Size: 0xa0]
	Guid SequenceSignature;//[Offset: 0x170, Size: 0x10]
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0x180, Size: 0x4]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x188, Size: 0xa8]
	MovieSceneTrackFieldData TrackFieldData;//[Offset: 0x230, Size: 0x60]
	MovieSceneSubSectionFieldData SubSectionFieldData;//[Offset: 0x290, Size: 0x60]

--------------------------------
Class: MovieSceneTrackIdentifier
	UInt32Property Value;//[Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingID;//[Offset: 0x0, Size: 0x10]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 0x2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 0x1]
	MovieSceneEvaluationTrackSegments Segments;//[Offset: 0x18, Size: 0x20]
	MovieSceneTrack* SourceTrack;//[Offset: 0x38, Size: 0x8]
	SectionEvaluationDataTree EvaluationTree;//[Offset: 0x40, Size: 0x60]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0xa0, Size: 0x10]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0xb0, Size: 0x38]
	FName EvaluationGroup;//[Offset: 0xe8, Size: 0x8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1]
	bool bTearDownPriority;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 0x1]

--------------------------------
Class: MovieSceneEvaluationTrackSegments
	int[] SegmentIdentifierToIndex;//[Offset: 0x0, Size: 0x10]
	MovieSceneSegment[] SortedSegments;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneSegment

--------------------------------
Class: SectionEvaluationDataTree

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 0x10]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0, Size: 0x4]
	int NumInitPtrs;//[Offset: 0x4, Size: 0x4]
	int NumEvalPtrs;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	MovieSceneSegmentIdentifier SegmentID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceID
	UInt32Property Value;//[Size: 0x4]

--------------------------------
Class: MovieSceneSegmentIdentifier
	int IdentifierIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 0x10]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 0x10]
	<MovieSceneSequenceID,SubTemplateSerialNumbers(UInt32Property)> SubTemplateSerialNumbers;//[Offset: 0x20, Size: 0x50]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 0xc]
	uint16 SetupIndex;//[Offset: 0xc, Size: 0x2]
	uint16 TearDownIndex;//[Offset: 0xe, Size: 0x2]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]
	UInt32Property SectionIndex;//[Size: 0x4]

--------------------------------
Class: MovieSceneSequenceHierarchy
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0, Size: 0x50]
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 0x18]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x18, Size: 0x20]
	FrameRate TickResolution;//[Offset: 0x38, Size: 0x8]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x40, Size: 0x4]
	MovieSceneFrameRange PlayRange;//[Offset: 0x44, Size: 0x10]
	MovieSceneFrameRange FullPlayRange;//[Offset: 0x54, Size: 0x10]
	MovieSceneFrameRange UnwarpedPlayRange;//[Offset: 0x64, Size: 0x10]
	MovieSceneFrameRange PreRollRange;//[Offset: 0x74, Size: 0x10]
	MovieSceneFrameRange PostRollRange;//[Offset: 0x84, Size: 0x10]
	int HierarchicalBias;//[Offset: 0x94, Size: 0x4]
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0x98, Size: 0x18]
	Guid SubSectionSignature;//[Offset: 0xb8, Size: 0x10]
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0xc8, Size: 0x20]

--------------------------------
Class: MovieSceneSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc]
	MovieSceneNestedSequenceTransform[] NestedTransforms;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneTimeTransform
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	FrameTime Offset;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	float SubFrame;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneNestedSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc]
	MovieSceneTimeWarping Warping;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: MovieSceneTimeWarping
	FrameNumber Start;//[Offset: 0x0, Size: 0x4]
	FrameNumber End;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceInstanceDataPtr

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentId;//[Offset: 0x0, Size: 0x4]
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationTemplateSerialNumber
	UInt32Property Value;//[Size: 0x4]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 0x4]
	<Guid,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x8, Size: 0x50]
	<Guid,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x58, Size: 0x50]

--------------------------------
Class: MovieSceneTrackFieldData

--------------------------------
Class: MovieSceneSubSectionFieldData

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 0x8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 0x8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 0x10]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: Geometry

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 0x10]
	byte ColorUseRule;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 0x4]
	float Top;//[Offset: 0x4, Size: 0x4]
	float Right;//[Offset: 0x8, Size: 0x4]
	float Bottom;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x408, Size: 0x8]
	void SetUserTag(FName InUserTag);// 0x4162800
	FName GetUserTag();// 0x4160f50

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 0x8]
	Vector2D Scale;//[Offset: 0x8, Size: 0x8]
	Vector2D Shear;//[Offset: 0x10, Size: 0x8]
	float Angle;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SlateAccessibleWidgetData.Object
	bool bCanChildrenBeAccessible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	enum AccessibleBehavior;//[Offset: 0x29, Size: 0x1]
	enum AccessibleSummaryBehavior;//[Offset: 0x2a, Size: 0x1]
	FText AccessibleText;//[Offset: 0x30, Size: 0x18]
	delegate AccessibleTextDelegate;//[Offset: 0x48, Size: 0x10]
	FText AccessibleSummaryText;//[Offset: 0x58, Size: 0x18]
	delegate AccessibleSummaryTextDelegate;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 0x24]
	WidgetNavigationData Down;//[Offset: 0x4c, Size: 0x24]
	WidgetNavigationData Left;//[Offset: 0x70, Size: 0x24]
	WidgetNavigationData Right;//[Offset: 0x94, Size: 0x24]
	WidgetNavigationData Next;//[Offset: 0xb8, Size: 0x24]
	WidgetNavigationData Previous;//[Offset: 0xdc, Size: 0x24]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 0x1]
	FName WidgetToFocus;//[Offset: 0x4, Size: 0x8]
	Widget* Widget;//[Offset: 0xc, Size: 0x8]
	delegate CustomDelegate;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 0x8]
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 0x28]
	FName DestinationProperty;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: DynamicPropertyPath.CachedPropertyPath

--------------------------------
Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 0x10]
	Function* CachedFunction;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* Struct;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: EventReply

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 0x8]
	Margin Margin;//[Offset: 0x10, Size: 0x10]
	SlateColor TintColor;//[Offset: 0x20, Size: 0x28]
	Object* ResourceObject;//[Offset: 0x48, Size: 0x8]
	FName ResourceName;//[Offset: 0x50, Size: 0x8]
	Box2D UVRegion;//[Offset: 0x58, Size: 0x14]
	byte DrawAs;//[Offset: 0x6c, Size: 0x1]
	byte Tiling;//[Offset: 0x6d, Size: 0x1]
	byte Mirroring;//[Offset: 0x6e, Size: 0x1]
	byte ImageType;//[Offset: 0x6f, Size: 0x1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x70, Size: 0x8]
	byte AspectRatioAxisConstraint;//[Offset: 0x94, Size: 0x1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x98, Size: 0x8]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	int ControllerId;//[Offset: 0xb8, Size: 0x4]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x40, Size: 0x8]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x48, Size: 0x10]
	int MaxSplitscreenPlayers;//[Offset: 0x68, Size: 0x4]
	World* World;//[Offset: 0x78, Size: 0x8]
	GameInstance* GameInstance;//[Offset: 0x80, Size: 0x8]
	void SSSwapControllers();// 0x188cec0
	void ShowTitleSafeArea();// 0x188cea0
	void SetConsoleTarget(int PlayerIndex);// 0x4bae0c0

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x40, Size: 0x8]
	Texture2D* DefaultTexture_Black;//[Offset: 0x48, Size: 0x8]
	Texture2D* DefaultTexture_White;//[Offset: 0x50, Size: 0x8]
	FString[] HistoryBuffer;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 0x8]
	class Object* WithinClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x38, Size: 0x10]
	OnlineSession* OnlineSession;//[Offset: 0x48, Size: 0x8]
	Object*[] ReferencedObjects;//[Offset: 0x50, Size: 0x10]
	void ReceiveShutdown();// 0x305c9c0
	void ReceiveInit();// 0x305c9c0
	void HandleTravelError(byte FailureType);// 0x305c9c0
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x305c9c0
	void DebugRemovePlayer(int ControllerId);// 0x4b978f0
	void DebugCreatePlayer(int ControllerId);// 0x4b97860

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 0x8]
	Vector2D Maximum;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x28, Size: 0x8]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool bHasDelayNode;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	bool bHasConcatenatorNode;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 0x1]
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 0x1]
	enum VirtualizationMode;//[Offset: 0x31, Size: 0x1]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x88, Size: 0x50]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0xd8, Size: 0x20]
	float Duration;//[Offset: 0xf8, Size: 0x4]
	float MaxDistance;//[Offset: 0xfc, Size: 0x4]
	float TotalSamples;//[Offset: 0x100, Size: 0x4]
	float Priority;//[Offset: 0x104, Size: 0x4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x108, Size: 0x8]
	SoundModulation Modulation;//[Offset: 0x110, Size: 0x10]
	SoundSubmixBase* SoundSubmixObject;//[Offset: 0x120, Size: 0x8]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x128, Size: 0x10]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x138, Size: 0x8]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x140, Size: 0x10]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x150, Size: 0x10]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 0x58]
	SoundClass*[] ChildClasses;//[Offset: 0x80, Size: 0x10]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0x90, Size: 0x10]
	SoundModulation Modulation;//[Offset: 0xa0, Size: 0x10]
	SoundClass* ParentClass;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 0x4]
	float Pitch;//[Offset: 0x4, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x8, Size: 0x4]
	float AttenuationDistanceScale;//[Offset: 0xc, Size: 0x4]
	float StereoBleed;//[Offset: 0x10, Size: 0x4]
	float LFEBleed;//[Offset: 0x14, Size: 0x4]
	float VoiceCenterChannelVolume;//[Offset: 0x18, Size: 0x4]
	float RadioFilterVolume;//[Offset: 0x1c, Size: 0x4]
	float RadioFilterVolumeThreshold;//[Offset: 0x20, Size: 0x4]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 0x1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24, Size: 0x1]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x24, Size: 0x1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x24, Size: 0x1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x24, Size: 0x1]
	float Default2DReverbSendAmount;//[Offset: 0x28, Size: 0x4]
	byte OutputTarget;//[Offset: 0x2c, Size: 0x1]
	enum LoadingBehavior;//[Offset: 0x2d, Size: 0x1]
	SoundSubmix* DefaultSubmix;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: SoundSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	bool bMuteWhenBackgrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x48, Size: 0x10]
	SoundfieldEncodingSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x58, Size: 0x8]
	int EnvelopeFollowerAttackTime;//[Offset: 0x60, Size: 0x4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x64, Size: 0x4]
	float OutputVolume;//[Offset: 0x68, Size: 0x4]
	delegate OnSubmixRecordedFileDone;//[Offset: 0x70, Size: 0x10]
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0x4c9cda0
	void StopEnvelopeFollowing(const Object* WorldContextObject);// 0x4c9cd20
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0x4c9cc50
	void StartEnvelopeFollowing(const Object* WorldContextObject);// 0x4c9cbd0
	void SetSubmixOutputVolume(const Object* WorldContextObject, float InOutputVolume);// 0x4c9cb00
	void AddEnvelopeFollowerDelegate(const Object* WorldContextObject, out const delegate OnSubmixEnvelopeBP);// 0x4c9c8b0

--------------------------------
Class: SoundSubmixWithParentBase.SoundSubmixBase.Object
	SoundSubmixBase* ParentSubmix;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: SoundSubmixBase.Object
	SoundSubmixBase*[] ChildSubmixes;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundfieldEncodingSettingsBase.Object

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x160, Size: 0x4]
	int StreamingPriority;//[Offset: 0x164, Size: 0x4]
	enum SampleRateQuality;//[Offset: 0x168, Size: 0x1]
	byte SoundGroup;//[Offset: 0x16a, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16b, Size: 0x1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16b, Size: 0x1]
	bool bSeekableStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16b, Size: 0x1]
	enum LoadingBehavior;//[Offset: 0x16c, Size: 0x1]
	bool bMature;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16d, Size: 0x1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16d, Size: 0x1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16d, Size: 0x1]
	bool bIsAmbisonics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16e, Size: 0x1]
	float[] FrequenciesToAnalyze;//[Offset: 0x170, Size: 0x10]
	SoundWaveSpectralTimeData[] CookedSpectralTimeData;//[Offset: 0x180, Size: 0x10]
	SoundWaveEnvelopeTimeData[] CookedEnvelopeTimeData;//[Offset: 0x190, Size: 0x10]
	int InitialChunkSize;//[Offset: 0x1a0, Size: 0x4]
	FString SpokenText;//[Offset: 0x1e8, Size: 0x10]
	float SubtitlePriority;//[Offset: 0x1f8, Size: 0x4]
	float Volume;//[Offset: 0x1fc, Size: 0x4]
	float Pitch;//[Offset: 0x200, Size: 0x4]
	int NumChannels;//[Offset: 0x204, Size: 0x4]
	int SampleRate;//[Offset: 0x208, Size: 0x4]
	SubtitleCue[] Subtitles;//[Offset: 0x218, Size: 0x10]
	CurveTable* Curves;//[Offset: 0x228, Size: 0x8]
	CurveTable* InternalCurves;//[Offset: 0x230, Size: 0x8]

--------------------------------
Class: SoundWaveSpectralTimeData
	SoundWaveSpectralDataEntry[] Data;//[Offset: 0x0, Size: 0x10]
	float TimeSec;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SoundWaveSpectralDataEntry
	float Magnitude;//[Offset: 0x0, Size: 0x4]
	float NormalizedMagnitude;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SoundWaveEnvelopeTimeData
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float TimeSec;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 0x18]
	float Time;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 0x8]
	float MinVolumeThreshold;//[Offset: 0x8, Size: 0x4]
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float EQPriority;//[Offset: 0x2c, Size: 0x4]
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 0x40]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x70, Size: 0x10]
	float InitialDelay;//[Offset: 0x80, Size: 0x4]
	float FadeinTime;//[Offset: 0x84, Size: 0x4]
	float Duration;//[Offset: 0x88, Size: 0x4]
	float FadeOutTime;//[Offset: 0x8c, Size: 0x4]

--------------------------------
Class: AudioEQEffect.AudioEffectParameters
	float FrequencyCenter0;//[Offset: 0x10, Size: 0x4]
	float Gain0;//[Offset: 0x14, Size: 0x4]
	float Bandwidth0;//[Offset: 0x18, Size: 0x4]
	float FrequencyCenter1;//[Offset: 0x1c, Size: 0x4]
	float Gain1;//[Offset: 0x20, Size: 0x4]
	float Bandwidth1;//[Offset: 0x24, Size: 0x4]
	float FrequencyCenter2;//[Offset: 0x28, Size: 0x4]
	float Gain2;//[Offset: 0x2c, Size: 0x4]
	float Bandwidth2;//[Offset: 0x30, Size: 0x4]
	float FrequencyCenter3;//[Offset: 0x34, Size: 0x4]
	float Gain3;//[Offset: 0x38, Size: 0x4]
	float Bandwidth3;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: AudioEffectParameters

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 0x8]
	float VolumeAdjuster;//[Offset: 0x8, Size: 0x4]
	float PitchAdjuster;//[Offset: 0xc, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x10, Size: 0x4]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SoundModulation
	SoundModulationPluginSourceSettingsBase*[] Settings;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SoundModulationPluginSourceSettingsBase.Object

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 0x20]

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 0x4]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	byte ResolutionRule;//[Offset: 0x8, Size: 0x1]
	float VolumeScale;//[Offset: 0xc, Size: 0x4]
	float VolumeScaleAttackTime;//[Offset: 0x10, Size: 0x4]
	bool bVolumeScaleCanRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	float VolumeScaleReleaseTime;//[Offset: 0x18, Size: 0x4]
	float VoiceStealReleaseTime;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0x3c8]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 0x1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb8, Size: 0x1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb8, Size: 0x1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb8, Size: 0x1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb8, Size: 0x1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb8, Size: 0x1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb8, Size: 0x1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb8, Size: 0x1]
	bool bEnablePriorityAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb9, Size: 0x1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb9, Size: 0x1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb9, Size: 0x1]
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb9, Size: 0x1]
	byte SpatializationAlgorithm;//[Offset: 0xba, Size: 0x1]
	float BinauralRadius;//[Offset: 0xbc, Size: 0x4]
	enum AbsorptionMethod;//[Offset: 0xc0, Size: 0x1]
	byte OcclusionTraceChannel;//[Offset: 0xc1, Size: 0x1]
	enum ReverbSendMethod;//[Offset: 0xc2, Size: 0x1]
	enum PriorityAttenuationMethod;//[Offset: 0xc3, Size: 0x1]
	float OmniRadius;//[Offset: 0xc4, Size: 0x4]
	float StereoSpread;//[Offset: 0xc8, Size: 0x4]
	float LPFRadiusMin;//[Offset: 0xcc, Size: 0x4]
	float LPFRadiusMax;//[Offset: 0xd0, Size: 0x4]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xd8, Size: 0x90]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x168, Size: 0x90]
	float LPFFrequencyAtMin;//[Offset: 0x1f8, Size: 0x4]
	float LPFFrequencyAtMax;//[Offset: 0x1fc, Size: 0x4]
	float HPFFrequencyAtMin;//[Offset: 0x200, Size: 0x4]
	float HPFFrequencyAtMax;//[Offset: 0x204, Size: 0x4]
	float FocusAzimuth;//[Offset: 0x208, Size: 0x4]
	float NonFocusAzimuth;//[Offset: 0x20c, Size: 0x4]
	float FocusDistanceScale;//[Offset: 0x210, Size: 0x4]
	float NonFocusDistanceScale;//[Offset: 0x214, Size: 0x4]
	float FocusPriorityScale;//[Offset: 0x218, Size: 0x4]
	float NonFocusPriorityScale;//[Offset: 0x21c, Size: 0x4]
	float FocusVolumeAttenuation;//[Offset: 0x220, Size: 0x4]
	float NonFocusVolumeAttenuation;//[Offset: 0x224, Size: 0x4]
	float FocusAttackInterpSpeed;//[Offset: 0x228, Size: 0x4]
	float FocusReleaseInterpSpeed;//[Offset: 0x22c, Size: 0x4]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x230, Size: 0x4]
	float OcclusionVolumeAttenuation;//[Offset: 0x234, Size: 0x4]
	float OcclusionInterpolationTime;//[Offset: 0x238, Size: 0x4]
	float ReverbWetLevelMin;//[Offset: 0x23c, Size: 0x4]
	float ReverbWetLevelMax;//[Offset: 0x240, Size: 0x4]
	float ReverbDistanceMin;//[Offset: 0x244, Size: 0x4]
	float ReverbDistanceMax;//[Offset: 0x248, Size: 0x4]
	float ManualReverbSendLevel;//[Offset: 0x24c, Size: 0x4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x250, Size: 0x90]
	AttenuationSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x2e0, Size: 0x10]
	float PriorityAttenuationMin;//[Offset: 0x2f0, Size: 0x4]
	float PriorityAttenuationMax;//[Offset: 0x2f4, Size: 0x4]
	float PriorityAttenuationDistanceMin;//[Offset: 0x2f8, Size: 0x4]
	float PriorityAttenuationDistanceMax;//[Offset: 0x2fc, Size: 0x4]
	float ManualPriorityAttenuation;//[Offset: 0x300, Size: 0x4]
	RuntimeFloatCurve CustomPriorityAttenuationCurve;//[Offset: 0x308, Size: 0x90]
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x398, Size: 0x30]

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 0x1]
	byte AttenuationShape;//[Offset: 0x9, Size: 0x1]
	float dBAttenuationAtMax;//[Offset: 0xc, Size: 0x4]
	enum FalloffMode;//[Offset: 0x10, Size: 0x1]
	Vector AttenuationShapeExtents;//[Offset: 0x14, Size: 0xc]
	float ConeOffset;//[Offset: 0x20, Size: 0x4]
	float FalloffDistance;//[Offset: 0x24, Size: 0x4]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x28, Size: 0x90]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 0x80]
	CurveFloat* ExternalCurve;//[Offset: 0x80, Size: 0x8]
	CurveFloat* ExternalCurveOverridePS5;//[Offset: 0x88, Size: 0x8]

--------------------------------
Class: AttenuationSubmixSendSettings
	SoundSubmix* Submix;//[Offset: 0x0, Size: 0x8]
	enum SubmixSendMethod;//[Offset: 0x8, Size: 0x1]
	float SubmixSendLevelMin;//[Offset: 0xc, Size: 0x4]
	float SubmixSendLevelMax;//[Offset: 0x10, Size: 0x4]
	float SubmixSendDistanceMin;//[Offset: 0x14, Size: 0x4]
	float SubmixSendDistanceMax;//[Offset: 0x18, Size: 0x4]
	float ManualSubmixSendLevel;//[Offset: 0x1c, Size: 0x4]
	RuntimeFloatCurve CustomSubmixSendCurve;//[Offset: 0x20, Size: 0x90]

--------------------------------
Class: SoundAttenuationPluginSettings
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 0x10]
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0x10, Size: 0x10]
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmixSendInfo
	enum SendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	SoundSubmixBase* SoundSubmix;//[Offset: 0x8, Size: 0x8]
	float SendLevel;//[Offset: 0x10, Size: 0x4]
	float MinSendLevel;//[Offset: 0x14, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x18, Size: 0x4]
	float MinSendDistance;//[Offset: 0x1c, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x20, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x90]

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 0x10]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 0x8]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	enum SourceBusSendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 0x8]
	float SendLevel;//[Offset: 0x10, Size: 0x4]
	float MinSendLevel;//[Offset: 0x14, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x18, Size: 0x4]
	float MinSendDistance;//[Offset: 0x1c, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x20, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x90]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x310, Size: 0x1]
	float SourceBusDuration;//[Offset: 0x314, Size: 0x4]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 0x1]

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 0x10]
	Object* Payload;//[Offset: 0x38, Size: 0x8]
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 0x8]
	enum Pivot;//[Offset: 0x48, Size: 0x1]
	Vector2D Offset;//[Offset: 0x4c, Size: 0x8]
	delegate OnDrop;//[Offset: 0x58, Size: 0x10]
	delegate OnDragCancelled;//[Offset: 0x68, Size: 0x10]
	delegate OnDragged;//[Offset: 0x78, Size: 0x10]
	void Drop(out const PointerEvent PointerEvent);// 0x41481f0
	void Dragged(out const PointerEvent PointerEvent);// 0x41480c0
	void DragCancelled(out const PointerEvent PointerEvent);// 0x4147f90

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 0x8]
	Widget* Content;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0x250, Size: 0x10]
	bool WasControllerKeyJustReleased(Key Key);// 0x4bb24b0
	bool WasControllerKeyJustPressed(Key Key);// 0x4bb24b0
	bool IsControllerKeyDown(Key Key);// 0x4bb24b0
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x4bb2040
	Vector GetControllerVectorKeyState(Key Key);// 0x4bb1f10
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x4bb1e30
	float GetControllerKeyTimeDown(Key Key);// 0x4bb1c20
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x4bb1d10
	float GetControllerAnalogKeyState(Key Key);// 0x4bb1c20

--------------------------------
Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 0x8]
	delegate Delegate;//[Offset: 0x8, Size: 0x10]
	enum AnimationEvent;//[Offset: 0x18, Size: 0x1]
	FName UserTag;//[Offset: 0x1c, Size: 0x8]

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 0x10]
	float Duration;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 0x90]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 0x10]
	NetDriver* Driver;//[Offset: 0x58, Size: 0x8]
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 0x8]
	PackageMap* PackageMap;//[Offset: 0x68, Size: 0x8]
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 0x10]
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 0x10]
	Actor* ViewTarget;//[Offset: 0x90, Size: 0x8]
	Actor* OwningActor;//[Offset: 0x98, Size: 0x8]
	int MaxPacket;//[Offset: 0xa0, Size: 0x4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 0x1]
	UniqueNetIdRepl PlayerId;//[Offset: 0x160, Size: 0x28]
	double LastReceiveTime;//[Offset: 0x1d0, Size: 0x8]
	Channel*[] ChannelsToTick;//[Offset: 0x1548, Size: 0x10]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x1a78, Size: 0x8]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 0x10]
	FString ReplicationDriverClassName;//[Offset: 0x40, Size: 0x10]
	int MaxDownloadSize;//[Offset: 0x50, Size: 0x4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	int NetServerMaxTickRate;//[Offset: 0x58, Size: 0x4]
	int MaxNetTickRate;//[Offset: 0x5c, Size: 0x4]
	int MaxInternetClientRate;//[Offset: 0x60, Size: 0x4]
	int MaxClientRate;//[Offset: 0x64, Size: 0x4]
	float ServerTravelPause;//[Offset: 0x68, Size: 0x4]
	float SpawnPrioritySeconds;//[Offset: 0x6c, Size: 0x4]
	float RelevantTimeout;//[Offset: 0x70, Size: 0x4]
	float KeepAliveTime;//[Offset: 0x74, Size: 0x4]
	float InitialConnectTimeout;//[Offset: 0x78, Size: 0x4]
	float ConnectionTimeout;//[Offset: 0x7c, Size: 0x4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x80, Size: 0x4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	bool bNeverApplyNetworkEmulationSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]
	NetConnection* ServerConnection;//[Offset: 0x88, Size: 0x8]
	NetConnection*[] ClientConnections;//[Offset: 0x90, Size: 0x10]
	int RecentlyDisconnectedTrackingTime;//[Offset: 0x100, Size: 0x4]
	World* World;//[Offset: 0x140, Size: 0x8]
	Package* WorldPackage;//[Offset: 0x148, Size: 0x8]
	class Object* NetConnectionClass;//[Offset: 0x170, Size: 0x8]
	class Object* ReplicationDriverClass;//[Offset: 0x178, Size: 0x8]
	FName NetDriverName;//[Offset: 0x190, Size: 0x8]
	ChannelDefinition[] ChannelDefinitions;//[Offset: 0x198, Size: 0x10]
	<FName,ChannelDefinition> ChannelDefinitionMap;//[Offset: 0x1a8, Size: 0x50]
	Channel*[] ActorChannelPool;//[Offset: 0x1f8, Size: 0x10]
	float Time;//[Offset: 0x218, Size: 0x4]
	ReplicationDriver* ReplicationDriver;//[Offset: 0x6f0, Size: 0x8]

--------------------------------
Class: Package.Object

--------------------------------
Class: ChannelDefinition
	FName ChannelName;//[Offset: 0x0, Size: 0x8]
	FName ClassName;//[Offset: 0x8, Size: 0x8]
	class Object* ChannelClass;//[Offset: 0x10, Size: 0x8]
	int StaticChannelIndex;//[Offset: 0x18, Size: 0x4]
	bool bTickOnCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bServerOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	bool bClientOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]
	bool bInitialServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 0x1]
	bool bInitialClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ReplicationDriver.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 0x10]
	float ActiveOpacity;//[Offset: 0x38, Size: 0x4]
	float InactiveOpacity;//[Offset: 0x3c, Size: 0x4]
	float TimeUntilDeactive;//[Offset: 0x40, Size: 0x4]
	float TimeUntilReset;//[Offset: 0x44, Size: 0x4]
	float ActivationDelay;//[Offset: 0x48, Size: 0x4]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	float StartupDelay;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 0x8]
	Texture2D* Image2;//[Offset: 0x8, Size: 0x8]
	Vector2D Center;//[Offset: 0x10, Size: 0x8]
	Vector2D VisualSize;//[Offset: 0x18, Size: 0x8]
	Vector2D ThumbSize;//[Offset: 0x20, Size: 0x8]
	Vector2D InteractionSize;//[Offset: 0x28, Size: 0x8]
	Vector2D InputScale;//[Offset: 0x30, Size: 0x8]
	Key MainInputKey;//[Offset: 0x38, Size: 0x18]
	Key AltInputKey;//[Offset: 0x50, Size: 0x18]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x348, Size: 0x4]
	float BaseLookUpRate;//[Offset: 0x34c, Size: 0x4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x350, Size: 0x8]
	SphereComponent* CollisionComponent;//[Offset: 0x358, Size: 0x8]
	StaticMeshComponent* MeshComponent;//[Offset: 0x360, Size: 0x8]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x368, Size: 0x1]
	void TurnAtRate(float Rate);// 0x4b83fe0
	void MoveUp_World(float Val);// 0x4b83560
	void MoveRight(float Val);// 0x4b834e0
	void MoveForward(float Val);// 0x4b83460
	void LookUpAtRate(float Rate);// 0x4b833e0

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x688, Size: 0x4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x4c9ca30
	float GetUnscaledSphereRadius();// 0x4b70390
	float GetShapeScale();// 0x4c9c9f0
	float GetScaledSphereRadius();// 0x4c9c9a0

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x750, Size: 0x4]
	int PreviousLODLevel;//[Offset: 0x754, Size: 0x4]
	int MinLOD;//[Offset: 0x758, Size: 0x4]
	int SubDivisionStepSize;//[Offset: 0x75c, Size: 0x4]
	bool bRenderWithGPUDriven;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x760, Size: 0x1]
	StaticMesh* StaticMesh;//[Offset: 0x768, Size: 0x8]
	Color WireframeColorOverride;//[Offset: 0x770, Size: 0x4]
	bool bEvaluateWorldPositionOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x774, Size: 0x1]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x774, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x774, Size: 0x1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x774, Size: 0x1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x774, Size: 0x1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x774, Size: 0x1]
	bool bSupportDecalAttach;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x774, Size: 0x1]
	bool bDistanceFieldHighPriority;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x774, Size: 0x1]
	bool bAutoSetAffectDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x775, Size: 0x1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x775, Size: 0x1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x775, Size: 0x1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x775, Size: 0x1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x775, Size: 0x1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x775, Size: 0x1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x775, Size: 0x1]
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x776, Size: 0x1]
	bool bNeverOcclusionCull;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x776, Size: 0x1]
	bool bNotBuildInHLOD;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x776, Size: 0x1]
	bool bNoBuildInReplicaBecauseMaterial;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x776, Size: 0x1]
	int OverriddenLightMapRes;//[Offset: 0x778, Size: 0x4]
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x77c, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x780, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x784, Size: 0x4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x788, Size: 0x10]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x798, Size: 0x10]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x7a8, Size: 0x18]
	bool bCanRecreatePhysicsStateRuntime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c8, Size: 0x1]
	Guid StaticMeshComponentGuid;//[Offset: 0x7cc, Size: 0x10]
	bool bSkipStaticPhysicsAssetRuntime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7dc, Size: 0x1]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x7fdb30
	void SetSoftStaticMesh(StaticMesh* InStaticMesh);// 0x4cab2c0
	void SetReverseCulling(bool ReverseCulling);// 0x4cab230
	void SetForcedLodModel(int NewForcedLodModel);// 0x4caae30
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x4caabb0
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x4caab30
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x4caa990

--------------------------------
Class: StaticMeshComponentLODInfo

--------------------------------
Class: StreamingTextureBuildInfo
	UInt32Property PackedRelativeBox;//[Size: 0x4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 0x4]
	float TexelFactor;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 0x4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 0x4]
	float EmissiveBoost;//[Offset: 0xc, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x10, Size: 0x4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 0x4]
	byte BlendFunction;//[Offset: 0x4, Size: 0x1]
	float BlendExp;//[Offset: 0x8, Size: 0x4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	FName Filename;//[Offset: 0x8, Size: 0x8]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 0x4]
	int UUID;//[Offset: 0x4, Size: 0x4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 0x8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: ForceFeedbackParameters
	FName Tag;//[Offset: 0x0, Size: 0x8]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bPlayWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]

--------------------------------
Class: CustomPrimitiveData
	float[] Data;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 0x4]
	int Index;//[Offset: 0x4, Size: 0x4]
	int SelectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 0x4]
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 0x4]
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 0x8]
	float LastImpactSoundTime;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x2e8, Size: 0x10]
	class GameSession* GameSessionClass;//[Offset: 0x2f8, Size: 0x8]
	class GameStateBase* GameStateClass;//[Offset: 0x300, Size: 0x8]
	class PlayerController* PlayerControllerClass;//[Offset: 0x308, Size: 0x8]
	class PlayerState* PlayerStateClass;//[Offset: 0x310, Size: 0x8]
	class HUD* HUDClass;//[Offset: 0x318, Size: 0x8]
	class Pawn* DefaultPawnClass;//[Offset: 0x320, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x328, Size: 0x8]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x330, Size: 0x8]
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x338, Size: 0x8]
	GameSession* GameSession;//[Offset: 0x340, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x348, Size: 0x8]
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x350, Size: 0x8]
	FText DefaultPlayerName;//[Offset: 0x358, Size: 0x18]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x370, Size: 0x1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x370, Size: 0x1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x370, Size: 0x1]
	void StartPlay();// 0x13d5890
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x4b98630
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x4b98510
	bool ShouldReset(Actor* ActorToReset);// 0x4b98470
	void ReturnToMainMenuHost();// 0xca7aa0
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x4b98130
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x4b98060
	void RestartPlayer(Controller* NewPlayer);// 0x4b97fd0
	void ResetLevel();// 0xca7ac0
	bool PlayerCanRestart(PlayerController* Player);// 0x4b97eb0
	bool MustSpectate(PlayerController* NewPlayerController);// 0x4b97e10
	void K2_PostLogin(PlayerController* NewPlayer);// 0x305c9c0
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x305c9c0
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x305c9c0
	void K2_OnLogout(Controller* ExitingController);// 0x305c9c0
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x305c9c0
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x4b97d20
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x4b97c50
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x4b87a40
	bool HasMatchStarted();// 0x29c4210
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x4b97b90
	int GetNumSpectators();// 0x4b97b60
	int GetNumPlayers();// 0x4b97b30
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x4b97a70
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x4b97980
	Actor* ChoosePlayerStart(Controller* Player);// 0x4b977c0
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x4b976a0
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x4b975d0

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x2e8, Size: 0x4]
	int MaxPlayers;//[Offset: 0x2ec, Size: 0x4]
	int MaxPartySize;//[Offset: 0x2f0, Size: 0x4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x2f4, Size: 0x1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5, Size: 0x1]
	FName SessionName;//[Offset: 0x2f8, Size: 0x8]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x2e8, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x2f0, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x2f8, Size: 0x8]
	PlayerState*[] PlayerArray;//[Offset: 0x300, Size: 0x10]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x314, Size: 0x4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x318, Size: 0x4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x31c, Size: 0x4]
	void OnRep_SpectatorClass();// 0x2707270
	void OnRep_ReplicatedWorldTimeSeconds();// 0x13d5870
	void OnRep_ReplicatedHasBegunPlay();// 0x4ba7730
	void OnRep_GameModeClass();// 0x2707250
	bool HasMatchStarted();// 0x4ba73f0
	bool HasBegunPlay();// 0x4ba73c0
	float GetServerWorldTimeSeconds();// 0x4ba7260
	float GetPlayerStartTime(Controller* Controller);// 0x4ba6d70
	float GetPlayerRespawnDelay(Controller* Controller);// 0x4ba6cd0

--------------------------------
Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e9, Size: 0x1]
	UInt32Property Channels;//[Size: 0x4]
	UInt32Property inRate;//[Size: 0x4]
	UInt32Property OutRate;//[Size: 0x4]
	UInt32Property MaxPacketOverhead;//[Size: 0x4]
	UInt32Property InRateClientMax;//[Size: 0x4]
	UInt32Property InRateClientMin;//[Size: 0x4]
	UInt32Property InRateClientAvg;//[Size: 0x4]
	UInt32Property InPacketsClientMax;//[Size: 0x4]
	UInt32Property InPacketsClientMin;//[Size: 0x4]
	UInt32Property InPacketsClientAvg;//[Size: 0x4]
	UInt32Property OutRateClientMax;//[Size: 0x4]
	UInt32Property OutRateClientMin;//[Size: 0x4]
	UInt32Property OutRateClientAvg;//[Size: 0x4]
	UInt32Property OutPacketsClientMax;//[Size: 0x4]
	UInt32Property OutPacketsClientMin;//[Size: 0x4]
	UInt32Property OutPacketsClientAvg;//[Size: 0x4]
	UInt32Property NetNumClients;//[Size: 0x4]
	UInt32Property InPackets;//[Size: 0x4]
	UInt32Property OutPackets;//[Size: 0x4]
	UInt32Property InBunches;//[Size: 0x4]
	UInt32Property OutBunches;//[Size: 0x4]
	UInt32Property OutLoss;//[Size: 0x4]
	UInt32Property InLoss;//[Size: 0x4]
	UInt32Property VoiceBytesSent;//[Size: 0x4]
	UInt32Property VoiceBytesRecv;//[Size: 0x4]
	UInt32Property VoicePacketsSent;//[Size: 0x4]
	UInt32Property VoicePacketsRecv;//[Size: 0x4]
	UInt32Property PercentInVoice;//[Size: 0x4]
	UInt32Property PercentOutVoice;//[Size: 0x4]
	UInt32Property NumActorChannels;//[Size: 0x4]
	UInt32Property NumConsideredActors;//[Size: 0x4]
	UInt32Property PrioritizedActors;//[Size: 0x4]
	UInt32Property NumRelevantActors;//[Size: 0x4]
	UInt32Property NumRelevantDeletedActors;//[Size: 0x4]
	UInt32Property NumReplicatedActorAttempts;//[Size: 0x4]
	UInt32Property NumReplicatedActors;//[Size: 0x4]
	UInt32Property NumActors;//[Size: 0x4]
	UInt32Property NumNetActors;//[Size: 0x4]
	UInt32Property NumDormantActors;//[Size: 0x4]
	UInt32Property NumInitiallyDormantActors;//[Size: 0x4]
	UInt32Property NumNetGUIDsAckd;//[Size: 0x4]
	UInt32Property NumNetGUIDsPending;//[Size: 0x4]
	UInt32Property NumNetGUIDsUnAckd;//[Size: 0x4]
	UInt32Property ObjPathBytes;//[Size: 0x4]
	UInt32Property NetGUIDOutRate;//[Size: 0x4]
	UInt32Property NetGUIDInRate;//[Size: 0x4]
	UInt32Property NetSaturated;//[Size: 0x4]

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	float BadPacketLossThreshold;//[Offset: 0x2e8, Size: 0x4]
	float SeverePacketLossThreshold;//[Offset: 0x2ec, Size: 0x4]
	int BadPingThreshold;//[Offset: 0x2f0, Size: 0x4]
	int SeverePingThreshold;//[Offset: 0x2f4, Size: 0x4]
	int AdjustedNetSpeed;//[Offset: 0x2f8, Size: 0x4]
	float LastNetSpeedUpdateTime;//[Offset: 0x2fc, Size: 0x4]
	int TotalNetBandwidth;//[Offset: 0x300, Size: 0x4]
	int MinDynamicBandwidth;//[Offset: 0x304, Size: 0x4]
	int MaxDynamicBandwidth;//[Offset: 0x308, Size: 0x4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 0x1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30c, Size: 0x1]
	float StandbyRxCheatTime;//[Offset: 0x310, Size: 0x4]
	float StandbyTxCheatTime;//[Offset: 0x314, Size: 0x4]
	float PercentMissingForRxStandby;//[Offset: 0x318, Size: 0x4]
	float PercentMissingForTxStandby;//[Offset: 0x31c, Size: 0x4]
	float PercentForBadPing;//[Offset: 0x320, Size: 0x4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x324, Size: 0x4]
	float MoveRepSize;//[Offset: 0x328, Size: 0x4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x32c, Size: 0x4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x330, Size: 0x4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x334, Size: 0x4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x338, Size: 0x4]
	float MaxClientForcedUpdateDuration;//[Offset: 0x33c, Size: 0x4]
	float ServerForcedUpdateHitchThreshold;//[Offset: 0x340, Size: 0x4]
	float ServerForcedUpdateHitchCooldown;//[Offset: 0x344, Size: 0x4]
	float MaxMoveDeltaTime;//[Offset: 0x348, Size: 0x4]
	float MaxClientSmoothingDeltaTime;//[Offset: 0x34c, Size: 0x4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x350, Size: 0x4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x354, Size: 0x4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x358, Size: 0x4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x35c, Size: 0x4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x360, Size: 0x4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 0x1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x368, Size: 0x4]
	float ClientNetCamUpdateDeltaTime;//[Offset: 0x36c, Size: 0x4]
	float ClientNetCamUpdatePositionLimit;//[Offset: 0x370, Size: 0x4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 0x1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x375, Size: 0x1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x378, Size: 0x4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x37c, Size: 0x4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x380, Size: 0x4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x384, Size: 0x4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 0x1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x389, Size: 0x1]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x3a8, Size: 0x8]
	Actor* ChildActor;//[Offset: 0x3b0, Size: 0x8]
	Actor* ChildActorTemplate;//[Offset: 0x3b8, Size: 0x8]
	void SetChildActorClass(class Actor InClass);// 0x4b79b90

--------------------------------
Class: Interface.Object

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: ActorLiteComponentTickFunction.TickFunction

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 0xc]
	Vector AngularVelocity;//[Offset: 0xc, Size: 0xc]
	Vector Location;//[Offset: 0x18, Size: 0xc]
	Rotator Rotation;//[Offset: 0x24, Size: 0xc]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 0x1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 0x1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 0x1]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x20, Size: 0xc]
	FName AttachSocket;//[Offset: 0x2c, Size: 0x8]
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x2e8, Size: 0x8]
	FName MatineeControllerName;//[Offset: 0x2f0, Size: 0x8]
	float PlayRate;//[Offset: 0x2f8, Size: 0x4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2fc, Size: 0x1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2fc, Size: 0x1]
	float ForceStartPosition;//[Offset: 0x300, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x304, Size: 0x1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x304, Size: 0x1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x304, Size: 0x1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x304, Size: 0x1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x304, Size: 0x1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x304, Size: 0x1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x304, Size: 0x1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x304, Size: 0x1]
	int PreferredSplitScreenNum;//[Offset: 0x308, Size: 0x4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30c, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30c, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30c, Size: 0x1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x310, Size: 0x10]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 0x1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x328, Size: 0x10]
	CameraCutInfo[] CameraCuts;//[Offset: 0x338, Size: 0x10]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x348, Size: 0x1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x348, Size: 0x1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x348, Size: 0x1]
	float InterpPosition;//[Offset: 0x34c, Size: 0x4]
	byte ReplicationForceIsPlaying;//[Offset: 0x354, Size: 0x1]
	delegate OnPlay;//[Offset: 0x358, Size: 0x10]
	delegate OnStop;//[Offset: 0x368, Size: 0x10]
	delegate OnPause;//[Offset: 0x378, Size: 0x10]
	void Stop();// 0x284f290
	void SetPosition(float NewPosition, bool bJump);// 0x4c3e3c0
	void SetLoopingState(bool bNewLooping);// 0x4c3e230
	void Reverse();// 0xcbca30
	void Play();// 0xbb6730
	void Pause();// 0x77ed40
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x4c3dd60
	void ChangePlaybackDirection();// 0x2825d80

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 0x4]
	float PathBuildTime;//[Offset: 0x2c, Size: 0x4]
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 0x10]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 0x8]
	float EdSectionStart;//[Offset: 0x48, Size: 0x4]
	float EdSectionEnd;//[Offset: 0x4c, Size: 0x4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 0x8]
	FName[] AllEventNames;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	Actor*[] Actors;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	float Timestamp;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ActorPreSaveData
	<FName,ActorPreSaveData_Component> ComponentData;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: ActorPreSaveData_Component
	FName ComponentName;//[Offset: 0x0, Size: 0x8]
	class ActorComponent* ComponentType;//[Offset: 0x8, Size: 0x8]
	FString AttachParentPath;//[Offset: 0x10, Size: 0x10]
	FName AttachSocket;//[Offset: 0x28, Size: 0x8]
	Transform RelativeTransform;//[Offset: 0x30, Size: 0x30]
	int8 ShapeType;//[Offset: 0x60, Size: 0x1]
	float[] ShapeData;//[Offset: 0x68, Size: 0x10]
	StaticMesh* StaticMesh;//[Offset: 0x88, Size: 0x28]
	SkeletalMesh* SkeletalMesh;//[Offset: 0xb0, Size: 0x28]
	ParticleSystem* ParticleTemplate;//[Offset: 0xd8, Size: 0x28]
	Vector DecalSize;//[Offset: 0x100, Size: 0xc]

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 0x8]
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x10, Size: 0x8]
	float Volume;//[Offset: 0x18, Size: 0x4]
	float FadeTime;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ReverbEffect.Object
	float Density;//[Offset: 0x28, Size: 0x4]
	float Diffusion;//[Offset: 0x2c, Size: 0x4]
	float Gain;//[Offset: 0x30, Size: 0x4]
	float GainHF;//[Offset: 0x34, Size: 0x4]
	float DecayTime;//[Offset: 0x38, Size: 0x4]
	float DecayHFRatio;//[Offset: 0x3c, Size: 0x4]
	float ReflectionsGain;//[Offset: 0x40, Size: 0x4]
	float ReflectionsDelay;//[Offset: 0x44, Size: 0x4]
	float LateGain;//[Offset: 0x48, Size: 0x4]
	float LateDelay;//[Offset: 0x4c, Size: 0x4]
	float AirAbsorptionGainHF;//[Offset: 0x50, Size: 0x4]
	float RoomRolloffFactor;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float ExteriorVolume;//[Offset: 0x4, Size: 0x4]
	float ExteriorTime;//[Offset: 0x8, Size: 0x4]
	float ExteriorLPF;//[Offset: 0xc, Size: 0x4]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 0x4]
	float InteriorVolume;//[Offset: 0x14, Size: 0x4]
	float InteriorTime;//[Offset: 0x18, Size: 0x4]
	float InteriorLPF;//[Offset: 0x1c, Size: 0x4]
	float InteriorLPFTime;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bUseMBPOuterBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	Box MBPBounds;//[Offset: 0x4, Size: 0x1c]
	Box MBPOuterBounds;//[Offset: 0x20, Size: 0x1c]
	UInt32Property MBPNumSubdivs;//[Size: 0x4]

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8]
	Actor* InViewer;//[Offset: 0x8, Size: 0x8]
	Actor* ViewTarget;//[Offset: 0x10, Size: 0x8]
	Vector ViewLocation;//[Offset: 0x18, Size: 0xc]
	Vector ViewDir;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: BookmarkBase.Object

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0xb8, Size: 0x8]
	Model* Model;//[Offset: 0xc0, Size: 0x8]
	ModelComponent*[] ModelComponents;//[Offset: 0xc8, Size: 0x10]
	LevelActorContainer* ActorCluster;//[Offset: 0xd8, Size: 0x8]
	DynamicObjectContainer* DynamicObjectContainer;//[Offset: 0xe0, Size: 0x8]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe8, Size: 0x4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xec, Size: 0x4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xf0, Size: 0x8]
	NavigationObjectBase* NavListStart;//[Offset: 0xf8, Size: 0x8]
	NavigationObjectBase* NavListEnd;//[Offset: 0x100, Size: 0x8]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x108, Size: 0x10]
	float LightmapTotalSize;//[Offset: 0x118, Size: 0x4]
	float ShadowmapTotalSize;//[Offset: 0x11c, Size: 0x4]
	Vector[] StaticNavigableGeometry;//[Offset: 0x120, Size: 0x10]
	Guid[] StreamingTextureGuids;//[Offset: 0x130, Size: 0x10]
	Guid LevelBuildDataId;//[Offset: 0x1d0, Size: 0x10]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x1e0, Size: 0x8]
	IntVector LightBuildLevelOffset;//[Offset: 0x1e8, Size: 0xc]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f4, Size: 0x1]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f4, Size: 0x1]
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f4, Size: 0x1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f4, Size: 0x1]
	bool bIgnoreReplica;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f4, Size: 0x1]
	bool bIsNextReplicaRuntimeCell;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x204, Size: 0x1]
	WorldSettings* WorldSettings;//[Offset: 0x278, Size: 0x8]
	AssetUserData*[] AssetUserData;//[Offset: 0x288, Size: 0x10]
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x2a8, Size: 0x10]

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x688, Size: 0x8]

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: DynamicObjectContainer.Object
	bool CreateClusterSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	Object*[] ClusterObjects;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e8, Size: 0x1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x305c9c0
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x4c21a00
	bool RemoteEvent(FName EventName);// 0x26670b0
	void LevelReset();// 0x305c9c0

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]
	int Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x2f0, Size: 0x8]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f8, Size: 0x1]

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: ReplicatedStaticActorDestructionInfo
	class Object* ObjClass;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x28, Size: 0x28]
	int StreamingPriority;//[Offset: 0x50, Size: 0x4]
	FName PackageNameToLoad;//[Offset: 0x54, Size: 0x8]
	FName[] LODPackageNames;//[Offset: 0x60, Size: 0x10]
	Transform LevelTransform;//[Offset: 0x80, Size: 0x30]
	bool bClientOnlyVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	int LevelLODIndex;//[Offset: 0xb4, Size: 0x4]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb8, Size: 0x1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb8, Size: 0x1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbb, Size: 0x1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbb, Size: 0x1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbb, Size: 0x1]
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xbb, Size: 0x1]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xbb, Size: 0x1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xbb, Size: 0x1]
	LinearColor LevelColor;//[Offset: 0xbc, Size: 0x10]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xd0, Size: 0x10]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xe0, Size: 0x4]
	delegate OnLevelLoaded;//[Offset: 0xe8, Size: 0x10]
	delegate OnLevelUnloaded;//[Offset: 0xf8, Size: 0x10]
	delegate OnLevelShown;//[Offset: 0x108, Size: 0x10]
	delegate OnLevelHidden;//[Offset: 0x118, Size: 0x10]
	Level* LoadedLevel;//[Offset: 0x128, Size: 0x8]
	Level* PendingUnloadLevel;//[Offset: 0x130, Size: 0x8]
	bool ShouldBeLoaded();// 0x12c2a30
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0x4c22800
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0x4ba67b0
	void SetPriority(int NewPriority);// 0x4c22680
	void SetLevelLODIndex(int LODIndex);// 0x4c21f70
	bool IsStreamingStatePending();// 0x4c21080
	bool IsLevelVisible();// 0x4c21050
	bool IsLevelLoaded();// 0x4c21020
	FName GetWorldAssetPackageFName();// 0x4c20fb0
	Level* GetLoadedLevel();// 0x28a8020
	LevelScriptActor* GetLevelScriptActor();// 0x4c20f40
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x4c20e60

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x320, Size: 0x10]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x330, Size: 0x1]
	byte StreamingUsage;//[Offset: 0x334, Size: 0x1]

--------------------------------
Class: StreamingLevelsToConsider
	LevelStreamingWrapper[] StreamingLevels;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: LevelStreamingWrapper
	LevelStreaming* StreamingLevel;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x848, Size: 0x50]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0xc5c, Size: 0x4]
	MulticastRecordOptions[] MulticastRecordOptions;//[Offset: 0xc90, Size: 0x10]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf0, Size: 0x1]
	PlayerController*[] SpectatorControllers;//[Offset: 0xcf8, Size: 0x10]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 0x8]
	Level* Level;//[Offset: 0x38, Size: 0x8]
	Object*[] ObjReferences;//[Offset: 0xa0, Size: 0x10]

--------------------------------
Class: MulticastRecordOptions
	FString FuncPathName;//[Offset: 0x0, Size: 0x10]
	bool bServerSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bClientSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: NavigationSystemBase.Object

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 0x18]
	FName AISystemModuleName;//[Offset: 0x40, Size: 0x8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 0x4]
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 0x4]
	float LockTimeAfterClean;//[Offset: 0x38, Size: 0x4]
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 0x4]
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 0x4]
	float TestHeightDifference;//[Offset: 0x44, Size: 0x4]
	float HeightCheckMargin;//[Offset: 0x48, Size: 0x4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x4b5cad0
	int GetObjectCount();// 0x4b5c9e0
	int GetNewAvoidanceUID();// 0x4b5c9b0
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x4b5c910

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x10, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 0x8]
	Level* PersistentLevel;//[Offset: 0x20, Size: 0x8]
	<Level*> Levels;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x48, Size: 0x10]
	double TilesStreamingTimeThreshold;//[Offset: 0x58, Size: 0x8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	float RebaseOriginDistance;//[Offset: 0x64, Size: 0x4]
	WorldCompositionTileInfo[] TileInfos;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: WorldCompositionTileInfo
	FString PLevelName;//[Offset: 0x0, Size: 0x10]
	FString[] Tiles;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: NextReplica.Object
	NextReplicaLevelLayer*[] LevelLayers;//[Offset: 0x38, Size: 0x10]
	NextReplicaLevelLayer* PersistentLayer;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: NextReplicaLevelLayer.Info.Actor.Object
	bool bIsPersistentLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	NextReplicaLevelLayerSettings* LayerSettings;//[Offset: 0x2f0, Size: 0x8]
	NextReplicaHLODActor* HLODActor;//[Offset: 0x2f8, Size: 0x8]
	<IntPoint,NextReplicaRuntimeLevelStreamingCell*> LevelGrid;//[Offset: 0x300, Size: 0x50]
	<IntPoint,NextReplicaRuntimeHLODCell*> FarHLODGrid;//[Offset: 0x350, Size: 0x50]
	NextReplicaRuntimeLevelStreamingCell*[] UnstableLevelCells;//[Offset: 0x3a0, Size: 0x10]

--------------------------------
Class: NextReplicaHLODActor.Actor.Object
	<IntPoint,StaticMeshComponent*> LevelCellHLODComponents;//[Offset: 0x2e8, Size: 0x50]
	<IntPoint,StaticMeshComponent*> FarHLODComponents;//[Offset: 0x338, Size: 0x50]

--------------------------------
Class: NextReplicaRuntimeLevelStreamingCell.NextReplicaRuntimeCell.Object
	IntPoint RelatedHLODCellCoord;//[Offset: 0xa4, Size: 0x8]
	NextReplicaLevelStreamingDynamic* LevelStreaming;//[Offset: 0xb0, Size: 0x8]
	<Guid,LevelCollisionData> PhysicsDatas;//[Offset: 0xb8, Size: 0x50]
	void OnLevelUnloaded();// 0xae2270
	void OnLevelShown();// 0x4c48d40
	void OnLevelLoaded();// 0x4c48d20
	void OnLevelHidden();// 0x4c48d00

--------------------------------
Class: NextReplicaRuntimeCell.Object
	bool bIsAlwaysLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bClientOnlyVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	IntPoint Coord;//[Offset: 0x34, Size: 0x8]
	Box ContentBounds;//[Offset: 0x3c, Size: 0x1c]
	BoxSphereBounds Bounds;//[Offset: 0x58, Size: 0x1c]
	Vector Position;//[Offset: 0x74, Size: 0xc]
	float CellSize;//[Offset: 0x80, Size: 0x4]
	float Extent;//[Offset: 0x84, Size: 0x4]
	FString DebugName;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: NextReplicaLevelStreamingDynamic.LevelStreamingDynamic.LevelStreaming.Object
	bool bShouldBeAlwaysLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	NextReplicaRuntimeLevelStreamingCell* StreamingCell;//[Offset: 0x154, Size: 0x8]

--------------------------------
Class: LevelStreamingDynamic.LevelStreaming.Object
	bool bInitiallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1]
	bool bInitiallyVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x148, Size: 0x1]
	static LevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(Object* WorldContextObject, World* Level, Vector Location, Rotator Rotation, out bool bOutSuccess);// 0x4c212b0
	static LevelStreamingDynamic* LoadLevelInstance(Object* WorldContextObject, FString LevelName, Vector Location, Rotator Rotation, out bool bOutSuccess);// 0x4c210b0

--------------------------------
Class: LevelCollisionData
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	Transform PhysicsTransform;//[Offset: 0x10, Size: 0x30]
	StaticPhysicsAsset* PhysicsAsset;//[Offset: 0x40, Size: 0x8]
	BodyInstance BodyInstance;//[Offset: 0x48, Size: 0x148]

--------------------------------
Class: NextReplicaRuntimeHLODCell.NextReplicaRuntimeCell.Object
	<IntPoint> RelatedLevelCellCoord;//[Offset: 0x98, Size: 0x50]

--------------------------------
Class: WorldPSCPool
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 0x10]
	ParticleSystemComponent*[] InUseComponents_Auto;//[Offset: 0x10, Size: 0x10]
	ParticleSystemComponent*[] InUseComponents_Manual;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ArkWorldSettings.WorldSettings.Info.Actor.Object
	<class ArkGameMatchBase> GameMatchClasses;//[Offset: 0x520, Size: 0x50]
	delegate OnArkWorldInitStatusUpdated;//[Offset: 0x578, Size: 0x10]
	bool bShouldWaitForNavSysBuildTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 0x1]
	Vector2D DefaultWorldCenter;//[Offset: 0x5b0, Size: 0x8]
	Vector2D DefaultWorldDimensions;//[Offset: 0x5b8, Size: 0x8]
	FString DefaultWorldMapKey;//[Offset: 0x5c0, Size: 0x10]
	delegate OnWorldBoundsUpdate;//[Offset: 0x5d0, Size: 0x10]
	bool bUseTextureLODBiasInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 0x1]
	ArkDoorsSettings DoorSettings;//[Offset: 0x5e4, Size: 0x10]
	int ActualFlexibleDoors;//[Offset: 0x5f4, Size: 0x4]
	<int> DestroyDoors;//[Offset: 0x5f8, Size: 0x50]
	class ArkInGameManagerCenter* ManagerCenterClass;//[Offset: 0x648, Size: 0x8]
	ArkInGameManagerCenter* ManagerCenter;//[Offset: 0x650, Size: 0x8]
	class ArkUnlockableLevelLoadingManager* UnlockableLevelLoadingManagerClass;//[Offset: 0x658, Size: 0x8]
	bool bClientWaitForServerLevelsStreamingStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x674, Size: 0x1]
	bool bServerLevelsStreamingStatusReplicated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x675, Size: 0x1]
	bool bEnableCollsionCacheOptmization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x676, Size: 0x1]
	void Training();// 0x29d72e0
	void SpawnAI();// 0x29d72c0
	void SlowMotion();// 0x29d72a0
	void KillAllRobots();// 0x29d6e90
	void KillAllMonsters();// 0x29d6e70
	void HurtSelf40();// 0x29d6e50
	void God();// 0x29d6e30
	enum GetWorldInitStatus();// 0x29d6e10
	void FastMotion();// 0x29d6d60
	void BadAss();// 0x29d6d40

--------------------------------
Class: ArkGameMatchBase.Object
	FString LoadLevelName;//[Offset: 0x30, Size: 0x10]
	bool IsDedicatedServer();// 0x2758ee0
	bool HasAuthority();// 0x2758e60

--------------------------------
Class: ArkDoorsSettings
	int MinDoors;//[Offset: 0x0, Size: 0x4]
	int MaxDoors;//[Offset: 0x4, Size: 0x4]
	int FlexibleDoors;//[Offset: 0x8, Size: 0x4]
	int TotalDoors;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ArkInGameManagerCenter.Object
	ArkManagerBase*[] ManagerArray;//[Offset: 0x30, Size: 0x10]
	class ArkManagerBase[] ManagerClassArray;//[Offset: 0x40, Size: 0x10]
	class ArkECSManager* ECSManagerClass;//[Offset: 0x50, Size: 0x8]
	class ArkSandTableManager* SandTableManagerClass;//[Offset: 0x58, Size: 0x8]
	class ArkIndicatorTargetManager* IndicatorTargetManagerClass;//[Offset: 0x60, Size: 0x8]
	class ArkStencilManager* StencilManagerClass;//[Offset: 0x68, Size: 0x8]
	class ArkSwarmManager* SwarmManagerClass;//[Offset: 0x70, Size: 0x8]
	class ArkTeamManager* TeamManagerClass;//[Offset: 0x78, Size: 0x8]
	class ArkDialogueManager* DialogueManagerClass;//[Offset: 0x80, Size: 0x8]
	class ArkInGameQuestManager* InGameQuestManagerClass;//[Offset: 0x88, Size: 0x8]
	class ArkGameplayEventQuestManager* GameplayEventQuestManagerClass;//[Offset: 0x90, Size: 0x8]
	class ArkInteractiveFieldManager* InGameInteractiveFieldsManagerClass;//[Offset: 0x98, Size: 0x8]
	class ArkTutorialManager* TutorialManagerClass;//[Offset: 0xa0, Size: 0x8]
	class ArkInteractiveWaterManager* InGameInteractiveWaterManagerClass;//[Offset: 0xa8, Size: 0x8]
	class ArkDisplayItemManager* InGameDisplayItemManagerClass;//[Offset: 0xb0, Size: 0x8]
	class ArkSignificanceManager* SignificanceManagerClass;//[Offset: 0xb8, Size: 0x8]
	class ArkRenderPhotoManager* RenderPhotoManagerClass;//[Offset: 0xc0, Size: 0x8]
	class ArkExtractionRewardFlowManager* ExtractionRewardFlowManagerClass;//[Offset: 0xc8, Size: 0x8]
	class ArkInGameEventsManager* InGameEventsManagerClass;//[Offset: 0xd0, Size: 0x8]
	class ArkLevelSequenceManager* LevelSequenceManagerClass;//[Offset: 0xd8, Size: 0x8]
	class ArkPromptManager* ArkPromptManagerClass;//[Offset: 0xe0, Size: 0x8]
	class ArkNotificationManager* ArkNotificationManagerClass;//[Offset: 0xe8, Size: 0x8]
	class ArkSettlementManager* SettlementManagerClass;//[Offset: 0xf0, Size: 0x8]
	class ArkShuttleManager* ShuttleManagerClass;//[Offset: 0xf8, Size: 0x8]
	class ArkAnimCompressManager* AnimCompressManagerClass;//[Offset: 0x100, Size: 0x8]
	class ArkParticleSpawnSignificanceManager* ParticleSpawnSignificanceManagerClass;//[Offset: 0x108, Size: 0x8]
	class ArkResourceManagerBase* CustomRoomDataManagerClass;//[Offset: 0x110, Size: 0x8]
	class ArkPveModifierManager* ModifierManagerClass;//[Offset: 0x118, Size: 0x8]
	class ArkPoolManager* CustomPoolDataManagerClass;//[Offset: 0x120, Size: 0x8]
	class ArkPreloadManagerInGame* PreloadManagerInGameClass;//[Offset: 0x128, Size: 0x8]
	class ArkFacilityManager* FacilityManagerClass;//[Offset: 0x130, Size: 0x8]
	class ArkItemShopManager* ItemShopManagerClass;//[Offset: 0x138, Size: 0x8]
	class ArkHeroAnimationEmoteManager* HeroAnimationEmoteManagerClass;//[Offset: 0x140, Size: 0x8]
	class ArkNotebookManager* InGameNotebookManagerClass;//[Offset: 0x148, Size: 0x8]
	class ArkMimirNetManager* MimirNetManagerClass;//[Offset: 0x150, Size: 0x8]
	class ArkTeamDistinctionObjectManager* TeamDistinctionObjectManagerClass;//[Offset: 0x158, Size: 0x8]
	class ArkStatisticalEventsManager* StatisticalEventsManagerClass;//[Offset: 0x160, Size: 0x8]
	class ArkDebugManager* DebugManagerClass;//[Offset: 0x168, Size: 0x8]
	class ArkSystemActivationManager* SystemActivationManagerClass;//[Offset: 0x170, Size: 0x8]
	class ArkPipTipManager* PipTipManagerClass;//[Offset: 0x178, Size: 0x8]
	class ArkOnBoardingManager* OnBoardingManagerClass;//[Offset: 0x180, Size: 0x8]
	class ArkContentPreviewManager* ContentPreviewManagerClass;//[Offset: 0x188, Size: 0x8]
	class ArkServerErrorCodeManager* ServerErrorCodeManagerClass;//[Offset: 0x190, Size: 0x8]
	class ArkShieldGeneratorManager* ShieldGeneratorManagerClass;//[Offset: 0x198, Size: 0x8]
	class ArkCinematicManager* CinematicManagerClass;//[Offset: 0x1a0, Size: 0x8]
	class ArkAntiCheatManager* AntiCheatManagerClass;//[Offset: 0x1a8, Size: 0x8]
	class ArkNanoSeedManager* NanoSeedManagerClass;//[Offset: 0x1b0, Size: 0x8]
	class ArkCommodityManager* CommodityManagerClass;//[Offset: 0x1b8, Size: 0x8]
	class ArkLootManager* LootManagerClass;//[Offset: 0x1c0, Size: 0x8]
	class ArkHavenAIManager* HavenAIManagerClass;//[Offset: 0x1c8, Size: 0x8]
	class ArkJumpManager* JumpManagerClass;//[Offset: 0x1d0, Size: 0x8]
	class ArkCountDownManager* CountDownManagerClass;//[Offset: 0x1d8, Size: 0x8]
	class ArkCommonCountDownManager* CommonCountDownManagerClass;//[Offset: 0x1e0, Size: 0x8]
	ArkWorldSettings* OuterWorldSettings;//[Offset: 0x1e8, Size: 0x8]

--------------------------------
Class: ArkManagerBase.Object
	World* CacheWorld;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: ArkECSManager.ArkManagerBase.Object
	ArkPlayerDataBlackboard* PlayerDataBlackboard;//[Offset: 0x90, Size: 0x8]
	ArkAIDataBlackboard* AIDataBlackboard;//[Offset: 0x98, Size: 0x8]
	DataTable* PlayerMetaTable;//[Offset: 0x128, Size: 0x8]
	DataTable* AIMetaTable;//[Offset: 0x130, Size: 0x8]
	float CurrentTime;//[Offset: 0x138, Size: 0x4]
	float SmoothServerTime;//[Offset: 0x13c, Size: 0x4]
	ArkShuttleDataBlackboard* ShuttleDataBlackboard;//[Offset: 0x140, Size: 0x8]
	DataTable* ShuttleMetaTable;//[Offset: 0x148, Size: 0x8]
	ArkUIDataBlackboard* UIDataBlackboard;//[Offset: 0x150, Size: 0x8]
	ArkGameSystemData* ServerGameSystems;//[Offset: 0x158, Size: 0x8]
	ArkGameSystemData* ClientGameSystems;//[Offset: 0x160, Size: 0x8]
	ArkGameSystem*[] GameSystems;//[Offset: 0x168, Size: 0x10]
	ArkGameSystem*[] ReplicatedGameSystems;//[Offset: 0x178, Size: 0x10]
	<ArkGameDataCollection*> GameDataCollections;//[Offset: 0x188, Size: 0x50]
	ArkECSPackageMapClient* ECSPackageMapClient;//[Offset: 0x238, Size: 0x8]
	ArkAIAsyncSpawnBlueprintProxy*[] AllAsyncSpawnProxyObjects;//[Offset: 0x338, Size: 0x10]
	delegate DarkValueChangeDelegate;//[Offset: 0x348, Size: 0x10]
	void OnDarkValueChange__DelegateSignature(float DarkValue);// 0x305c9c0
	ArkGameSystem*[] GetGameSystems();// 0x27143b0
	static ArkECSManager* Get(const Object* WorldContext);// 0x2713c40
	static void BroadcastStructEvent_BP(const Object* WorldContext, out const int Param);// 0x1e76ea0

--------------------------------
Class: ArkGameSystem.Object
	bool bIsServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bIsDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: ArkPlayerDataBlackboard.ArkGameDataCollection.Object
	<PlayerCharacters_Key(UInt64Property),ArkPlayer*> PlayerCharacters;//[Offset: 0x58, Size: 0x50]
	<int,ArkPlayerTeamData*> TeamData;//[Offset: 0xa8, Size: 0x50]
	ArkInfluenceMap* ServerNearInfluenceMap;//[Offset: 0x108, Size: 0x8]
	ArkInfluenceMap* ServerMediumInfluenceMap;//[Offset: 0x110, Size: 0x8]
	ArkInfluenceMap* ServerFarInfluenceMap;//[Offset: 0x118, Size: 0x8]
	ArkPostProcess*[] PostProcessQueue;//[Offset: 0x120, Size: 0x10]

--------------------------------
Class: ArkGameDataCollection.Object
	ArkGameDataCollection*[] ChildData;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: ArkPlayer.ArkCharacterBase.Character.Pawn.Actor.Object
	float OwnedPLayEffectIntervalTime;//[Offset: 0x1b84, Size: 0x4]
	ArkWeaponInventoryComponent* WeaponInventoryComponent;//[Offset: 0x1bf8, Size: 0x8]
	delegate OnEndFallingDelegate;//[Offset: 0x1d08, Size: 0x10]
	delegate OnGenderChangeDelegate;//[Offset: 0x1d18, Size: 0x10]
	delegate OnToggleTeamSkill;//[Offset: 0x1d28, Size: 0x10]
	delegate OnTeamSkillCoolDown;//[Offset: 0x1d38, Size: 0x10]
	delegate OnSelectedItemIndexChange;//[Offset: 0x1d48, Size: 0x10]
	delegate OnTrySwitchingWeapon;//[Offset: 0x1d58, Size: 0x10]
	delegate OnCurrentWeaponChange;//[Offset: 0x1d68, Size: 0x10]
	delegate OnInteractionWeaponChange;//[Offset: 0x1d78, Size: 0x10]
	delegate OnWeaponUpgrade;//[Offset: 0x1d88, Size: 0x10]
	delegate OnWeaponSlotUpdate;//[Offset: 0x1d98, Size: 0x10]
	delegate OnCurrentWeaponChanged;//[Offset: 0x1da8, Size: 0x10]
	delegate OnStartInteractDelegate;//[Offset: 0x1db8, Size: 0x10]
	delegate OnStopInteractDelegate;//[Offset: 0x1dc8, Size: 0x10]
	delegate OnCarringDetached;//[Offset: 0x1dd8, Size: 0x10]
	delegate OnBeKilled;//[Offset: 0x1e58, Size: 0x10]
	delegate OnPlayerEvnetDelegate;//[Offset: 0x1f28, Size: 0x10]
	SceneComponent* Mesh1PCameraComp;//[Offset: 0x20b8, Size: 0x8]
	ArkPlayerCharacterData* CharacterData;//[Offset: 0x20c0, Size: 0x8]
	UInt64Property PlayerId;//[Size: 0x8]
	Rotator TargetViewRotation;//[Offset: 0x20e8, Size: 0xc]
	ArkCameraReplicateViewInfo TargetCameraReplicateViewInfo;//[Offset: 0x20f4, Size: 0x20]
	float InjuredMaxHealthPct;//[Offset: 0x2134, Size: 0x4]
	bool bIsInjured;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2138, Size: 0x1]
	bool bWaittingStreamingLoadAfterTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2148, Size: 0x1]
	bool bIsTeleporting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2149, Size: 0x1]
	byte PlayerIndex;//[Offset: 0x2158, Size: 0x1]
	float InteractPickUpAngle;//[Offset: 0x215c, Size: 0x4]
	MaterialInstance*[] ElementMatInstances;//[Offset: 0x2160, Size: 0x10]
	ArkAbilitySystemComponent* AbilitySystem;//[Offset: 0x2170, Size: 0x8]
	<enum,class GameplayAbility> PlayerAbilityConfig;//[Offset: 0x2178, Size: 0x50]
	bool bMontageActionInterruptable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c8, Size: 0x1]
	AkAudioEvent* ActiveSkillSuccessSound;//[Offset: 0x21d0, Size: 0x8]
	float StartAutoRecoverHealth;//[Offset: 0x21f0, Size: 0x4]
	float EndRemindHealth;//[Offset: 0x21f4, Size: 0x4]
	float EndAutoRecoverHealth;//[Offset: 0x21f8, Size: 0x4]
	float AutoRecoverDelayTime;//[Offset: 0x21fc, Size: 0x4]
	float AutoRecoverPeriod;//[Offset: 0x2200, Size: 0x4]
	float AutoRecoverHealthPerTime;//[Offset: 0x2204, Size: 0x4]
	float AutoRecoverShieldTime;//[Offset: 0x2208, Size: 0x4]
	float AutoRecoverShieldTimeBroken;//[Offset: 0x220c, Size: 0x4]
	float ResistingDeathRotationModify;//[Offset: 0x2210, Size: 0x4]
	float ResistingDeathFiringScaleModify;//[Offset: 0x2214, Size: 0x4]
	float ResistingDeathFiringSpreadModify;//[Offset: 0x2218, Size: 0x4]
	float NearByEnemyDistCheck;//[Offset: 0x2228, Size: 0x4]
	float MapMarkerShowRange;//[Offset: 0x222c, Size: 0x4]
	float MapMarkerShowRangeInPOI;//[Offset: 0x2230, Size: 0x4]
	delegate OnNotifyEndAbility;//[Offset: 0x2238, Size: 0x10]
	delegate OnNotifyMeleeInterruptible;//[Offset: 0x2248, Size: 0x10]
	delegate OnEndInteraction;//[Offset: 0x2258, Size: 0x10]
	delegate OnNotifyInteractionAnimBegin;//[Offset: 0x2268, Size: 0x10]
	delegate OnNotifyInteractionAnimEnd;//[Offset: 0x2278, Size: 0x10]
	ArkPlayerShieldComponent* ShieldComponent;//[Offset: 0x2298, Size: 0x8]
	bool DyingDamageResistanceFromNano;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22a0, Size: 0x1]
	int CurrentActionState;//[Offset: 0x22a4, Size: 0x4]
	int ReplicatedActionState;//[Offset: 0x22a8, Size: 0x4]
	int ServerCurrentActionState;//[Offset: 0x2694, Size: 0x4]
	class ArkDamageType[] IgnoreDamageTypes;//[Offset: 0x2698, Size: 0x10]
	class ArkDamageType* FallingDamageType;//[Offset: 0x26a8, Size: 0x8]
	class ArkDamageType* ExecuteDamageType;//[Offset: 0x26b0, Size: 0x8]
	class ArkDeathCrate* DeathCrateClass;//[Offset: 0x26b8, Size: 0x8]
	AnimMontage* LootDeathCrateAnim;//[Offset: 0x26c0, Size: 0x8]
	ArkDeathCrate* LootingDeathCrate;//[Offset: 0x26c8, Size: 0x8]
	bool IsAttacking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d0, Size: 0x1]
	HitResult LastHit;//[Offset: 0x26d4, Size: 0x88]
	bool IsCarrying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275c, Size: 0x1]
	bool IsTargetingPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275d, Size: 0x1]
	bool IsFiringPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275e, Size: 0x1]
	class ArkInteractionComponent* InteractionComponentClass;//[Offset: 0x2760, Size: 0x8]
	ArkInteractionComponent* InteractionComponent;//[Offset: 0x2768, Size: 0x8]
	bool bIsClientInteractionConfirmed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2770, Size: 0x1]
	DataTable* PlayerConfig;//[Offset: 0x2778, Size: 0x8]
	DataTable* DmgImpulseCfg;//[Offset: 0x2780, Size: 0x8]
	ArkPlayerSoundTable* SoundCfg;//[Offset: 0x2788, Size: 0x8]
	DataTable* DmgFeedBackTable;//[Offset: 0x2790, Size: 0x8]
	bool bPlayerIsAbleToGiveUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27a8, Size: 0x1]
	float CombatStopMontageBlendOutTime;//[Offset: 0x27ac, Size: 0x4]
	bool bCurrentIgnoreRootMotionVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27b1, Size: 0x1]
	class ArkSensorComponent* SensorComponentClass;//[Offset: 0x27b8, Size: 0x8]
	ArkSensorComponent* SensorComponent;//[Offset: 0x27c0, Size: 0x8]
	class ArkActionComponent* ActionComponentClass;//[Offset: 0x27c8, Size: 0x8]
	ArkActionComponent* ActionComponent;//[Offset: 0x27d0, Size: 0x8]
	class ArkWeaponAimAssistComponent* WeaponAimAssistComponentClass;//[Offset: 0x27d8, Size: 0x8]
	ArkWeaponAimAssistComponent* WeaponAimAssistComponent;//[Offset: 0x27e0, Size: 0x8]
	class ArkCombatStateComponent* CombatStateComponentClass;//[Offset: 0x27e8, Size: 0x8]
	ArkCombatStateComponent* CombatStateComponent;//[Offset: 0x27f0, Size: 0x8]
	bool bIsLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2878, Size: 0x1]
	bool bIsCameraLeft;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2878, Size: 0x1]
	bool bIsLargeShield;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2878, Size: 0x1]
	bool bIsLargeShieldFly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2878, Size: 0x1]
	bool bCanLargeShieldFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2878, Size: 0x1]
	bool bIsScanEnhancement;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2878, Size: 0x1]
	ArkPlayer*[] DetectedEnemies;//[Offset: 0x2880, Size: 0x10]
	ArkPickUp*[] DetectedPickups;//[Offset: 0x2890, Size: 0x10]
	Actor*[] BattleSwarmNPCList;//[Offset: 0x28a0, Size: 0x10]
	ArkPlayer*[] SyncDetectedPlayers;//[Offset: 0x28b0, Size: 0x10]
	bool bIsGivingChipCommand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28c4, Size: 0x1]
	bool bCombatAllowed;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28c4, Size: 0x1]
	InteractiveFieldProxyMeshComponent* CachedFieldInteractiveComp;//[Offset: 0x28d8, Size: 0x8]
	ArkCameraSpringArmComponent* CameraBoomComp;//[Offset: 0x28f0, Size: 0x8]
	CameraComponent* CameraComp;//[Offset: 0x28f8, Size: 0x8]
	ArkPlayerMovementComponent* MoveComp;//[Offset: 0x2900, Size: 0x8]
	ArkSoftSkeletalMeshComponent* Mesh1P;//[Offset: 0x2908, Size: 0x8]
	ArkPlayerMeleeComponent* MeleeComp;//[Offset: 0x2910, Size: 0x8]
	ArkPlayerVoteComponent* VoteComponent;//[Offset: 0x2918, Size: 0x8]
	class ArkDialogueComponent* DialogueCompClass;//[Offset: 0x2920, Size: 0x8]
	ArkDialogueComponent* DialogueComp;//[Offset: 0x2928, Size: 0x8]
	class ArkPlayerExchangeComponent* ExchangeComponentClass;//[Offset: 0x2930, Size: 0x8]
	ArkPlayerExchangeComponent* ExchangeComponent;//[Offset: 0x2938, Size: 0x8]
	class ArkPlayerServicingStoreComponent* ServicingStoreComponentClass;//[Offset: 0x2940, Size: 0x8]
	ArkPlayerServicingStoreComponent* ServicingStoreComponent;//[Offset: 0x2948, Size: 0x8]
	class AnimInstance* OverrideTPPPostProcessAnimBlueprint;//[Offset: 0x2950, Size: 0x8]
	class AnimInstance* OverrideFPPPostProcessAnimBlueprint;//[Offset: 0x2958, Size: 0x8]
	bool bIsAIController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2960, Size: 0x1]
	float RadarPeriod;//[Offset: 0x2964, Size: 0x4]
	float MaxRadarRange;//[Offset: 0x2968, Size: 0x4]
	ArkWeaponSlotInfo[] WeaponAttachPointNames;//[Offset: 0x2970, Size: 0x10]
	FName WeaponAttachPointNameLeftHand;//[Offset: 0x2980, Size: 0x8]
	FName WeaponAttachPointNameRightHand;//[Offset: 0x2988, Size: 0x8]
	float HealthPackRecoverHP;//[Offset: 0x2990, Size: 0x4]
	PrimitiveComponent*[] FppVisiblePrimitives;//[Offset: 0x29a0, Size: 0x10]
	PrimitiveComponent*[] TppVisiblePrimitives;//[Offset: 0x29b0, Size: 0x10]
	Vector FppLocOffset;//[Offset: 0x29c0, Size: 0xc]
	Rotator FppRotOffset;//[Offset: 0x29cc, Size: 0xc]
	FName MeshFppAttachSocket;//[Offset: 0x29d8, Size: 0x8]
	FName WeaponFppAttachSocket;//[Offset: 0x29e0, Size: 0x8]
	float FppIdleAnimDelay;//[Offset: 0x29e8, Size: 0x4]
	bool bIsBreathHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29ec, Size: 0x1]
	float BreathHoldingContinueTime;//[Offset: 0x29f0, Size: 0x4]
	float BreathHoldingCoolDownTime;//[Offset: 0x29f8, Size: 0x4]
	float BreathHoldingTriggerGaspingTime;//[Offset: 0x2a08, Size: 0x4]
	float PlayOwnParticleEffectDistance;//[Offset: 0x2a14, Size: 0x4]
	CurveFloat* BulletBetweenShakeCurve;//[Offset: 0x2a18, Size: 0x8]
	class CameraShake* BulletBetweenCameraShake;//[Offset: 0x2a20, Size: 0x8]
	Vector2D BulletBetweenCameraShakeRange;//[Offset: 0x2a28, Size: 0x8]
	CurveFloat* TakeDamageShakeCurve;//[Offset: 0x2a30, Size: 0x8]
	class CameraShake* TakeDamageCameraShake;//[Offset: 0x2a38, Size: 0x8]
	Vector2D TakeDamageCameraShakeRange;//[Offset: 0x2a40, Size: 0x8]
	ForceFeedbackEffect* TakeDamageForceFeedback;//[Offset: 0x2a48, Size: 0x8]
	float MinTakeDamageCameraShakeDuration;//[Offset: 0x2a50, Size: 0x4]
	float CurrentTakeDamageCameraShakeDuration;//[Offset: 0x2a54, Size: 0x4]
	float MinBulletCameraShakeDuration;//[Offset: 0x2a58, Size: 0x4]
	float CurrentBulletCameraShakeDuration;//[Offset: 0x2a5c, Size: 0x4]
	float TeammateRescueTime;//[Offset: 0x2a78, Size: 0x4]
	AnimMontage* ProductAnim;//[Offset: 0x2a80, Size: 0x8]
	FString[] LastDamageList;//[Offset: 0x2a88, Size: 0x10]
	bool bShouldPlayHitReaction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a98, Size: 0x1]
	float PlayHitReactionCD;//[Offset: 0x2a9c, Size: 0x4]
	float AIOutterCombatCircleRadius;//[Offset: 0x2aa8, Size: 0x4]
	float AIInnerCombatCircleRadius;//[Offset: 0x2aac, Size: 0x4]
	float AIAggressivityWhenCarryingElf;//[Offset: 0x2ab0, Size: 0x4]
	float AIPerceiveShowDistance;//[Offset: 0x2ab4, Size: 0x4]
	float AIAlarmShowDistance;//[Offset: 0x2ab8, Size: 0x4]
	ArkPlayerPerceivedInfo[] AIPerceiveInfos;//[Offset: 0x2ac0, Size: 0x10]
	int IndistinctCounter;//[Offset: 0x2ad0, Size: 0x4]
	ArkPlayerCombatWithAIInfo[] CombatAIInfosJustNow;//[Offset: 0x2ad8, Size: 0x10]
	class ArkPlayerSyncAIComponent* SyncAIComponentClass;//[Offset: 0x2af8, Size: 0x8]
	class ArkPlayerSyncVOComponent* SyncVOComponentClass;//[Offset: 0x2b00, Size: 0x8]
	ArkPlayerSyncAIComponent* SyncAIComponent;//[Offset: 0x2b08, Size: 0x8]
	ArkPlayerSyncVOComponent* SyncVOComponent;//[Offset: 0x2b10, Size: 0x8]
	int AnimUpdateRateMin;//[Offset: 0x2b18, Size: 0x4]
	int AnimUpdateRateMax;//[Offset: 0x2b1c, Size: 0x4]
	TimerHandle CheckDoSomethingInCombatTimerHandle;//[Offset: 0x2b20, Size: 0x8]
	ParticleSystem* ProjectilePredictionEmitter;//[Offset: 0x2b68, Size: 0x8]
	ParticleSystem* RelifeEmitterTemplate;//[Offset: 0x2b70, Size: 0x28]
	ArkDmgInfoComponent* DmgInfoComponent;//[Offset: 0x2b98, Size: 0x8]
	ArkPlayerNanoSeedComponent* NanoSeedComponent;//[Offset: 0x2ba0, Size: 0x8]
	ArkItemInventoryComponent* ItemInventoryComponent;//[Offset: 0x2ba8, Size: 0x8]
	class GameplayAbility[] UseItemAbilityClasses;//[Offset: 0x2bb8, Size: 0x10]
	int CurrentItemId;//[Offset: 0x2bc8, Size: 0x4]
	class ArkPlayerAudioComponent* AudioComponentClass;//[Offset: 0x2bd0, Size: 0x8]
	ArkPlayerAudioComponent* AudioComponent;//[Offset: 0x2bd8, Size: 0x8]
	ArkPlayerChipComponent* ChipComponent;//[Offset: 0x2be0, Size: 0x8]
	<Actor*> FoundElites;//[Offset: 0x2c08, Size: 0x50]
	float EventDiscoveryRadius;//[Offset: 0x2c58, Size: 0x4]
	bool bCanReviveOnLevelUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c64, Size: 0x1]
	ArkPlayerAttributeComponent* PlayerAttributeComponent;//[Offset: 0x2c68, Size: 0x8]
	class ArkPlayerLinkToShuttleComponent* PlayerLinkToShuttleComponentClass;//[Offset: 0x2c70, Size: 0x8]
	class ArkPlayerOutLineComponent* PlayerOutLineComponentClass;//[Offset: 0x2c78, Size: 0x8]
	class ArkPlayerExplodeAnimComponent* PlayerExplodeAnimComponentClass;//[Offset: 0x2c80, Size: 0x8]
	class ArkFlammableComponent* FlammableComponentClass;//[Offset: 0x2c88, Size: 0x8]
	ArkPlayerLinkToShuttleComponent* PlayerLinkToShuttleComponent;//[Offset: 0x2c90, Size: 0x8]
	ArkPlayerOutLineComponent* PlayerOutLineComponent;//[Offset: 0x2c98, Size: 0x8]
	ArkPlayerExplodeAnimComponent* PlayerExplodeAnimComponent;//[Offset: 0x2ca0, Size: 0x8]
	ArkFlammableComponent* FlammableComponent;//[Offset: 0x2ca8, Size: 0x8]
	class ArkDmgInfoComponent* DmgInfoComponentClass;//[Offset: 0x2cb0, Size: 0x8]
	class ArkPlayerNanoSeedComponent* NanoSeedComponentClass;//[Offset: 0x2cb8, Size: 0x8]
	bool bShowAlert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc8, Size: 0x1]
	float relifeChipSignDuration;//[Offset: 0x2ccc, Size: 0x4]
	ArkPlayerSightComponent* PlayerSightComponent;//[Offset: 0x2cd0, Size: 0x8]
	class ArkPlayerSightComponent* PlayerSightComponentClass;//[Offset: 0x2cd8, Size: 0x8]
	float PlayerSpawnTime;//[Offset: 0x2ce0, Size: 0x4]
	ArkTeamStart* TeamStartCache;//[Offset: 0x2ce8, Size: 0x8]
	ArkPlayerArmBandComponent* PlayerArmBandComponent;//[Offset: 0x2cf8, Size: 0x8]
	class ArkPlayerArmBandComponent* PlayerArmBandComponentClass;//[Offset: 0x2d00, Size: 0x8]
	ArkProjectileThrowableBase* CurrentHoldingThrowable;//[Offset: 0x2d08, Size: 0x8]
	bool bPressThrowOutKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d10, Size: 0x1]
	bool bPlayingHoldingMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d11, Size: 0x1]
	bool bShoudDelayThrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d12, Size: 0x1]
	bool bCancelThrowItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d13, Size: 0x1]
	enum CurrentHoldingState;//[Offset: 0x2d14, Size: 0x1]
	float AimingToTargetHoldTime;//[Offset: 0x2d18, Size: 0x4]
	AnimMontage* DeathAnimationMontage;//[Offset: 0x2d20, Size: 0x8]
	bool UseRagdollForDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d28, Size: 0x1]
	float BurningEffectBlendSeconds;//[Offset: 0x2d2c, Size: 0x4]
	CurveFloat* BurningEffectCurve;//[Offset: 0x2d30, Size: 0x8]
	float GodEffectFadeInTime;//[Offset: 0x2d40, Size: 0x4]
	float GodEffectFadeOutTime;//[Offset: 0x2d44, Size: 0x4]
	ArkPlayerNanoArmComponent* PlayerNanoArmComponent;//[Offset: 0x2d60, Size: 0x8]
	class ArkPlayerNanoArmComponent* PlayerNanoArmComponentClass;//[Offset: 0x2d68, Size: 0x8]
	class ArkPlayerCheatWidgetsComponent* CheatWidgetsComponentClass;//[Offset: 0x2d88, Size: 0x8]
	ArkPlayerCheatWidgetsComponent* CheatWidgetsComponent;//[Offset: 0x2d90, Size: 0x8]
	bool bLightingChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d98, Size: 0x1]
	bool bLightingChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d98, Size: 0x1]
	bool bLightingChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d98, Size: 0x1]
	int iDefaultSuitID;//[Offset: 0x2d9c, Size: 0x4]
	int iDefaultGender;//[Offset: 0x2da0, Size: 0x4]
	ArkAvatarComponent* AvatarComponent;//[Offset: 0x2da8, Size: 0x8]
	SkeletalMesh* DefaultMeshOnServer;//[Offset: 0x2dc0, Size: 0x28]
	float UpdateAvatarInterval;//[Offset: 0x2de8, Size: 0x4]
	PhysicalMaterial* PhysMatOverride_NanoArm;//[Offset: 0x2df0, Size: 0x8]
	FName FocalDistanceSocket;//[Offset: 0x2dfc, Size: 0x8]
	bool bDefaultAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e04, Size: 0x1]
	bool bMaximizeHealthWhenLevelUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e06, Size: 0x1]
	bool bMaximizeShieldWhenLevelUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e07, Size: 0x1]
	ArkHavenRPCInterface* RPCInterface;//[Offset: 0x2e08, Size: 0x8]
	float DeathServerLifeSpanDelaySeconds;//[Offset: 0x2e10, Size: 0x4]
	float ExecuteDeathServerLifeSpanDelaySeconds;//[Offset: 0x2e14, Size: 0x4]
	float DeathServerSpectateDelaySeconds;//[Offset: 0x2e18, Size: 0x4]
	float ExecuteDeathServerSpectateDelaySeconds;//[Offset: 0x2e1c, Size: 0x4]
	float DeathClientLifeSpanDelaySeconds;//[Offset: 0x2e20, Size: 0x4]
	float ExecuteDeathClientLifeSpanDelaySeconds;//[Offset: 0x2e24, Size: 0x4]
	float DeathRemoteLifeSpanDelaySeconds;//[Offset: 0x2e28, Size: 0x4]
	class ArkPlayerBagComponent* BagComponentClass;//[Offset: 0x2e30, Size: 0x8]
	ArkPlayerBagComponent* PlayerBagComponent;//[Offset: 0x2e38, Size: 0x8]
	ArkItemCartridgebelt* m_ItemCartridgebelt;//[Offset: 0x2e40, Size: 0x8]
	int ItemCartridgebeltID;//[Offset: 0x2e48, Size: 0x4]
	<int,int> WeaponToPlunginSkinInfo;//[Offset: 0x2e60, Size: 0x50]
	ParticleSystem* ArmBandFX;//[Offset: 0x2eb0, Size: 0x28]
	<enum,ParticleSystem*> PlayerOwnParticleEffectMap;//[Offset: 0x2ed8, Size: 0x50]
	FName ArmBandFxAttachSocket_Male;//[Offset: 0x2f28, Size: 0x8]
	FName ArmBandFxAttachSocket_FeMale;//[Offset: 0x2f30, Size: 0x8]
	ArkSoftParticleSystemComponentWithPool* ArmBandFXComp;//[Offset: 0x2f38, Size: 0x8]
	bool bDmgReduceWhenShieldBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f40, Size: 0x1]
	class WidgetComponent* PopupMenuProductWidgetClass;//[Offset: 0x2f48, Size: 0x8]
	WidgetComponent* UIProductWidgetComponent;//[Offset: 0x2f50, Size: 0x8]
	MaterialInterface* Product3dMat;//[Offset: 0x2f58, Size: 0x8]
	Vector UIProductRelativeTrans;//[Offset: 0x2f60, Size: 0xc]
	Rotator UIProductRelativeRotation;//[Offset: 0x2f6c, Size: 0xc]
	Vector UIProductRelativeScale;//[Offset: 0x2f78, Size: 0xc]
	FString KillRichTextMode;//[Offset: 0x2f88, Size: 0x10]
	<FName,ArkPostProcessData*> PostProcessMap;//[Offset: 0x2f98, Size: 0x50]
	bool bADSCameraBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fe8, Size: 0x1]
	float ServerSelfIntensity;//[Offset: 0x2ff0, Size: 0x4]
	float ServerTeammateIntensity;//[Offset: 0x2ff4, Size: 0x4]
	int ServerIntensityLevel;//[Offset: 0x2ff8, Size: 0x4]
	float ServerMoveDistanceForIntensity;//[Offset: 0x2ffc, Size: 0x4]
	bool ServerIsAtLowIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3000, Size: 0x1]
	float ShuttleIntensity;//[Offset: 0x3004, Size: 0x4]
	float ShuttleIntensityDrakVolumeBlendWeight;//[Offset: 0x3008, Size: 0x4]
	float ShuttleIntensityEffectSpawnCount;//[Offset: 0x3010, Size: 0x4]
	int ShuttleIntensitySpawnSwarmNpcCount;//[Offset: 0x3014, Size: 0x4]
	int ShuttleIntensitySpawnEliteNpcCount;//[Offset: 0x3018, Size: 0x4]
	float ShuttleIntensityRestrictedRadius;//[Offset: 0x301c, Size: 0x4]
	float ShuttleIntensityMaxRadius;//[Offset: 0x3020, Size: 0x4]
	float SyncWayPointToSyncAiTime;//[Offset: 0x3024, Size: 0x4]
	ArkBuildComponent* BuildComponent;//[Offset: 0x3028, Size: 0x8]
	class ArkPlayerSyncShuttleComponent* SyncShuttleComponentClass;//[Offset: 0x3030, Size: 0x8]
	ArkPlayerSyncShuttleComponent* NewSyncShuttleComponent;//[Offset: 0x3038, Size: 0x8]
	class ArkPlayerMultiWidgetsComponent* SyncShuttleWidgetsClass;//[Offset: 0x3040, Size: 0x8]
	ArkPlayerMultiWidgetsComponent* SyncShuttleWidgetsComponent;//[Offset: 0x3048, Size: 0x8]
	bool bSyncShuttleWidgetVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3050, Size: 0x1]
	ArkSoftParticleSystemComponentWithPool* ArmBandParticleComponent;//[Offset: 0x3058, Size: 0x8]
	enum ArmBandParticleDefaultType;//[Offset: 0x3060, Size: 0x1]
	ArkPlayerAssistInfo[] InjuredPlayerInfoList;//[Offset: 0x3068, Size: 0x10]
	int BeMarkedCount;//[Offset: 0x307c, Size: 0x4]
	bool bEnableAimingPointUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3084, Size: 0x1]
	ArkSoftParticleSystemComponentWithPool* PickScorePersistParticle;//[Offset: 0x3088, Size: 0x8]
	ArkProjectileAutoReviveTower* ReviveTower;//[Offset: 0x30f8, Size: 0x8]
	int ReviveTowerItemID;//[Offset: 0x3100, Size: 0x4]
	FName ReviveTowerCDTag;//[Offset: 0x3104, Size: 0x8]
	class ArkPlayerSuperJumpComponent* SuperJumpCompClass;//[Offset: 0x3110, Size: 0x8]
	bool bEnableSuperJumpExtraAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3118, Size: 0x1]
	ArkPlayerSuperJumpComponent* SuperJumpComponent;//[Offset: 0x3120, Size: 0x8]
	class ArkPlayerAnimCameraModiferComponent* AnimCameraModiferCompClass;//[Offset: 0x3128, Size: 0x8]
	ArkPlayerAnimCameraModiferComponent* AnimCameraModiferComp;//[Offset: 0x3130, Size: 0x8]
	bool IsFiringPressed_Rep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3138, Size: 0x1]
	class ArkPlayerStealthComponent* StealthCompClass;//[Offset: 0x3140, Size: 0x8]
	ArkPlayerStealthComponent* StealthComponent;//[Offset: 0x3150, Size: 0x8]
	MaterialInstanceDynamic* ADS_PP_Instance;//[Offset: 0x3158, Size: 0x8]
	bool bEnabledPostProcess_ADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3160, Size: 0x1]
	bool bEnableADSPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3161, Size: 0x1]
	FName FPPAttachSocket;//[Offset: 0x3164, Size: 0x8]
	bool bUsePostProcessSystemForADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x316c, Size: 0x1]
	ArkPlayerGardebrasComponent* PlayerGardebrasComponent;//[Offset: 0x3178, Size: 0x8]
	int nEnergyPoolEffectIndex;//[Offset: 0x3198, Size: 0x4]
	int RecentLocIdxOffset;//[Offset: 0x339c, Size: 0x4]
	PrimitiveComponent* CacheSyncAIShieldComp;//[Offset: 0x33a0, Size: 0x8]
	bool bIsPvpGuidQuestFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33a8, Size: 0x1]
	ArkDSPlayerWeaponPluginData[] WeaponPlugins;//[Offset: 0x33b0, Size: 0x10]
	<int,ArkDSPlayerWeaponPluginData> WeaponPluginsMap;//[Offset: 0x33c0, Size: 0x50]
	void WeaponTacticalAction(enum NewTacticalAction, bool bPlayAnim, float DelayUpdateWeaponAttachTime);// 0x28999a0
	void UseCurrentItem();// 0x2899980
	void UpdateWeaponAttachSlot(float DelayUpdateWeaponAttachTime);// 0x2899900
	void UpdatePlayerTargeting(bool inTargeting);// 0x305c9c0
	void UpdatePlayerAiming(bool inAiming);// 0x305c9c0
	void UnloadWeapon(bool bIsUnload);// 0x2899870
	void UnbindCustomEventOnLeaveActionState(enum ActionState, delegate CustomEvent);// 0x2899790
	void UnbindCustomEventOnEnterActionState(enum ActionState, delegate CustomEvent);// 0x28996b0
	void TrySetAvatarFromSurvivorInfo(out const ArkHavenSurvivorInfo SurvivorInfo);// 0x28994e0
	void TryCommandSyncedAIAlliesFollow();// 0x2898960
	void ToggleLeftRight();// 0x2898940
	void ToggleIsAiming();// 0x2898920
	void ThrowCurrentWeapon(float PitchOffset, bool bDualMain);// 0x2898850
	void TeleportFinish();// 0x2898830
	void TeleportBegin();// 0x2898810
	void SwitchWeaponPlugins();// 0x28987f0
	void Suicide();// 0x28987d0
	void StopPlayWindEffect(InteractiveFieldProxyMeshComponent* InInteractiveComp);// 0x2898750
	void StopFireImmediately();// 0x2898730
	void StopFire();// 0x2898710
	void StopAllAnimMontages();// 0x28986f0
	void StartReload();// 0x28986d0
	void StartKnockup(float KnockupDuration);// 0x2898650
	void StartFire();// 0x2898630
	void StablizeDynamicAnims();// 0x2898610
	ArkProjectileBase* SpawnThrowableItem(Transform SpawnTrans, int ThrowableItemID, float SpeedOverride);// 0x2898490
	void SpawnPve();// 0x2898470
	void SmoothRemoteView(float DeltaTime);// 0x2898180
	void ShowUIWidgetComp(bool bVisible);// 0x28980f0
	bool ShouldBeIgnoredByAI();// 0x28980c0
	void SetWeaponPlugins();// 0x28980a0
	void SetShining(bool bShine);// 0x2898010
	void SetPVEPlayerStatistics(enum StatisticsType, int Value);// 0x2897b60
	void SetPlayerStatistics(enum StatisticsType, int Value);// 0x2897f50
	void SetPlayerDepthEnableWithDetecter(bool Enable, FName detecter, int Stencil, int Priority);// 0x2897e10
	void SetPlayerDepthEnable(bool Enable, int Stencil);// 0x2897d50
	void SetPlayerCameraZOffset(out const float Offset);// 0x2897cb0
	void SetPlayerCameraRotation(out const Rotator InRotator);// 0x2897c20
	void SetMoveCompVelocity(Vector TheVelocity);// 0x2897ad0
	void SetItemCartridgebelt(ArkItemCartridgebelt* inCartridgebelt);// 0x2897a50
	void SetIsTargeting(bool bTargeting);// 0x28979c0
	void SetIsSyncingShuttle(bool bSyncingShuttle);// 0x2897930
	void SetIsScanEnhancement(bool bScanEnhancement);// 0x28978a0
	void SetIsOpenMap(bool bOpenMap);// 0x2897810
	void SetIsOpenBag(bool bOpenBag);// 0x2897780
	void SetIsLeftWithoutRPC(bool bLeft);// 0x28976f0
	void SetIsLeft(bool bLeft);// 0x2897660
	void SetIsLargeShieldRelease(bool bLargeShieldRelease);// 0x28975d0
	void SetIsLargeShieldFly(bool bLargeShieldFly);// 0x2897540
	void SetIsLargeShield(bool bLargeShield);// 0x28974b0
	void SetIsGivingChipCommand(bool bGivingChipCommand);// 0x2897420
	void SetIsForceWalkingMode(bool NewWalkingMode);// 0x2897390
	void SetIsCombatAllowed(bool CombatAllowed);// 0x2897300
	void SetIsCameraLeft(bool bCameraLeft);// 0x2897270
	void SetIsAiming(bool bAiming);// 0x28971e0
	void SetGuideLineActive(bool bActive, const ArkItemThrowable* HoldingItem);// 0x2897120
	void SetDesiredRotation(Rotator rot);// 0x2897090
	void SetCurrentWeapon(ArkWeaponBase* NewWeapon, enum Reason);// 0x2896fd0
	void SetCurrentItemId(int inID);// 0x2896f50
	void SetCurrentIgnoreRootMotionVelocity(bool bIgnore);// 0x2896ec0
	void SetCurrentElementType(enum ElementType);// 0x2896e40
	void SetClientInteractionConfirmed(bool bValue);// 0x2896db0
	void SetCanLargeShieldFly(bool bLargeShieldFly);// 0x2896d20
	void SetBurningIntensity(float InTargetIntensity);// 0x2896ca0
	void SetAllWeaponVisible(bool bVisible);// 0x2896c10
	void SetAllWeaponMaterialParam(FName ParamName, float InValue);// 0x2896b40
	void SetAllWeaponMaterial(MaterialInstance* InMaterial);// 0x2896ac0
	void SetAIPlayerSyncState(enum SyncState);// 0x28968a0
	void ServerUseItemByUID(int ItemUID);// 0x2896720
	void ServerUseItem(int ItemId);// 0x2896660
	void ServerTryToGiveUpMatch();// 0x2896610
	void ServerTryPlayVOLineTeamMates(FName AkEventName);// 0x2896550
	void ServerTryEndInteractingWith(Object* TargetObjRef, enum InteractionType);// 0x2896450
	void ServerTryAutoPickUp(ArkPickUp* PickUp);// 0x2896390
	void ServerTryActivateChip();// 0x2896340
	void ServerThrowOut();// 0x28962f0
	void ServerSuicide();// 0x28962a0
	void ServerStopShootHolding();// 0x2896250
	void ServerSpawnOverTimeExplosion(int inItemID);// 0x2896190
	void ServerSetPlayingHoldingMontage(bool bPlaying);// 0x28960d0
	void ServerSetPlayerLootingInfo(ArkDeathCrate* DeathCrate);// 0x2896010
	void ServerSetIsScanEnhancement(bool bScanEnhancement);// 0x2895f50
	void ServerSetIsLeft(bool bLeft);// 0x2895e90
	void ServerSetIsLargeShieldFly(bool bLargeShieldFly);// 0x2895dd0
	void ServerSetIsLargeShield(bool bLargeShield);// 0x2895d10
	void ServerSetIsInteractingWithUI(bool bIsInteractingWithUI);// 0x2895c50
	void ServerSetIsFiringPressed_Rep(bool bNewValue);// 0x2895bc0
	void ServerSetIsCameraLeft(bool bLeft);// 0x2895b00
	void ServerSetIsBreathHolding(bool bBreathHolding);// 0x2895a40
	void ServerSetIsAimming(bool bAiming);// 0x2895980
	void ServerSetInteractionInfo(ArkDeathCrate* InActor);// 0x28958c0
	void ServerSetCurrentItemId(int inItemID);// 0x2895800
	void ServerSetCanLargeShieldFly(bool bLargeShieldFly);// 0x2895740
	void ServerSendBeginTineractingEvent(enum InteractionType);// 0x2895690
	void ServerPlayBubbleAndPoseByConfigId(int ConfigId);// 0x2895600
	void ServerPassTunnelWarfareDoor(FString DoorTagString, const Vector EnterLocation, const int PassDirection);// 0x28954f0
	void ServerNotifySelfBulletWhoosh(ArkPlayer* WeaponOwner, float inDist);// 0x28953f0
	void ServerNotifyEnemyBulletWhoosh();// 0x28953a0
	void ServerNotifyAim(ArkPlayer* Target);// 0x28952e0
	void ServerLootDeathCrateItem(int ItemUID, int InventoryItemUID, bool bAbsolutely, FString InValue);// 0x2895150
	void ServerLootAllDeathCrateItem();// 0x2895100
	void ServerGrantInitialBuffBooster(int ItemId);// 0x2895040
	void ServerGMSetAnimEmoteSlotConfig(int SlotIndex, int SlotConfigId);// 0x2894f80
	void ServerFinishedStartSequence();// 0x2726450
	void ServerFinishedClientLoading();// 0x2726690
	void ServerFindElite(Actor* Elite);// 0x2894ec0
	void ServerEventDiscoveryActor(Actor* DiscoveryActor);// 0x2894e00
	void ServerEquipWeapon(ArkWeaponBase* Weapon);// 0x2894d40
	void ServerEnterTunnelWarfareDoor(FString DoorTagString, const Vector EnterLocation);// 0x2894c60
	void ServerEndLootDeathCrate();// 0x2894c10
	void ServerDropWeapon(ArkWeaponBase* bDroppedWeapon);// 0x2894b50
	void ServerDropItemByUid(int ItemUID, int Count);// 0x2894a50
	void ServerDropItem(int ItemId, int Count);// 0x2894950
	void ServerDropCurrentWeapon(bool bAutoChangeWeapon);// 0x2894890
	void ServerConsumeItem(int ItemId);// 0x28947d0
	void ServerClearOverTimeExplosionTimer();// 0x2894780
	void ServerChangeCurrentShortcutItemID(int CurrentShortcutItemID);// 0x28946c0
	void ServerCancelUseItem(enum ItemType);// 0x2894610
	void ServerbPressThrowOutKey(bool bPressing);// 0x28967e0
	void ServerAddSyncStartTag();// 0x28945c0
	void ServerAddSyncEndTag();// 0x2894570
	void SendAnimNotifyEvent(FString AnimName);// 0x28944d0
	void SelectNextItem();// 0x28944b0
	bool SavePlayer(ArkPlayer* InPlayer);// 0x2894420
	void ResetPlayerRotationFollowController();// 0x2894400
	void ResetPlayerCamera();// 0x28943e0
	void ResetInventory();// 0x28943c0
	void ResetGodEffect();// 0x28943a0
	void ResetAnimInstances();// 0x2894380
	bool RemovePlunginSkinInfoByWeaponID(int BaseWeaponID);// 0x28942f0
	void RemoveIgnoreDamageType(class ArkDamageType DTClass);// 0x2894250
	void RecoverWalkingAfterTeleport();// 0x2894230
	void PrePlayHitReaction();// 0x2894210
	void PlayPlayerOwnParticleEffect(enum EffectType, bool ForceSpawn);// 0x2894140
	void PlayBulletBetweenCameraShake(float PlayerRadius);// 0x28940c0
	InteractiveFieldProxyMeshComponent* PlayBoxWindEffect(out const FName SocketName, out const Transform OffsetTransform, out const Vector BoxExtent, MaterialInterface* WindMat);// 0x2893ef0
	void OverrideIntensityDecaySpeed(float NewDecaySpeed);// 0x2893e70
	void OnSwitchRangeWeapon();// 0x2893dd0
	void OnSwitchPistolWeapon();// 0x2893db0
	void OnSwitchMeleeWeapon();// 0x2893d90
	void OnStartPlayVO();// 0x2893d70
	void OnShuttleIntensityUpdate_BP();// 0x305c9c0
	void OnShowWeaponSetUI();// 0x2893d50
	void OnServerSwitchPrevWeapon();// 0x2893ca0
	void OnRightFootPrint();// 0x305c9c0
	void OnRep_WeaponPlugins();// 0x2893c80
	void OnRep_SyncShuttleWidgetVisibility();// 0x2893c60
	void OnRep_ShuttleIntensityEffectSpawnCount();// 0x2893c40
	void OnRep_ShuttleIntensityDrakVolumeBlendWeight();// 0x2893c40
	void OnRep_ServerTeleportNotify();// 0x2893c20
	void OnRep_ServerIsAtLowIntensity();// 0x2893c00
	void OnRep_ReplicatedActionState(int OldActionState);// 0x2893b80
	void OnRep_PlayerIndex(byte oldIndex);// 0x2893b00
	void OnRep_PlayerId();// 0x2893ae0
	void OnRep_IsScanEnhancement();// 0x2893aa0
	void OnRep_IsLeft();// 0x2893a80
	void OnRep_IsLargeShieldFly();// 0x2893a60
	void OnRep_IsLargeShield();// 0x2893a40
	void OnRep_IsCombatAllowed();// 0x2893a20
	void OnRep_IsCameraLeft();// 0x2893a00
	void OnRep_IsAIController();// 0x28939e0
	void OnRep_IndistinctCounter(int OldIndistinctCounter);// 0x2893960
	void OnRep_HoldingThrowable();// 0x2893940
	void OnRep_EnergyPoolEffectIndex();// 0x2893920
	void OnRep_CombatAIInfo();// 0x2893900
	void OnRep_ChangeShowAlert();// 0x28938e0
	void OnRep_CartridgebeltID();// 0xae2270
	void OnRep_CanLargeShieldFly();// 0x28938c0
	void OnRep_AIPerceiveInfo();// 0x2893880
	void OnPveSync();// 0x2893860
	void OnPS5SkipToMatchmaking();// 0xae2270
	void OnPlayerSurvivorIDChanged(byte Result, FString SurvivorID);// 0x2893780
	void OnPlayerLeftBehind();// 0x28936a0
	void OnPlayerKillOther(bool bWeakPoint);// 0x2893610
	void OnPlayerIsAtLowIntensity_BP(bool bIsAtLowIntensity);// 0x305c9c0
	void OnPlayerHitOther(bool bKilled);// 0x2893580
	void OnPlayerExtracted();// 0x2893560
	void OnPlayerAddAmmo(int DeltaAmmo);// 0x28934e0
	void OnNotify_OpenProductExitAiming();// 0x28934c0
	void OnNotify_CloseProductMenuResistingDeath();// 0x28934a0
	void OnLeftFootPrint();// 0x305c9c0
	void OnInitWeatherPramWhenIsLocalPlayer();// 0x305c9c0
	void OnIndistinctCounterChanged_BP(int OldIndistinctCounter, int NewIndistinctCounter);// 0x305c9c0
	void OnHavenDataReady(enum InDataType);// 0x2893400
	void OnExitCinematic(int CinematicParams);// 0x28930d0
	void OnEnterCinematic(int CinematicParams);// 0x2892e80
	void OnEndTeleportInvincibleTimer();// 0x2892de0
	void OnEndSpawnInvincibleTimer();// 0x26b47f0
	void OnEndPlayVO();// 0x2892dc0
	void OnCreateAvatarDone(const ArkItemAvatar* AvatarItem);// 0x2892d40
	void OnChangeShadowQuality(int Quality);// 0x12c2b10
	void OnArkPlayerCreateAvatarDone__DelegateSignature();// 0x305c9c0
	void NotifyStopInteracting(Object* TargetObjRef, enum InteractionType, bool bCancelled, float RemainingTime);// 0x2892bf0
	void NotifyStartInteracting(Object* TargetObjRef, enum InteractionType, float Duration);// 0x2892ae0
	void NotifyPlayerProductMenuOpen();// 0x305c9c0
	void NotifyPlayerAiming(bool inAiming);// 0x305c9c0
	void NotifyPlayEquipAnim(AnimMontage* inMontage, float inRate);// 0x305c9c0
	void NotifyManuFactureItemSucceed(bool bSucceed);// 0x305c9c0
	void NotifyInHideAreaEffect(bool bin);// 0x305c9c0
	void NotifyAddEnergyAt(int EnergyCount, Transform EnergyTrans);// 0x305c9c0
	void NofityPlayerGender(int InGender);// 0x305c9c0
	void MulticastUseItem(int ItemId);// 0x2892a50
	void MulticastEndUseItem(int ItemId);// 0x28929c0
	void MulticastCancelUseItem(int ItemId);// 0x2892930
	void MulticastBeginUseItem(int ItemId);// 0x28928a0
	void ModifyPVEPlayerStatistics(enum StatisticsType, int ModifyValue);// 0x2892640
	void ModifyPlayerStatistics(enum StatisticsType, int ModifyValue);// 0x28927e0
	void ModifyPlayerHavenStat(out const ArkHavenStatPropertyRef HavenStat, int ModifyValue);// 0x2892700
	void LeaveActionState(enum ActionState, bool bClientSimulation);// 0x2892570
	bool IsTricking();// 0x2892540
	bool IsTeleporting();// 0x2892520
	bool IsSyncLessDistraction();// 0x28924f0
	bool IsSpeaking();// 0x28924c0
	bool IsScanEnhancement();// 0x2892490
	bool IsRemindHealth();// 0x2892460
	bool IsPlayingHitReaction();// 0x2892430
	bool IsPlayerJustSpawn(float Duration);// 0x28923a0
	bool IsOnline();// 0x28922e0
	bool IsNovicePlayer();// 0x28922b0
	bool IsNotDsOrIsRobot();// 0x2892280
	bool IsNearByHaveTeammate(float ToCheckDist);// 0x28921f0
	bool IsNearByHaveEnemy();// 0x28921c0
	bool IsMovementStop();// 0x2892190
	bool IsLowHealth();// 0x2892160
	bool IsLeft();// 0x2892130
	bool IsLargeShieldRelease();// 0x2892100
	bool IsLargeShieldFly();// 0x28920d0
	bool IsLargeShieldAction();// 0x28920a0
	bool IsLargeShield();// 0x2892070
	bool IsInteracting();// 0x2891fe0
	bool IsInSpecialAction();// 0x2891fb0
	bool IsInHideArea();// 0x2891f80
	bool IsInCombat();// 0x2891f50
	bool IsInCinematicMode();// 0x2891f20
	bool IsInActionState(enum ActionState);// 0x2891e90
	bool IsForceWalking();// 0x2891e60
	bool IsEvading();// 0x2891e30
	bool IsDynamicSpeaking();// 0x2891e00
	bool IsDropping();// 0x2891da0
	bool IsChief();// 0x2891d70
	bool IsBuildModeOn();// 0x2891d40
	bool IsBattle();// 0x2891d10
	bool IsAbleToGiveUp();// 0x2891cc0
	void InvisiableForAI(bool bVisiable);// 0x2891c30
	void HideWeapon(enum InventorySlot, bool bIsHide);// 0x2891b60
	enum GetWeaponSlot(ArkWeaponBase* Weapon);// 0x2891ad0
	ArkWeaponInventoryComponent* GetWeaponInventoryComponent();// 0x2891ab0
	ArkWeaponBase* GetWeaponByUID(int ItemUID);// 0x2891a20
	ArkWeaponBase* GetWeaponBySlot(enum Slot);// 0x2891990
	ArkWeaponAimAssistComponent* GetWeaponAimAssistComponent();// 0x2891970
	ArkTeamStart* GetTeamStart();// 0x2891940
	ArkPlayerShieldComponent* GetShieldComponent();// 0x28918c0
	FString GetServerActionStateString();// 0x2891840
	ArkSensorComponent* GetSensorComponent();// 0x2891820
	float GetReviveAndUseHealthPackScale(float InValue);// 0x2891790
	bool GetPvpGuidQuestFinished();// 0x2891770
	bool GetProductMenuOpen();// 0x2891740
	ArkPlayerSuperJumpComponent* GetPlayerSuperJumpComponent();// 0x2891720
	ArkPlayerStealthComponent* GetPlayerStealthComponent();// 0x2891700
	ArkPlayerSightComponent* GetPlayerSightComponent();// 0x28916e0
	ArkPlayerOutLineComponent* GetPlayerOutLineComponent();// 0x28916c0
	ArkPlayerNanoArmComponent* GetPlayerNanoArmComponent();// 0x28916a0
	FString GetPlayerName();// 0x2891620
	ArkPlayerLinkToShuttleComponent* GetPlayerLinkToShuttleComponent();// 0x2891600
	byte GetPlayerIndex();// 0x28915d0
	FString GetPlayerIDString();// 0x2891550
	ReturnValue(UInt64Property) GetPlayerId();// 0x2891520
	int GetPlayerHavenStat(out const ArkHavenStatPropertyRef HavenStat);// 0x2891470
	ArkPlayerGardebrasComponent* GetPlayerGardebrasComponent();// 0x2891450
	ArkPlayerExplodeAnimComponent* GetPlayerExplodeAnimComponent();// 0x2891430
	FText GetPlayerClassName();// 0x2891390
	ArkPlayerAttributeComponent* GetPlayerAttributeComponent();// 0x2891370
	ArkPlayerArmBandComponent* GetPlayerArmBandComponent();// 0x2891350
	ArkPlayerAnimCameraModiferComponent* GetPlayerAnimCameraModiferComponent();// 0x2891330
	float GetOverrideFovBySpecialState();// 0x28912d0
	int GetNdmQualityItemID(int Quality);// 0x2891240
	ArkPlayerNanoSeedComponent* GetNanoSeedComponent();// 0x2891220
	float GetMapMarkerShowRange();// 0x28911c0
	float GetLowHealth();// 0x2891190
	float GetItemUseDuration(const ArkItem* Item);// 0x2890f50
	ArkItem*[] GetItemsByType(enum ItemType);// 0x28910c0
	ArkItem*[] GetItemsByID(int ItemId);// 0x2890ff0
	ArkItemInventoryComponent* GetItemInventoryComponent();// 0x2890ef0
	ArkItemCartridgebelt* GetItemCartridgebelt();// 0x2890ec0
	ArkItem* GetItemByUID(int ItemUID);// 0x2890e30
	bool GetIsNeedOverrideFovBySpecialState();// 0x2890e00
	bool GetIsFiringPressed_Rep();// 0x2890de0
	GameplayAbility* GetInstancedAbilityByType(enum Type);// 0x2890d50
	float GetInjuredMaxHealthPct();// 0x2890d20
	float GetFocalDistance();// 0x2890cf0
	ArkDmgInfoComponent* GetDmgInfoComponent();// 0x2890cd0
	enum GetCurrentWeaponType();// 0x2890ca0
	enum GetCurrentWeaponSubType();// 0x2890c70
	SkeletalMeshComponent* GetCurrentWeaponMesh();// 0x2890c40
	Actor* GetCurrentTracingTarget(bool bCameraTrace, out float TraceDis);// 0x2890b50
	ArkPlayerMeleeWeapon* GetCurrentMeleeWeapon();// 0x2890b20
	Actor* GetCurrentLockOnTarget();// 0x2890af0
	ArkPlayerMeleeWeapon* GetCurrentExtraMeleeWeapon();// 0x2890ac0
	int GetCurrentAvatarGender();// 0x2890a90
	ArkPlayerMeleeWeapon* GetCurrentAvailableMeleeWeapon();// 0x2890a60
	enum GetCurrentAICommandType();// 0x2890950
	FString[] GetCurrentActivatedAbilities();// 0x2890980
	ArkCombatStateComponent* GetCombatStateComponent();// 0x28908f0
	bool GetClientInteractionConfirmed();// 0x28908c0
	ArkPlayerChipComponent* GetChipComponent();// 0x28908a0
	int GetCanManuItemNum();// 0x2890870
	bool GetCanForbiddenPlayHit();// 0x2890840
	ArkBuildComponent* GetBuildComponent();// 0x2890820
	float GetBreathHoldingCoolDownTime();// 0x28907f0
	ArkPlayerAudioComponent* GetAudioComponent();// 0x28907d0
	ArkFlammableComponent* GetArkFlammableComponent();// 0x28907b0
	ArkWeaponBase*[] GetAllWeapons();// 0x2890730
	int[] GetAllChips();// 0x28906b0
	enum GetAIPlayerSyncState();// 0x28904f0
	float GetAimingToTargetHoldTime();// 0x2890690
	bool GetAimHitLocation(out Vector AimHitLocation);// 0x28905f0
	FString GetActionStateString();// 0x2890570
	int GetActionState();// 0x2890540
	ArkActionComponent* GetActionComponent();// 0x2890520
	void FinalComusmeThrowalbeItem();// 0x2890450
	void Event_PlayerStateChange();// 0x305c9c0
	void EquipWeapon(enum InventorySlot);// 0x2890390
	void EquipPreWeapon();// 0x2890370
	void EquipNextWeapon();// 0x2890350
	void EnterActionState(enum ActionState, bool bClientSimulation);// 0x2890280
	void EnableOutlineType(enum Type, bool bEnable);// 0x28901b0
	void EnableDynamicVO();// 0x2890190
	void EnableDesiredRotation(bool bEnable);// 0x2890100
	void DoShieldBroken();// 0x305c9c0
	void DoShieldAchieve();// 0x305c9c0
	void DisableDynamicVO();// 0x28900e0
	void DelayToSpactate();// 0x28900c0
	void DamagedOtherCharacter(Pawn* CharacterDamaged);// 0x2890030
	float CurrentViewYaw();// 0x2890000
	float CurrentViewPitch();// 0x288ffd0
	Vector CurrentInputAcceleration();// 0x288ff90
	float CurrentControlYaw();// 0x288ff60
	void ClientWeaponUpgrade(int WeaponUID, const int[] CacheNdmIDs);// 0x288fd70
	void ClientViewportFadeOutAndFadeIn(float FadeOutDuration, float BlackDuration, float FadeInDuration);// 0x288fc60
	void ClientUseItem(int ItemId);// 0x288fbd0
	void ClientUpdateServerCurrentActionState(int InCurrentActionState);// 0x288fb40
	void ClientTriggerEffect(bool bTeamateEffects, const ArkAIDetecttionConfig DetectionConfig, const ArkCharacterBase*[] Enemies, ArkCharacterBase* Center, enum ScanType);// 0x288f960
	void ClientTelePort(Vector Location, Rotator rot);// 0x288f880
	void ClientShowRelifeEffect();// 0x2858d20
	void ClientSetTeamStart(ArkTeamStart* TeamStart);// 0x288f7f0
	void ClientSetClientInteractionConfirmed(bool bValue);// 0x288f760
	void ClientRefreshProductList();// 0x288f740
	void ClientReceiveBandModData(int ArmorID, int SyncID, const int[] SyncModIDList, FString WeaponStr, int WeaponId, int WeaponQuantity, const int[] AllPlugins);// 0x288f510
	void ClientPrintActionStateLogs(const ArkPlayerActionStateLog[] Logs, FString Prefix);// 0x288f3f0
	void ClientPlayVOLine(ArkPlayer* Who, const FName AkEventName);// 0x288f320
	void ClientNotifyAim(ArkPlayer* From);// 0x288f290
	void ClientExplodeCameraShake(ArkRadialCameraShakeInfo ShakeInfo);// 0x288f1f0
	void ClientEndUseItem(int ItemId);// 0x288f160
	void ClientEnableActions();// 0x288f140
	void ClientDisableMovementInput(bool bDisable);// 0x2726770
	void ClientCancelUseItem(int ItemId);// 0x288f0b0
	void ClientBeginUseItem(int ItemId);// 0x288f020
	void ClientArkRestart();// 0x288f000
	void ClientAddEnergyAt(int EnergyCount, Transform EnergyTrans, ArkCharacterBase* Character);// 0x288ee80
	void ClientActiveTeleportPostProcess();// 0x288ee60
	void Client_SetAIAlarming(float[] InDataList);// 0x288fe80
	bool Client_GetIsInSpecialAction();// 0x288fe50
	void ClearOverridedIntensityDecaySpeed();// 0x288ee40
	void ClearInventory();// 0x288ee20
	void ClearAllAITargets();// 0x288ede0
	void ClearAllActionStates();// 0x288ee00
	bool CanSuperJumpExtraAction(enum InExtraActionType);// 0x288ec70
	bool CanSuperJump();// 0x288ec40
	bool CanReload();// 0x288ec10
	bool CanRechamber();// 0x288ebe0
	bool CanLargeShieldFly();// 0x288ebb0
	bool CanEnterActionState(enum ActionState);// 0x288eb20
	void CancelThrowing();// 0x288ed00
	void CancelAllBility();// 0xae2270
	void CallLua_SyncLobbySetWeapon();// 0x305c9c0
	void CallLua_ShowWeaponSetUI();// 0x305c9c0
	void CallLua_PossessedBy(Controller* NewController);// 0x305c9c0
	void CallLua_AddBlueprintFragment();// 0x305c9c0
	void BpLoadLocalAvatarPart();// 0x305c9c0
	void BP_OnPlayerDeath();// 0x305c9c0
	void BindCustomEventOnLeaveActionState(enum ActionState, delegate CustomEvent);// 0x288e980
	void BindCustomEventOnEnterActionState(enum ActionState, delegate CustomEvent);// 0x288e8a0
	bool BeSaved(bool bInteracted);// 0x288e810
	void AttachLocalWaterR16();// 0x305c9c0
	void ArkSetStopMovement(bool bStopMovement);// 0x288e780
	void ArkSetCinematicMode(bool bInCinematicMode);// 0x288e6f0
	bool ArkPlayerTeleportTo(Vector DestLocation, Rotator DestRotation);// 0x288e600
	bool AddPlunginSkinInfoByWeaponID(int BaseWeaponID, int PluginSkinID, bool bForceSet);// 0x288e500
	void AddIgnoreDamageType(class ArkDamageType DTClass);// 0x288e480

--------------------------------
Class: ArkCharacterBase.Character.Pawn.Actor.Object
	ArkCharacterMontageRepData MontageRepData;//[Offset: 0x650, Size: 0x40]
	Vector CharacterTargetOffset;//[Offset: 0x690, Size: 0xc]
	float CharacterTargetRadius;//[Offset: 0x69c, Size: 0x4]
	FString ServerDebugString;//[Offset: 0x6a8, Size: 0x10]
	AkSwitchValue*[] EternalAkSwitchValues;//[Offset: 0x6e0, Size: 0x10]
	ArkSoftSkeletalMeshComponent*[] AttachedSkelMeshCompArray;//[Offset: 0x6f0, Size: 0x10]
	ArkSoftStaticMeshComponent*[] AttachedStaticMeshCompArray;//[Offset: 0x700, Size: 0x10]
	delegate OnCharacterTick;//[Offset: 0x718, Size: 0x10]
	delegate OnCharacterTakeDamage;//[Offset: 0x728, Size: 0x10]
	delegate OnCharacterDeadDelegate;//[Offset: 0x738, Size: 0x10]
	delegate OnKillOtherDelegate;//[Offset: 0x748, Size: 0x10]
	delegate OnCharacterBeDeadNotifyTeamID;//[Offset: 0x758, Size: 0x10]
	delegate OnCharacterDyingDelegate;//[Offset: 0x768, Size: 0x10]
	delegate OnCharacterDestroyedDelegate;//[Offset: 0x778, Size: 0x10]
	class ArkImpactEffect* FootImpactTemplate;//[Offset: 0x7a0, Size: 0x8]
	PhysicalMaterial* PhysMatOverride_Shield;//[Offset: 0x7a8, Size: 0x8]
	PhysicalMaterial* PhysMatOverride_ShieldWeakPoint;//[Offset: 0x7b0, Size: 0x8]
	PhysicalMaterial* PhysMatOverride_DefaultWeakPoint;//[Offset: 0x7b8, Size: 0x8]
	byte ReplicationNodeMapping;//[Offset: 0x7c0, Size: 0x1]
	enum CharacterType;//[Offset: 0x7c1, Size: 0x1]
	FName LeftHandBoneName;//[Offset: 0x7c4, Size: 0x8]
	FName RightHandBoneName;//[Offset: 0x7cc, Size: 0x8]
	FName LeftHandIKBoneName;//[Offset: 0x7d4, Size: 0x8]
	FName RightHandIKBoneName;//[Offset: 0x7dc, Size: 0x8]
	FName[] AimAssistSnappingBones;//[Offset: 0x7e8, Size: 0x10]
	float HUDLocationOffsetZ;//[Offset: 0x7f8, Size: 0x4]
	float[] DyingHealthCostConfigByTimes;//[Offset: 0x800, Size: 0x10]
	FString[] HeadBoneName;//[Offset: 0x810, Size: 0x10]
	FString[] TorsoBoneName;//[Offset: 0x820, Size: 0x10]
	FString[] LimbsBoneName;//[Offset: 0x830, Size: 0x10]
	float DyingHealthCostPeriod;//[Offset: 0x840, Size: 0x4]
	float DyingInvinciblePeriod;//[Offset: 0x844, Size: 0x4]
	byte CharacterInSmokeArea;//[Offset: 0x849, Size: 0x1]
	MaterialInstanceDynamic*[] MeshMIDs;//[Offset: 0x850, Size: 0x10]
	bool bHasUnlimitedAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x878, Size: 0x1]
	bool bHasUnlimitedAmmoInClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x879, Size: 0x1]
	bool bHasUnlimiteThrowWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87a, Size: 0x1]
	delegate OnNotifyInteractedDelegate;//[Offset: 0x880, Size: 0x10]
	delegate OnEndInteractionByDelegate;//[Offset: 0x890, Size: 0x10]
	FName InteractiveObjectName;//[Offset: 0x8a0, Size: 0x8]
	LinearColor DefaultTitleColor;//[Offset: 0x8a8, Size: 0x10]
	Object* CurrentInteractionTargetObject;//[Offset: 0x8b8, Size: 0x8]
	enum CurrentInteractedType;//[Offset: 0x8c2, Size: 0x1]
	InteractionRepAnimInfo RepInteractionAnimInfo;//[Offset: 0x8c8, Size: 0x30]
	enum[] FriendlyInteractionTypes;//[Offset: 0x900, Size: 0x10]
	enum[] HostileInteractionTypes;//[Offset: 0x910, Size: 0x10]
	InteractedCharacterInfo[] CurrentCharactersInteractedBy;//[Offset: 0x938, Size: 0x10]
	class ArkGameBuffComponent* BuffComponentClass;//[Offset: 0x948, Size: 0x8]
	ArkGameBuffComponent* BuffComponent;//[Offset: 0x950, Size: 0x8]
	MaterialInterface* StealthMaterial;//[Offset: 0x960, Size: 0x28]
	FName StealthParamName;//[Offset: 0x988, Size: 0x8]
	float StealthFadeDuration;//[Offset: 0x990, Size: 0x4]
	AkAudioEvent* StealthStartSound;//[Offset: 0x998, Size: 0x28]
	AkAudioEvent* StealthEndSound;//[Offset: 0x9c0, Size: 0x28]
	delegate OnStealthEffectChangedDelegate;//[Offset: 0x9f8, Size: 0x10]
	delegate StartFadingEvent;//[Offset: 0xa08, Size: 0x10]
	SkeletalMeshComponent* mOriginalMesh;//[Offset: 0xa18, Size: 0x8]
	SkeletalMeshComponentBudgeted* mStealthMesh;//[Offset: 0xa20, Size: 0x8]
	bool bStealthOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa28, Size: 0x1]
	FString VelocityRtpcName;//[Offset: 0xa50, Size: 0x10]
	ArkAkComponent* mCachedAkComponent;//[Offset: 0xa60, Size: 0x8]
	delegate OnCharacterHealed;//[Offset: 0xa68, Size: 0x10]
	delegate OnCharacterCauseDamage;//[Offset: 0xa78, Size: 0x10]
	class ArkBloodSplatter* BloodSplatter;//[Offset: 0xa88, Size: 0x8]
	<ArkCharacterBase*,int> DamageSuffered;//[Offset: 0xa90, Size: 0x50]
	bool AdjustPawnDamageInBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae0, Size: 0x1]
	TakeHitInfo LastTakeHitInfo;//[Offset: 0xae8, Size: 0x148]
	TakeHitInfo[] LastTakeHitInfoArray;//[Offset: 0xec0, Size: 0x10]
	<enum,float> DamageModifierFromPlayer;//[Offset: 0x1408, Size: 0x50]
	<enum,float> DamageModifierFromNPC;//[Offset: 0x1458, Size: 0x50]
	bool bEnableShakeBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14dd, Size: 0x1]
	class ArkShakeBonesData* ShakeBonesDataClass;//[Offset: 0x14e0, Size: 0x8]
	float ShakeBonesSeconds;//[Offset: 0x1528, Size: 0x4]
	CurveFloat* CurveShakeBoneWeight;//[Offset: 0x1530, Size: 0x8]
	ArkCharacterInfoComponent* CharacterInfoComponent;//[Offset: 0x1550, Size: 0x8]
	bool bIsGod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x155c, Size: 0x1]
	float BuffCacheMaxHealth;//[Offset: 0x1568, Size: 0x4]
	delegate OnCharacterPlayerStateUpdate;//[Offset: 0x1570, Size: 0x10]
	delegate OnCharacterHealthUpdate;//[Offset: 0x1580, Size: 0x10]
	delegate OnCharacterMaxHealthUpdate;//[Offset: 0x1590, Size: 0x10]
	delegate OnCharacterShieldUpdate;//[Offset: 0x15a0, Size: 0x10]
	delegate OnCharacterBuffShieldUpdate;//[Offset: 0x15b0, Size: 0x10]
	delegate OnCharacterBuffShieldBroken;//[Offset: 0x15c0, Size: 0x10]
	delegate OnCharacterHelmetUpdate;//[Offset: 0x15d0, Size: 0x10]
	delegate OnCharacterStateChanged;//[Offset: 0x15e0, Size: 0x10]
	delegate OnCharacterDown;//[Offset: 0x15f0, Size: 0x10]
	delegate OnCharacterVOTypeChanged;//[Offset: 0x1600, Size: 0x10]
	delegate OnCharacterHittedByHostile;//[Offset: 0x1610, Size: 0x10]
	delegate OnCharacterBeHitted;//[Offset: 0x1620, Size: 0x10]
	float MaxHealth;//[Offset: 0x1630, Size: 0x4]
	float Health;//[Offset: 0x1638, Size: 0x4]
	float MaxShield;//[Offset: 0x163c, Size: 0x4]
	float Shield;//[Offset: 0x1640, Size: 0x4]
	float MaxBuffShield;//[Offset: 0x1644, Size: 0x4]
	float BuffShield;//[Offset: 0x1648, Size: 0x4]
	float HelmetDamageReduction;//[Offset: 0x164c, Size: 0x4]
	float MaxDyingHealth;//[Offset: 0x1650, Size: 0x4]
	float SavedHealth;//[Offset: 0x1654, Size: 0x4]
	enum CharacterState;//[Offset: 0x1658, Size: 0x1]
	float SneakAttackDamagePct;//[Offset: 0x1660, Size: 0x4]
	bool bUseCharacterInfoComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1664, Size: 0x1]
	bool bEnableWaitToPickUpSaved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1665, Size: 0x1]
	delegate OnAbilityBegin;//[Offset: 0x1668, Size: 0x10]
	delegate OnAbilityEnd;//[Offset: 0x1678, Size: 0x10]
	delegate OnAbilityCancelled;//[Offset: 0x1688, Size: 0x10]
	ArkCharacterBase* InteractedByCharacterRef;//[Offset: 0x1698, Size: 0x8]
	PhysicalMaterial* LatestBodyTouchPhysicalMaterial;//[Offset: 0x16a0, Size: 0x8]
	ArkHitReactionAnimData[] HitReactionDataArray;//[Offset: 0x16c0, Size: 0x10]
	ArkHitReactionAnimData[] GS_HitReactionDataArray;//[Offset: 0x16d0, Size: 0x10]
	float HitPauseAnimScale;//[Offset: 0x16e0, Size: 0x4]
	bool bEnableHitPause;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16e4, Size: 0x1]
	ArkMetaStateMasks ReplicatedMetaStateMasks;//[Offset: 0x1708, Size: 0xc]
	MeshComponent* OverrideDisplayMeshCompoent;//[Offset: 0x17b0, Size: 0x8]
	delegate OnTagsChangeDelegate;//[Offset: 0x17b8, Size: 0x10]
	GameplayTagContainer GameplayTags;//[Offset: 0x17c8, Size: 0x20]
	ArkCDComponent* CDComponent;//[Offset: 0x17f0, Size: 0x8]
	ArkParticleOrSoundInfoContainer ParticleInfoContainer;//[Offset: 0x17f8, Size: 0x120]
	ArkParticleOrSoundInfoContainer SoundInfoContainer;//[Offset: 0x1918, Size: 0x120]
	<int,ArkSoftParticleSystemComponentWithPool*> ParticleArray;//[Offset: 0x1a90, Size: 0x50]
	ArkSoftStaticMeshComponent* VisibleTestMesh;//[Offset: 0x1ae0, Size: 0x8]
	SoftObjectPath VisibleTestMeshDir;//[Offset: 0x1ae8, Size: 0x18]
	SceneComponent*[] DetachedComponents;//[Offset: 0x1b00, Size: 0x10]
	AutoDetachComponentCache[] DetachedComponentCaches;//[Offset: 0x1b10, Size: 0x10]
	ArkCharacterBase*[] IgnoreEnemyTargets;//[Offset: 0x1b20, Size: 0x10]
	ArkCharacterBase*[] TauntEnemyTargets;//[Offset: 0x1b30, Size: 0x10]
	float LastAffactedByErosionPoolTime;//[Offset: 0x1b40, Size: 0x4]
	bool bIsDeadByDestoryFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b44, Size: 0x1]
	FName IgnoreFriendFireTraceTag;//[Offset: 0x1b48, Size: 0x8]
	bool TryActivateCharacterAbilityWithPayload(enum Type, out const GameplayEventData Payload);// 0x26b71f0
	bool TryActivateCharacterAbility(enum Type);// 0x26b7160
	void ToggleShowDefence(float Seconds);// 0x26b70d0
	void ToggleShowAttack(float Seconds);// 0x26b7040
	void ToggleCanRecordDamage(bool bCan);// 0x26b6f30
	void ToggleBoneRefresh(bool bEnable, enum Slot);// 0x26b6e70
	void StartFading(bool bFadeIn, float Duration);// 0x26b6da0
	ArkSoftParticleSystemComponentWithPool* SpawnUniqueEmitterAttached(FName HInstigator, ParticleSystem* EmitterTemplate, FName AttachPointName, Vector Location, Rotator Rotation, Vector Scale, byte LocationType, bool bAutoDestroy, bool bUsePool, bool bAutoActivate);// 0x26b69f0
	bool ShouldPropagateVisibilityToChild(SceneComponent* ChildComponent);// 0x26b6950
	bool ShouldOverrideBeHomingLocation();// 0x26b6920
	bool ShouldBlockRadialDamage(out const HitResult Hit);// 0x26b6830
	void SetVOType(enum InVOType);// 0x26b66e0
	void SetVisibility(bool IsVisible, enum Slot);// 0x26b6760
	void SetTeamID(int NewTeamID);// 0x26b6650
	void SetStealthEffect_BP(bool bOn);// 0x305c9c0
	void SetStealthEffect(bool bOn);// 0x26b65c0
	void SetStealth(bool bOn);// 0x26b6530
	void SetShield(float Value);// 0x26b64b0
	void SetRotationRate(float RotationRate);// 0x26b6430
	void SetMaxSpeed(float MaxSpeed);// 0x26b63b0
	void SetMaxShield(float Value, bool IsFromItem);// 0x26b62e0
	void SetMaxHealth(float InMaxHealth);// 0x26b6260
	void SetMaxDyingHealth(float InMaxDyingHealth);// 0x26b61e0
	void SetIsGod(bool bGod);// 0x26b6150
	void SetInteractedByCharacter(ArkCharacterBase* Char);// 0x26b60d0
	void SetHUDLocationOffsetZ(float Z);// 0x26b5f50
	void SetHelmetDamageReduction(float Value);// 0x26b6050
	void SetHealth(float Value);// 0x26b5fd0
	void SetGenderType(int pGenderType);// 0x26b5ed0
	void SetCurrentInteractionType(enum InteractionType);// 0x26b5e50
	void SetCharacterState(enum Value);// 0x26b5dd0
	void SetAudioSwitch(AkSwitchValue* AkSwitchValue);// 0x26b5cd0
	void ServerPlayAnimMontage(AnimMontage* AnimMontagePtr, float InPlayRate, FName StartSectionName, enum RootMotionOption);// 0x26b5a80
	float ServerHeal(float HealAmount, ArkCharacterBase* Healer, ArkGameBuff* InstigatingBuff, FName HealTag, bool bNotifyClient);// 0x26b58f0
	void RemoveVLogItem(FString Category, FString Key);// 0x26b5800
	void RemoveVLogAllItems(FString Category);// 0x26b5760
	void RemoveUniqueEmitterAttached(FName HInstigator, ParticleSystem* EmitterTemplate);// 0x26b5630
	bool RemoveTag(FName Tag);// 0x26b55a0
	void ReceiveGetDefenseInfo(out float DefensePercentage, out float DefenseValue, ArkCharacterBase* InstigatorChar, class ArkDamageType DamageTypeClass, out const HitResult HitInfo);// 0x305c9c0
	float ReceiveAdjustPawnDamage(float DamageAmount, class ArkDamageType DamageTypeClass, out const HitResult Hit, ArkCharacterBase* InstigatorChar, Actor* DamageCauser);// 0x305c9c0
	void PostMeshComponentPoseUpdate();// 0x26b5580
	int PlaySound(AkAudioEvent* Sound, float DelaySeconds, bool bForcePlay);// 0x26b5470
	void PlaySoftSound(AkAudioEvent* Sound, float DelaySeconds, bool bForcePlay);// 0x26b52e0
	void PlayHit_BP(out const TakeHitInfo HitInfo);// 0x305c9c0
	float PlayAnimMontageEx(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName, enum RootMotionOption);// 0x26b5190
	void OverrideDisplayMesh(MeshComponent* MeshComponent);// 0x26b5110
	void OnStealthChange_BP(bool bNewStealth);// 0x305c9c0
	void OnStartFading__DelegateSignature(bool bFadeIn, float Duration);// 0x305c9c0
	void OnShieldhChange_BP(float OldShield, float NewShield);// 0x305c9c0
	void OnResistingDeathTimer();// 0x26b50f0
	void OnRep_Stealth();// 0x26b50d0
	void OnRep_Shield(float OldShield);// 0x26b5050
	void OnRep_RepInteractionAnimInfo();// 0x26b5030
	void OnRep_MetaStateMasks(ArkMetaStateMasks LastMetaStateMasks);// 0x26b4f90
	void OnRep_MaxShield(float OldValue);// 0x26b4f10
	void OnRep_MaxHealth();// 0x26b4ef0
	void OnRep_MaxBuffShield();// 0x26b4ed0
	void OnRep_LastTakeHitInfoArray();// 0x26b4eb0
	void OnRep_IsGod();// 0xae2270
	void OnRep_HelmetDamageReduction();// 0x26b4e90
	void OnRep_Health(float OldHealth);// 0x26b4e10
	void OnRep_CurrentInteractedType(enum LastInteractedType);// 0x26b4d50
	void OnRep_CharMontageRepData();// 0x26b4cb0
	void OnRep_CharacterState(enum OldValue);// 0x26b4cd0
	void OnRep_BuffShield(float OldValue);// 0x26b4bf0
	void OnRep_BuffCacheMaxHealth(float OldMaxHealth);// 0x26b4b70
	void OnLoadRepMontagePtr(AnimMontage* AnimMontagePtr, float InPlayRate, FName StartSectionName, enum RootMotionOption);// 0x26b49b0
	void OnKillOtherSignature__DelegateSignature(out const TakeHitInfo HitInfo);// 0x305c9c0
	void OnInitData_BP();// 0x305c9c0
	void OnHitReactionEnded(AnimMontage* Montage, bool bInterrupted);// 0x26b48e0
	void OnHitReactionBlendingOut(AnimMontage* Montage, bool bInterrupted);// 0x26b4810
	void OnHealthChange_BP(float OldHealth, float NewHealth);// 0x305c9c0
	void OnDyingInvincibleTimer();// 0x26b47f0
	void OnCharacterStateChange_BP(enum OldState, enum NewState);// 0x305c9c0
	void OnCharacterHealed__DelegateSignature(float OriginalHealAmount, float ActualHealAmount, ArkCharacterBase* Healer, ArkGameBuff* InstigatingBuff, FName HealTag);// 0x305c9c0
	void OnCharacterCauseDamage__DelegateSignature(out const TakeHitInfo HitInfo);// 0x305c9c0
	void OnCauseDamage_BP(out const TakeHitInfo HitInfo);// 0x305c9c0
	void OnBodyTouchGround(out const HitResult Hit, FName BodyPartSocket, out const FName[] UserTags);// 0x26b4680
	void OnAsyncLoadFinished_BP();// 0x305c9c0
	void OnArkCharTagsChange__DelegateSignature(ArkCharacterBase* Character, bool bAddOrRemove, FName ModifiedTag);// 0x305c9c0
	void OnArkCharacterBeHitted__DelegateSignature(TakeHitInfo[] HitInfoArray);// 0x305c9c0
	void OnActuallyEndPlay_BP();// 0x305c9c0
	void OnActuallyBeginPlay_BP();// 0x305c9c0
	void NotifyMeshScaleChanged();// 0x26b4660
	void NotifyMaxShieldFromItemChanged();// 0x26b4640
	void NotifyMaxShieldChanged();// 0x26b4620
	void NotifyMaxHealthChanged();// 0x26b4600
	void NetMulticast_SetLocation(Vector Location);// 0x26b4570
	void MultiSetMeshCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x26b44b0
	void ModifyTag(FName Tag, bool bAddOrRemove);// 0x26b43e0
	void ModifyMetaState(const enum EffectType, FName Handler, bool bSetOrClear);// 0x26b42d0
	void ModifyIgnoreBlockMetaState(const enum EffectType, FName Handler, bool bSetOrClear);// 0x26b41c0
	void ModifyBlockMetaState(const enum EffectType, FName Handler, bool bSetOrClear);// 0x26b40b0
	void LockHealthOnce(float LockedHealth);// 0x26b4030
	void LockHealth(float LockedHealth);// 0x26b3fb0
	bool IsWin();// 0x26b3f80
	bool IsWalking();// 0x26b3f50
	bool IsWaitingForRelife();// 0x26b3f20
	bool IsUsingItem();// 0x26b3ef0
	bool IsThrowingWeapon();// 0x26b3ec0
	bool IsThrowing();// 0x26b3e90
	bool IsTargeting();// 0x26b3e60
	bool IsSyncing();// 0x26b3e30
	bool IsStuck();// 0x26b3e00
	bool IsSprinting();// 0x26b3dd0
	bool IsSlotActive(FName SlotName);// 0x26b3d40
	bool IsRunning();// 0x26b3d10
	bool IsRolling();// 0x26b3ce0
	bool IsReviving();// 0x26b3cb0
	bool IsResistingDeath();// 0x26b3c80
	bool IsReloading();// 0x26b3c50
	bool IsReChambering();// 0x26b3c20
	bool IsPlayingMontage(const AnimMontage* Montage);// 0x26b3b80
	bool IsOpenMap();// 0x26b3b50
	bool IsOpenBag();// 0x26b3b20
	bool IsNetModeDedicatedServer();// 0x12c2120
	static bool IsMetaStateHandleValid(out const FName InHandler);// 0x26b3a70
	bool IsMeleeAttacking();// 0x26b3a40
	bool IsLocallyViewTargeted();// 0x26b3a10
	bool IsInvincible();// 0x26b39e0
	bool IsInteractingWithUI();// 0x26b39b0
	bool IsGod();// 0x26b3990
	bool IsGivingChipCommand();// 0x26b3960
	bool IsFlying();// 0x26b3930
	bool IsFiring();// 0x26b3900
	bool IsFalling();// 0x26b38d0
	bool IsEquiping();// 0x26b3800
	bool IsDying();// 0x26b37d0
	bool IsDead();// 0x26b37a0
	bool IsCrouching();// 0x26b3770
	bool IsCrossing();// 0x26b3740
	bool IsCovering();// 0x26b3710
	bool IsCharacterAbilityActive(enum Type);// 0x26b35e0
	bool IsAnyMontagePlaying();// 0x26b3510
	bool IsAlive();// 0x26b34e0
	bool IsAiming();// 0x26b34b0
	bool IsActivatingChip();// 0x26b3480
	bool HasTag(FName Tag);// 0x26b33f0
	bool HasMetaState(enum EffectType);// 0x26b3360
	bool HasIgnoreBlockMetaState(const enum EffectType);// 0x26b32d0
	bool HasBlockMetaState(const enum EffectType);// 0x26b3240
	void HandleLastTakeHitInfo();// 0x26b3220
	enum GetVOType();// 0x26b31a0
	int GetVisibilityMask();// 0x26b3200
	bool GetVisibility();// 0x26b31d0
	int GetTeamID();// 0x26b3170
	float GetStealthTransparency();// 0x26b3150
	bool GetStealthEffectOn();// 0x26b3120
	bool GetStealth();// 0x26b30f0
	float GetSpeedFactor();// 0x26b30b0
	ArkSoftSkeletalMeshComponent* GetSoftMesh();// 0x26b3080
	Transform GetSocketTransform(FName SocketName);// 0x26b2fc0
	float GetSneakAttackDamagePercent();// 0x26b2f80
	bool GetShouldIgnoreFriendFireByComp(PrimitiveComponent* inComp);// 0x26b2ee0
	float GetShieldScale();// 0x26b2ea0
	float GetShield();// 0x26b2e60
	float GetSavedHealth();// 0x26b2e20
	float GetRotationRate();// 0x26b2de0
	ArkWeaponBase* GetPreviousWeapon();// 0x26b2db0
	int GetOverrideCacheBaseSuppressLevel();// 0x26b2d80
	float GetOverallActionSpeed();// 0x26b2d40
	Vector GetMeleeTracingPoint();// 0x26b2d00
	ArkMeleeComponent* GetMeleeComponent();// 0x26b2cd0
	float GetMaxSpeed();// 0x26b2c90
	float GetMaxShield();// 0x26b2c50
	float GetMaxHealthBuff(float MaxHealthBase);// 0x26b2bc0
	float GetMaxHealthBase();// 0x26b2b80
	float GetMaxHealth(bool UseBuffCache);// 0x26b2ae0
	float GetMaxDyingHealth();// 0x26b2aa0
	float GetMaxBuffShield();// 0x26b2a60
	TakeHitInfo GetLastTakeDamageInfoFromValidInstigator();// 0x26b29b0
	TakeHitInfo GetLastTakeDamageInfo();// 0x26b2900
	float GetLastCharacterStateChangeTime();// 0x26b28d0
	float GetInteractionMaxMoveSpeed(Object* TargetObjRef, enum InteractionType);// 0x26b2800
	ArkCharacterBase* GetInteractedByCharacter();// 0x26b27d0
	Vector GetHUDInfoLocation(FName SocketName);// 0x26b2660
	float GetHelmetDamageReduction();// 0x26b2790
	float GetHealthScale();// 0x26b2750
	float GetHealth();// 0x26b2710
	enum GetGenderType();// 0x26b2630
	float GetDyingHealthDropInterval();// 0x26b2600
	MeshComponent* GetDisplayMesh();// 0x26b25d0
	<ArkCharacterBase*,int> GetDamageSuffered();// 0x26b25a0
	ArkWeaponBase* GetCurrentWeapon();// 0x26b2570
	enum GetCurrentInteractionType();// 0x26b2540
	enum GetCurrentInteractedType();// 0x26b2510
	Vector GetCharacterVelocity();// 0x26b24d0
	enum GetCharacterType();// 0x26b24a0
	float GetCharacterTargetRadius();// 0x26b2460
	Vector GetCharacterTargetLocationBlueprint();// 0x26b2420
	Vector GetCharacterTargetLocation();// 0x26b23e0
	enum GetCharacterState();// 0x26b23b0
	ArkCharacterInfoComponent* GetCharacterInfoComponent();// 0x26b2380
	Transform GetCharacterFootTransform();// 0x26b2310
	ArkAkComponent* GetCachedAkComponent();// 0x26b22e0
	float GetBuffShieldScale();// 0x26b22a0
	float GetBuffShield();// 0x26b2260
	ArkGameBuffComponent* GetBuffComponent();// 0x26b2230
	int GetAmmoInInventory(enum AmmoType);// 0x26b21a0
	Rotator GetAimOffsets();// 0x26b2160
	void GameplayVOEvent(FName VOEventName);// 0x26b20e0
	void ForceStopHitReaction();// 0x26b20c0
	bool DoesSocketExist(out const FName SocketName);// 0x26b2010
	void ClientSetMeshActive(bool bActive);// 0x26b1e30
	void ClientNotifyInteractionStoppedBy(ArkCharacterBase* InteractedBy, enum InteractionType, float RemainingTime, bool bCancelled);// 0x26b1b60
	void ClientNotifyInteractionStartedBy(ArkCharacterBase* InteractedBy, enum InteractionType, float Duration);// 0x26b1a60
	void ClientNotifyInteractedBy(ArkCharacterBase* InteractedBy, enum InteractionType, bool bCancelled);// 0x26b1960
	void ClientNotifyInteract(Object* Context, enum InteractionType);// 0x26b1890
	void ClientNotify_OnHealed(float OriginalHealAmount, float ActualHealAmount, ArkCharacterBase* Healer, ArkGameBuff* InstigatingBuff, FName HealTag);// 0x26b1ca0
	void ClientGameplayVOEvent(FName VOEventName);// 0x26b1800
	bool Client_GetIsRotaion(out float rotPercent);// 0x26b1f60
	bool Client_GetIsGasping();// 0x26b1f30
	bool Client_GetIsBreathHolding();// 0x26b1f00
	float Client_GetGaspElapsedTime();// 0x26b1ec0
	bool CheckFollowPathFinishOrStuck(float SecondsAsStuck, float SquareTolerance);// 0x26b16b0
	void CancelCharacterAbility(enum Type);// 0x26b1630
	bool CanApplyMetaStateToTarget(const enum EffectType, const ArkCharacterBase* InTarget);// 0x26b1570
	void BeInteractedBy_BP(ArkCharacterBase* InteractedBy, enum InteractionType);// 0x305c9c0
	void AddVLogItem_String(FString Category, FString Key, out const FString Value);// 0x26b1420
	void AddVLogItem_Int(FString Category, FString Key, int Value);// 0x26b12f0
	void AddVLogItem_Float(FString Category, FString Key, float Value, int MaxFractionalDigits);// 0x26b1180
	void AddVLogItem_Bool(FString Category, FString Key, bool Value);// 0x26b1050
	bool AddTag(FName Tag);// 0x26b0fc0

--------------------------------
Class: ArkWeaponInventoryComponent.ArkCharacterLiteComponent.LiteComponent.Object
	ArkWeaponBase* WeaponPrimary0;//[Offset: 0xb0, Size: 0x8]
	ArkWeaponBase* WeaponPrimary1;//[Offset: 0xb8, Size: 0x8]
	ArkWeaponBase* WeaponPistol;//[Offset: 0xc0, Size: 0x8]
	ArkWeaponBase* WeaponMelee;//[Offset: 0xc8, Size: 0x8]
	ArkWeaponBase* WeaponExtraMelee;//[Offset: 0xd0, Size: 0x8]
	ArkCurrentWeaponInfo CurrentWeaponInfo;//[Offset: 0xd8, Size: 0x10]
	ArkWeaponBase* CurrentWeapon;//[Offset: 0xe8, Size: 0x8]
	ArkWeaponBase* PreWeapon;//[Offset: 0x118, Size: 0x8]
	ArkWeaponBase* CurrentEquipedMeleeWeapon;//[Offset: 0x120, Size: 0x8]
	ArkWeaponBase* CurrentThrowingWeapon;//[Offset: 0x128, Size: 0x8]
	WeaponTacticalActionInfo TacticalActionInfo;//[Offset: 0x158, Size: 0x2]
	Transform WeaponAttachTransform;//[Offset: 0x170, Size: 0x30]
	Transform OffsetTransform;//[Offset: 0x1a0, Size: 0x30]
	Transform relativeTransForWeaponAttach;//[Offset: 0x1d0, Size: 0x30]
	Transform relativePos;//[Offset: 0x200, Size: 0x30]
	Transform relativePosWeapon;//[Offset: 0x230, Size: 0x30]
	float ScopeToCrossDuration;//[Offset: 0x260, Size: 0x4]
	ArkWidgetComponentWithPool* ScopeWidgetComponent;//[Offset: 0x340, Size: 0x8]
	ArkUserWidgetBaseWithPool* ScopeWidget;//[Offset: 0x348, Size: 0x8]
	void UpdateScopeCenter(float DeltaTime);// 0x29ce160
	void SetAviliableWeapon();// 0x29cdea0
	void ServerChangePrimaryWeapon();// 0x29cd970
	void OnRep_WeaponPrimary1(ArkWeaponBase* LastWeapon);// 0x29cd750
	void OnRep_WeaponPrimary0(ArkWeaponBase* LastWeapon);// 0x29cd6d0
	void OnRep_WeaponPistol(ArkWeaponBase* LastWeapon);// 0x29cd630
	void OnRep_WeaponMelee(ArkWeaponBase* LastWeapon);// 0x29cd5b0
	void OnRep_WeaponExtraMelee(ArkWeaponBase* LastWeapon);// 0x29cd530
	void OnRep_TacticalActionInfo();// 0x29cd510
	void OnRep_CurrentWeapon();// 0x29cd4d0
	void OnRep_CurrentEquipedMeleeWeapon(ArkWeaponBase* LastMeleeWeapon);// 0x29cd450
	void HideWeapon(enum InventorySlot, bool bIsHide);// 0x29cd1f0
	void HideAllWeaponActors(bool bHide);// 0x29cd160
	ArkWeaponBase* GetWeaponPrimary1();// 0x28a01c0
	ArkWeaponBase* GetWeaponPrimary0();// 0x26a35a0
	ArkWeaponBase* GetWeaponPistol();// 0x10999b0
	ArkWeaponBase* GetWeaponMelee();// 0x2739210
	ArkWeaponBase* GetWeaponFree(ArkWeaponBase* inDropWeapon);// 0x29ccf70
	ArkWeaponBase* GetWeaponExtraMelee();// 0x29ccf40
	ArkWeaponBase* GetThrowableMeleeWeapon();// 0x29ccf10
	ArkWeaponBase* GetCurrentWeapon();// 0x29ccbb0
	ArkWeaponBase* GetAvailableWeaponMelee();// 0x29ccb80
	void DropWeaponAndSpawnPickUp(ArkWeaponBase* DroppedWeapon, bool bSpawnPickUp);// 0x29cca70
	void DestroyWeaponAtSlot(int Slot, bool bIsPlayerEndPlay);// 0x29cc9b0
	void DestroyAllWeapons(bool bIsPlayerEndPlay);// 0x29cc920

--------------------------------
Class: ArkCharacterLiteComponent.LiteComponent.Object
	ArkSwarmEntityCharacter* GetOwnerAsSwarm();// 0x26caa00
	ArkPlayer* GetOwnerAsPlayer();// 0x26ca9d0
	ArkNpc* GetOwnerAsNpc();// 0x26ca9a0
	ArkCharacterBase* GetOwnerAsCharacter();// 0x26ca970

--------------------------------
Class: ArkWeaponBase.Actor.Object
	int WeaponItemID;//[Offset: 0x324, Size: 0x4]
	int WeaponItemUID;//[Offset: 0x328, Size: 0x4]
	enum WeaponSpawnReason;//[Offset: 0x340, Size: 0x1]
	delegate OnStealthEffectSetEvent;//[Offset: 0x348, Size: 0x10]
	delegate WeaponDurabilityModifyDelegate;//[Offset: 0x378, Size: 0x10]
	bool bShouldPlayWeaponAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 0x1]
	FName MirrorCameraName;//[Offset: 0x38c, Size: 0x8]
	float MirrorFOV;//[Offset: 0x394, Size: 0x4]
	AnimMontage* DropAnim;//[Offset: 0x398, Size: 0x8]
	ArkWeaponAnimSet* WeaponAnimSet;//[Offset: 0x3a0, Size: 0x8]
	float LeftRightAttachDelay;//[Offset: 0x3a8, Size: 0x4]
	AnimSequenceBase* HandHoldPoseAnim;//[Offset: 0x3b0, Size: 0x8]
	AnimSequenceBase* HipHandHoldPoseAnim;//[Offset: 0x3b8, Size: 0x8]
	AnimSequenceBase* TargetingHandHoldPoseAnim;//[Offset: 0x3c0, Size: 0x8]
	AnimSequenceBase* HandHoldPoseAnimInCombat;//[Offset: 0x3c8, Size: 0x8]
	AnimSequenceBase* HandHoldPoseAnimInCover;//[Offset: 0x3d0, Size: 0x8]
	AnimSequence* HandGripPoseAnim;//[Offset: 0x3d8, Size: 0x8]
	AnimSequence* HandGripPoseAnimInCombat;//[Offset: 0x3e0, Size: 0x8]
	AnimSequence* FPSHandGripPoseAnim;//[Offset: 0x3e8, Size: 0x8]
	bool bEnableHandIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 0x1]
	FName HandIKName;//[Offset: 0x3f4, Size: 0x8]
	Transform HandIKOffsetTrans;//[Offset: 0x400, Size: 0x30]
	Transform HandIKOffsetTransFPS;//[Offset: 0x430, Size: 0x30]
	bool bEnableWeaponCollisionAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 0x1]
	bool bShowWeaponCollisionCheckDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x461, Size: 0x1]
	float CollisionAvoidanceCheckDistance;//[Offset: 0x464, Size: 0x4]
	float WeaponCollisionAvoidanceInterpSpeed;//[Offset: 0x46c, Size: 0x4]
	bool bLastWeaponMeshCollided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 0x1]
	float CurrentCollisionAvoidanceRate;//[Offset: 0x474, Size: 0x4]
	HitResult CurrentCollisionAvoidanceHitRes;//[Offset: 0x478, Size: 0x88]
	bool CurrentCollisionAvoidanceDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 0x1]
	Rotator MaxRaiseRotOffset;//[Offset: 0x504, Size: 0xc]
	Rotator MaxLayDownRotOffset;//[Offset: 0x510, Size: 0xc]
	Vector HandCenterLocalPos;//[Offset: 0x51c, Size: 0xc]
	Vector MaxRaisePosOffset;//[Offset: 0x528, Size: 0xc]
	Vector MaxLayDownPosOffset;//[Offset: 0x534, Size: 0xc]
	Rotator CASpineRotOffset;//[Offset: 0x540, Size: 0xc]
	Vector CAIKHandBoneOffset;//[Offset: 0x54c, Size: 0xc]
	Rotator CAHandLocalOffsetRot;//[Offset: 0x558, Size: 0xc]
	Vector CAHandLocalOffsetPos;//[Offset: 0x564, Size: 0xc]
	float TraceDistance;//[Offset: 0x570, Size: 0x4]
	ArkWeaponPluginManager* PluginManager;//[Offset: 0x578, Size: 0x8]
	enum WeaponType;//[Offset: 0x588, Size: 0x1]
	enum WeaponSubType;//[Offset: 0x589, Size: 0x1]
	bool bDualWieldWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58a, Size: 0x1]
	MaterialInterface* WeaponStealthMaterial;//[Offset: 0x590, Size: 0x8]
	MaterialInterface*[] OriginWeaponMat;//[Offset: 0x598, Size: 0x10]
	FName CartidgesAttachPoint;//[Offset: 0x61c, Size: 0x8]
	float ImpactScale;//[Offset: 0x624, Size: 0x4]
	int CurrentDurability;//[Offset: 0x628, Size: 0x4]
	AnimMontage* ThrowWeaponAnim;//[Offset: 0x630, Size: 0x8]
	class ArkProjectileThrowableBase* ThrowProjectileClass;//[Offset: 0x638, Size: 0x8]
	Vector ThrowWeaponSocketOffset;//[Offset: 0x640, Size: 0xc]
	bool bMainWeaponEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64c, Size: 0x1]
	bool bSubWeaponEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64d, Size: 0x1]
	enum CurrentState;//[Offset: 0x64e, Size: 0x1]
	Vector MeshScaleOnEquip;//[Offset: 0x65c, Size: 0xc]
	Vector SubMeshScaleOnEquip;//[Offset: 0x668, Size: 0xc]
	Vector MeshScaleOnHand;//[Offset: 0x674, Size: 0xc]
	Vector SubMeshScaleOnHand;//[Offset: 0x680, Size: 0xc]
	bool bUseEquipMeshScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68c, Size: 0x1]
	enum CurrentScopeType;//[Offset: 0x68d, Size: 0x1]
	Transform WeaponAttachFppTrans;//[Offset: 0x690, Size: 0x30]
	ArkSoftSkeletalMeshComponent* MeshComp;//[Offset: 0x6c0, Size: 0x8]
	ArkSoftSkeletalMeshComponent* SubMeshComp;//[Offset: 0x6c8, Size: 0x8]
	ArkSoftSkeletalMeshComponent*[] AttachedSkelMeshCompArray;//[Offset: 0x6d0, Size: 0x10]
	ArkSoftStaticMeshComponent*[] AttachedStaticMeshCompArray;//[Offset: 0x6e0, Size: 0x10]
	ArkSkeletalMeshMaterialCache[] AllWeaponMeshMats;//[Offset: 0x6f0, Size: 0x10]
	ArkSkeletalMeshMaterialCache[] AllWeaponMeshNewMats;//[Offset: 0x700, Size: 0x10]
	MaterialInstance* CachedMaterial;//[Offset: 0x718, Size: 0x8]
	int CullDistance;//[Offset: 0x720, Size: 0x4]
	int PlayWeaponAnimRange;//[Offset: 0x724, Size: 0x4]
	ParticleSystem* ImpactEffect_Normal;//[Offset: 0x728, Size: 0x28]
	ParticleSystem* ImpactEffect_ResistDeath;//[Offset: 0x750, Size: 0x28]
	ParticleSystem* ImpactEffect_Killed;//[Offset: 0x778, Size: 0x28]
	ArkPlayerDeathDecalInfo DeathDecalInfo_ResistDeath;//[Offset: 0x7a0, Size: 0x38]
	ArkPlayerDeathDecalInfo DeathDecalInfo_Killed;//[Offset: 0x7d8, Size: 0x38]
	ArkGunTechBase* CurrentGunTech;//[Offset: 0x810, Size: 0x8]
	bool UseCustomHandHoldingPose();// 0x29c4b60
	bool UseCustomHandGrippingPose();// 0x29c4b30
	void UpdateWeaponOwnerSlot(AnimMontage* Montage, bool bInterrupted);// 0x29c4a60
	void UpdateChangeMeshCount();// 0x780890
	void SetWeaponItemUID(int inID);// 0x29c49e0
	void SetWeaponItemID(int inID);// 0x29c4960
	void SetStealthEffect(bool bSneakyOn);// 0x29c48d0
	void SetIsEquiping(bool bEquipping);// 0x29c4850
	void SetDissolvePercent(float fPercent, FName MaterialParamterName);// 0x29c4780
	void SetCustomDepthEnable(bool Enable, byte Stencil);// 0x29c46b0
	void ServerThrowWeapon(Transform SpawnTrans, Transform MeshTrans, bool bDualMain);// 0x29c4490
	void ServerStopFire(bool bStopByInput);// 0x29c43d0
	void ServerStartFire();// 0x29c4380
	void OnRep_UseEquipMesh();// 0x29c4360
	void OnRep_SubWeaponEnabled();// 0x29c4340
	void OnRep_MainWeaponEnabled();// 0x29c4320
	void OnRep_Durability();// 0x29c4300
	void OnRep_CurrentGunTech();// 0x29c42e0
	void OnOwnerAvatarCreateFinished(const ArkItemAvatar* AvatarItem);// 0x29c4260
	bool IsUnEquiping();// 0x29c4240
	bool IsThrowableWeapon();// 0x29c4210
	bool IsTargeting();// 0x29c41f0
	bool IsSupportAmmo();// 0x29c41c0
	bool IsLowAmmo();// 0x29c4190
	bool IsInfiniteWeapon();// 0x29c4160
	bool IsFiring();// 0x29c4130
	bool IsEquiping();// 0x29c4110
	bool IsDropping();// 0x29c40f0
	bool IsAiming();// 0x29c40d0
	bool HasMirror();// 0x29c40a0
	bool HasInfiniteMag();// 0x29c4070
	enum GetWeaponType();// 0x29c4040
	enum GetWeaponSubType();// 0x29c4020
	SkeletalMeshComponent* GetWeaponSubMesh();// 0x29c3ff0
	enum GetWeaponState();// 0x29c3fc0
	ArkCharacterBase* GetWeaponOwner();// 0x29c3f90
	float GetWeaponOverrideDamage();// 0x29c3f60
	float GetWeaponOverrideAIDamage();// 0x29c3f30
	FName GetWeaponName();// 0x29c3ef0
	SkeletalMeshComponent* GetWeaponMesh();// 0x29c3ec0
	int GetWeaponItemUID();// 0x29c3ea0
	int GetWeaponItemID();// 0x29c3e80
	FString GetWeaponDisplayName();// 0x29c3e00
	AnimMontage* GetThrowWeaponAnim();// 0x29c3dd0
	byte GetQuality();// 0x29c3da0
	Vector GetPredicationForwardDirection();// 0x29c3d60
	ArkWeaponPluginManager* GetPluginManager();// 0x28b6260
	int GetMaxDurability();// 0x29c3d30
	int GetItemID();// 0x29c3d00
	Vector GetFireStartLocation(bool bIsFpp);// 0x29c3c50
	FString GetDisplayString();// 0x29c3bd0
	int GetDefaultWeaponItemID();// 0x29c3ba0
	float GetDamageStartleRatio();// 0x29c3b70
	float GetDamageKnockRatio();// 0x29c3b40
	AnimSequenceBase* GetCustomHipHandHoldPoseAnim();// 0x8c55b0
	AnimSequenceBase* GetCustomHandHoldPoseAnimInCover();// 0x29c3b10
	AnimSequenceBase* GetCustomHandHoldPoseAnimInCombat();// 0x29c3ae0
	AnimSequenceBase* GetCustomHandHoldPoseAnim();// 0x29c3ab0
	AnimSequence* GetCustomHandGripPoseAnimInCombat();// 0x29c3a80
	AnimSequence* GetCustomHandGripPoseAnim();// 0x29c3a50
	AnimSequence* GetCustomFPSHandGripPoseAnim();// 0x29c3a20
	enum GetCurrentScopeType();// 0x29c3a00
	ArkGunTechBase* GetCurrentGunTech();// 0x29c39d0
	int GetCurrentDurability();// 0x29c39b0
	int GetCurrentAmmoInClip();// 0x29c3980
	float GetCollisionAvoidanceRate();// 0x29c3950
	Rotator GetCollisionAvoidanceHandRot();// 0x29c3910
	Vector GetCollisionAvoidanceHandPos();// 0x29c38d0
	float GetBaseStartle();// 0x29c38a0
	int GetAmmoPerMAG();// 0x29c3870
	int GetAmmoPerClip();// 0x29c3840
	int GetAmmoInInventory();// 0x29c3810
	bool EnableHandIK();// 0x27cdc60
	bool EnableCollisionAvoidanceCheck();// 0x29c37e0
	void CreateGunTech(int PluginID, out const int[] PlayerBuffItemIDList);// 0x29c3700
	void ClearGunTech();// 0x29c36e0

--------------------------------
Class: ArkWeaponAnimSet.DataAsset.Object
	IdleBreakAssets* IdleBreakAssets;//[Offset: 0x30, Size: 0x8]
	AnimationAsset* AnimAssets;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: IdleBreakAssets.DataAsset.Object
	AnimSequenceTable StandSequenceTable;//[Offset: 0x30, Size: 0x10]
	AnimSequenceTable CrouchSequenceTable;//[Offset: 0x40, Size: 0x10]
	AnimSequenceTable CoverStandSequenceTable;//[Offset: 0x50, Size: 0x10]
	AnimSequenceTable CoverCrouchSequenceTable;//[Offset: 0x60, Size: 0x10]
	AnimSequenceTable BattleSequenceTable;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: AnimSequenceTable
	RandomSequenceEntry[] AnimSequences;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: RandomSequenceEntry
	AnimSequence* Sequence;//[Offset: 0x0, Size: 0x8]
	float ChanceToPlay;//[Offset: 0x8, Size: 0x4]
	AlphaBlend BlendIn;//[Offset: 0x10, Size: 0x30]
	AlphaBlend PackageBlendIn;//[Offset: 0x40, Size: 0x30]

--------------------------------
Class: ArkItemAvatar.ArkItem.Object
	ArkAvatarPartData[] AvatarPartArray;//[Offset: 0x98, Size: 0x10]
	ArkAvatarPartData[] FPPAvatarPartArray;//[Offset: 0xa8, Size: 0x10]
	SuitPartsAlphaOffset SuitPartsAlphaOffset;//[Offset: 0xb8, Size: 0x34]
	<int,int> AttachmentMap;//[Offset: 0xf0, Size: 0x50]
	<int,int> DecalMap;//[Offset: 0x140, Size: 0x50]

--------------------------------
Class: ArkItem.Object
	bool bCanHoldinHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	int HoldingInfoID;//[Offset: 0x2c, Size: 0x4]
	ArkHavenStatPropertyRef HavenStat;//[Offset: 0x30, Size: 0xc]
	bool bShouldMulticastBeginUseEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	bool bShouldMulticastEndUseEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1]
	bool bShouldMulticastUseEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f, Size: 0x1]
	bool bShouldMulticastCancelEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bShouldNotifyClientBeginUseEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool bShouldNotifyClientEndUseEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
	bool bShouldNotifyClientUseEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1]
	bool bShouldNotifyClientCancelEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	class ArkGameplayAbility* UseItemAbilityClass;//[Offset: 0x60, Size: 0x8]
	bool bCanCancelUsing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	ArkPlayer* OwnerPlayer;//[Offset: 0x78, Size: 0x8]
	void UseItem();// 0x280d5b0
	void TryConsumeItem(int nCount);// 0x280d530
	bool ShouldItemDescTextAutoWrap();// 0x280d500
	bool IsConsumbale();// 0x280d440
	Texture2D* GetSoftIconTexture();// 0x280d330
	int GetMaxStackCount();// 0x280d2d0
	int GetMaxCountInScene();// 0x280d2a0
	int GetMaxCount();// 0x280d270
	void GetItemUsingAnim(out AnimSequenceBase* Anim, out AnimSequenceBase* AnimCharacter);// 0x280d100
	int GetItemUID();// 0x280d0d0
	FText GetItemName();// 0x280cfd0
	int GetItemID();// 0x280cfa0
	FText GetItemDesc();// 0x280cf00
	int GetItemCount();// 0x280ced0
	float GetItemCoolDownPct();// 0x280ce90
	void EndUseItem();// 0x280cdf0
	void CancelUseItem();// 0x280cc90

--------------------------------
Class: ArkAvatarPartData
	enum PartType;//[Offset: 0x0, Size: 0x1]
	FName AttachSocketName;//[Offset: 0x4, Size: 0x8]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x10, Size: 0x28]
	StaticMesh* StaticMesh;//[Offset: 0x38, Size: 0x28]
	<int,MaterialInterface*> OverrideMaterials;//[Offset: 0x60, Size: 0x50]
	class AnimInstance* AnimInstanceClass;//[Offset: 0xb0, Size: 0x28]
	bool bForceUseCopyPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]
	SkeletalMesh* SkeletalMeshInGameOptimize;//[Offset: 0xe0, Size: 0x28]
	class AnimInstance* AnimInstanceClassInGameOptimize;//[Offset: 0x108, Size: 0x28]
	class GFurComponent* GFurComponent;//[Offset: 0x130, Size: 0x28]
	FName[] AttachmentSlotArray;//[Offset: 0x158, Size: 0x10]
	<int,FName> AttachmentSlotMap;//[Offset: 0x168, Size: 0x50]
	ArkAvatarPartDecalSlotData[] DecalSlotArray;//[Offset: 0x1b8, Size: 0x10]
	<int,ArkAvatarPartDecalSlotData> DecalSlotMap;//[Offset: 0x1c8, Size: 0x50]
	ArkAvatarPartEffectData[] EffectDataArray;//[Offset: 0x218, Size: 0x10]

--------------------------------
Class: GFurComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalGrowMesh;//[Offset: 0x750, Size: 0x8]
	StaticMesh* StaticGrowMesh;//[Offset: 0x758, Size: 0x8]
	FurSplines* FurSplines;//[Offset: 0x760, Size: 0x8]
	SkeletalMesh*[] SkeletalGuideMeshes;//[Offset: 0x768, Size: 0x10]
	StaticMesh*[] StaticGuideMeshes;//[Offset: 0x778, Size: 0x10]
	int LayerCount;//[Offset: 0x788, Size: 0x4]
	float MinScreenSize;//[Offset: 0x78c, Size: 0x4]
	FurLod[] LODs;//[Offset: 0x790, Size: 0x10]
	float ShellBias;//[Offset: 0x7a0, Size: 0x4]
	float FurLength;//[Offset: 0x7a4, Size: 0x4]
	float MinFurLength;//[Offset: 0x7a8, Size: 0x4]
	bool RemoveFacesWithoutSplines;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ac, Size: 0x1]
	bool PhysicsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ad, Size: 0x1]
	float ForceDistribution;//[Offset: 0x7b0, Size: 0x4]
	float Stiffness;//[Offset: 0x7b4, Size: 0x4]
	float Damping;//[Offset: 0x7b8, Size: 0x4]
	Vector ConstantForce;//[Offset: 0x7bc, Size: 0xc]
	float MaxForce;//[Offset: 0x7c8, Size: 0x4]
	float MaxForceTorqueFactor;//[Offset: 0x7cc, Size: 0x4]
	float ReferenceHairBias;//[Offset: 0x7d0, Size: 0x4]
	float HairLengthForceUniformity;//[Offset: 0x7d4, Size: 0x4]
	float MaxPhysicsOffsetLength;//[Offset: 0x7d8, Size: 0x4]
	float NoiseStrength;//[Offset: 0x7dc, Size: 0x4]
	bool DisableMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e0, Size: 0x1]
	float StreamingDistanceMultiplier;//[Offset: 0x7e4, Size: 0x4]

--------------------------------
Class: FurSplines.Object
	Vector[] Vertices;//[Offset: 0x28, Size: 0x10]
	int[] Index;//[Offset: 0x38, Size: 0x10]
	int[] Count;//[Offset: 0x48, Size: 0x10]
	int ControlPointCount;//[Offset: 0x58, Size: 0x4]
	FString ImportFilename;//[Offset: 0x60, Size: 0x10]
	int Version;//[Offset: 0x70, Size: 0x4]
	int ImportTransformation;//[Offset: 0x74, Size: 0x4]
	float Threshold;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: FurLod
	float ScreenSize;//[Offset: 0x0, Size: 0x4]
	int LayerCount;//[Offset: 0x4, Size: 0x4]
	int LOD;//[Offset: 0x8, Size: 0x4]
	bool PhysicsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool DisableMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]

--------------------------------
Class: ArkAvatarPartDecalSlotData
	ArkAvatarPartDecalSlotAttachData[] DecalAttachData;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ArkAvatarPartDecalSlotAttachData
	Vector DecalSize;//[Offset: 0x0, Size: 0xc]
	FName AttachPoint;//[Offset: 0xc, Size: 0x8]
	Transform RelativeTransform;//[Offset: 0x20, Size: 0x30]

--------------------------------
Class: ArkAvatarPartEffectData
	FName AttachSocketName;//[Offset: 0x0, Size: 0x8]
	ParticleSystem* ParticleTemplate;//[Offset: 0x8, Size: 0x28]
	Transform RelativeTransform;//[Offset: 0x30, Size: 0x30]

--------------------------------
Class: ArkHavenStatPropertyRef.ArkHavenPropertyRef

--------------------------------
Class: ArkHavenPropertyRef
	FName Name;//[Offset: 0x0, Size: 0x8]
	enum Type;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: ArkGameplayAbility.GameplayAbility.Object
	enum[] AbilityActionStates;//[Offset: 0x400, Size: 0x10]
	void OnPlayerCharacterStateChanged(enum OldState, enum NewState);// 0x2768eb0
	void OnLeaveAbilityActionState(bool bClientSimulation);// 0x2768e20
	void OnAbilityEnd(bool bWasCancelled, bool bWasRetriggered);// 0x2768d50
	void OnAbilityBegin();// 0x2768d30
	void NotifyPlayerCharacterStateChanged(enum OldState, enum NewState);// 0x305c9c0

--------------------------------
Class: GameplayAbility.Object
	GameplayTagContainer AbilityTags;//[Offset: 0xa8, Size: 0x20]
	bool bReplicateInputDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool RemoteInstanceEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	byte ReplicationPolicy;//[Offset: 0xce, Size: 0x1]
	byte InstancingPolicy;//[Offset: 0xcf, Size: 0x1]
	bool bServerRespectsRemoteAbilityCancellation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	bool bRetriggerInstancedAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	GameplayAbilityActivationInfo CurrentActivationInfo;//[Offset: 0xd8, Size: 0x20]
	GameplayEventData CurrentEventData;//[Offset: 0xf8, Size: 0xb0]
	byte NetExecutionPolicy;//[Offset: 0x1a8, Size: 0x1]
	byte NetSecurityPolicy;//[Offset: 0x1a9, Size: 0x1]
	class GameplayEffect* CostGameplayEffectClass;//[Offset: 0x1b0, Size: 0x8]
	AbilityTriggerData[] AbilityTriggers;//[Offset: 0x1b8, Size: 0x10]
	class GameplayEffect* CooldownGameplayEffectClass;//[Offset: 0x1c8, Size: 0x8]
	GameplayTagQuery CancelAbilitiesMatchingTagQuery;//[Offset: 0x1d0, Size: 0x48]
	GameplayTagContainer CancelAbilitiesWithTag;//[Offset: 0x218, Size: 0x20]
	GameplayTagContainer BlockAbilitiesWithTag;//[Offset: 0x238, Size: 0x20]
	GameplayTagContainer ActivationOwnedTags;//[Offset: 0x258, Size: 0x20]
	GameplayTagContainer ActivationRequiredTags;//[Offset: 0x278, Size: 0x20]
	GameplayTagContainer ActivationBlockedTags;//[Offset: 0x298, Size: 0x20]
	GameplayTagContainer SourceRequiredTags;//[Offset: 0x2b8, Size: 0x20]
	GameplayTagContainer SourceBlockedTags;//[Offset: 0x2d8, Size: 0x20]
	GameplayTagContainer TargetRequiredTags;//[Offset: 0x2f8, Size: 0x20]
	GameplayTagContainer TargetBlockedTags;//[Offset: 0x318, Size: 0x20]
	GameplayTask*[] ActiveTasks;//[Offset: 0x358, Size: 0x10]
	AnimMontage* CurrentMontage;//[Offset: 0x378, Size: 0x8]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 0x1]
	bool bIsCancelable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e1, Size: 0x1]
	bool bIsBlockingOtherAbilities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e2, Size: 0x1]
	bool bMarkPendingKillOnAbilityEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 0x1]
	void SetShouldBlockOtherAbilities(bool bShouldBlockAbilities);// 0xcbe470
	void SetCanBeCanceled(bool bCanBeCanceled);// 0xcbe3e0
	void SendGameplayEvent(GameplayTag EventTag, GameplayEventData Payload);// 0xcbe120
	void RemoveGrantedByEffect();// 0xcbe100
	void MontageStop(float OverrideBlendOutTime);// 0xcbe080
	void MontageSetNextSectionName(FName FromSectionName, FName ToSectionName);// 0xcbdfc0
	void MontageJumpToSection(FName SectionName);// 0xcbdf40
	GameplayAbilityTargetingLocationInfo MakeTargetLocationInfoFromOwnerSkeletalMeshComponent(FName SocketName);// 0xcbde50
	GameplayAbilityTargetingLocationInfo MakeTargetLocationInfoFromOwnerActor();// 0xcbddb0
	GameplayEffectSpecHandle MakeOutgoingGameplayEffectSpec(class GameplayEffect GameplayEffectClass, float Level);// 0xcbdc60
	bool K2_ShouldAbilityRespondToEvent(GameplayAbilityActorInfo ActorInfo, GameplayEventData Payload);// 0x305c9c0
	void K2_RemoveGameplayCue(GameplayTag GameplayCueTag);// 0xcbdbd0
	void K2_OnEndAbility(bool bWasCancelled, bool WasRetriggered);// 0x305c9c0
	void K2_ExecuteGameplayCueWithParams(GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0xcbda10
	void K2_ExecuteGameplayCue(GameplayTag GameplayCueTag, GameplayEffectContextHandle Context);// 0xcbd8e0
	void K2_EndAbility();// 0xcbd8c0
	void K2_CommitExecute();// 0x305c9c0
	bool K2_CommitAbilityCost(bool BroadcastCommitEvent);// 0xcbd820
	bool K2_CommitAbilityCooldown(bool BroadcastCommitEvent, bool ForceCooldown);// 0xcbd740
	bool K2_CommitAbility();// 0xcbd710
	bool K2_CheckAbilityCost();// 0xcbd6e0
	bool K2_CheckAbilityCooldown();// 0xcbd6b0
	void K2_CancelAbility();// 0xcbd690
	bool K2_CanActivateAbility(GameplayAbilityActorInfo ActorInfo, out GameplayTagContainer RelevantTags);// 0x305c9c0
	ActiveGameplayEffectHandle[] K2_ApplyGameplayEffectSpecToTarget(const GameplayEffectSpecHandle EffectSpecHandle, GameplayAbilityTargetDataHandle TargetData);// 0xcbd480
	ActiveGameplayEffectHandle K2_ApplyGameplayEffectSpecToOwner(const GameplayEffectSpecHandle EffectSpecHandle);// 0xcbd3a0
	void K2_AddGameplayCueWithParams(GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameter, bool bRemoveOnAbilityEnd);// 0xcbd1a0
	void K2_AddGameplayCue(GameplayTag GameplayCueTag, GameplayEffectContextHandle Context, bool bRemoveOnAbilityEnd);// 0xcbd030
	void K2_ActivateAbilityFromEvent(out const GameplayEventData EventData);// 0x305c9c0
	void K2_ActivateAbility();// 0x305c9c0
	void InvalidateClientPredictionKey();// 0xcbd010
	SkeletalMeshComponent* GetOwningComponentFromActorInfo();// 0xcbcfe0
	Actor* GetOwningActorFromActorInfo();// 0xcbcfb0
	GameplayEffectContextHandle GetGrantedByEffectContext();// 0xcbcf30
	Object* GetCurrentSourceObject();// 0xcbcf00
	AnimMontage* GetCurrentMontage();// 0xcbced0
	float GetCooldownTimeRemaining();// 0xcbcea0
	GameplayEffectContextHandle GetContextFromOwner(GameplayAbilityTargetDataHandle OptionalTargetData);// 0xcbcd20
	Actor* GetAvatarActorFromActorInfo();// 0xcbccf0
	GameplayAbilityActorInfo GetActorInfo();// 0xcbcc80
	AbilitySystemComponent* GetAbilitySystemComponentFromActorInfo();// 0xcbcc50
	int GetAbilityLevel();// 0xcbcc20
	void EndTaskByInstanceName(FName InstanceName);// 0xcbcba0
	void EndAbilityState(FName OptionalStateNameToEnd);// 0xcbcb20
	void ConfirmTaskByInstanceName(FName InstanceName, bool bEndTask);// 0xcbca50
	void CancelTaskByInstanceName(FName InstanceName);// 0xcbc9b0
	void BP_RemoveGameplayEffectFromOwnerWithHandle(ActiveGameplayEffectHandle Handle, int StacksToRemove);// 0xcbc8e0
	void BP_RemoveGameplayEffectFromOwnerWithGrantedTags(GameplayTagContainer WithGrantedTags, int StacksToRemove);// 0xcbc7d0
	void BP_RemoveGameplayEffectFromOwnerWithAssetTags(GameplayTagContainer WithAssetTags, int StacksToRemove);// 0xcbc6c0
	ActiveGameplayEffectHandle[] BP_ApplyGameplayEffectToTarget(GameplayAbilityTargetDataHandle TargetData, class GameplayEffect GameplayEffectClass, int GameplayEffectLevel, int Stacks);// 0xcbc4b0
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToOwner(class GameplayEffect GameplayEffectClass, int GameplayEffectLevel, int Stacks);// 0xcbc3a0

--------------------------------
Class: GameplayTagContainer
	GameplayTag[] GameplayTags;//[Offset: 0x0, Size: 0x10]
	GameplayTag[] ParentTags;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: GameplayEventData
	GameplayTag EventTag;//[Offset: 0x0, Size: 0x8]
	Actor* Instigator;//[Offset: 0x8, Size: 0x8]
	Actor* Target;//[Offset: 0x10, Size: 0x8]
	Object* OptionalObject;//[Offset: 0x18, Size: 0x8]
	Object* OptionalObject2;//[Offset: 0x20, Size: 0x8]
	GameplayEffectContextHandle ContextHandle;//[Offset: 0x28, Size: 0x18]
	GameplayTagContainer InstigatorTags;//[Offset: 0x40, Size: 0x20]
	GameplayTagContainer TargetTags;//[Offset: 0x60, Size: 0x20]
	float EventMagnitude;//[Offset: 0x80, Size: 0x4]
	GameplayAbilityTargetDataHandle TargetData;//[Offset: 0x88, Size: 0x28]

--------------------------------
Class: GameplayEffectContextHandle

--------------------------------
Class: GameplayAbilityTargetDataHandle

--------------------------------
Class: GameplayAbilityActivationInfo
	byte ActivationMode;//[Offset: 0x0, Size: 0x1]
	bool bCanBeEndedByOtherInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	PredictionKey PredictionKeyWhenActivated;//[Offset: 0x8, Size: 0x18]

--------------------------------
Class: PredictionKey
	int16 Current;//[Offset: 0x0, Size: 0x2]
	int16 Base;//[Offset: 0x2, Size: 0x2]
	PackageMap* PredictiveConnection;//[Offset: 0x8, Size: 0x8]
	bool bIsStale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bIsServerInitiated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]

--------------------------------
Class: GameplayEffect.Object
	enum DurationPolicy;//[Offset: 0x30, Size: 0x1]
	GameplayEffectModifierMagnitude DurationMagnitude;//[Offset: 0x38, Size: 0x1a8]
	ScalableFloat Period;//[Offset: 0x1e0, Size: 0x20]
	bool bExecutePeriodicEffectOnApplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	enum PeriodicInhibitionPolicy;//[Offset: 0x201, Size: 0x1]
	GameplayModifierInfo[] Modifiers;//[Offset: 0x208, Size: 0x10]
	GameplayEffectExecutionDefinition[] Executions;//[Offset: 0x218, Size: 0x10]
	ScalableFloat ChanceToApplyToTarget;//[Offset: 0x228, Size: 0x20]
	class GameplayEffectCustomApplicationRequirement[] ApplicationRequirements;//[Offset: 0x248, Size: 0x10]
	class GameplayEffect[] TargetEffectClasses;//[Offset: 0x258, Size: 0x10]
	ConditionalGameplayEffect[] ConditionalGameplayEffects;//[Offset: 0x268, Size: 0x10]
	class GameplayEffect[] OverflowEffects;//[Offset: 0x278, Size: 0x10]
	bool bDenyOverflowApplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	bool bClearStackOnOverflow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 0x1]
	class GameplayEffect[] PrematureExpirationEffectClasses;//[Offset: 0x290, Size: 0x10]
	class GameplayEffect[] RoutineExpirationEffectClasses;//[Offset: 0x2a0, Size: 0x10]
	bool bRequireModifierSuccessToTriggerCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	bool bSuppressStackingCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 0x1]
	GameplayEffectCue[] GameplayCues;//[Offset: 0x2b8, Size: 0x10]
	GameplayEffectUIData* UIData;//[Offset: 0x2c8, Size: 0x8]
	InheritedTagContainer InheritableGameplayEffectTags;//[Offset: 0x2d0, Size: 0x60]
	InheritedTagContainer InheritableOwnedTagsContainer;//[Offset: 0x330, Size: 0x60]
	GameplayTagRequirements OngoingTagRequirements;//[Offset: 0x390, Size: 0x40]
	GameplayTagRequirements ApplicationTagRequirements;//[Offset: 0x3d0, Size: 0x40]
	GameplayTagRequirements RemovalTagRequirements;//[Offset: 0x410, Size: 0x40]
	InheritedTagContainer RemoveGameplayEffectsWithTags;//[Offset: 0x450, Size: 0x60]
	GameplayTagRequirements GrantedApplicationImmunityTags;//[Offset: 0x4b0, Size: 0x40]
	GameplayEffectQuery GrantedApplicationImmunityQuery;//[Offset: 0x4f0, Size: 0x150]
	GameplayEffectQuery RemoveGameplayEffectQuery;//[Offset: 0x648, Size: 0x150]
	enum StackingType;//[Offset: 0x799, Size: 0x1]
	int StackLimitCount;//[Offset: 0x79c, Size: 0x4]
	enum StackDurationRefreshPolicy;//[Offset: 0x7a0, Size: 0x1]
	enum StackPeriodResetPolicy;//[Offset: 0x7a1, Size: 0x1]
	enum StackExpirationPolicy;//[Offset: 0x7a2, Size: 0x1]
	GameplayAbilitySpecDef[] GrantedAbilities;//[Offset: 0x7a8, Size: 0x10]

--------------------------------
Class: GameplayEffectModifierMagnitude
	enum MagnitudeCalculationType;//[Offset: 0x0, Size: 0x1]
	ScalableFloat ScalableFloatMagnitude;//[Offset: 0x8, Size: 0x20]
	AttributeBasedFloat AttributeBasedMagnitude;//[Offset: 0x28, Size: 0xf8]
	CustomCalculationBasedFloat CustomMagnitude;//[Offset: 0x120, Size: 0x78]
	SetByCallerFloat SetByCallerMagnitude;//[Offset: 0x198, Size: 0x10]

--------------------------------
Class: ScalableFloat
	float Value;//[Offset: 0x0, Size: 0x4]
	CurveTableRowHandle Curve;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CurveTableRowHandle
	CurveTable* CurveTable;//[Offset: 0x0, Size: 0x8]
	FName RowName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AttributeBasedFloat
	ScalableFloat Coefficient;//[Offset: 0x0, Size: 0x20]
	ScalableFloat PreMultiplyAdditiveValue;//[Offset: 0x20, Size: 0x20]
	ScalableFloat PostMultiplyAdditiveValue;//[Offset: 0x40, Size: 0x20]
	GameplayEffectAttributeCaptureDefinition BackingAttribute;//[Offset: 0x60, Size: 0x40]
	CurveTableRowHandle AttributeCurve;//[Offset: 0xa0, Size: 0x10]
	enum AttributeCalculationType;//[Offset: 0xb0, Size: 0x1]
	enum FinalChannel;//[Offset: 0xb1, Size: 0x1]
	GameplayTagContainer SourceTagFilter;//[Offset: 0xb8, Size: 0x20]
	GameplayTagContainer TargetTagFilter;//[Offset: 0xd8, Size: 0x20]

--------------------------------
Class: GameplayEffectAttributeCaptureDefinition
	GameplayAttribute AttributeToCapture;//[Offset: 0x0, Size: 0x38]
	enum AttributeSource;//[Offset: 0x38, Size: 0x1]
	bool bSnapshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]

--------------------------------
Class: GameplayAttribute
	FString AttributeName;//[Offset: 0x0, Size: 0x10]
	FieldPathProperty Attribute;//[Size: 0x20]
	Struct* AttributeOwner;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: CustomCalculationBasedFloat
	class GameplayModMagnitudeCalculation* CalculationClassMagnitude;//[Offset: 0x0, Size: 0x8]
	ScalableFloat Coefficient;//[Offset: 0x8, Size: 0x20]
	ScalableFloat PreMultiplyAdditiveValue;//[Offset: 0x28, Size: 0x20]
	ScalableFloat PostMultiplyAdditiveValue;//[Offset: 0x48, Size: 0x20]
	CurveTableRowHandle FinalLookupCurve;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: GameplayModMagnitudeCalculation.GameplayEffectCalculation.Object
	bool bAllowNonNetAuthorityDependencyRegistration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float CalculateBaseMagnitude(out const GameplayEffectSpec Spec);// 0xccd010

--------------------------------
Class: GameplayEffectCalculation.Object
	GameplayEffectAttributeCaptureDefinition[] RelevantAttributesToCapture;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: GameplayEffectSpec
	GameplayEffect* Def;//[Offset: 0x0, Size: 0x8]
	GameplayEffectModifiedAttribute[] ModifiedAttributes;//[Offset: 0x8, Size: 0x10]
	GameplayEffectAttributeCaptureSpecContainer CapturedRelevantAttributes;//[Offset: 0x18, Size: 0x28]
	float Duration;//[Offset: 0x50, Size: 0x4]
	float Period;//[Offset: 0x54, Size: 0x4]
	float ChanceToApplyToTarget;//[Offset: 0x58, Size: 0x4]
	TagContainerAggregator CapturedSourceTags;//[Offset: 0x60, Size: 0x88]
	TagContainerAggregator CapturedTargetTags;//[Offset: 0xe8, Size: 0x88]
	GameplayTagContainer DynamicGrantedTags;//[Offset: 0x170, Size: 0x20]
	GameplayTagContainer DynamicAssetTags;//[Offset: 0x190, Size: 0x20]
	ModifierSpec[] Modifiers;//[Offset: 0x1b0, Size: 0x10]
	int StackCount;//[Offset: 0x1c0, Size: 0x4]
	bool bCompletedSourceAttributeCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 0x1]
	bool bCompletedTargetAttributeCapture;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 0x1]
	bool bDurationLocked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 0x1]
	GameplayAbilitySpecDef[] GrantedAbilitySpecs;//[Offset: 0x1c8, Size: 0x10]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x278, Size: 0x18]
	float Level;//[Offset: 0x290, Size: 0x4]

--------------------------------
Class: GameplayEffectModifiedAttribute
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38]
	float TotalMagnitude;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: GameplayEffectAttributeCaptureSpecContainer
	GameplayEffectAttributeCaptureSpec[] SourceAttributes;//[Offset: 0x0, Size: 0x10]
	GameplayEffectAttributeCaptureSpec[] TargetAttributes;//[Offset: 0x10, Size: 0x10]
	bool bHasNonSnapshottedAttributes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: GameplayEffectAttributeCaptureSpec
	GameplayEffectAttributeCaptureDefinition BackingDefinition;//[Offset: 0x0, Size: 0x40]

--------------------------------
Class: TagContainerAggregator
	GameplayTagContainer CapturedActorTags;//[Offset: 0x0, Size: 0x20]
	GameplayTagContainer CapturedSpecTags;//[Offset: 0x20, Size: 0x20]
	GameplayTagContainer ScopedTags;//[Offset: 0x40, Size: 0x20]

--------------------------------
Class: ModifierSpec
	float EvaluatedMagnitude;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: GameplayAbilitySpecDef
	class GameplayAbility* Ability;//[Offset: 0x0, Size: 0x8]
	ScalableFloat LevelScalableFloat;//[Offset: 0x8, Size: 0x20]
	int InputID;//[Offset: 0x28, Size: 0x4]
	enum RemovalPolicy;//[Offset: 0x2c, Size: 0x1]
	Object* SourceObject;//[Offset: 0x30, Size: 0x8]
	GameplayAbilitySpecHandle AssignedHandle;//[Offset: 0x88, Size: 0x4]

--------------------------------
Class: GameplayAbilitySpecHandle
	int Handle;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: SetByCallerFloat
	FName DataName;//[Offset: 0x0, Size: 0x8]
	GameplayTag DataTag;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: GameplayModifierInfo
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38]
	byte ModifierOp;//[Offset: 0x38, Size: 0x1]
	ScalableFloat Magnitude;//[Offset: 0x40, Size: 0x20]
	GameplayEffectModifierMagnitude ModifierMagnitude;//[Offset: 0x60, Size: 0x1a8]
	GameplayModEvaluationChannelSettings EvaluationChannelSettings;//[Offset: 0x208, Size: 0x1]
	GameplayTagRequirements SourceTags;//[Offset: 0x210, Size: 0x40]
	GameplayTagRequirements TargetTags;//[Offset: 0x250, Size: 0x40]

--------------------------------
Class: GameplayModEvaluationChannelSettings
	enum Channel;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: GameplayTagRequirements
	GameplayTagContainer RequireTags;//[Offset: 0x0, Size: 0x20]
	GameplayTagContainer IgnoreTags;//[Offset: 0x20, Size: 0x20]

--------------------------------
Class: GameplayEffectExecutionDefinition
	class GameplayEffectExecutionCalculation* CalculationClass;//[Offset: 0x0, Size: 0x8]
	GameplayTagContainer PassedInTags;//[Offset: 0x8, Size: 0x20]
	GameplayEffectExecutionScopedModifierInfo[] CalculationModifiers;//[Offset: 0x28, Size: 0x10]
	class GameplayEffect[] ConditionalGameplayEffectClasses;//[Offset: 0x38, Size: 0x10]
	ConditionalGameplayEffect[] ConditionalGameplayEffects;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: GameplayEffectExecutionCalculation.GameplayEffectCalculation.Object
	bool bRequiresPassedInTags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	void Execute(out const GameplayEffectCustomExecutionParameters ExecutionParams, out GameplayEffectCustomExecutionOutput OutExecutionOutput);// 0xccd230

--------------------------------
Class: GameplayEffectCustomExecutionParameters

--------------------------------
Class: GameplayEffectCustomExecutionOutput
	GameplayModifierEvaluatedData[] OutputModifiers;//[Offset: 0x0, Size: 0x10]
	bool bTriggerConditionalGameplayEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bHandledStackCountManually;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bHandledGameplayCuesManually;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: GameplayModifierEvaluatedData
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38]
	byte ModifierOp;//[Offset: 0x38, Size: 0x1]
	float Magnitude;//[Offset: 0x3c, Size: 0x4]
	ActiveGameplayEffectHandle Handle;//[Offset: 0x40, Size: 0x8]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ActiveGameplayEffectHandle
	int Handle;//[Offset: 0x0, Size: 0x4]
	bool bPassedFiltersAndWasExecuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: GameplayEffectExecutionScopedModifierInfo
	GameplayEffectAttributeCaptureDefinition CapturedAttribute;//[Offset: 0x0, Size: 0x40]
	GameplayTag TransientAggregatorIdentifier;//[Offset: 0x40, Size: 0x8]
	enum AggregatorType;//[Offset: 0x48, Size: 0x1]
	byte ModifierOp;//[Offset: 0x49, Size: 0x1]
	GameplayEffectModifierMagnitude ModifierMagnitude;//[Offset: 0x50, Size: 0x1a8]
	GameplayModEvaluationChannelSettings EvaluationChannelSettings;//[Offset: 0x1f8, Size: 0x1]
	GameplayTagRequirements SourceTags;//[Offset: 0x200, Size: 0x40]
	GameplayTagRequirements TargetTags;//[Offset: 0x240, Size: 0x40]

--------------------------------
Class: ConditionalGameplayEffect
	class GameplayEffect* EffectClass;//[Offset: 0x0, Size: 0x8]
	GameplayTagContainer RequiredSourceTags;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: GameplayEffectCustomApplicationRequirement.Object
	bool CanApplyGameplayEffect(const GameplayEffect* GameplayEffect, out const GameplayEffectSpec Spec, AbilitySystemComponent* ASC);// 0xccd0e0

--------------------------------
Class: AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
	AttributeDefaults[] DefaultStartingData;//[Offset: 0x260, Size: 0x10]
	AttributeSet*[] SpawnedAttributes;//[Offset: 0x270, Size: 0x10]
	FName AffectedAnimInstanceTag;//[Offset: 0x280, Size: 0x8]
	float OutgoingDuration;//[Offset: 0x428, Size: 0x4]
	float IncomingDuration;//[Offset: 0x42c, Size: 0x4]
	FString[] ClientDebugStrings;//[Offset: 0x450, Size: 0x10]
	FString[] ServerDebugStrings;//[Offset: 0x460, Size: 0x10]
	bool UserAbilityActivationInhibited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 0x1]
	bool ReplicationProxyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d1, Size: 0x1]
	bool bSuppressGrantAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d2, Size: 0x1]
	bool bSuppressGameplayCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d3, Size: 0x1]
	GameplayAbilityTargetActor*[] SpawnedTargetActors;//[Offset: 0x4d8, Size: 0x10]
	Actor* OwnerActor;//[Offset: 0x510, Size: 0x8]
	Actor* AvatarActor;//[Offset: 0x518, Size: 0x8]
	GameplayAbilitySpecContainer ActivatableAbilities;//[Offset: 0x530, Size: 0x120]
	GameplayAbility*[] AllReplicatedInstancedAbilities;//[Offset: 0x680, Size: 0x10]
	GameplayAbilityRepAnimMontage RepAnimMontageInfo;//[Offset: 0x860, Size: 0x48]
	bool bCachedIsNetSimulated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a8, Size: 0x1]
	bool bPendingMontageRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a9, Size: 0x1]
	GameplayAbilityLocalAnimMontage LocalAnimMontageInfo;//[Offset: 0x8b0, Size: 0x30]
	ActiveGameplayEffectsContainer ActiveGameplayEffects;//[Offset: 0x980, Size: 0x480]
	ActiveGameplayCueContainer ActiveGameplayCues;//[Offset: 0xe00, Size: 0x128]
	ActiveGameplayCueContainer MinimalReplicationGameplayCues;//[Offset: 0xf28, Size: 0x128]
	byte[] BlockedAbilityBindings;//[Offset: 0x1178, Size: 0x10]
	MinimalReplicationTagCountMap MinimalReplicationTags;//[Offset: 0x12b0, Size: 0x60]
	ReplicatedPredictionKeyMap ReplicatedPredictionKeyMap;//[Offset: 0x1320, Size: 0x118]
	bool TryActivateAbilityByClass(class GameplayAbility InAbilityToActivate, bool bAllowRemoteActivation);// 0xca7bf0
	bool TryActivateAbilitiesByTag(out const GameplayTagContainer GameplayTagContainer, bool bAllowRemoteActivation);// 0xca7ae0
	void TargetConfirm();// 0xca7ac0
	void TargetCancel();// 0xca7aa0
	void SetUserAbilityActivationInhibited(bool NewInhibit);// 0xca7a10
	void SetActiveGameplayEffectLevelUsingQuery(GameplayEffectQuery Query, int NewLevel);// 0xca7910
	void SetActiveGameplayEffectLevel(ActiveGameplayEffectHandle ActiveHandle, int NewLevel);// 0xca7840
	void ServerTryActivateAbilityWithEventData(GameplayAbilitySpecHandle AbilityToActivate, bool InputPressed, PredictionKey PredictionKey, GameplayEventData TriggerEventData);// 0xca73c0
	void ServerTryActivateAbility(GameplayAbilitySpecHandle AbilityToActivate, bool InputPressed, PredictionKey PredictionKey);// 0xca7260
	void ServerSetReplicatedTargetDataCancelled(GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey);// 0xca70d0
	void ServerSetReplicatedTargetData(GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, const GameplayAbilityTargetDataHandle ReplicatedTargetDataHandle, GameplayTag ApplicationTag, PredictionKey CurrentPredictionKey);// 0xca6e30
	void ServerSetReplicatedEventWithPayload(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey, Vector_NetQuantize100 VectorPayload);// 0xca6bf0
	void ServerSetReplicatedEvent(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey);// 0xca6a20
	void ServerSetInputReleased(GameplayAbilitySpecHandle AbilityHandle);// 0xca6970
	void ServerSetInputPressed(GameplayAbilitySpecHandle AbilityHandle);// 0xca68c0
	void ServerPrintDebug_RequestWithStrings(const FString[] Strings);// 0xca67d0
	void ServerPrintDebug_Request();// 0xca6780
	void ServerEndAbility(GameplayAbilitySpecHandle AbilityToEnd, GameplayAbilityActivationInfo ActivationInfo, PredictionKey PredictionKey, bool bWasRetriggered);// 0xca65a0
	void ServerCurrentMontageSetPlayRate(AnimMontage* ClientAnimMontage, float InPlayRate);// 0xca64a0
	void ServerCurrentMontageSetNextSectionName(AnimMontage* ClientAnimMontage, float ClientPosition, FName SectionName, FName NextSectionName);// 0xca6320
	void ServerCurrentMontageJumpToSectionName(AnimMontage* ClientAnimMontage, FName SectionName);// 0xca6220
	void ServerCancelAbility(GameplayAbilitySpecHandle AbilityToCancel, GameplayAbilityActivationInfo ActivationInfo);// 0xca6100
	void ServerAbilityRPCBatch(ServerAbilityRPCBatch BatchInfo);// 0xca5f40
	void RemoveActiveGameplayEffectBySourceEffect(class GameplayEffect GameplayEffect, AbilitySystemComponent* InstigatorAbilitySystemComponent, int StacksToRemove);// 0xca5e40
	bool RemoveActiveGameplayEffect(ActiveGameplayEffectHandle Handle, int StacksToRemove);// 0xca5d70
	int RemoveActiveEffectsWithTags(GameplayTagContainer Tags);// 0xca5c90
	int RemoveActiveEffectsWithSourceTags(GameplayTagContainer Tags);// 0xca5bb0
	int RemoveActiveEffectsWithGrantedTags(GameplayTagContainer Tags);// 0xca5ad0
	int RemoveActiveEffectsWithAppliedTags(GameplayTagContainer Tags);// 0xca5ad0
	void OnRep_ServerDebugString();// 0xca5ab0
	void OnRep_ReplicatedAnimMontage();// 0xca5a90
	void OnRep_OwningActor();// 0xca5a70
	void OnRep_ClientDebugString();// 0x780890
	void OnRep_ActivateAbilities();// 0xca5a50
	void NetMulticast_InvokeGameplayCuesExecuted_WithParams(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0xca57d0
	void NetMulticast_InvokeGameplayCuesExecuted(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0xca5600
	void NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0xca5380
	void NetMulticast_InvokeGameplayCueExecuted_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0xca5150
	void NetMulticast_InvokeGameplayCueExecuted_FromSpec(const GameplayEffectSpecForRPC Spec, PredictionKey PredictionKey);// 0xca4fc0
	void NetMulticast_InvokeGameplayCueExecuted(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0xca4e40
	void NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0xca49e0
	void NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec(const GameplayEffectSpecForRPC Spec, PredictionKey PredictionKey);// 0xca4860
	void NetMulticast_InvokeGameplayCueAdded_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters Parameters);// 0xca4c10
	void NetMulticast_InvokeGameplayCueAdded(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0xca46e0
	GameplayEffectSpecHandle MakeOutgoingSpec(class GameplayEffect GameplayEffectClass, float Level, GameplayEffectContextHandle Context);// 0xca44d0
	GameplayEffectContextHandle MakeEffectContext();// 0xca4450
	void K2_InitStats(class AttributeSet Attributes, const DataTable* DataTable);// 0xca4390
	bool IsGameplayCueActive(const GameplayTag GameplayCueTag);// 0xca42f0
	bool GetUserAbilityActivationInhibited();// 0xca42c0
	float GetGameplayEffectMagnitude(ActiveGameplayEffectHandle Handle, GameplayAttribute Attribute);// 0xca40a0
	int GetGameplayEffectCount(class GameplayEffect SourceGameplayEffect, AbilitySystemComponent* OptionalInstigatorFilterComponent, bool bEnforceOnGoingCheck);// 0xca3fa0
	ActiveGameplayEffectHandle[] GetActiveEffectsWithAllTags(GameplayTagContainer Tags);// 0xca3e80
	ActiveGameplayEffectHandle[] GetActiveEffects(out const GameplayEffectQuery Query);// 0xca3d80
	void ClientTryActivateAbility(GameplayAbilitySpecHandle AbilityToActivate);// 0xca3d00
	void ClientSetReplicatedEvent(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey);// 0xca3bd0
	void ClientPrintDebug_Response(const FString[] Strings, int GameFlags);// 0xca3ad0
	void ClientEndAbility(GameplayAbilitySpecHandle AbilityToEnd, GameplayAbilityActivationInfo ActivationInfo, bool bWasRetriggered);// 0xca3990
	void ClientCancelAbility(GameplayAbilitySpecHandle AbilityToCancel, GameplayAbilityActivationInfo ActivationInfo);// 0xca38a0
	void ClientActivateAbilitySucceedWithEventData(GameplayAbilitySpecHandle AbilityToActivate, PredictionKey PredictionKey, GameplayEventData TriggerEventData);// 0xca3560
	void ClientActivateAbilitySucceed(GameplayAbilitySpecHandle AbilityToActivate, PredictionKey PredictionKey);// 0xca3470
	void ClientActivateAbilityFailed(GameplayAbilitySpecHandle AbilityToActivate, int16 PredictionKey);// 0xca33a0
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToTarget(class GameplayEffect GameplayEffectClass, AbilitySystemComponent* Target, float Level, GameplayEffectContextHandle Context);// 0xca31f0
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToSelf(class GameplayEffect GameplayEffectClass, float Level, GameplayEffectContextHandle EffectContext);// 0xca3060
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectSpecToTarget(out const GameplayEffectSpecHandle SpecHandle, AbilitySystemComponent* Target);// 0xca2f40
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectSpecToSelf(out const GameplayEffectSpecHandle SpecHandle);// 0xca2e60
	void AbilityConfirmOrCancel__DelegateSignature();// 0x305c9c0
	void AbilityAbilityKey__DelegateSignature(int InputID);// 0x305c9c0

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	bool bIsNetDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1ec, Size: 0x1]
	GameplayTask*[] SimulatedTasks;//[Offset: 0x1f0, Size: 0x10]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0x200, Size: 0x10]
	GameplayTask*[] TickingTasks;//[Offset: 0x220, Size: 0x10]
	GameplayTask*[] KnownTasks;//[Offset: 0x230, Size: 0x10]
	delegate OnClaimedResourcesChange;//[Offset: 0x240, Size: 0x10]
	void OnRep_SimulatedTasks();// 0x4e3ba50
	static enum K2_RunGameplayTask(interface class TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x4e3b810

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x98, Size: 0x8]
	enum ResourceOverlapPolicy;//[Offset: 0xa2, Size: 0x1]
	GameplayTask* ChildTask;//[Offset: 0xc8, Size: 0x8]
	void ReadyForActivation();// 0x4e3ba70
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x305c9c0
	void EndTask();// 0x4e3b7f0

--------------------------------
Class: GameplayEffectQuery
	delegate CustomMatchDelegate_BP;//[Offset: 0x10, Size: 0x10]
	GameplayTagQuery OwningTagQuery;//[Offset: 0x20, Size: 0x48]
	GameplayTagQuery EffectTagQuery;//[Offset: 0x68, Size: 0x48]
	GameplayTagQuery SourceTagQuery;//[Offset: 0xb0, Size: 0x48]
	GameplayAttribute ModifyingAttribute;//[Offset: 0xf8, Size: 0x38]
	Object* EffectSource;//[Offset: 0x130, Size: 0x8]
	class GameplayEffect* EffectDefinition;//[Offset: 0x138, Size: 0x8]

--------------------------------
Class: GameplayTagQuery
	int TokenStreamVersion;//[Offset: 0x0, Size: 0x4]
	GameplayTag[] TagDictionary;//[Offset: 0x8, Size: 0x10]
	byte[] QueryTokenStream;//[Offset: 0x18, Size: 0x10]
	FString UserDescription;//[Offset: 0x28, Size: 0x10]
	FString AutoDescription;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: ServerAbilityRPCBatch
	GameplayAbilitySpecHandle AbilitySpecHandle;//[Offset: 0x0, Size: 0x4]
	PredictionKey PredictionKey;//[Offset: 0x8, Size: 0x18]
	GameplayAbilityTargetDataHandle TargetData;//[Offset: 0x20, Size: 0x28]
	bool InputPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool Ended;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	bool Started;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]

--------------------------------
Class: GameplayCueParameters
	float NormalizedMagnitude;//[Offset: 0x0, Size: 0x4]
	float RawMagnitude;//[Offset: 0x4, Size: 0x4]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x8, Size: 0x18]
	GameplayTag MatchedTagName;//[Offset: 0x20, Size: 0x8]
	GameplayTag OriginalTag;//[Offset: 0x28, Size: 0x8]
	GameplayTagContainer AggregatedSourceTags;//[Offset: 0x30, Size: 0x20]
	GameplayTagContainer AggregatedTargetTags;//[Offset: 0x50, Size: 0x20]
	Vector_NetQuantize10 Location;//[Offset: 0x70, Size: 0xc]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x7c, Size: 0xc]
	Actor* Instigator;//[Offset: 0x88, Size: 0x8]
	Actor* EffectCauser;//[Offset: 0x90, Size: 0x8]
	Object* SourceObject;//[Offset: 0x98, Size: 0x8]
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0xa0, Size: 0x8]
	int GameplayEffectLevel;//[Offset: 0xa8, Size: 0x4]
	int AbilityLevel;//[Offset: 0xac, Size: 0x4]
	SceneComponent* TargetAttachComponent;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: GameplayEffectSpecForRPC
	GameplayEffect* Def;//[Offset: 0x0, Size: 0x8]
	GameplayEffectModifiedAttribute[] ModifiedAttributes;//[Offset: 0x8, Size: 0x10]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x18, Size: 0x18]
	GameplayTagContainer AggregatedSourceTags;//[Offset: 0x30, Size: 0x20]
	GameplayTagContainer AggregatedTargetTags;//[Offset: 0x50, Size: 0x20]
	float Level;//[Offset: 0x70, Size: 0x4]
	float AbilityLevel;//[Offset: 0x74, Size: 0x4]

--------------------------------
Class: GameplayEffectSpecHandle

--------------------------------
Class: AttributeSet.Object

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 0x8]
	bool bStripFromClientBuilds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bIgnoreExtraFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bIgnoreMissingFields;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	FString ImportKeyField;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: AttributeDefaults
	class AttributeSet* Attributes;//[Offset: 0x0, Size: 0x8]
	DataTable* DefaultStartingTable;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: GameplayAbilityTargetActor.Actor.Object
	bool ShouldProduceTargetDataOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	GameplayAbilityTargetingLocationInfo StartLocation;//[Offset: 0x2f0, Size: 0x70]
	PlayerController* MasterPC;//[Offset: 0x390, Size: 0x8]
	GameplayAbility* OwningAbility;//[Offset: 0x398, Size: 0x8]
	bool bDestroyOnConfirmation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]
	Actor* SourceActor;//[Offset: 0x3a8, Size: 0x8]
	WorldReticleParameters ReticleParams;//[Offset: 0x3b0, Size: 0xc]
	class GameplayAbilityWorldReticle* ReticleClass;//[Offset: 0x3c0, Size: 0x8]
	GameplayTargetDataFilterHandle Filter;//[Offset: 0x3c8, Size: 0x10]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 0x1]
	AbilitySystemComponent* GenericDelegateBoundASC;//[Offset: 0x3f0, Size: 0x8]
	void ConfirmTargeting();// 0xcbca30
	void CancelTargeting();// 0x77ed40

--------------------------------
Class: GameplayAbilityTargetingLocationInfo
	byte LocationType;//[Offset: 0x10, Size: 0x1]
	Transform LiteralTransform;//[Offset: 0x20, Size: 0x30]
	Actor* SourceActor;//[Offset: 0x50, Size: 0x8]
	MeshComponent* SourceComponent;//[Offset: 0x58, Size: 0x8]
	GameplayAbility* SourceAbility;//[Offset: 0x60, Size: 0x8]
	FName SourceSocketName;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: WorldReticleParameters
	Vector AOEScale;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: GameplayAbilityWorldReticle.Actor.Object
	WorldReticleParameters Parameters;//[Offset: 0x2e8, Size: 0xc]
	bool bFaceOwnerFlat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 0x1]
	bool bSnapToTargetedActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5, Size: 0x1]
	bool bIsTargetValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f6, Size: 0x1]
	bool bIsTargetAnActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f7, Size: 0x1]
	PlayerController* MasterPC;//[Offset: 0x2f8, Size: 0x8]
	Actor* TargetingActor;//[Offset: 0x300, Size: 0x8]
	void SetReticleMaterialParamVector(FName ParamName, Vector Value);// 0x305c9c0
	void SetReticleMaterialParamFloat(FName ParamName, float Value);// 0x305c9c0
	void OnValidTargetChanged(bool bNewValue);// 0x305c9c0
	void OnTargetingAnActor(bool bNewValue);// 0x305c9c0
	void OnParametersInitialized();// 0x305c9c0
	void FaceTowardSource(bool bFaceIn2D);// 0xcc2a30

--------------------------------
Class: GameplayTargetDataFilterHandle

--------------------------------
Class: GameplayAbilitySpecContainer.FastArraySerializer
	GameplayAbilitySpec[] Items;//[Offset: 0x108, Size: 0x10]
	AbilitySystemComponent* Owner;//[Offset: 0x118, Size: 0x8]

--------------------------------
Class: FastArraySerializer
	int ArrayReplicationKey;//[Offset: 0x54, Size: 0x4]
	enum DeltaFlags;//[Offset: 0x100, Size: 0x1]

--------------------------------
Class: GameplayAbilitySpec.FastArraySerializerItem
	GameplayAbilitySpecHandle Handle;//[Offset: 0xc, Size: 0x4]
	GameplayAbility* Ability;//[Offset: 0x10, Size: 0x8]
	int Level;//[Offset: 0x18, Size: 0x4]
	int InputID;//[Offset: 0x1c, Size: 0x4]
	Object* SourceObject;//[Offset: 0x20, Size: 0x8]
	byte ActiveCount;//[Offset: 0x28, Size: 0x1]
	bool InputPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
	bool RemoveAfterActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1]
	bool bActivateOnce;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1]
	GameplayAbilityActivationInfo ActivationInfo;//[Offset: 0x30, Size: 0x20]
	GameplayAbility*[] NonReplicatedInstances;//[Offset: 0x50, Size: 0x10]
	GameplayAbility*[] ReplicatedInstances;//[Offset: 0x60, Size: 0x10]
	ActiveGameplayEffectHandle GameplayEffectHandle;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: FastArraySerializerItem
	int ReplicationID;//[Offset: 0x0, Size: 0x4]
	int ReplicationKey;//[Offset: 0x4, Size: 0x4]
	int MostRecentArrayReplicationKey;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: GameplayAbilityRepAnimMontage
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 0x8]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float Position;//[Offset: 0xc, Size: 0x4]
	float BlendTime;//[Offset: 0x10, Size: 0x4]
	byte NextSectionID;//[Offset: 0x14, Size: 0x1]
	bool bRepPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1]
	bool IsStopped;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1]
	Vector_NetQuantize10 ExpectedDeltaActorLocation;//[Offset: 0x18, Size: 0xc]
	bool ForcePlayBit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	bool SkipPositionCorrection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1]
	bool bSkipPlayRate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 0x1]
	PredictionKey PredictionKey;//[Offset: 0x28, Size: 0x18]
	byte SectionIdToPlay;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: GameplayAbilityLocalAnimMontage
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 0x8]
	bool PlayBit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	PredictionKey PredictionKey;//[Offset: 0x10, Size: 0x18]
	GameplayAbility* AnimatingAbility;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ActiveGameplayEffectsContainer.FastArraySerializer
	ActiveGameplayEffect[] GameplayEffects_Internal;//[Offset: 0x138, Size: 0x10]
	GameplayEffect*[] ApplicationImmunityQueryEffects;//[Offset: 0x458, Size: 0x10]

--------------------------------
Class: ActiveGameplayEffect.FastArraySerializerItem
	GameplayEffectSpec Spec;//[Offset: 0x18, Size: 0x298]
	PredictionKey PredictionKey;//[Offset: 0x2b0, Size: 0x18]
	float StartServerWorldTime;//[Offset: 0x2c8, Size: 0x4]
	float CachedStartServerWorldTime;//[Offset: 0x2cc, Size: 0x4]
	float StartWorldTime;//[Offset: 0x2d0, Size: 0x4]
	bool bIsInhibited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]

--------------------------------
Class: ActiveGameplayCueContainer.FastArraySerializer
	ActiveGameplayCue[] GameplayCues;//[Offset: 0x108, Size: 0x10]
	AbilitySystemComponent* Owner;//[Offset: 0x120, Size: 0x8]

--------------------------------
Class: ActiveGameplayCue.FastArraySerializerItem
	GameplayTag GameplayCueTag;//[Offset: 0xc, Size: 0x8]
	PredictionKey PredictionKey;//[Offset: 0x18, Size: 0x18]
	GameplayCueParameters Parameters;//[Offset: 0x30, Size: 0xb8]
	bool bPredictivelyRemoved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]

--------------------------------
Class: MinimalReplicationTagCountMap
	AbilitySystemComponent* Owner;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: ReplicatedPredictionKeyMap.FastArraySerializer
	ReplicatedPredictionKeyItem[] PredictionKeys;//[Offset: 0x108, Size: 0x10]

--------------------------------
Class: ReplicatedPredictionKeyItem.FastArraySerializerItem
	PredictionKey PredictionKey;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 0x4]
	int8 AutoResourceID;//[Offset: 0x2c, Size: 0x1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: GameplayEffectCue
	GameplayAttribute MagnitudeAttribute;//[Offset: 0x0, Size: 0x38]
	float MinLevel;//[Offset: 0x38, Size: 0x4]
	float MaxLevel;//[Offset: 0x3c, Size: 0x4]
	GameplayTagContainer GameplayCueTags;//[Offset: 0x40, Size: 0x20]

--------------------------------
Class: GameplayEffectUIData.Object

--------------------------------
Class: InheritedTagContainer
	GameplayTagContainer CombinedTags;//[Offset: 0x0, Size: 0x20]
	GameplayTagContainer Added;//[Offset: 0x20, Size: 0x20]
	GameplayTagContainer Removed;//[Offset: 0x40, Size: 0x20]

--------------------------------
Class: AbilityTriggerData
	GameplayTag TriggerTag;//[Offset: 0x0, Size: 0x8]
	byte TriggerSource;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: GameplayAbilityActorInfo
	Actor* OwnerActor;//[Offset: 0x8, Size: 0x8]
	Actor* AvatarActor;//[Offset: 0x10, Size: 0x8]
	PlayerController* PlayerController;//[Offset: 0x18, Size: 0x8]
	AbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x20, Size: 0x8]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x28, Size: 0x8]
	AnimInstance* AnimInstance;//[Offset: 0x30, Size: 0x8]
	MovementComponent* MovementComponent;//[Offset: 0x38, Size: 0x8]
	FName AffectedAnimInstanceTag;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: SuitPartsAlphaOffset
	float ArmRingAlpha;//[Offset: 0x0, Size: 0x4]
	float ArmRingOffset;//[Offset: 0x4, Size: 0x4]
	float BagTieAlpha;//[Offset: 0x8, Size: 0x4]
	float BagTieOffset;//[Offset: 0xc, Size: 0x4]
	float LeftArmAlpha;//[Offset: 0x10, Size: 0x4]
	float LeftArmOffset;//[Offset: 0x14, Size: 0x4]
	float RightArmAlpha;//[Offset: 0x18, Size: 0x4]
	float RightArmOffset;//[Offset: 0x1c, Size: 0x4]
	float BagTieWidthAlpha;//[Offset: 0x20, Size: 0x4]
	float BagTieWidthOffset;//[Offset: 0x24, Size: 0x4]
	Vector PistolAttachOffset;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: ArkWeaponPluginManager.Object
	ArkWeaponPluginMeshCreater* WeaponPluginMeshCreator;//[Offset: 0x660, Size: 0x8]
	ArkItemWeaponPlugin*[] PluginDefaultObjectArray;//[Offset: 0x668, Size: 0x10]
	ArkNDMBuffEffectInfo[] NdmEffectList;//[Offset: 0x688, Size: 0x10]
	int IsInit;//[Offset: 0x6ac, Size: 0x4]
	bool IsMyPlugins;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 0x1]
	ArkWeaponPluginsInfo ItemPlugins;//[Offset: 0x6c0, Size: 0x70]
	ArkWeaponPluginsInfo WeaponPlugins;//[Offset: 0x730, Size: 0x70]
	ArkWeaponPluginSkinDataInfo PluginSkinDataInfo;//[Offset: 0x7a0, Size: 0x798]
	void UpdateOverrideSkinInfo();// 0x29ce140
	void RemovePlugin(int ItemId);// 0x29cd8f0
	void OnRep_WeaponPlugins();// 0x29cd6b0
	bool IsDedicatedServer();// 0x29cd3c0
	bool HasAuthority();// 0x29cd130
	ArkWeaponPluginsInfo GetWeaponPlugins();// 0x29cd000
	byte GetQuality();// 0x29ccee0
	int GetPluginByType(enum PluginType);// 0x29ccd60
	ArkWeaponBase* GetOwnerAsWeapon();// 0x29ccd30
	int[] GetAllPlugins();// 0x29ccb40
	int AddPlugin(int ItemId);// 0x29cc7d0

--------------------------------
Class: ArkWeaponPluginMeshCreater.Object
	ArkWeaponPluginSkinDataInfo PluginSkinDataInfo;//[Offset: 0x38, Size: 0x798]
	ArkSoftParticleSystemComponentWithPool*[] AttachParticles;//[Offset: 0x7d0, Size: 0x10]
	ArkSoftParticleSystemComponentWithPool*[] AttachParticles_FPP;//[Offset: 0x7e0, Size: 0x10]
	ArkItemWeaponPlugin*[] PluginDefaultObjectArray;//[Offset: 0x810, Size: 0x10]
	MeshComponent*[] MeshComponentArray;//[Offset: 0x820, Size: 0x10]
	MeshComponent*[] FppMeshComponentArray;//[Offset: 0x830, Size: 0x10]
	MeshComponent* FppScopeExtraMeshComponent;//[Offset: 0x840, Size: 0x8]
	ArkSoftDecalComponentWithPool*[] DecalCompArray;//[Offset: 0x848, Size: 0x10]
	ArkSoftDecalComponentWithPool*[] DecalCompArray_FPP;//[Offset: 0x858, Size: 0x10]
	ArkSoftSkeletalMeshComponent* WeaponMeshComp;//[Offset: 0x890, Size: 0x8]
	ArkSoftSkeletalMeshComponent* WeaponFppMeshComp;//[Offset: 0x898, Size: 0x8]
	ArkSoftSkeletalMeshComponent* WeaponSubMeshComp;//[Offset: 0x8a0, Size: 0x8]
	SkeletalMesh* OrignalMesh;//[Offset: 0x8b8, Size: 0x28]
	SkeletalMesh* OrignalGunTechMesh;//[Offset: 0x8e0, Size: 0x28]
	MaterialInterface*[] OrignalMaterials;//[Offset: 0x908, Size: 0x10]
	ArkWeaponBase* WeaponCDO;//[Offset: 0x918, Size: 0x8]
	Object* MainWorldContextObject;//[Offset: 0x920, Size: 0x8]
	<FName,DecalSpecialInfo> PluginSkinDecalInfo;//[Offset: 0x928, Size: 0x50]
	void UpdateMeshBone();// 0x29ce120
	void OnOverrideMeshLoaded();// 0x29cd430
	void OnMeshLoaded();// 0x29cd410
	void OnExtraScopreMeshAsyncLoaded();// 0x29cd3f0

--------------------------------
Class: ArkWeaponPluginSkinDataInfo.TableRowBase
	int SkinID;//[Offset: 0x8, Size: 0x4]
	int LevelIndex;//[Offset: 0xc, Size: 0x4]
	SkeletalMesh* OverrideMesh;//[Offset: 0x10, Size: 0x28]
	SkeletalMesh* OverrideGunTechMesh;//[Offset: 0x38, Size: 0x28]
	FName HideGunTechBone;//[Offset: 0x60, Size: 0x8]
	FName AttachGunTechBone;//[Offset: 0x68, Size: 0x8]
	int[] UnLockPluginIds;//[Offset: 0x70, Size: 0x10]
	<FName,Texture*> ParamNameList;//[Offset: 0x80, Size: 0x50]
	FName TriggerParamName;//[Offset: 0xd0, Size: 0x8]
	ParticleSystem* OverrideMuzzleFxTpp;//[Offset: 0xd8, Size: 0x28]
	ParticleSystem* OverrideMuzzleFxAds;//[Offset: 0x100, Size: 0x28]
	ParticleSystem* OverrideMuzzleBrakeFxTpp;//[Offset: 0x128, Size: 0x28]
	ParticleSystem* OverrideMuzzleBrakeFxAds;//[Offset: 0x150, Size: 0x28]
	ParticleSystem* OverrideMuzzleSilencerFxTpp;//[Offset: 0x178, Size: 0x28]
	ParticleSystem* OverrideMuzzleSilencerFxAds;//[Offset: 0x1a0, Size: 0x28]
	ParticleSystem* OverrideImpactEffect;//[Offset: 0x1c8, Size: 0x28]
	ParticleSystem* OverrideBulletEffect;//[Offset: 0x1f0, Size: 0x28]
	ParticleSystem* OverrideImpactEffectNormal;//[Offset: 0x218, Size: 0x28]
	ParticleSystem* OverrideImpactEffectResistDeath;//[Offset: 0x240, Size: 0x28]
	ParticleSystem* OverrideImpactEffectKilled;//[Offset: 0x268, Size: 0x28]
	MaterialInstance*[] OverrideMatInstances;//[Offset: 0x290, Size: 0x10]
	class ArkProjectileBase* OverrideProjectileClass;//[Offset: 0x2a0, Size: 0x8]
	AnimSequence* OverrideWeaponIdleAnim;//[Offset: 0x2a8, Size: 0x28]
	AnimSequence* OverrideWeaponFireAnim;//[Offset: 0x2d0, Size: 0x28]
	AnimSequence* OverrideWeaponRechamberAnim;//[Offset: 0x2f8, Size: 0x28]
	AnimSequence* OverrideWeaponHoldOpenAdditiveAnim;//[Offset: 0x320, Size: 0x28]
	AnimMontage* OverrideReloadAnim;//[Offset: 0x348, Size: 0x28]
	AnimMontage* OverrideTacticsReloadAnim;//[Offset: 0x370, Size: 0x28]
	AnimMontage* OverrideFppReloadAnim;//[Offset: 0x398, Size: 0x28]
	AnimMontage* OverrideFppTacticsReloadAnim;//[Offset: 0x3c0, Size: 0x28]
	AnimMontage* OverrideReChamberAnim;//[Offset: 0x3e8, Size: 0x28]
	AnimMontage* OverrideFPPReChamberAnim;//[Offset: 0x410, Size: 0x28]
	AnimSequenceBase* OverrideWeaponReloadAnim;//[Offset: 0x438, Size: 0x28]
	AnimSequenceBase* OverrideWeaponTacticsReloadAnim;//[Offset: 0x460, Size: 0x28]
	AnimSequence* OverrideHipHandGripPoseAnim;//[Offset: 0x488, Size: 0x28]
	AnimSequence* OverrideTargetingHandGripPoseAnim;//[Offset: 0x4b0, Size: 0x28]
	AnimSequence* OverrideHandGripPoseAnim;//[Offset: 0x4d8, Size: 0x28]
	AnimSequenceBase* OverrideHandHoldPoseAnimInCombat;//[Offset: 0x500, Size: 0x28]
	AnimSequence* OverrideFPSHandGripPoseAnim;//[Offset: 0x528, Size: 0x28]
	AnimSequenceBase* OverrideHandHoldPoseAnim;//[Offset: 0x550, Size: 0x28]
	AnimSequenceBase* OverrideHipHandHoldPoseAnim;//[Offset: 0x578, Size: 0x28]
	AnimSequenceBase* OverrideTargetingHandHoldPoseAnim;//[Offset: 0x5a0, Size: 0x28]
	AnimSequenceBase* OverrideHandHoldPoseAnimInCover;//[Offset: 0x5c8, Size: 0x28]
	AnimSequence* OverrideHandGripPoseAnimInCombat;//[Offset: 0x5f0, Size: 0x28]
	StaticMesh* OverrideClipMesh;//[Offset: 0x618, Size: 0x28]
	SkeletalMesh* OverrideClipSkeletalMesh;//[Offset: 0x640, Size: 0x28]
	ArkPlayerDeathDecalInfo OverrideDeathDecalInfo_ResistDeath;//[Offset: 0x668, Size: 0x38]
	ArkPlayerDeathDecalInfo OverrideDeathDecalInfo_Killed;//[Offset: 0x6a0, Size: 0x38]
	WeaponExtraParticleInfo[] ExtraParticleInfos;//[Offset: 0x6d8, Size: 0x10]
	AnimSequence* CacheOverrideWeaponIdleAnim;//[Offset: 0x6e8, Size: 0x8]
	AnimSequence* CacheOverrideWeaponFireAnim;//[Offset: 0x6f0, Size: 0x8]
	AnimSequence* CacheOverrideWeaponRechamberAnim;//[Offset: 0x6f8, Size: 0x8]
	AnimSequence* CacheOverrideWeaponHoldOpenAdditiveAnim;//[Offset: 0x700, Size: 0x8]
	AnimMontage* CacheOverrideReloadAnim;//[Offset: 0x708, Size: 0x8]
	AnimMontage* CacheOverrideTacticsReloadAnim;//[Offset: 0x710, Size: 0x8]
	AnimMontage* CacheOverrideFppReloadAnim;//[Offset: 0x718, Size: 0x8]
	AnimMontage* CacheOverrideFppTacticsReloadAnim;//[Offset: 0x720, Size: 0x8]
	AnimMontage* CacheOverrideReChamberAnim;//[Offset: 0x728, Size: 0x8]
	AnimMontage* CacheOverrideFPPReChamberAnim;//[Offset: 0x730, Size: 0x8]
	AnimSequenceBase* CacheOverrideWeaponReloadAnim;//[Offset: 0x738, Size: 0x8]
	AnimSequenceBase* CacheOverrideWeaponTacticsReloadAnim;//[Offset: 0x740, Size: 0x8]
	AnimSequence* CacheOverrideHipHandGripPoseAnim;//[Offset: 0x748, Size: 0x8]
	AnimSequence* CacheOverrideTargetingHandGripPoseAnim;//[Offset: 0x750, Size: 0x8]
	AnimSequence* CacheOverrideHandGripPoseAnim;//[Offset: 0x758, Size: 0x8]
	AnimSequenceBase* CacheOverrideHandHoldPoseAnimInCombat;//[Offset: 0x760, Size: 0x8]
	AnimSequence* CacheOverrideFPSHandGripPoseAnim;//[Offset: 0x768, Size: 0x8]
	AnimSequenceBase* CacheOverrideHandHoldPoseAnim;//[Offset: 0x770, Size: 0x8]
	AnimSequenceBase* CacheOverrideHipHandHoldPoseAnim;//[Offset: 0x778, Size: 0x8]
	AnimSequenceBase* CacheOverrideTargetingHandHoldPoseAnim;//[Offset: 0x780, Size: 0x8]
	AnimSequenceBase* CacheOverrideHandHoldPoseAnimInCover;//[Offset: 0x788, Size: 0x8]
	AnimSequence* CacheOverrideHandGripPoseAnimInCombat;//[Offset: 0x790, Size: 0x8]

--------------------------------
Class: TableRowBase

--------------------------------
Class: ArkProjectileBase.Actor.Object
	StaticMesh* projectileMesh;//[Offset: 0x2f0, Size: 0x8]
	ArkParticleModifier ProjectileParticleModifier;//[Offset: 0x2f8, Size: 0x68]
	float InitialSpeed;//[Offset: 0x390, Size: 0x4]
	bool bTickProjectileTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 0x1]
	bool bUseShapeSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x395, Size: 0x1]
	bool bSelfRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 0x1]
	Rotator StaticMeshRotateRate;//[Offset: 0x3a0, Size: 0xc]
	int TeamId;//[Offset: 0x3ac, Size: 0x4]
	UInt64Property OwnPlayerID;//[Size: 0x8]
	ProjectileMovementComponent* MovementComp;//[Offset: 0x3b8, Size: 0x8]
	CapsuleComponent* CapsuleComp;//[Offset: 0x3c0, Size: 0x8]
	ArkSoftParticleSystemComponent* particleComp;//[Offset: 0x3c8, Size: 0x8]
	StaticMeshComponent*[] StaticMeshComps;//[Offset: 0x3d0, Size: 0x10]
	RadialDamageParams RadialDamageParams;//[Offset: 0x3e0, Size: 0x14]
	class DamageType* RadialDamageTypeClass;//[Offset: 0x3f8, Size: 0x8]
	float MaxHealth;//[Offset: 0x400, Size: 0x4]
	FText ProjectileName;//[Offset: 0x408, Size: 0x18]
	bool bAttachToFirstHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1]
	bool bPlaySoundWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x421, Size: 0x1]
	ArkProjectileAttachData AttachData;//[Offset: 0x428, Size: 0x28]
	class ArkImpactEffect* BounceImpactTemplate;//[Offset: 0x450, Size: 0x8]
	int BounceCount;//[Offset: 0x458, Size: 0x4]
	int MaxBounceCount;//[Offset: 0x45c, Size: 0x4]
	bool bAllowExplodeMultiTimes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 0x1]
	delegate OnImpactHit;//[Offset: 0x468, Size: 0x10]
	delegate OnPenetrateDelegate;//[Offset: 0x478, Size: 0x10]
	class ArkExplosionEffect* ExplosionTemplate;//[Offset: 0x488, Size: 0x8]
	float ExplodeBounceDelay;//[Offset: 0x490, Size: 0x4]
	float AutoExplodeTime;//[Offset: 0x494, Size: 0x4]
	float LifeSpanAfterExplosion;//[Offset: 0x498, Size: 0x4]
	delegate OnExploded;//[Offset: 0x4a0, Size: 0x10]
	ExplodeInfo ExplodeInfo;//[Offset: 0x4b0, Size: 0x8c]
	bool bUsePhysicalSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53c, Size: 0x1]
	class Actor* LandIndicatorClass;//[Offset: 0x540, Size: 0x8]
	PhysicalSimulateInfo PhysicalSimulateInfo;//[Offset: 0x558, Size: 0x18]
	CapsuleComponent* physicalActorCollision;//[Offset: 0x570, Size: 0x8]
	float lineDamping;//[Offset: 0x578, Size: 0x4]
	Actor* mLandIndicator;//[Offset: 0x580, Size: 0x8]
	enum AudioBulletType;//[Offset: 0x588, Size: 0x1]
	bool bLoopAlarmInCode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x589, Size: 0x1]
	FName AlarmingSoundRTPCName;//[Offset: 0x58c, Size: 0x8]
	AkAudioEvent* AlarmingSound;//[Offset: 0x598, Size: 0x28]
	AkAudioEvent* StartSound;//[Offset: 0x5c0, Size: 0x28]
	AkAudioEvent* EndSound;//[Offset: 0x5e8, Size: 0x28]
	AkAudioEvent* BounceSound;//[Offset: 0x610, Size: 0x28]
	float CombatTriggerDistance;//[Offset: 0x63c, Size: 0x4]
	Actor*[] TracedActors;//[Offset: 0x648, Size: 0x10]
	bool bShouldIgnoreBounceCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65c, Size: 0x1]
	void SetTeamID(int IntValue);// 0x29030e0
	void SetProjectileName(out const FText InName);// 0x2903010
	void PlayAlarmingSound();// 0x2902d50
	void OnRep_TeamID();// 0x77ee80
	void OnRep_PhysicalSimulateInfo();// 0xca7ac0
	void OnRep_Exploded();// 0x2902c90
	void OnRep_AttachData();// 0x2902c30
	void OnProjectileStop(out const HitResult HitResult);// 0x2902b10
	void OnNotifyProjectileThrowOut();// 0x305c9c0
	void OnImpact(out const HitResult HitResult);// 0x2902a30
	void OnBounce(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x2902900
	void OnAttached_BP(out const ArkProjectileAttachData NewAttachData);// 0x305c9c0
	void NotifyHitWorldContext();// 0xbb69a0
	ShapeComponent* GetTraceShapeComponent();// 0x27c6e10
	int GetTeamID();// 0x2902780
	FText GetProjectileName();// 0x2902680
	void Explode(out const HitResult HitResult);// 0x2902580
	void DoExplodeEffect(out const HitResult HitResult);// 0x2902420
	void DoDestroyEffect(out const HitResult HitResult);// 0x2902340
	void C2BP_OnExploded(out const HitResult HitResult);// 0x305c9c0
	void C2BP_OnBounced(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x305c9c0
	void AutoExplode();// 0x28080d0
	void ApplyHitDamage_BP(out const HitResult Hit);// 0x305c9c0

--------------------------------
Class: ArkParticleModifier.ArkResourceModifier
	ParticleSystem*[] ModifiedParticles;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: ArkResourceModifier
	<class ArkItemSyncChip,int> SyncChipModifiers;//[Offset: 0x0, Size: 0x50]
	bool bSyncChipAllowChildClass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: ArkItemSyncChip.ArkItem.Object
	int EquippedGroupID;//[Offset: 0x98, Size: 0x4]
	enum AbilityBuffType;//[Offset: 0x9c, Size: 0x1]
	enum ElementType;//[Offset: 0x9d, Size: 0x1]
	class ArkAIGameplayAbilityBuff* DefaultAbilityBuffClass;//[Offset: 0xa0, Size: 0x8]
	<class ArkItemSyncChip,class ArkAIGameplayAbilityBuff> ElementalOverrideAbilityBuffClass;//[Offset: 0xa8, Size: 0x50]
	<FName,class ArkAIGameplayAbilityBuff> OverrideAbilityBuffClass;//[Offset: 0xf8, Size: 0x50]
	FName[] ApplicableAITypes;//[Offset: 0x148, Size: 0x10]
	ArkBuffClassOrID[] PlayerBuffs;//[Offset: 0x158, Size: 0x10]
	byte SyncChipType;//[Offset: 0x168, Size: 0x1]
	int TargetNanoNum;//[Offset: 0x16c, Size: 0x4]
	ArkAISpawnPatternConfig* TargetAI;//[Offset: 0x170, Size: 0x8]
	float CommandCD;//[Offset: 0x178, Size: 0x4]
	<enum,ArkAICommandConfig> CommandMap;//[Offset: 0x180, Size: 0x50]
	ArkAIExtraAbilityBuff[] ExtraAbilityBuffClassesForAI;//[Offset: 0x1d0, Size: 0x10]
	class ArkGameBuff[] BlockingBuffs;//[Offset: 0x1e0, Size: 0x10]
	enum ResetCmdType;//[Offset: 0x1f0, Size: 0x1]
	float HoldSeconds;//[Offset: 0x1f4, Size: 0x4]
	int NextItemID;//[Offset: 0x1f8, Size: 0x4]
	int Level;//[Offset: 0x1fc, Size: 0x4]
	int Exp;//[Offset: 0x200, Size: 0x4]
	bool HasCommandByCommandTarget(enum TargetType);// 0x2818fc0
	FName GetTargetAIType();// 0x2818f80
	float GetHoldSeconds();// 0x2818850
	FText GetCommandNameByCommandTarget(enum TargetType);// 0x2818630

--------------------------------
Class: ArkAIGameplayAbilityBuff.ArkGameBuff.Object
	bool bClearCDWhenCommandChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	enum AbilityBuffType;//[Offset: 0x331, Size: 0x1]
	enum ElementType;//[Offset: 0x332, Size: 0x1]
	enum AbilityTargetType;//[Offset: 0x333, Size: 0x1]
	bool bReplaceDefaultSlotAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 0x1]
	bool bRemoveBuffOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x335, Size: 0x1]
	enum[] BlockedAblilityEffects;//[Offset: 0x338, Size: 0x10]
	enum[] IgnoreBlockedAblilityEffects;//[Offset: 0x348, Size: 0x10]
	float SwarmMeshReplaceMinDelay;//[Offset: 0x358, Size: 0x4]
	float SwarmMeshReplaceMaxDelay;//[Offset: 0x35c, Size: 0x4]
	<int,int> SwarmMeshReplaceGroups;//[Offset: 0x360, Size: 0x50]
	<int,int> SwarmMeshReplaceGroups_Action;//[Offset: 0x3b0, Size: 0x50]
	ParticleSystem* SwarmMeshReplaceParticle;//[Offset: 0x400, Size: 0x8]
	FName SwarmMeshReplaceParticleSocket;//[Offset: 0x408, Size: 0x8]
	AnimMontage* ReplacedIdleMontage;//[Offset: 0x410, Size: 0x8]
	float MinReplacedMontageInterval;//[Offset: 0x418, Size: 0x4]
	float MaxReplacedMontageInterval;//[Offset: 0x41c, Size: 0x4]
	bool bAttachSkeletalMeshOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1]
	SkeletalMesh* AttachedSkeletalMesh;//[Offset: 0x428, Size: 0x28]
	FName AttachSocketName;//[Offset: 0x450, Size: 0x8]
	AnimationAsset* AttachedMeshActionAnimation;//[Offset: 0x458, Size: 0x8]
	ArkSoftSkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x488, Size: 0x8]
	ArkNPC_EliteBase* mOwnerEliteBase;//[Offset: 0x498, Size: 0x8]
	ArkSwarmEntityCharacter* mOwnerSwarmCharacter;//[Offset: 0x4a0, Size: 0x8]
	ArkCharacterBase* mOwnerCharacter;//[Offset: 0x4a8, Size: 0x8]
	ArkNpc* mOwnerNpc;//[Offset: 0x4b0, Size: 0x8]
	void ServerClearCooldown();// 0x264d260
	void RestoreMesh();// 0x264d240
	void ReplaceMesh(out const <int,int> ReplaceGroups, ParticleSystem* ReplaceParticle, FName ReplaceParticleSocket);// 0x264d020
	ArkSwarmEntityCharacter* OwnerSwarmCharacter();// 0x264cff0
	ArkNpc* OwnerNpc();// 0x264cfc0
	ArkNPC_EliteBase* OwnerElite();// 0x264cf90
	ArkCharacterBase* OwnerCharacter();// 0x264cf60
	void OnTakeDamage_BP(out const TakeHitInfo HitInfo);// 0x305c9c0
	void OnSafeInitialize_BP();// 0x305c9c0
	void OnPostProcessDamage_BP(out const DamageEvent DamageEvent, bool bResistDeath, bool bKilled, bool bCriticalHit, bool bHitWeakpoint);// 0x305c9c0
	void OnMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x264c970
	void OnDeath_BP(out const TakeHitInfo HitInfo);// 0x305c9c0
	void OnAnimNotify_BP(FName NotifyName, const AnimNotify* Notify);// 0x305c9c0
	void NotifyUIEffect_OneShot();// 0x264c890
	void NotifyUIEffect_Loop(bool bEffectOn);// 0x264c800
	void NotifyUIEffect_Cooldown(float RestTime, float TotalTime);// 0x264c740

--------------------------------
Class: ArkGameBuff.Object
	Actor* OwnerPrivate;//[Offset: 0xb8, Size: 0x8]
	ArkCharacterBase* BuffInstigator;//[Offset: 0xc0, Size: 0x8]
	ArkGameBuffComponent* BuffComponent;//[Offset: 0xc8, Size: 0x8]
	Texture2D* icon;//[Offset: 0xd0, Size: 0x28]
	FText Desc;//[Offset: 0xf8, Size: 0x18]
	FName[] Tags;//[Offset: 0x110, Size: 0x10]
	ArkBuffEffect[] BuffEffects;//[Offset: 0x120, Size: 0x10]
	ArkAttrEffect*[] AttrEffectList;//[Offset: 0x130, Size: 0x10]
	ArkEffect*[] OnActiveEffectList;//[Offset: 0x140, Size: 0x10]
	ArkEffect*[] OnDeactiveEffectList;//[Offset: 0x150, Size: 0x10]
	ArkBuffDamageEffect[] DamageEffects;//[Offset: 0x160, Size: 0x10]
	ArkBuffDamageEffect[] DefenseEffects;//[Offset: 0x170, Size: 0x10]
	bool bIsTickable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	float TickInterval;//[Offset: 0x184, Size: 0x4]
	bool bIsDebuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 0x1]
	bool bPermanent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18d, Size: 0x1]
	bool bRemoveOnDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18e, Size: 0x1]
	bool bClientDelayPurge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18f, Size: 0x1]
	bool bCanForbbidenSpecialAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 0x1]
	enum StackRule;//[Offset: 0x1a3, Size: 0x1]
	enum StackTimeRule;//[Offset: 0x1a4, Size: 0x1]
	class ArkGameBuff* DerivativeBuff;//[Offset: 0x1a8, Size: 0x8]
	float Duration;//[Offset: 0x1b4, Size: 0x4]
	float LastServerActiveTime;//[Offset: 0x1b8, Size: 0x4]
	int MaxStackCount;//[Offset: 0x1bc, Size: 0x4]
	int StackCount;//[Offset: 0x1c0, Size: 0x4]
	int MaxTriggerCount;//[Offset: 0x1c4, Size: 0x4]
	int TriggerCount;//[Offset: 0x1c8, Size: 0x4]
	bool bAutoRecoverTriggerCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 0x1]
	float AutoRecoverDuration;//[Offset: 0x1d0, Size: 0x4]
	int AutoRecoverCount;//[Offset: 0x1d4, Size: 0x4]
	float LastTriggerTime;//[Offset: 0x1d8, Size: 0x4]
	class ArkGameBuff[] BlockingBuffsWhenActive;//[Offset: 0x1e8, Size: 0x10]
	enum CheckDyingRecover;//[Offset: 0x248, Size: 0x1]
	BuffConditionExpression[] NecessaryConditions;//[Offset: 0x250, Size: 0x10]
	class ArkGameBuffEffectCondition* EffectConditionClass;//[Offset: 0x260, Size: 0x8]
	ArkGameBuffEffectCondition* EffectCondition;//[Offset: 0x268, Size: 0x8]
	bool bEffectConditionResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	int FromChipUID;//[Offset: 0x29c, Size: 0x4]
	int BuffID;//[Offset: 0x2a8, Size: 0x4]
	AkAudioEvent* buffStartSound;//[Offset: 0x2b8, Size: 0x28]
	AkAudioEvent* buffEndSound;//[Offset: 0x2e0, Size: 0x28]
	AkAudioEvent* buffInteruptSound;//[Offset: 0x308, Size: 0x28]
	void OnRep_TriggerCount(int LastTriggerCount);// 0x2739770
	void OnRep_StackCount(int LastStackCount);// 0x27396f0
	void OnRep_FromChipUID();// 0x27396d0
	void OnRep_EffectConditionResult();// 0x27396b0
	void OnRep_Duration();// 0x1075a60
	void OnRep_BuffID();// 0x12f5c30
	void OnRep_ActiveTime();// 0x2739690
	void OnDyingRecoverStateChange(ArkNpc* NPC, bool bNewState);// 0x27394c0
	void OnBuffConditionChanged_BP(bool bConditionsMet);// 0x305c9c0
	bool IsServer();// 0x18ccc10
	bool IsForbbidenSpecialAction();// 0x2739480
	bool IsDedicatedServer();// 0x10b48d0
	bool IsActive();// 0x260c0a0
	bool HasAuthority();// 0x106f800
	bool GetUsedUp();// 0x2739460
	int GetTriggerCount();// 0x2739440
	Actor* GetTargetActor();// 0x2739410
	int GetStackCount();// 0x27393f0
	Texture2D* GetSoftBuffIcon();// 0x2739340
	ArkPlayer* GetOwnerAsPlayer();// 0x26ca9d0
	ArkCharacterBase* GetOwnerAsCharacter();// 0x26ca970
	Actor* GetOwner();// 0x2739310
	float GetLastTriggerTime();// 0x27392f0
	ArkCharacterBase* GetInstigator();// 0x10999b0
	bool GetDurationEnd();// 0x27392d0
	float GetCDRemain();// 0x27392a0
	float GetCDPct();// 0x2739270
	float GetCD();// 0x2739240
	ArkGameBuffComponent* GetBuffComponent();// 0x2739210
	void ClientPurgeBuff();// 0x27391f0
	void ChangeStackCount(int Value);// 0x2739170
	void C2BP_OnTick(float DeltaTime);// 0x305c9c0
	void C2BP_OnDeactive();// 0x305c9c0
	void C2BP_OnConsume(int Count);// 0x305c9c0
	void C2BP_OnActive();// 0x305c9c0
	void Buff_MarkNetDirty();// 0x2739080

--------------------------------
Class: ArkNpc.ArkCharacterBase.Character.Pawn.Actor.Object
	delegate OnMeshLoadOverCallBack;//[Offset: 0x1b58, Size: 0x10]
	delegate OnArkAICharacterStateChanged;//[Offset: 0x1b78, Size: 0x10]
	float AssistKillDamagePercent;//[Offset: 0x1ba0, Size: 0x4]
	float WeakPointDamageAccumulation;//[Offset: 0x1ba8, Size: 0x4]
	PrimitiveComponent*[] InvincibleComponents;//[Offset: 0x1bb8, Size: 0x10]
	float LifeTime;//[Offset: 0x1bc8, Size: 0x4]
	bool bCanPlayDeathAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bcc, Size: 0x1]
	class LiteComponent[] CustomLiteComponents;//[Offset: 0x1bf0, Size: 0x10]
	class ArkNpcShieldComponent* ShieldComponentClass;//[Offset: 0x1c00, Size: 0x8]
	ArkNpcShieldComponent* mShieldComponent;//[Offset: 0x1c08, Size: 0x8]
	AnimMontage* AM_Die;//[Offset: 0x1c10, Size: 0x8]
	AnimMontage* AM_Dying;//[Offset: 0x1c18, Size: 0x8]
	ArkMontageRepInfo MontageRepInfo;//[Offset: 0x1c20, Size: 0x70]
	ArkMontageRepInfo LastMontageRepInfo;//[Offset: 0x1c90, Size: 0x70]
	AnimMontage* InterruptedByPreMontage;//[Offset: 0x1d08, Size: 0x8]
	delegate OnCustomNotifyStateToggle;//[Offset: 0x1d18, Size: 0x10]
	bool bMirrored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d2c, Size: 0x1]
	Vector MeshScale;//[Offset: 0x1d30, Size: 0xc]
	int MovementPauseMask;//[Offset: 0x1de0, Size: 0x4]
	int IrresponsiveMask;//[Offset: 0x1de4, Size: 0x4]
	ArkNpcMovementComponent* NpcMovementComponent;//[Offset: 0x1de8, Size: 0x8]
	float ReplicatedMaxSpeed;//[Offset: 0x1df0, Size: 0x4]
	float UnscaledMaxSpeed;//[Offset: 0x1df4, Size: 0x4]
	ArkNpcFocusInfo FocusInfo;//[Offset: 0x1df8, Size: 0x20]
	float OverallActionSpeed;//[Offset: 0x1e1c, Size: 0x4]
	delegate OnAITargetChangeEvent;//[Offset: 0x1eb0, Size: 0x10]
	bool bTriggerCriticaltStunByAnimNotify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f00, Size: 0x1]
	CriticalStunRepInfo CriticalStunRepInfo;//[Offset: 0x1f08, Size: 0x10]
	enum PendingCriticalStunType;//[Offset: 0x1f18, Size: 0x1]
	ArkCharacterBase* CriticalStunCauser;//[Offset: 0x1f20, Size: 0x8]
	bool bCanTakeDmgInCriticalStun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f28, Size: 0x1]
	AnimMontage* CriticalStunMontage;//[Offset: 0x2050, Size: 0x8]
	int ReplicatedID;//[Offset: 0x20e0, Size: 0x4]
	enum ReplicatedSpeedStage;//[Offset: 0x20e4, Size: 0x1]
	ArkNpcAnimInstance* MyAnimInst;//[Offset: 0x20f0, Size: 0x8]
	bool bHasSetBirthLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20f8, Size: 0x1]
	Vector BirthLocation;//[Offset: 0x20fc, Size: 0xc]
	Vector OriginalBirthLocation;//[Offset: 0x2108, Size: 0xc]
	float BirthPauseTime;//[Offset: 0x2120, Size: 0x4]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x2128, Size: 0x8]
	ArkAIBehaviorManipulator* BehaviorManipulator;//[Offset: 0x2130, Size: 0x8]
	ArkAIDisplayManipulator* DisplayManipulator;//[Offset: 0x2138, Size: 0x8]
	ArkAICharacterData* CharacterData;//[Offset: 0x2140, Size: 0x8]
	ArkAIReplicatedData* ReplicatedData;//[Offset: 0x2148, Size: 0x8]
	FName TypeName;//[Offset: 0x2150, Size: 0x8]
	BlackboardComponent* BlackboardComp;//[Offset: 0x2158, Size: 0x8]
	BlackboardData* BlackboardData;//[Offset: 0x2160, Size: 0x8]
	bool bIsSwarm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2208, Size: 0x1]
	bool bIsPatrollingAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2209, Size: 0x1]
	enum AICategory;//[Offset: 0x220a, Size: 0x1]
	float LifeSpanAfterDeath;//[Offset: 0x220c, Size: 0x4]
	float LifeSpanAfterDeath_Client;//[Offset: 0x2210, Size: 0x4]
	FName MeleeTracingSocket;//[Offset: 0x2214, Size: 0x8]
	Vector LockedOnOffset;//[Offset: 0x221c, Size: 0xc]
	delegate OnTaskChangeDelegate;//[Offset: 0x2230, Size: 0x10]
	delegate OnCriticalStunStateChanged;//[Offset: 0x2248, Size: 0x10]
	bool bShowWeaknessSignWhenTakeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2268, Size: 0x1]
	bool bShouldShowWeaknessSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2269, Size: 0x1]
	ParticleSystem* weaknessParticleTamplate;//[Offset: 0x2270, Size: 0x28]
	FName weaknessSocketName;//[Offset: 0x2298, Size: 0x8]
	ParticleSystemComponent* weaknessParticle;//[Offset: 0x22a0, Size: 0x8]
	bool bShowWeaknessSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22a8, Size: 0x1]
	<FName,ArkSoftParticleSystemComponentWithPool*> mWeaknessParticles;//[Offset: 0x22b0, Size: 0x50]
	<FName,ArkNpcBoneInfo> BoneInfo;//[Offset: 0x2368, Size: 0x50]
	ArkNpcPartCollectionInfo[] PartCollections;//[Offset: 0x23b8, Size: 0x10]
	ParticleSystem* FriendEffectParticleTamplate;//[Offset: 0x2418, Size: 0x8]
	ParticleSystem* FriendEffectFlashParticleTamplate;//[Offset: 0x2420, Size: 0x8]
	ParticleSystemComponent* FriendEffectParticleComponent;//[Offset: 0x2428, Size: 0x8]
	LinearColor FriendEnterColor;//[Offset: 0x2430, Size: 0x10]
	LinearColor FriendLeaveColor;//[Offset: 0x2440, Size: 0x10]
	FName friendEffectSocketName;//[Offset: 0x2450, Size: 0x8]
	float friendEffectFlashTime;//[Offset: 0x2458, Size: 0x4]
	bool bShowObstructedEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x245c, Size: 0x1]
	bool bEnableOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x245d, Size: 0x1]
	delegate OnTeamIDChangeDelegate;//[Offset: 0x2468, Size: 0x10]
	GenericTeamId BelongTeamID;//[Offset: 0x2478, Size: 0x1]
	bool bInInteracting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2480, Size: 0x1]
	bool bInReformingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2481, Size: 0x1]
	class ArkNpcSyncDisplayComponent* SyncDisplayComponentClass;//[Offset: 0x2488, Size: 0x8]
	ArkNpcSyncDisplayComponent* SyncDisplayComponent;//[Offset: 0x2490, Size: 0x8]
	ArkPlayer* AttributeAncestor;//[Offset: 0x2498, Size: 0x8]
	ArkNpc* DeformedNpc;//[Offset: 0x24a0, Size: 0x8]
	class ArkFlammableComponent* FlammableComponentClass;//[Offset: 0x24a8, Size: 0x8]
	ArkFlammableComponent* FlammableComponent;//[Offset: 0x24b0, Size: 0x8]
	class ArkNpcMaterialDisplayComponent* MaterialDisplayComponentClass;//[Offset: 0x24b8, Size: 0x8]
	ArkNpcMaterialDisplayComponent* MaterialDisplayComponent;//[Offset: 0x24c0, Size: 0x8]
	<FName,ArkSimpleMeleeWeapon> SimpleMeleeWeapons;//[Offset: 0x24c8, Size: 0x50]
	<FName,ArkShapeMeleeWeapon> ShapeMeleeWeapons;//[Offset: 0x2518, Size: 0x50]
	<FName,ArkSoftMeleeWeapon> SoftMeleeWeapons;//[Offset: 0x2568, Size: 0x50]
	float NpcLevel;//[Offset: 0x2610, Size: 0x4]
	int NpcSpawnLevel;//[Offset: 0x2614, Size: 0x4]
	float NPCSpawnLevelModifiers;//[Offset: 0x2618, Size: 0x4]
	delegate OnNpcSpawnLevelChange;//[Offset: 0x2628, Size: 0x10]
	delegate OnInvisibleEffectChanged;//[Offset: 0x2640, Size: 0x10]
	delegate OnInteractionEvent;//[Offset: 0x2650, Size: 0x10]
	ArkSoftSkeletalMeshComponent* CoreMesh;//[Offset: 0x2660, Size: 0x8]
	AnimMontage* CustomExecutedAnimation;//[Offset: 0x2670, Size: 0x8]
	delegate OnPerformActionEvent;//[Offset: 0x26c8, Size: 0x10]
	delegate OnStopActionEvent;//[Offset: 0x26d8, Size: 0x10]
	bool bServerIgnoreAttackTicket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26e8, Size: 0x1]
	delegate OnAICommandChangeDelegate;//[Offset: 0x2740, Size: 0x10]
	int InGameEventLocationID;//[Offset: 0x2760, Size: 0x4]
	int InGameEventID;//[Offset: 0x2764, Size: 0x4]
	int SpawnWave;//[Offset: 0x2768, Size: 0x4]
	AnimMontage* DyingRecoverMontage;//[Offset: 0x2770, Size: 0x8]
	delegate OnDyingRecoverStateChangeDelegate;//[Offset: 0x2778, Size: 0x10]
	delegate OnSyncArmStateChangeDelegate;//[Offset: 0x2788, Size: 0x10]
	float DyingRecoverTimer;//[Offset: 0x2798, Size: 0x4]
	ParticleSystem* MiddleSpawnEffectClass;//[Offset: 0x27a8, Size: 0x28]
	ParticleSystem* SeniorSpawnEffectClass;//[Offset: 0x27d0, Size: 0x28]
	bool bCanBecomeAimAssistTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27f8, Size: 0x1]
	bool bUseCustomAimAssistBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27f9, Size: 0x1]
	Vector2D CustomAimAssistBox;//[Offset: 0x27fc, Size: 0x8]
	Vector CustomAimAssistBoxCenterOffset;//[Offset: 0x2804, Size: 0xc]
	Vector CustomAimAssistBoxBottomOffset;//[Offset: 0x2810, Size: 0xc]
	Vector CustomAimAssistBoxTopOffset;//[Offset: 0x281c, Size: 0xc]
	Vector2D CustomAimAssistBoxScreenSizeScale;//[Offset: 0x2828, Size: 0x8]
	bool bForceEffectByDetectedTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2830, Size: 0x1]
	delegate OnHitStun;//[Offset: 0x2838, Size: 0x10]
	bool bBackToDomant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2848, Size: 0x1]
	bool UseSelfBoundsToCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2849, Size: 0x1]
	void UpdateSpeedModifier(FString Modifier, float SpeedModifier);// 0x285be90
	void UnregisterBlackboardKeyObserver(const FName KeyName, delegate BlackboardKeyChangedDelegate);// 0x285bdb0
	void TryStopAllAction(enum StopReason);// 0x285bd30
	void TryEnterCriticalStunWithNoHit(enum StunType);// 0x285bcb0
	void ToggleDynamicDamageTakenInfo(FName InfoName, bool bToggle, FName InHandler);// 0x285bba0
	void TestIncreaseTeamID();// 0xae2270
	bool TestFindPath(out const Vector Start, out const Vector End, bool bDoBidirectionally);// 0x285ba60
	void TestDecreaseTeamID();// 0xae2270
	void StopSyncingInteractionEffect_BP();// 0x305c9c0
	void StopLookAt();// 0x285ba20
	void StopCharacterMovement();// 0x285ba00
	void StopAnimMontageWithBlend(AnimMontage* AnimMontage, float BlendTime);// 0x285b930
	void StartSyncingInteractionEffect_BP();// 0x305c9c0
	void SpecifyAvoidPlayer(ArkPlayer* InAvoidPlayer);// 0x285b8a0
	void ShowReformEffects_BP(ArkNpc* InNpc);// 0x305c9c0
	void ShowPartCollection(FName CollectionName, bool bShowOrHide);// 0x285b7d0
	void ShowMaterialSections(bool bShowOrHide, out const int[] MaterialIDs, int LODIndex, int SectionIndex);// 0x285b590
	void ShowFriendEffect();// 0x285b570
	void ShowDeformEffects_BP(ArkPlayer* Player, enum DeformState, enum InteractionType);// 0x305c9c0
	void SetWeaknessSocket(FName SocketName);// 0x285b4f0
	void SetVectorParameterValueOnMaterials(MeshComponent* MeshComp, FName ParameterName, out const Vector ParameterValue, out const int[] MaterialIDs, float ValueChangeSpeed);// 0x285b310
	void SetUnscaledMaxSpeed(float MaxSpeed);// 0x285b290
	void SetTargetPhase(FName PhaseName);// 0x285b210
	void SetSpeedStage(enum speedStage, bool needSetMaxSpeed);// 0x285b140
	void SetScalarParameterValueOnMaterials(MeshComponent* MeshComp, FName ParameterName, float ParameterValue, out const int[] MaterialIDs, float ValueChangeSpeed);// 0x285afa0
	void SetPauseDyingRecoverTime(bool bPaused);// 0x285af10
	void SetNeedPlayStunMontage(bool NeedPlayStunMontage);// 0x285ae90
	void SetLootProfile(const FName OverrideLootProfileName, out const <class DamageType,FName> LootProfileNameByDamageType);// 0x285acc0
	void SetLifeTime(float NewLifeTime);// 0x285ac40
	void SetIsCrossing(bool bCrossing);// 0x285abc0
	void SetIrresponsive(bool bIrresponsive, enum Slot);// 0x285ab00
	void SetInvincibleComponent(const PrimitiveComponent* Component, bool bNewInvincible);// 0x285aa30
	void SetInvincible(bool bin);// 0x285a9a0
	void SetDetectedWeak(bool InDetectedWeak);// 0x285a910
	void SetCoreMeshAnimationPitchingValue(float NewValue);// 0x305c9c0
	void SetClearAIEnable(bool bEnable);// 0x285a880
	void SetCanPlayDeathAnimation(bool bCanPlay);// 0x285a7f0
	void SetCanPlayCriticalStun(bool bNewCanPlayCriticalStun);// 0x285a770
	void SetCanHitReaction(bool bHitReaction);// 0x285a6f0
	void SetCanDropLoot(bool bNewCanDropLoot);// 0x285a660
	void SetCanBeDamagedBySlot(bool bInCanBeDamaged, enum DamageSlot);// 0x285a510
	void SetCanBecomeAimAssistTarget(bool bNewCanBecome);// 0x285a5d0
	void SetBirthLocation(out const Vector NewBirthLocation);// 0x285a480
	void SetAttributeAncestor(ArkPlayer* InAttributeAncestor);// 0x285a400
	void SetAllMeshVectorParameterValueOnMaterials(FName ParameterName, out const Vector ParameterValue, out const int[] MaterialIDs, float ValueChangeSpeed);// 0x285a270
	void SetAllMeshScalarParameterValueOnMaterials(FName ParameterName, float ParameterValue, out const int[] MaterialIDs, float ValueChangeSpeed);// 0x285a100
	void SetAITypeName(FName inTypeName);// 0x285a080
	bool ServerTeleportToLocation(out const Vector TargetLocation, out const Rotator DestRotation, float Tolerance, bool bInProjectToNavMesh, enum TeleportType);// 0x2859ea0
	void ServerStopRepAnimMontage(AnimMontage* AnimMontage, float BlendTime);// 0x2859dd0
	float ServerPlayRepAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName, int Flags, enum RootMotionOption);// 0x2859c40
	void ServerOnTaskChanged_BP(enum currentTask);// 0x305c9c0
	bool ServerMoveTo(out const Vector TargetLocation, out const FString Reason, float Tolerance);// 0x2859ae0
	bool ServerMoveAlongPath(out const Vector[] PathPoints, out const FString Reason, float Tolerance);// 0x2859970
	Actor* ServerGetChaseActor();// 0x2859940
	void ServerChaseActor(Actor* chaseTarget, float Tolerance);// 0x2859870
	void ResumeMovement(int StackCount, enum Slot);// 0x2859570
	void Rep_TypeName();// 0x2859550
	void Rep_SpeedStage();// 0x2859530
	void Rep_ShowWeaknessSign();// 0x2859510
	void Rep_MaxSpeed();// 0x28594f0
	void Rep_ID();// 0x28594d0
	void RemoveAllSpeedModifiers();// 0x2859350
	bool RegisterBlackboardKeyObserver(const FName KeyName, delegate BlackboardKeyChangedDelegate);// 0x2859260
	void ReformingStateChanged_BP();// 0x305c9c0
	float PrePlayMontage(AnimMontage* Montage, float InPlayRate, FName SectionName, int Flags);// 0x2859110
	void PlayCriticalStunEndAnim();// 0x28590f0
	void PauseMovement(int StackCount, enum Slot);// 0x2859020
	void OverrideAttackTicketCategory(out const FName TicketCategory);// 0x2858f90
	void OnWeakPointDamageAccumulationChange_BP(float NewValue, float MaxValue);// 0x305c9c0
	void OnTeamIDChange_BP(bool bIsSynced);// 0x305c9c0
	void OnTaskChange__DelegateSignature(ArkNpc* NPC, enum NewTask);// 0x305c9c0
	void OnSyncArmStateChange__DelegateSignature(ArkNpc* NPC, bool bInSyncArm);// 0x305c9c0
	void OnStopAction__DelegateSignature(ArkAIGABuff_Performable* GA, enum StopReason);// 0x305c9c0
	void OnSkinLoadFinished_BP();// 0x305c9c0
	void OnSelfExploStart_BP();// 0x305c9c0
	void OnRep_WeakPointDamageAccumulation();// 0x2858f70
	void OnRep_PendingCriticalStunType();// 0x2858f50
	void OnRep_OverallActionSpeed();// 0x2858f30
	void OnRep_NpcSpawnLevelChange();// 0x2858f10
	void OnRep_MontageRepInfo();// 0x2858ef0
	void OnRep_MeshScale();// 0x2858ed0
	void OnRep_InReformingState(bool bLastReformingState);// 0x2858e40
	void OnRep_InInteracting();// 0x2858e20
	void OnRep_FocusInfo();// 0xae2270
	void OnRep_DyingRecoverTimer(float LastTimer);// 0x2858da0
	void OnRep_DeformedNpc();// 0x2858d80
	void OnRep_CriticalRepInfo();// 0x2858d60
	void OnRep_BelongTeamID();// 0x2858d40
	void OnPerformAction__DelegateSignature(ArkAIGABuff_Performable* GA, Actor* TargetActor);// 0x305c9c0
	void OnOverallActionSpeedChanged();// 0x2858d20
	void OnMeshOverDelegate__DelegateSignature();// 0x305c9c0
	void OnLifeTimeUp();// 0x2858d00
	void OnKnockDownBumped_BP(out const HitResult Impact);// 0x305c9c0
	void OnInCriticalStun_BP();// 0x305c9c0
	void OnEvent__DelegateSignature();// 0x305c9c0
	void OnDyingTimeUp();// 0x2858ce0
	void OnDyingRecoverStateChange__DelegateSignature(ArkNpc* NPC, bool bNewState);// 0x305c9c0
	void OnCustomNotifyStateToggle__DelegateSignature(ArkNpc* NPC, FName CustomTag, float CustomValue, bool bOn);// 0x305c9c0
	void OnCoreAnimMontageEnd(AnimMontage* Montage, bool bInterrupted);// 0x2858c10
	void OnCoreAnimMontageBlendingOut(AnimMontage* Montage, bool bInterrupted);// 0x2858b40
	void OnClientStayRemarkableArea_BP(int oldIndex, int newIndex);// 0x305c9c0
	void OnClientLeaveRemarkableArea_BP();// 0x305c9c0
	void OnClientEnterRemarkableArea_BP(int Index);// 0x305c9c0
	void OnBuffChanged();// 0x2858b20
	void OnArkAIEnterCriticalStun__DelegateSignature(enum LastStunType, enum StunType);// 0x305c9c0
	void OnAnimNotify(out const AnimNotifyEvent AnimNotifyEvent);// 0x28589e0
	void OnAITargetChange__DelegateSignature(Actor* OldTarget, Actor* NewTarget);// 0x305c9c0
	void OnAICommandChange__DelegateSignature(ArkNpc* NPC, ArkAICommand* OldCommand, ArkAICommand* NewCommand);// 0x305c9c0
	void NormalSuicide(Controller* Killer);// 0x2858890
	void MC_DumpDebugInfo(FString Categories);// 0x28587f0
	void LookAtLocation(out const Vector LookAtLocation, bool isForce);// 0x2858710
	void LookAtActor(Actor* lookAtTarget, bool isForce);// 0x2858640
	void KillSelfWrapper(class DamageType DamageTypeClass, ArkCharacterBase* Killer, bool bSkipDying);// 0x2858530
	bool JustBornWithinTime(float InTime);// 0x2858470
	bool IsTryingMoveTo(Vector TargetLocation);// 0x28583d0
	bool IsTeleportingToLocation(Vector TargetLocation);// 0x2858330
	bool IsSynced();// 0x2858300
	bool IsServerMovingTo(Vector TargetLocation);// 0x2858230
	bool IsResolvingOffMesh();// 0x2858200
	bool IsPlayingSpecificMontage(const AnimMontage* Montage);// 0x2858170
	bool IsMovementStuckToPlayer();// 0x2858140
	bool IsMovementStuck(Vector TestLoc);// 0x28580a0
	bool IsIrresponsiveSlot(enum Slot);// 0x2858010
	bool IsIrresponsive();// 0x2857fe0
	bool IsInVirtualCriticalStun(enum StunType);// 0x2857f20
	bool IsInSyncArm();// 0x2857ef0
	bool IsInitialized();// 0x2857fb0
	bool IsInCriticalStunType(enum StunType);// 0x2857e60
	bool IsInAnyVirtualCriticalStun();// 0x2857e30
	bool IsFollowingPath();// 0x2857e00
	bool IsDyingRecover();// 0x2857dd0
	bool IsBoss4Buff();// 0x2857d70
	bool IsBoss();// 0x2857da0
	bool IsAITargetValid(Actor* Target, bool bCheckDying, bool bCheckAlive);// 0x2857c60
	void IgnoreLookAt(bool bIgnore);// 0x2857bd0
	void HideFriendEffect();// 0x2857bb0
	bool HasPendingTeleport();// 0x2857b80
	float GetUnscaledMaxSpeed();// 0x2857b40
	FName GetTargetPhase();// 0x2857b00
	SkeletalMeshComponent* GetSyncOwnerArmMesh();// 0x2857ad0
	ArkPlayer* GetSyncOwner();// 0x2857aa0
	ArkNpcSyncDisplayComponent* GetSyncDisplayComponent();// 0x2857a80
	enum GetSpeedStage();// 0x2857a60
	float GetSpeedModifier();// 0x2857a20
	ArkNpcSoundConfig GetSoundCfg();// 0x28579e0
	int GetNpcSpawnLevel();// 0x2857740
	float GetNpcSpawnDensityValue();// 0x2857710
	ArkNpcMovementComponent* GetNpcMovementComponent();// 0x28576f0
	float GetNpcLevel();// 0x28576c0
	float GetNonFinalMaxShield();// 0x2857690
	float GetNonFinalMaxHealth();// 0x2857660
	bool GetMoveDestination(out Vector OutDestination);// 0x2857480
	float GetMaxSpeedAt(enum speedStage);// 0x28572b0
	Vector GetLogicLocation();// 0x2857270
	float GetDyingRecoverTimeRate();// 0x2857240
	float GetDyingRecoverTimeLeft();// 0x2857210
	float GetDyingRecoverHealthRate();// 0x28571e0
	float GetDyingRecoverHealthMaxPercentage();// 0x28571b0
	float GetDyingRecoverDuration();// 0x2857180
	FText GetDisplayName();// 0x28570e0
	FName GetCurrentPhase();// 0x28570a0
	float GetCellHealth();// 0x2857070
	FString GetCategoryDebugString_BP(FString Categories);// 0x2856f80
	int GetBelongTeamID();// 0x2856f50
	ArkPlayer* GetAttributeAncestor();// 0x2856f20
	ArkFlammableComponent* GetArkFlammableComponent();// 0x2856f00
	Actor* GetAITarget();// 0x2856ed0
	void EnableWeaknessSign(bool Enable);// 0x2856b00
	void EnableOutline(bool bEnable);// 0x2856a70
	void DisableAIPerception(bool bDisable);// 0x28569e0
	void ClientTeleportToLocation(Vector TargetLocation, const Rotator DestRotation);// 0x2856910
	void ClientSpawnLootEffectNormal(enum inLevel);// 0x2856890
	void ClientSpawnLootEffectImportant(enum inLevel);// 0x2856810
	void ClientShowWeaknessSign();// 0x28567f0
	void ClientShowIndicatorTarget(bool bShow);// 0x2856760
	void ClientSetDeformInfo(enum NewDeformState, FString PlayerIDStr, enum InteractionType);// 0x2856640
	void ClientNotifyInteractionStoppedBy_BP(ArkCharacterBase* InteractedBy, enum InteractionType, float RemainingTime, bool bCancelled);// 0x305c9c0
	void ClientNotifyInteractionStartedBy_BP(ArkCharacterBase* InteractedBy, enum InteractionType, float Duration);// 0x305c9c0
	void ClientHideWeaknessSign();// 0x2856620
	void ClearDynamicDamageTakenInfo(FName InHandler);// 0x2856590
	void ClearCriticalStunState(bool bStopMontage);// 0x2856500
	void ChipDestroySuicide(Controller* Killer, bool bNewSkipDying);// 0x2856430
	bool CanReceiveSyncCmd(ArkAICommand* Command);// 0x28563a0
	bool CanReceiveAttackTicket();// 0x2856370
	bool CanEnterDyingRecover();// 0x2856340
	bool CanDropLoot();// 0x2856310
	bool CanBeControlled();// 0x28562b0
	bool CanBecomeAimAssistTarget();// 0x28562e0
	void BlockRetreatBySlot(bool bBlock, FName SlotName);// 0x28561f0
	void ArkNpcOnTeamIDChange__DelegateSignature(ArkNpc* NPC);// 0x305c9c0
	void ArkNpcInteractionEvent__DelegateSignature(bool bStartOrEnd, ArkCharacterBase* InteractedBy, enum InteractionType, bool bCanceled);// 0x305c9c0
	ArkNpcShieldComponent* AddOrGetShieldComponent();// 0x28560a0
	void ActuallyEnterCriticalStun();// 0x2856080

--------------------------------
Class: ArkNpcShieldComponent.ArkCharacterLiteComponent.LiteComponent.Object
	float RecoverRate;//[Offset: 0xa8, Size: 0x4]
	float HurtAffectDuration;//[Offset: 0xac, Size: 0x4]
	void OnTakeAnyDamage(Actor* DamagedActor, float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x2866ad0
	void EnableShieldRecover(bool bEnable, enum Slot);// 0x2866450

--------------------------------
Class: ArkAIGABuff_Performable.ArkAIGameplayAbilityBuff.ArkGameBuff.Object
	float ActionCooldown;//[Offset: 0x4c8, Size: 0x4]
	FString ActionCooldownIdentifier;//[Offset: 0x4d0, Size: 0x10]
	bool bEnterCoolDownUponActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e0, Size: 0x1]
	bool bEnterCDWhenInterrupted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e1, Size: 0x1]
	float ActionMinDistance;//[Offset: 0x4e4, Size: 0x4]
	float ActionMaxDistance;//[Offset: 0x4e8, Size: 0x4]
	Vector2D ActionFacingAngleRange;//[Offset: 0x4ec, Size: 0x8]
	Vector2D ActionFacingVerticalAngleRange;//[Offset: 0x4f4, Size: 0x8]
	Vector2D ActionTargetFacingAngleRange;//[Offset: 0x4fc, Size: 0x8]
	int ActionMinSpeed;//[Offset: 0x504, Size: 0x4]
	int ActionMaxSpeed;//[Offset: 0x508, Size: 0x4]
	int ActionMinSpeedIndex;//[Offset: 0x50c, Size: 0x4]
	int ActionMaxSpeedIndex;//[Offset: 0x510, Size: 0x4]
	GameplayTagContainer TargetTagWhiteList;//[Offset: 0x518, Size: 0x20]
	int AimThreatenDist;//[Offset: 0x538, Size: 0x4]
	int MaxPerformCount;//[Offset: 0x53c, Size: 0x4]
	float MaxDuration;//[Offset: 0x540, Size: 0x4]
	bool bWorthAdjustingDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x544, Size: 0x1]
	bool bCanExecuteWhenStun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x545, Size: 0x1]
	bool bCanExecuteWhenInMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x546, Size: 0x1]
	bool bCanExecuteInSyncArm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x547, Size: 0x1]
	bool bCanExecuteWhenNoTargetActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 0x1]
	bool TargetVisibilityCheckPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x549, Size: 0x1]
	bool bCheckTargetVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54a, Size: 0x1]
	bool bCheckTargetBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54b, Size: 0x1]
	bool bCheckAttackTicket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c, Size: 0x1]
	bool bCanExecuteAutomaticly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54d, Size: 0x1]
	bool bUninterruptible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54e, Size: 0x1]
	bool bNeedAttackLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54f, Size: 0x1]
	ArkAIGA_GiveupConfig GiveupConfig;//[Offset: 0x550, Size: 0x18]
	enum AbilityPriority;//[Offset: 0x568, Size: 0x1]
	int BreakForce;//[Offset: 0x56c, Size: 0x4]
	int BreakResistance;//[Offset: 0x570, Size: 0x4]
	bool bCanChangeTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x574, Size: 0x1]
	AnimMontage*[] DefaultActionMontages;//[Offset: 0x578, Size: 0x10]
	FName MontageStartSectionName;//[Offset: 0x588, Size: 0x8]
	FName MontageEndSectionName;//[Offset: 0x590, Size: 0x8]
	FName MontageLoopSectionName;//[Offset: 0x598, Size: 0x8]
	FName MontageIdleLoopSectionName;//[Offset: 0x5a0, Size: 0x8]
	GameplayTagContainer AddingGameplayTags;//[Offset: 0x5a8, Size: 0x20]
	float OverrideRotationRate;//[Offset: 0x5c8, Size: 0x4]
	ArkAITargetScoreEvaluator* OverrideTargetScoreEvaluator;//[Offset: 0x5d0, Size: 0x8]
	bool bTriggeredByCondition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d8, Size: 0x1]
	bool bIsOneShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d9, Size: 0x1]
	bool bIsParallel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5da, Size: 0x1]
	bool bFocusTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5db, Size: 0x1]
	bool bBreakStealthOnAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5dc, Size: 0x1]
	bool bPauseMovementOnAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5dd, Size: 0x1]
	bool bStopActionWhenConditionFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5de, Size: 0x1]
	bool bConsumeTicketAfterPerform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5df, Size: 0x1]
	bool bAllowRotReviseDuringRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 0x1]
	bool bAvoidPassByTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e1, Size: 0x1]
	float KeepExtraDistanceFromTarget;//[Offset: 0x5e4, Size: 0x4]
	class ArkAIGABuff_Performable[] SucceedingGA;//[Offset: 0x5e8, Size: 0x10]
	bool bForceBoneRefreshOnAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8, Size: 0x1]
	AnimMontage* DefaultActionMontage;//[Offset: 0x600, Size: 0x8]
	ArkAIGameplayBuffActionData ReplicatedActionData;//[Offset: 0x610, Size: 0x70]
	ArkAIGAOwnerRepData OwnerRepData;//[Offset: 0x680, Size: 0x4]
	delegate OnPerformActionEvent;//[Offset: 0x688, Size: 0x10]
	delegate OnStopActionEvent;//[Offset: 0x698, Size: 0x10]
	float ExpectedActionEndTime;//[Offset: 0x6a8, Size: 0x4]
	Actor* mTargetActor;//[Offset: 0x710, Size: 0x8]
	FName OverridePerformMontageSectionName;//[Offset: 0x71c, Size: 0x8]
	FName OverrideEndMontageSectionName;//[Offset: 0x724, Size: 0x8]
	FName AimOffsetTag;//[Offset: 0x798, Size: 0x8]
	void ServerStopAction(enum StopReason);// 0x2641b70
	enum ServerQueryActionState_BP(Actor* TargetActor);// 0x2641ad0
	enum ServerQueryActionState(Actor* TargetActor);// 0x2641a30
	void ServerPerformAction(Actor* TargetActor);// 0x26419a0
	bool ServerCanPerformAction(Actor* TargetActor);// 0x2641900
	void OnStopAction_BP(enum StopReason);// 0x305c9c0
	void OnStopAction__DelegateSignature(ArkAIGABuff_Performable* GA, enum StopReason);// 0x305c9c0
	void OnRep_TargetActor(Actor* LastTarget);// 0x2641680
	void OnRep_OwnerRepData(out const ArkAIGAOwnerRepData LastRepData);// 0x26415f0
	void OnRep_ActionData();// 0x2641570
	void OnPerformAction_BP(Actor* TargetActor);// 0x305c9c0
	void OnPerformAction__DelegateSignature(ArkAIGABuff_Performable* GA, Actor* TargetActor);// 0x305c9c0
	void OnOwnerAsyncLoadFinished();// 0x2641550
	bool IsServerActionCooldownReady();// 0x26410f0
	bool IsPerformingAction();// 0x26410c0
	Actor* GetPerformTargetActor();// 0x2641090
	Actor* GetActionQueryTargetActor();// 0x2640fc0
	void ChoosePerformMontageSection_BP();// 0x305c9c0
	void ChooseEndMontageSection_BP();// 0x305c9c0
	void ChangeTarget(Actor* NewTarget);// 0x2640d30

--------------------------------
Class: ArkAIGAOwnerRepData
	int16 CoolDownTotal;//[Offset: 0x0, Size: 0x2]
	int16 CoolDownLeft;//[Offset: 0x2, Size: 0x2]

--------------------------------
Class: ArkAIGA_GiveupConfig
	bool bStopAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float GiveUpDistanceMin;//[Offset: 0x4, Size: 0x4]
	float GiveUpDistanceMax;//[Offset: 0x8, Size: 0x4]
	float GiveUpAngle;//[Offset: 0xc, Size: 0x4]
	float GiveUpUnseenTime;//[Offset: 0x10, Size: 0x4]
	float GiveUpTargetInvalidTime;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ArkAITargetScoreEvaluator.DataAsset.Object
	int Score_Invisible;//[Offset: 0x30, Size: 0x4]
	int Score_LockedOn;//[Offset: 0x34, Size: 0x4]
	int Score_Player;//[Offset: 0x38, Size: 0x4]
	int Score_Robot;//[Offset: 0x3c, Size: 0x4]
	int Score_DyingPlayer;//[Offset: 0x40, Size: 0x4]
	int Score_Synced;//[Offset: 0x44, Size: 0x4]
	int Score_Elite;//[Offset: 0x48, Size: 0x4]
	int Score_Swarm;//[Offset: 0x4c, Size: 0x4]
	int Score_Current;//[Offset: 0x50, Size: 0x4]
	int Score_NotCurrent;//[Offset: 0x54, Size: 0x4]
	CurveFloat* Score_Distance;//[Offset: 0x58, Size: 0x8]
	CurveFloat* Score_HorizontalAngle;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: ArkAIGameplayBuffActionData
	int StartActionCount;//[Offset: 0x0, Size: 0x4]
	int StopActionCount;//[Offset: 0x4, Size: 0x4]
	AnimMontage* MontageToPlay;//[Offset: 0x8, Size: 0x8]
	int SectionIndex;//[Offset: 0x10, Size: 0x4]
	Actor* TargetActor;//[Offset: 0x18, Size: 0x8]
	Vector TargetLocation;//[Offset: 0x20, Size: 0xc]
	Transform StartTransform;//[Offset: 0x30, Size: 0x30]
	float PerformActionTime;//[Offset: 0x60, Size: 0x4]
	byte ForceReplicateByte;//[Offset: 0x64, Size: 0x1]
	enum StopReason;//[Offset: 0x65, Size: 0x1]
	int CustomData;//[Offset: 0x68, Size: 0x4]
	float PlayActionRate;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: ArkAICommand.Object
	Actor* Sender;//[Offset: 0x28, Size: 0x8]
	ArkNpc* Receiver;//[Offset: 0x30, Size: 0x8]
	Actor* TargetActor;//[Offset: 0x38, Size: 0x8]
	ArkCharacterBase* FollowedMaster;//[Offset: 0x40, Size: 0x8]
	bool bCloseSyncArm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	float ReachTolerance;//[Offset: 0x6c, Size: 0x4]
	float AffectRadius;//[Offset: 0x70, Size: 0x4]
	AkAudioEvent* NpcBark;//[Offset: 0x78, Size: 0x28]
	FString CommandName;//[Offset: 0xa0, Size: 0x10]
	FString CommandNameAfterReached;//[Offset: 0xb0, Size: 0x10]
	FText CommandText;//[Offset: 0xc0, Size: 0x18]
	float OverrideTickInterval;//[Offset: 0xd8, Size: 0x4]
	bool bShareEffectsWithTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]

--------------------------------
Class: AkAudioEvent.AkAssetBase.AkAudioType.Object
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x50, Size: 0x50]
	AkAudioBank* RequiredBank;//[Offset: 0xa0, Size: 0x8]
	AkAssetPlatformData* CurrentLocalizedPlatformData;//[Offset: 0xb0, Size: 0x8]
	float MaxAttenuationRadius;//[Offset: 0xb8, Size: 0x4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	float MinimumDuration;//[Offset: 0xc0, Size: 0x4]
	float MaximumDuration;//[Offset: 0xc4, Size: 0x4]
	float GetMinimumDuration();// 0x8c5580
	float GetMaximumDuration();// 0x8c5550
	float GetMaxAttenuationRadius();// 0x8c5520
	bool GetIsInfinite();// 0x8c54f0

--------------------------------
Class: AkAssetBase.AkAudioType.Object
	AkAssetPlatformData* PlatformAssetData;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: AkAudioType.Object
	UInt32Property ShortID;//[Size: 0x4]
	Object*[] UserData;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: AkAssetPlatformData.Object
	AkAssetData* CurrentAssetData;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AkAssetData.Object
	UInt32Property CachedHash;//[Size: 0x4]
	FString BankLanguage;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: AkAudioBank.AkAssetBase.AkAudioType.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x58, Size: 0x50]
	<AkAudioEvent*> LinkedAkEvents;//[Offset: 0xa8, Size: 0x50]
	AkAssetPlatformData* CurrentLocalizedPlatformAssetData;//[Offset: 0xf8, Size: 0x8]

--------------------------------
Class: ArkNpcSyncDisplayComponent.ArkCharacterLiteComponent.LiteComponent.Object
	NpcSyncDisplayInfo ClientSyncInfo;//[Offset: 0xc8, Size: 0x20]
	void OnViewTargetChanged(Actor* NewViewTarget);// 0x2866c60
	NpcSyncDisplayInfo GetSyncInfo();// 0x2866910
	NpcSyncDisplayInfo GetClientSyncInfo();// 0x28665d0
	void ClientUpdateDisplay(enum NewState, int TeamId, FString PlayerId, bool bForceUpdate);// 0x2866170

--------------------------------
Class: NpcSyncDisplayInfo
	int TeamId;//[Offset: 0x0, Size: 0x4]
	FString PlayerId;//[Offset: 0x8, Size: 0x10]
	enum SyncState;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: ArkNpcSoundConfig.TableRowBase
	AkAudioEvent* BK_ModChipAdded;//[Offset: 0x8, Size: 0x28]
	AkAudioEvent* BK_MoveToPosition;//[Offset: 0x30, Size: 0x28]
	AkAudioEvent* BK_ReachedPosition;//[Offset: 0x58, Size: 0x28]
	AkAudioEvent* BK_LockTarget;//[Offset: 0x80, Size: 0x28]
	AkAudioEvent* BK_FreeEnterCombat;//[Offset: 0xa8, Size: 0x28]
	AkAudioEvent* BK_KnockedDownEnemyPlayer;//[Offset: 0xd0, Size: 0x28]
	AkAudioEvent* BK_DetectedEnemyPlayer;//[Offset: 0xf8, Size: 0x28]

--------------------------------
Class: ArkNpcMovementComponent.ArkCharacterMovementBase.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bUseMovementOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa10, Size: 0x1]
	bool bIsFloating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa11, Size: 0x1]
	bool bAllowPitchRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa12, Size: 0x1]
	float kMoveAcceleration;//[Offset: 0xa14, Size: 0x4]
	float kMoveDeceleration;//[Offset: 0xa18, Size: 0x4]
	CurveFloat* MaxSpeedAtTurningAngle;//[Offset: 0xa20, Size: 0x8]
	bool bAvoidPlayerCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa28, Size: 0x1]
	float WalkableFloorAngleWhenFollowingPath;//[Offset: 0xa2c, Size: 0x4]
	ArkPlayer* AvoidPlayer;//[Offset: 0xa38, Size: 0x8]
	float FutureTime;//[Offset: 0xa40, Size: 0x4]
	float PlayerCollisionRadius;//[Offset: 0xa44, Size: 0x4]
	float AICollisionRaidus;//[Offset: 0xa48, Size: 0x4]
	ArkFloatingPath MovePath;//[Offset: 0xa50, Size: 0x20]
	ArkNpcRepMovement RepMove;//[Offset: 0xa70, Size: 0x10]
	ArkNpc* NpcOwner;//[Offset: 0xa80, Size: 0x8]
	ArkNPC_EliteBase* OwnerElite;//[Offset: 0xa88, Size: 0x8]
	ArkNPCPathFollowingComponent* NpcPathFollowingComp;//[Offset: 0xa90, Size: 0x8]
	Actor* FocusActor;//[Offset: 0xaa0, Size: 0x8]
	bool bStopReplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab4, Size: 0x1]
	void StopMovement();// 0x28677b0
	void SpecifyAvoidPlayer(ArkPlayer* InAvoidPlayer);// 0x2867730
	void SetMovePath(out const ArkFloatingPath NewMovePath);// 0x2867680
	void ServerSetForceGatherRepMovement(bool bForceGather, FName Instigator);// 0x2866ea0
	void OnRep_RepMove();// 0x2866a90
	void OnRep_MovePath();// 0x2866a70
	bool IsFollowingAPath();// 0x2866960
	ArkNPCPathFollowingComponent* GetPathFollowingComponent();// 0x28668f0

--------------------------------
Class: ArkCharacterMovementBase.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bFindFloorInVoxelWalking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b0, Size: 0x1]
	float MinCustomDeltaYaw;//[Offset: 0x8b4, Size: 0x4]
	enum ReplaySmoothingMode;//[Offset: 0x8b8, Size: 0x1]
	float StartTargetRotationYawInCurveRotation;//[Offset: 0x90c, Size: 0x4]
	float CustomTargetRotationYaw;//[Offset: 0x910, Size: 0x4]
	ArkCharacterBase* ArkCharacterCache;//[Offset: 0x918, Size: 0x8]
	CurveFloat* CurrentRotationTimeCurve;//[Offset: 0x928, Size: 0x8]
	bool bUsePawnDesiredRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x93c, Size: 0x1]
	Rotator DesiredRotationRate;//[Offset: 0x940, Size: 0xc]
	NavVoxelMap* VoxelMap;//[Offset: 0x950, Size: 0x8]
	ArkSceneQueryUtility* SceneQuery;//[Offset: 0x968, Size: 0x8]
	bool bIsUseMotionMatching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97c, Size: 0x1]
	MotionDatabase* MotionDatabase;//[Offset: 0x980, Size: 0x8]
	float MotionYawWeight;//[Offset: 0x988, Size: 0x4]
	float MotionDirectionWeight;//[Offset: 0x98c, Size: 0x4]
	float MotionSpeedWeight;//[Offset: 0x990, Size: 0x4]
	float DistanceWeight;//[Offset: 0x994, Size: 0x4]
	float BoneLocationWeight;//[Offset: 0x998, Size: 0x4]
	float BoneVelocityWeight;//[Offset: 0x99c, Size: 0x4]
	float PoseWeight;//[Offset: 0x9a0, Size: 0x4]
	float[] PivotSpeedMap;//[Offset: 0x9a8, Size: 0x10]
	float PivotAngle;//[Offset: 0x9b8, Size: 0x4]
	GameplayTagContainer MotionMatchingTags;//[Offset: 0x9c0, Size: 0x20]
	AnimInstance* MeshAnimInst;//[Offset: 0xa08, Size: 0x8]
	void SetPlayerRotation(out const Rotator NewRotation);// 0x26cd480
	void SetEnableMotionMatching(bool bIsEnableMotionMatching);// 0x26ccd90
	void SetEnableCustomPhysicsRotation(bool bEnable);// 0x26ccd00
	void SetDesiredRotationRateYaw(float RateYaw);// 0x26ccc80
	void SetDesiredRotationRate(Rotator Rate);// 0x26ccbf0
	void SetDesiredRotation(Rotator rot);// 0x26ccb60
	void SetCustomTargetYaw(float InTargetYaw);// 0x26ccae0
	void ReachDesiredRotation();// 0x26cc590
	bool IsPawnDesiredRotationEnabled();// 0x26cae60
	Rotator GetDesiredRotationRate();// 0x26ca8b0
	Rotator GetDesiredRotation();// 0x26ca870
	HitResult GetCurrentWall();// 0x26ca7e0
	void EnablePawnDesiredRotation(bool bEnable);// 0x26ca1f0

--------------------------------
Class: NavVoxelMap.Actor.Object
	int CellSize;//[Offset: 0x2f8, Size: 0x4]
	int CellHeight;//[Offset: 0x2fc, Size: 0x4]
	int AgentHeight;//[Offset: 0x300, Size: 0x4]
	int CheckSmoothTolerance;//[Offset: 0x304, Size: 0x4]
	int CheckSmoothLevel;//[Offset: 0x308, Size: 0x4]
	bool bCheckCollisionInside;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 0x1]
	bool bGatherPhysMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d, Size: 0x1]
	int NumThread;//[Offset: 0x310, Size: 0x4]
	bool bDrawSpans;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 0x1]
	bool bDrawCorners;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315, Size: 0x1]
	bool bDrawPhysMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x316, Size: 0x1]
	MaterialInterface* DrawMaterial;//[Offset: 0x318, Size: 0x8]
	int DrawDistance;//[Offset: 0x320, Size: 0x4]
	int FindFloorCount;//[Offset: 0x324, Size: 0x4]
	int FindFloorRadius;//[Offset: 0x328, Size: 0x4]
	bool bEnableDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 0x1]
	Actor*[] DebugActors;//[Offset: 0x330, Size: 0x10]
	Vector[] DebugPoints;//[Offset: 0x340, Size: 0x10]
	Vector DebugBoxCenter;//[Offset: 0x350, Size: 0xc]
	Vector DebugBoxExtent;//[Offset: 0x35c, Size: 0xc]
	Vector CameraLookAtPosition;//[Offset: 0x368, Size: 0xc]
	int DbgChannel;//[Offset: 0x374, Size: 0x4]
	IntVector MapOrigin;//[Offset: 0x378, Size: 0xc]
	IntVector MapSize;//[Offset: 0x384, Size: 0xc]
	Vector2D GoodTriangleCornerZRange;//[Offset: 0x390, Size: 0x8]
	PhysicalMaterial*[] PhysMaterials;//[Offset: 0x398, Size: 0x10]
	NavVoxelMapRenderingComponent* DebugRenderComp;//[Offset: 0x3d0, Size: 0x8]
	bool bIgnoreNavModifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 0x1]
	void TestPhysMaterials();// 0xae2270
	void Statistics();// 0xae2270
	static NavVoxelMap* Get(const Object* WorldContext);// 0x29e94a0
	void FindFloorTest();// 0x29e9400
	void DebugCellAtCamera();// 0x29e9270
	void DebugBoxAtCamera();// 0x29e9250
	void ClearData();// 0x29e9170
	void BuildDebugBox();// 0x29e90a0
	void Build();// 0x29e9080
	void AddDebugCellAtCamera();// 0x29e8f10

--------------------------------
Class: NavVoxelMapRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ArkSceneQueryUtility.ArkManagerBase.Object
	delegate OnPlayerRegisteredDelegate;//[Offset: 0x90, Size: 0x10]
	delegate OnPlayerStateRegisteredDelegate;//[Offset: 0xb0, Size: 0x10]
	ArkAIGABuff_ShieldDefence*[] ShieldBuffs;//[Offset: 0x440, Size: 0x10]
	ArkVolumeCache* VolumeCache;//[Offset: 0x880, Size: 0x8]
	ArkWorldSettings* ArkWorldSettings;//[Offset: 0x888, Size: 0x8]
	void UnRegisterMovableActor(Actor* InActor);// 0x293ae50
	void UnRegisterFlare(Actor* Flare);// 0x293add0
	void UnRegisterBarrelColdZone(Actor* ColdZone);// 0x293ad50
	void UnRegisterActivityActorSpawner(ArkActivityActorSpawner* ActivityActorSpawner);// 0x293acd0
	ArkNpc*[] SortNPCsPriority(ArkNpc*[] InNpcs);// 0x293aa20
	ArkNpc*[] SortNpcsByDistance(ArkNpc*[] NpcCharacters, Vector Center);// 0x293ab50
	void SetNoticedBySceneQuery(ArkNpc* InCharacter, bool bNoticed);// 0x293a650
	void RegisterMovableActor(Actor* InActor, byte SpecifiedResponse);// 0x293a2f0
	void RegisterFlare(Actor* Flare);// 0x293a270
	void RegisterBarrelColdZone(Actor* ColdZone);// 0x293a1f0
	void RegisterActivityActorSpawner(ArkActivityActorSpawner* ActivityActorSpawner);// 0x293a170
	void GetStaticActorsInRange(out ArkStaticActor*[] Elements, out const Vector Center, float MaxDistance);// 0x2939ec0
	ArkAIGABuff_ShieldDefence*[] GetShieldBuffs();// 0x2939e30
	ArkScoreNode*[] GetScoreNodesInRange(out const Vector Center, float MaxDistance, float MinDistance);// 0x2939cc0
	ArkScoreNode*[] GetScoreNodes();// 0x2939c00
	ArkSafeHouseVolume*[] GetSafeHousesInRange(out const Vector Center, float MaxDistance, float MinDistance);// 0x2939a00
	ArkPlayer*[] GetPlayersInShape(const ShapeComponent* pShape);// 0x2939890
	ArkPlayer*[] GetPlayersInSector(int MaxCount, out const Vector Center, out const Vector Forward, float MinAngle, float MaxAngle, float MaxDistance, float MinDistance);// 0x2939620
	ArkPlayer*[] GetPlayersInRange2d(out const Vector Center, float MaxDistance, float MinDistance, bool bOnlyAlive);// 0x2939240
	ArkPlayer*[] GetPlayersInRange(out const Vector Center, float MaxDistance, float MinDistance, bool bOnlyAlive, bool bIncludeRobot);// 0x2939400
	ArkPickUp*[] GetPickUpsInRangeByType(enum PickUpType, out const Vector Center, float MaxDistance, float MinDistance);// 0x2939080
	ArkPickUp*[] GetPickUpsInRange(out const Vector Center, float MaxDistance, float MinDistance);// 0x2938f10
	ArkPickUp*[] GetPickUps();// 0x2938e80
	ArkNpc*[] GetNPCsInShape(const ShapeComponent* pShape);// 0x2938d70
	ArkNpc*[] GetNPCsInSectorByXYAngleAndYZAngle(int MaxCount, out const Vector Center, out const Vector Forward, float minXYAngle, float maxXYAngle, float minYZAngle, float maxYZAngle, float MaxDistance, float MinDistance);// 0x2938a80
	ArkNpc*[] GetNPCsInSectorByCategory(enum AICategory, int MaxCount, out const Vector Center, out const Vector Forward, float MinAngle, float MaxAngle, float MaxDistance, float MinDistance);// 0x29387d0
	ArkNpc*[] GetNPCsInSector(int MaxCount, out const Vector Center, out const Vector Forward, float MinAngle, float MaxAngle, float MaxDistance, float MinDistance);// 0x2938560
	ArkNpc*[] GetNPCsInRangeByCategory(enum AICategory, out const Vector Center, float MaxDistance, float MinDistance);// 0x29383a0
	ArkNpc*[] GetNPCsInRange(out const Vector Center, float MaxDistance, float MinDistance, bool b2D);// 0x29381e0
	ArkNpc*[] GetNPCsInCylinder(out const Vector Center, float HalfHeight, float Radius, bool bCheckAlive);// 0x2938020
	ArkNpc*[] GetNPCsInBox2d(out const Box2D Box, bool bCheckAlive);// 0x2937ce0
	ArkNpc*[] GetNPCsInBox(out const Vector BoxExtent, out const Transform LocalToWorld, bool b2D, bool bCheckAlive);// 0x2937e10
	ArkNpc*[] GetNPCsInBound(out const Box boundBox);// 0x2937c00
	ArkNewDarkErosionManager* GetNewDarkErosionManager();// 0x2938e50
	interface class[] GetInteractionsInRange(out const Vector Center, float MaxDistance, float MinDistance);// 0x29379e0
	ArkHavenNpc*[] GetHavenNPCsInRange(out const Vector Center, float MaxDistance, float MinDistance, bool b2D);// 0x2937760
	ArkFacilityBase*[] GetFacilitiesInRange(out const Vector Center, float MaxDistance, float MinDistance, bool b2D);// 0x2937320
	ArkExchange*[] GetExchangesInRange(out const Vector Center, float MaxDistance);// 0x2937200
	ArkPoiVolume* GetEncompassesPoiVolume(Actor* _Actor);// 0x2937170
	interface class[] GetDestructableObjectsInRange(out const Vector Center, float MaxDistance);// 0x2937050
	ArkCharacterBase*[] GetCharactersInRange(out const Vector Center, float MaxDistance, float MinDistance, bool b2D);// 0x2936e90
	ArkCharacterBase*[] GetCharactersInCylinder(out const Vector Center, float HalfHeight, float Radius, bool bCheckAlive);// 0x2936cd0
	ArkNpc*[] GetAllTaggedNpcs(out const GameplayTag Tag);// 0x2936a90
	ArkAISpawnVolume*[] GetAllSpawnVolumes();// 0x2936a00
	ArkPlayerStateBattle*[] GetAllPlayerStates();// 0x29368f0
	ArkPlayer*[] GetAllPlayersIncludingDead();// 0x29369c0
	ArkPlayer*[] GetAllPlayers();// 0x2936980
	ArkNpc*[] GetAllNpcs();// 0x2936860
	ArkNPC_EliteBase*[] GetAllHordeElites();// 0x2936820
	ArkFacilityBase*[] GetAllFacilities();// 0x29367a0
	ArkNPC_EliteBase*[] GetAllElites();// 0x2936760
	Actor*[] GetAllBarrelColdZones();// 0x29366e0
	ArkActivityActorSpawner*[] GetAllActivityActorSpawners(enum ActivityActorType);// 0x2936610
	ArkAISpawnVolume*[] GetAiSpawnsInRange(out const Vector Center, float MaxDistance, float MinDistance);// 0x29364a0
	ArkAIExtraSpawner* GetAIExtraSpawner();// 0x2936470
	static ArkSceneQueryUtility* Get(const Object* WorldContext);// 0x29363f0
	ArkCineSubSocket* FindNearestVictoryLevelSequencePoint(Vector Location);// 0x29362d0
	ArkRoomVolumeComponent* FindInBuildingRoom(out const Vector Loc);// 0x2936230
	ArkBuildingActorBase* FindInBuilding(Actor* FindActor);// 0x29361a0

--------------------------------
Class: ArkActivityActorSpawner.Actor.Object
	enum ActorType;//[Offset: 0x2e8, Size: 0x1]
	void ModifyNavMesh_BP(bool bPassible);// 0x305c9c0

--------------------------------
Class: ArkAIGABuff_ShieldDefence.ArkAIGABuff_Performable.ArkAIGameplayAbilityBuff.ArkGameBuff.Object
	FName ShieldComponentName;//[Offset: 0x7a8, Size: 0x8]
	FName ShieldCollisionComponentName;//[Offset: 0x7b0, Size: 0x8]
	FName PlaneShieldComponentName;//[Offset: 0x7b8, Size: 0x8]
	FName PlaneShieldCollisionComponentName;//[Offset: 0x7c0, Size: 0x8]
	FName ShieldActorComponentName;//[Offset: 0x7c8, Size: 0x8]
	FName PlaneShieldActorComponentName;//[Offset: 0x7d0, Size: 0x8]
	FName WeakpointComponentName;//[Offset: 0x7d8, Size: 0x8]
	FName BoxCheckComponentName;//[Offset: 0x7e0, Size: 0x8]
	FName PlaneBoxCheckComponentName;//[Offset: 0x7e8, Size: 0x8]
	FName SphereShieldShapeAreaComponentName;//[Offset: 0x7f0, Size: 0x8]
	FName ShowShieldNotify;//[Offset: 0x7f8, Size: 0x8]
	float ShieldDuration;//[Offset: 0x800, Size: 0x4]
	FName NightVisionComponentName;//[Offset: 0x804, Size: 0x8]
	float NearThrowDist;//[Offset: 0x80c, Size: 0x4]
	Vector WeakPointRelativeLocInShield;//[Offset: 0x810, Size: 0xc]
	Vector WeakPointRelativeLocDefault;//[Offset: 0x81c, Size: 0xc]
	float ShieldRelativeZ;//[Offset: 0x828, Size: 0x4]
	Rotator ShieldRelativeRotation;//[Offset: 0x82c, Size: 0xc]
	Rotator WeakpointRelativeRotation;//[Offset: 0x838, Size: 0xc]
	bool bOpenShieldByDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x844, Size: 0x1]
	bool bOpenShieldByTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x845, Size: 0x1]
	float DamageRadioInShield;//[Offset: 0x848, Size: 0x4]
	float DamageRadioInPlaneShield;//[Offset: 0x84c, Size: 0x4]
	float DamageRadioInSphereShield;//[Offset: 0x850, Size: 0x4]
	float DamageRadioWeakpoint;//[Offset: 0x854, Size: 0x4]
	float DamageRadioInLargeShield;//[Offset: 0x858, Size: 0x4]
	float DamageRadioInShieldNpc;//[Offset: 0x85c, Size: 0x4]
	float DamageRadioInPlaneShieldNpc;//[Offset: 0x860, Size: 0x4]
	float DamageRadioInSphereShieldNpc;//[Offset: 0x864, Size: 0x4]
	float DamageRadioWeakpointNpc;//[Offset: 0x868, Size: 0x4]
	float DamageRadioInLargeShieldNpc;//[Offset: 0x86c, Size: 0x4]
	class ArkGameBuff* DebuffForTouchingEnemy;//[Offset: 0x870, Size: 0x8]
	float LocalShieldOffset;//[Offset: 0x878, Size: 0x4]
	float LocalShieldHeightOffset;//[Offset: 0x87c, Size: 0x4]
	float RemoteShieldOffset;//[Offset: 0x880, Size: 0x4]
	float FlySpeed;//[Offset: 0x884, Size: 0x4]
	float FlyDuration;//[Offset: 0x888, Size: 0x4]
	Vector LargeShieldScale;//[Offset: 0x88c, Size: 0xc]
	Vector LargeShieldRelivate;//[Offset: 0x898, Size: 0xc]
	Vector NormalShieldScale;//[Offset: 0x8a4, Size: 0xc]
	class ArkShieldDefFlyer* FlyActorClass;//[Offset: 0x8b0, Size: 0x8]
	bool bShieldThrowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b8, Size: 0x1]
	bool bFinishShieldThrowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b9, Size: 0x1]
	bool bNormalBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ba, Size: 0x1]
	float ThrowDist;//[Offset: 0x8bc, Size: 0x4]
	Vector ThrowLoc;//[Offset: 0x8c0, Size: 0xc]
	float CloseShieldColdTime;//[Offset: 0x8cc, Size: 0x4]
	Vector DefLoc;//[Offset: 0x8d0, Size: 0xc]
	Rotator DefRot;//[Offset: 0x8dc, Size: 0xc]
	enum ThrowType;//[Offset: 0x8e8, Size: 0x1]
	AnimMontage* CurMontage;//[Offset: 0x8f0, Size: 0x8]
	ArkShiedlDefFly ShieldFly;//[Offset: 0x8f8, Size: 0x30]
	int LargeShieldCount;//[Offset: 0x928, Size: 0x4]
	float LargeShieldAlphaSpeed;//[Offset: 0x930, Size: 0x4]
	PrimitiveComponent* ShieldComponent;//[Offset: 0x948, Size: 0x8]
	PrimitiveComponent* ShieldCollisionComponent;//[Offset: 0x950, Size: 0x8]
	PrimitiveComponent* PlaneShieldComponent;//[Offset: 0x958, Size: 0x8]
	PrimitiveComponent* PlaneShieldCollisionComponent;//[Offset: 0x960, Size: 0x8]
	SceneComponent* WeakPoint;//[Offset: 0x968, Size: 0x8]
	BoxComponent* CircleBoxCheckComponent;//[Offset: 0x970, Size: 0x8]
	BoxComponent* PlaneBoxCheckComponent;//[Offset: 0x978, Size: 0x8]
	PrimitiveComponent* SphereShieldCollisionComponent;//[Offset: 0x980, Size: 0x8]
	ArkShapeAreaComponent* SphereShieldShapeAreaComponent;//[Offset: 0x988, Size: 0x8]
	<ArkNpc*> InBoxNpcs;//[Offset: 0x990, Size: 0x50]
	enum PendingUsedShield;//[Offset: 0x9e0, Size: 0x1]
	enum UsingShield;//[Offset: 0x9e1, Size: 0x1]
	ArkPlayer* AvoidPlayer;//[Offset: 0x9e8, Size: 0x8]
	ArkPlayer* SyncOwner;//[Offset: 0x9f0, Size: 0x8]
	ArkShieldDefFlyer* FlyActor;//[Offset: 0xa00, Size: 0x8]
	void ThrowShield(out const Vector TargetLoc, out const Rotator TargetRot);// 0x2649330
	void ShieldBack();// 0x26492b0
	void OnRep_UsingShield_BP();// 0x305c9c0
	void OnRep_UsingShield(enum LastShieldType);// 0x2649140
	void OnRep_ShieldThrowing_BP();// 0x305c9c0
	void OnRep_ShieldThrowing();// 0x2649120
	void OnRep_ShieldFly();// 0x2649100
	void OnRep_LargeShield_BP(bool IsLarge);// 0x305c9c0
	void OnRep_LargeShield(int LastShieldCount);// 0x2649040
	void OnRep_FinishThrowing_BP();// 0x305c9c0
	void OnRep_FinishThrowing();// 0x2648fe0
	void OnRep_AvoidPlayer();// 0x2648f00
	void OnEnemyNpcOutBox_BP(ArkNpc* NPC);// 0x305c9c0
	void OnEnemyNpcInBox_BP(ArkNpc* NPC);// 0x305c9c0
	void InterruptThrow();// 0x26489b0
	void FinishThrow();// 0x26488c0
	void CancelShield();// 0x2648540

--------------------------------
Class: ArkShieldDefFlyer.Character.Pawn.Actor.Object

--------------------------------
Class: ArkShiedlDefFly
	Vector Velocity;//[Offset: 0x0, Size: 0xc]
	Vector EndPos;//[Offset: 0x18, Size: 0xc]
	float Duration;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x688, Size: 0xc]
	float LineThickness;//[Offset: 0x694, Size: 0x4]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x4b6ae30
	Vector GetUnscaledBoxExtent();// 0x4b6ab80
	Vector GetScaledBoxExtent();// 0x4b6ab20

--------------------------------
Class: ArkShapeAreaComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ArkShapeAreaParams AreaParams;//[Offset: 0x670, Size: 0xc8]
	delegate OnBeginOverlapDelegate;//[Offset: 0x738, Size: 0x10]
	delegate OnEndOverlapDelegate;//[Offset: 0x748, Size: 0x10]
	delegate OnOverlapingDelegate;//[Offset: 0x758, Size: 0x10]
	delegate OnTakeEffectDelegate;//[Offset: 0x768, Size: 0x10]
	delegate OnSpawnDecalDelegate;//[Offset: 0x778, Size: 0x10]
	delegate OnAreaActiveChangeDelegate;//[Offset: 0x788, Size: 0x10]
	ArkShapeAreaRepInfo RepInfo;//[Offset: 0x798, Size: 0x10]
	ArkSoftDecalComponent* mDecalComp;//[Offset: 0x7a8, Size: 0x8]
	ArkSoftParticleSystemComponent*[] mParticleComponents;//[Offset: 0x7b0, Size: 0x10]
	SceneComponent* mUpdateComp;//[Offset: 0x7c0, Size: 0x8]
	void SetTeamID(int NewTeamID);// 0x294f6f0
	void SetNewShape(enum NewShape);// 0x294f5f0
	void SetNewHalfExtent(out const Vector NewHalfExtent);// 0x294f560
	void SetAreaActive(bool bNewActive);// 0x294f4d0
	void OnTakeEffect__DelegateSignature(ArkCharacterBase* Character, out const HitResult Hit, float TimeSinceOverlap, int Counter);// 0x305c9c0
	void OnTakeEffect(ArkCharacterBase* Character, out const HitResult Hit, float TimeSinceOverlap, int Counter);// 0x294f330
	void OnSpawnDecal__DelegateSignature(ArkSoftDecalComponent* DecalComponent, bool bSameTeam);// 0x305c9c0
	void OnRep_RepInfo(out const ArkShapeAreaRepInfo LastRepInfo);// 0x294f190
	void OnOverlaping__DelegateSignature(ArkCharacterBase* Character, out const HitResult Hit, float TimeSinceOverlap);// 0x305c9c0
	void OnOverlaping(ArkCharacterBase* Character, out const HitResult Hit, float TimeSinceOverlap);// 0x294ef70
	void OnEndOverlap__DelegateSignature(ArkCharacterBase* Character, float TimeSinceOverlap);// 0x305c9c0
	void OnEndOverlap(ArkCharacterBase* Character, float TimeSinceOverlap);// 0x294ee80
	void OnBeginOverlap__DelegateSignature(ArkCharacterBase* Character, out const HitResult Hit);// 0x305c9c0
	void OnBeginOverlap(ArkCharacterBase* Character, out const HitResult Hit);// 0x294ed50
	void OnAreaActiveChange_BP(bool bNewActive, ArkSoftDecalComponent* DecalComponent, out bool bCustomDecalAnimation);// 0x294ec30
	void OnAreaActiveChange__DelegateSignature(bool bNewActive, ArkSoftDecalComponent* DecalComponent, bool bCustomDecalAnimation);// 0x305c9c0

--------------------------------
Class: ArkSoftDecalComponent.DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* SoftDecalMaterial;//[Offset: 0x408, Size: 0x28]
	delegate OnAsyncLoadFinishedDelegate;//[Offset: 0x438, Size: 0x10]
	bool bAffectedByCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b9, Size: 0x1]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x2968f70
	void SetSoftDecalMaterial(MaterialInterface* InSoftDecalMaterial);// 0x2968b10
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x2968520
	void OnExitCinematic(int CinematicParams);// 0x2967480
	void OnEnterCinematic(int CinematicParams);// 0x2967380

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x3a8, Size: 0x8]
	int SortOrder;//[Offset: 0x3b0, Size: 0x4]
	byte Channel;//[Offset: 0x3b4, Size: 0x1]
	byte DrawClipMode;//[Offset: 0x3b5, Size: 0x1]
	float MaxOrientationDiffAngle;//[Offset: 0x3b8, Size: 0x4]
	float FadeScreenSize;//[Offset: 0x3bc, Size: 0x4]
	float FadeStartDelay;//[Offset: 0x3c0, Size: 0x4]
	float FadeDuration;//[Offset: 0x3c4, Size: 0x4]
	float FadeInDuration;//[Offset: 0x3c8, Size: 0x4]
	float FadeInStartDelay;//[Offset: 0x3cc, Size: 0x4]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d0, Size: 0x1]
	Vector DecalSize;//[Offset: 0x3d4, Size: 0xc]
	void SetSortOrder(int Value);// 0x4b83f60
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x4b83cd0
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x4b83bc0
	void SetFadeIn(float StartDelay, float Duaration);// 0x4b83b00
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x4b83870
	float GetFadeStartDelay();// 0x4b6fe00
	float GetFadeInStartDelay();// 0x4b833b0
	float GetFadeInDuration();// 0x4b83380
	float GetFadeDuration();// 0x4b83350
	MaterialInterface* GetDecalMaterial();// 0x4b83320
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x4b832c0

--------------------------------
Class: ArkShapeAreaRepInfo
	bool bAreaActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int TeamId;//[Offset: 0x4, Size: 0x4]
	ArkCharacterBase* InstigatorChar;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ArkShapeAreaParams
	float Duration;//[Offset: 0x0, Size: 0x4]
	float LifeSpanAfterDeactivation;//[Offset: 0x4, Size: 0x4]
	float TakeEffectTime;//[Offset: 0x8, Size: 0x4]
	int MaxTakeEffectCount;//[Offset: 0xc, Size: 0x4]
	int MaxInstances;//[Offset: 0x10, Size: 0x4]
	enum ShapeType;//[Offset: 0x14, Size: 0x1]
	Vector ShapeHalfExtent;//[Offset: 0x18, Size: 0xc]
	Vector LocationOffset;//[Offset: 0x24, Size: 0xc]
	Vector EffectCauserLocation;//[Offset: 0x30, Size: 0xc]
	bool bDestroyOwnerUponDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool bCheckTraceBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	bool bOnlyShowDecalForTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1]
	enum EffectiveTarget;//[Offset: 0x3f, Size: 0x1]
	ArkShapeAreaBuffConfig[] AddingBuffs;//[Offset: 0x40, Size: 0x10]
	float CollisionQueryInterval;//[Offset: 0x50, Size: 0x4]
	bool DelayEffectOnOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	MaterialInterface* DecalMaterial;//[Offset: 0x58, Size: 0x28]
	Vector DecalSizeFixup;//[Offset: 0x80, Size: 0xc]
	float DecalFadeIn;//[Offset: 0x8c, Size: 0x4]
	float DecalFadeOut;//[Offset: 0x90, Size: 0x4]
	ArkParticleConfig[] Particles;//[Offset: 0x98, Size: 0x10]
	FName ParticleAttachSocket;//[Offset: 0xa8, Size: 0x8]
	float ParticleScale;//[Offset: 0xb0, Size: 0x4]
	AkAudioEvent* StartSound;//[Offset: 0xb8, Size: 0x8]
	AkAudioEvent* EndSound;//[Offset: 0xc0, Size: 0x8]

--------------------------------
Class: ArkShapeAreaBuffConfig
	enum EffectiveTarget;//[Offset: 0x0, Size: 0x1]
	GameplayTagContainer TargetTags;//[Offset: 0x8, Size: 0x20]
	class ArkGameBuff* BuffClass;//[Offset: 0x28, Size: 0x8]
	int BuffID;//[Offset: 0x30, Size: 0x4]
	bool bRemoveWhenLeavingArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: ArkParticleConfig
	ParticleSystem* ParticleFx;//[Offset: 0x0, Size: 0x28]
	FName ParticleAttachSocket;//[Offset: 0x28, Size: 0x8]
	ArkSoftParticleSystemComponentWithPool* ParticleComponent;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: ArkSoftParticleSystemComponentWithPool.ArkSoftParticleSystemComponent.ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor* Listener;//[Offset: 0x9a8, Size: 0x8]
	void OnListenerDestroyed(Actor* Actor);// 0x2967600

--------------------------------
Class: ArkSoftParticleSystemComponent.ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* SoftTemplate;//[Offset: 0x910, Size: 0x28]
	delegate OnAsyncLoadFinishedDelegate;//[Offset: 0x938, Size: 0x10]
	bool bShouldHideIfSpawnInCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x969, Size: 0x1]
	void SetSoftParticleSystem(ParticleSystem* InTemplate);// 0x2968c10
	void OnExitCinematic(int CinematicParams);// 0x2967500
	void OnEnterCinematic(int CinematicParams);// 0x2967400
	void CheckIsInCinematic();// 0x2967270
	void BP_Deactivate();// 0x2967150

--------------------------------
Class: ArkVolumeCache.Object
	ArkMapAIInfo* MapAIInfo;//[Offset: 0x1c0, Size: 0x8]
	void OnComponentAsyncFinished(Object* Obj);// 0x29c16c0

--------------------------------
Class: ArkMapAIInfo.Actor.Object
	Vector CameraLookAtPosition;//[Offset: 0x2f8, Size: 0xc]
	Vector[] NavMeshPrunerSeedPoints;//[Offset: 0x308, Size: 0x10]
	int DebugSeedPoint;//[Offset: 0x318, Size: 0x4]
	bool bGenerateNavlinks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 0x1]
	bool bGenerateWayPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31d, Size: 0x1]
	bool bGenerateVoxelMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31e, Size: 0x1]
	bool bGenerateVolumeCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31f, Size: 0x1]
	bool bGenerateSpawnVolumeData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1]
	ArkMapObstacleEdgeRaw[] ObstacleEdges;//[Offset: 0x328, Size: 0x10]
	ArkMapCoverInfo[] CoverInfos;//[Offset: 0x338, Size: 0x10]
	ArkMapRoomArea[] RoomAreas;//[Offset: 0x358, Size: 0x10]
	bool bNewAIWayPointsAr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1]
	bool bNewAIWayStruct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x369, Size: 0x1]
	float WayPointsMemory;//[Offset: 0x380, Size: 0x4]
	<FString,ArkPolyModifierInfo> PolyModifierDict;//[Offset: 0x388, Size: 0x50]
	int AIWayPointNum;//[Offset: 0x3d8, Size: 0x4]
	FString AIWayPointMemSize;//[Offset: 0x3e0, Size: 0x10]
	int AIWayPointSightMapNum;//[Offset: 0x3f0, Size: 0x4]
	FString AIWayPointSightMapMemSize;//[Offset: 0x3f8, Size: 0x10]
	FString AIWayPointDistCount;//[Offset: 0x408, Size: 0x10]
	float WayPointPitchStep;//[Offset: 0x418, Size: 0x4]
	bool bDrawObstacleEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 0x1]
	bool bEnableDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x471, Size: 0x1]
	bool bEnableDebugCover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x472, Size: 0x1]
	bool bEnableDebugWayPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x473, Size: 0x1]
	Vector[] DebugLocations;//[Offset: 0x478, Size: 0x10]
	float DebugLocationRadius;//[Offset: 0x488, Size: 0x4]
	FString[] DebugTiles;//[Offset: 0x490, Size: 0x10]
	FString[] DebugPolygons;//[Offset: 0x4a0, Size: 0x10]
	int[] DebugWalls;//[Offset: 0x4b0, Size: 0x10]
	<int> DebugPoints;//[Offset: 0x4c0, Size: 0x50]
	int DbgChannel;//[Offset: 0x510, Size: 0x4]
	FString[] GenLinkInfos;//[Offset: 0x518, Size: 0x10]
	CollisionCacheBitMapColorConfig[] CollisionCacheBitMapColorConfig;//[Offset: 0x528, Size: 0x10]
	int CollisionVolumeSize;//[Offset: 0x538, Size: 0x4]
	float CharacterRadius;//[Offset: 0x540, Size: 0x4]
	float CharacterHalfHeight;//[Offset: 0x544, Size: 0x4]
	float MaxJumpDistance;//[Offset: 0x548, Size: 0x4]
	float MaxTraceDownDist;//[Offset: 0x54c, Size: 0x4]
	float MaxTraceForwardDist;//[Offset: 0x550, Size: 0x4]
	bool bFilterSmallCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554, Size: 0x1]
	float MinBoundsHeight;//[Offset: 0x558, Size: 0x4]
	float MinBoundsWidth;//[Offset: 0x55c, Size: 0x4]
	bool bMergeAllLayersUnderGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 0x1]
	bool bMergeAllLayersInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x561, Size: 0x1]
	bool bRemoveRepetitiveCollisionVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x562, Size: 0x1]
	bool bBuildCollisionCacheMutiThread;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x563, Size: 0x1]
	bool bKeepOnlyGPUFoliage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x564, Size: 0x1]
	bool bConvertToCookedObjectName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x565, Size: 0x1]
	int MaxPrimitiveNumInCache;//[Offset: 0x568, Size: 0x4]
	int LocatedCVCsMaxNum;//[Offset: 0x56c, Size: 0x4]
	IntVector CurrentCollisionVolume;//[Offset: 0x570, Size: 0xc]
	int CurrentIndexInLocatedCVC;//[Offset: 0x57c, Size: 0x4]
	Object*[] CollisionObjects;//[Offset: 0x580, Size: 0x10]
	bool bDrawDynamicAABBTreeCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a1, Size: 0x1]
	bool bDrawCollisionVolumeCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a2, Size: 0x1]
	bool bDrawExtendedCollisionVolumeCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a3, Size: 0x1]
	bool bDrawPlayerCollisionVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a4, Size: 0x1]
	bool bDrawDebugCollisionVolumeWithCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a5, Size: 0x1]
	bool bFixedDrawCameraCollisionVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a6, Size: 0x1]
	IntVector DebugCollisionVolume;//[Offset: 0x5a8, Size: 0xc]
	int DebugCollisionVolumeIdx;//[Offset: 0x5b4, Size: 0x4]
	int DebugCollisionPrimitiveIndex;//[Offset: 0x5b8, Size: 0x4]
	int DrawCollisionVolumeCacheScope;//[Offset: 0x5bc, Size: 0x4]
	IntVector CollsionCacheOrigin;//[Offset: 0x5c0, Size: 0xc]
	int MapSize;//[Offset: 0x5cc, Size: 0x4]
	int CollisionVolumeDim;//[Offset: 0x5d0, Size: 0x4]
	Vector VolumeExtenedAABB;//[Offset: 0x5d4, Size: 0xc]
	<int,int> CVCPrimitiveCounterMap;//[Offset: 0x5e0, Size: 0x50]
	int MaxPrimitiveNum;//[Offset: 0x630, Size: 0x4]
	int MinPrimitiveNum;//[Offset: 0x634, Size: 0x4]
	int AveragePrimitiveNum;//[Offset: 0x638, Size: 0x4]
	int TotalPrimitiveNum;//[Offset: 0x63c, Size: 0x4]
	int TotalCollisionVolumeNum;//[Offset: 0x640, Size: 0x4]
	float BuildTime;//[Offset: 0x644, Size: 0x4]
	bool bDrawSpawnVolumePoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e8, Size: 0x1]
	float DrawSpawnVolumeRange;//[Offset: 0x6ec, Size: 0x4]
	float SpawnVolumeMemory;//[Offset: 0x6f0, Size: 0x4]
	float DebugFullMapAiWayPointSightGridSize;//[Offset: 0x6f4, Size: 0x4]
	float DebugFullMapAiWayPointSightLen;//[Offset: 0x6f8, Size: 0x4]
	float DebugFullMapAiWayPointSightAngle;//[Offset: 0x6fc, Size: 0x4]
	float DebugFullMapAiWayPointSightNeiOffest;//[Offset: 0x700, Size: 0x4]
	int DebugFullMapAiWayPointSightNotBlockCount;//[Offset: 0x704, Size: 0x4]
	int DebugFullMapAiWayPointSightNotBlockSuccessCount;//[Offset: 0x708, Size: 0x4]
	float DebugFullMapAiWayPointSightNotBlockSuccessPercent;//[Offset: 0x70c, Size: 0x4]
	<int> DebugWapPointIndexs;//[Offset: 0x710, Size: 0x50]
	int DebugWayAngleDividCount;//[Offset: 0x760, Size: 0x4]
	ArkMapToolDebugInfo DebugInfo;//[Offset: 0x768, Size: 0x40]
	ArkNavLinkComponent* CachedNavLinkComponent;//[Offset: 0x7a8, Size: 0x8]
	ArkMapAIInfoRenderingComponent* EditorRenderComp;//[Offset: 0x7d8, Size: 0x8]
	void TestFullMapWayPointSight();// 0x2833010
	void ShowPolyModifiers();// 0xae2270
	void SaveCollisionDistributionToFile();// 0xae2270
	void RemoveLinks();// 0x2832e40
	void ReLocateCollisionCacheVolume();// 0xae2270
	void RefreshCollisionCacheView();// 0xae2270
	void PreCollisionCacheVolume();// 0xae2270
	void PostNavBuild();// 0xae2270
	void NextCollisionCacheVolume();// 0xae2270
	void GenLinks();// 0x2832bf0
	void DebugLookatArea();// 0x2832bd0

--------------------------------
Class: ArkMapObstacleEdgeRaw
	Vector CenterLocation;//[Offset: 0x0, Size: 0xc]
	Vector HorizontalTangent;//[Offset: 0xc, Size: 0xc]
	Vector VerticalTangent;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: ArkMapCoverInfo
	Vector CenterLocation;//[Offset: 0x0, Size: 0xc]
	Vector HorizontalTangent;//[Offset: 0xc, Size: 0xc]
	Vector VerticalTangent;//[Offset: 0x18, Size: 0xc]
	float Height;//[Offset: 0x24, Size: 0x4]
	Actor* CoverActor;//[Offset: 0x28, Size: 0x8]
	bool TestedCover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	Vector PolyCenter;//[Offset: 0x34, Size: 0xc]
	Vector ShootPos;//[Offset: 0x40, Size: 0xc]
	byte CoverType;//[Offset: 0x4c, Size: 0x1]
	bool IsHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	bool HasLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 0x1]
	bool HasRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f, Size: 0x1]
	Vector LeftShootPos;//[Offset: 0x50, Size: 0xc]
	Vector RightShootPos;//[Offset: 0x5c, Size: 0xc]
	int[] WeakCovers;//[Offset: 0x68, Size: 0x10]
	Vector[] WeakPos;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: ArkMapRoomArea
	Vector Center;//[Offset: 0x0, Size: 0xc]
	Vector Roof;//[Offset: 0xc, Size: 0xc]
	int Floor;//[Offset: 0x18, Size: 0x4]
	bool HasDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool HasUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]

--------------------------------
Class: ArkPolyModifierInfo
	OwnedPolys(UInt64Property)[] OwnedPolys;//[Offset: 0x0, Size: 0x10]
	int[] OwnedTiles;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: CollisionCacheBitMapColorConfig
	int MaxCollisionNum;//[Offset: 0x0, Size: 0x4]
	Color Color;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ArkMapToolDebugInfo

--------------------------------
Class: ArkNavLinkComponent.NavRelevantComponent.ActorComponent.Object
	ArkNavLink[] PointLinks;//[Offset: 0x218, Size: 0x10]
	GameplayTagContainer UserBlackList;//[Offset: 0x228, Size: 0x20]
	bool bIgnoreHeightLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	<FString,ArkNavLinkBlockerInfo> LinkBlockerDict;//[Offset: 0x250, Size: 0x50]
	FString DebugLinkIndex;//[Offset: 0x2f0, Size: 0x10]
	ArkNavLink DebugPointLink;//[Offset: 0x300, Size: 0x68]
	bool bGenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1]
	UInt32Property NavLinkUserId;//[Size: 0x4]

--------------------------------
Class: NavRelevantComponent.ActorComponent.Object
	bool bAttachToOwnersRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x204, Size: 0x1]
	Object* CachedNavParent;//[Offset: 0x208, Size: 0x8]
	void SetNavigationRelevancy(bool bRelevant);// 0x4da4e30

--------------------------------
Class: ArkNavLink.NavigationLink.NavigationLinkBase
	Vector CrossEdgeL;//[Offset: 0x48, Size: 0xc]
	Vector CrossEdgeR;//[Offset: 0x54, Size: 0xc]
	float PeakFromHigherEnd;//[Offset: 0x60, Size: 0x4]
	bool bHasGap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64, Size: 0x1]
	bool bAllowPathReviseLeft;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x64, Size: 0x1]
	bool bAllowPathReviseRight;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x64, Size: 0x1]

--------------------------------
Class: NavigationLink.NavigationLinkBase
	Vector Left;//[Offset: 0x30, Size: 0xc]
	Vector Right;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: NavigationLinkBase
	float LeftProjectHeight;//[Offset: 0x0, Size: 0x4]
	float MaxFallDownLength;//[Offset: 0x4, Size: 0x4]
	float SnapRadius;//[Offset: 0xc, Size: 0x4]
	float SnapHeight;//[Offset: 0x10, Size: 0x4]
	NavAgentSelector SupportedAgents;//[Offset: 0x14, Size: 0x4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x19, Size: 0x1]
	byte Direction;//[Offset: 0x1c, Size: 0x1]
	bool bUseSnapHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]
	bool bSnapToCheapestArea;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag0;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag1;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag2;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag3;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag4;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag5;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag6;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e, Size: 0x1]
	bool bCustomFlag7;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e, Size: 0x1]
	class NavAreaBase* AreaClass;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: ArkNavLinkBlockerInfo
	int[] BlockingLinks;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ArkMapAIInfoRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ArkStaticActor.Actor.Object
	class StaticActorOptProcessor[] ActorOptProcessorClasses;//[Offset: 0x2f8, Size: 0x10]
	StaticActorOptProcessor*[] ActorOptProcessors;//[Offset: 0x308, Size: 0x10]
	void ReceiveOnLeaveCameraSight();// 0x305c9c0
	void ReceiveOnEnterCameraSight();// 0x305c9c0
	void OnResetData_BP();// 0x305c9c0
	void OnActuallyEndPlay_BP();// 0x305c9c0
	void OnActuallyBeginPlay_BP();// 0x305c9c0

--------------------------------
Class: StaticActorOptProcessor.Object

--------------------------------
Class: ArkScoreNode.ArkInteractiveActor.ArkStaticActor.Actor.Object
	float InProgressPerSec;//[Offset: 0x580, Size: 0x4]
	float DeProgressPerSec;//[Offset: 0x584, Size: 0x4]
	FName[] LootNames;//[Offset: 0x588, Size: 0x10]
	enum State;//[Offset: 0x598, Size: 0x1]
	float Progress;//[Offset: 0x59c, Size: 0x4]
	float Radius;//[Offset: 0x5b0, Size: 0x4]
	float ActivatedFrequency;//[Offset: 0x5b4, Size: 0x4]
	ArkSoftParticleSystemComponent* RangePSC;//[Offset: 0x5b8, Size: 0x8]
	ArkSoftParticleSystemComponent* ActivePSC;//[Offset: 0x5c0, Size: 0x8]
	delegate ScoreNodeStateChanged;//[Offset: 0x5c8, Size: 0x10]
	void OnStateChanged(enum NewState);// 0x305c9c0
	void OnRep_State();// 0x293ee50
	void OnRep_Progress();// 0xae2270
	float IsIncreasingProgress();// 0x293ed50
	enum GetState();// 0x293ed30
	float GetProgress();// 0x293ea90

--------------------------------
Class: ArkInteractiveActor.ArkStaticActor.Actor.Object
	delegate OnTryBeginInteractingDelegate;//[Offset: 0x398, Size: 0x10]
	delegate OnTryEndInteractingDelegate;//[Offset: 0x3a8, Size: 0x10]
	delegate OnInteractionStartedDelegate;//[Offset: 0x3b8, Size: 0x10]
	delegate OnInteractionStoppedDelegate;//[Offset: 0x3c8, Size: 0x10]
	delegate OnServerGiveInteractToDelegate;//[Offset: 0x3d8, Size: 0x10]
	delegate OnClientGiveInteractToDelegate;//[Offset: 0x3e8, Size: 0x10]
	FName InteractiveObjectName;//[Offset: 0x3f8, Size: 0x8]
	FText InteractiveTitle;//[Offset: 0x400, Size: 0x18]
	FText InteractiveDesc;//[Offset: 0x418, Size: 0x18]
	PaperSprite* HeadImage;//[Offset: 0x430, Size: 0x28]
	FText Instructions;//[Offset: 0x458, Size: 0x18]
	FName PlayerStartName;//[Offset: 0x470, Size: 0x8]
	LinearColor DefaultTitleColor;//[Offset: 0x478, Size: 0x10]
	StaticMesh* CrystalSealMesh;//[Offset: 0x488, Size: 0x28]
	FName SpecialObjTagID;//[Offset: 0x4b0, Size: 0x8]
	bool bSelfControlIndicatorRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 0x1]
	CapsuleComponent* CapsuleCollision;//[Offset: 0x4c0, Size: 0x8]
	ArrowComponent* CharacterArrow;//[Offset: 0x4c8, Size: 0x8]
	ArkSoftStaticMeshComponent* CrystalSealMeshComponent;//[Offset: 0x4d0, Size: 0x8]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 0x1]
	InteractedCharacterInfo[] CurrentCharactersInteractedBy;//[Offset: 0x4f8, Size: 0x10]
	InteractionRepAnimInfo RepAnimSequenceInfo;//[Offset: 0x508, Size: 0x30]
	Object*[] InteractionBlockers;//[Offset: 0x540, Size: 0x10]
	ArkCharacterBase* LastGivenTo;//[Offset: 0x570, Size: 0x8]
	void SetNewIndicatorWrapVisible(bool bVisibleTmp);// 0x2808630
	void SetInteractiveObjectName(FName Name);// 0x2808250
	void SetInteractionBlocker(bool bShouldBlock, Object* Blocker);// 0x2808190
	void SetIndicatorHasRedPoint(bool bInHasRedPoint);// 0x2808110
	void RemoveFromLocalSpecialInteraciveList();// 0x28080f0
	void OnTryEndInteractingBy(ArkCharacterBase* InteractedBy, enum InteractionType);// 0x305c9c0
	void OnTryBeginInteractingBy(ArkCharacterBase* InteractedBy, enum InteractionType);// 0x305c9c0
	void OnServerGiveInteractTo(ArkCharacterBase* InteractedBy, enum InteractionType);// 0x305c9c0
	void OnRep_RepAnimSequenceInfo();// 0x28080d0
	void OnInteractionStoppedBy(ArkCharacterBase* InteractedBy, enum InteractionType, float RemainingTime, bool bCancelled);// 0x305c9c0
	void OnInteractionStartedBy(ArkCharacterBase* InteractedBy, enum InteractionType, float Duration);// 0x305c9c0
	void OnInteractionComplete();// 0x305c9c0
	void OnInteractionCancelled();// 0x305c9c0
	void OnInteractionBlockersChange_BP(out const Object*[] Blockers);// 0x305c9c0
	void OnClientGiveInteractTo(ArkCharacterBase* InteractedBy, enum InteractionType);// 0x305c9c0
	bool IsNewIndicatorVisible();// 0x28080a0
	bool IsAvaliableInteractionType(enum InteractType);// 0x2807fe0
	enum InternalShouldShowInteractionInfo(ArkCharacterBase* InteractedBy, enum InteractionType);// 0x2807f10
	void InternalSetAnimationPitchingAlpha(float AlphaValue);// 0x2807e90
	void InternalPlaySingleAnimation(AnimSequenceBase* AnimRef, float PlayRate);// 0x2807dc0
	enum InternalCanBeInteractedBy(ArkCharacterBase* TestPawn, enum InteractionType);// 0x2807cf0
	void InteractionComplete();// 0x2807cd0
	void InteractionCancelled();// 0x2807cb0
	ChildActorComponent* GetNewIndicatorWrap();// 0x2807c80
	Vector GetIndicatorTargetLocation();// 0x2807c10
	bool GetIndicatorHasRedPoint();// 0x2807bf0
	FName GetHavenMapMarkerName();// 0x2807bb0
	void Deactivate();// 0x2807a50
	void ClearAvaliableInteractionType();// 0x2807a30
	void AddIntoLocalSpecialInteraciveList();// 0x2807840
	void AddAvaliableInteractionType(enum InteractType);// 0x2807640
	void Activate();// 0x2807620

--------------------------------
Class: PaperSprite.Object
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38, Size: 0x10]
	Vector2D BakedSourceUV;//[Offset: 0x48, Size: 0x8]
	Vector2D BakedSourceDimension;//[Offset: 0x50, Size: 0x8]
	Texture2D* BakedSourceTexture;//[Offset: 0x58, Size: 0x8]
	MaterialInterface* DefaultMaterial;//[Offset: 0x60, Size: 0x8]
	MaterialInterface* AlternateMaterial;//[Offset: 0x68, Size: 0x8]
	PaperSpriteSocket[] Sockets;//[Offset: 0x70, Size: 0x10]
	byte SpriteCollisionDomain;//[Offset: 0x80, Size: 0x1]
	float PixelsPerUnrealUnit;//[Offset: 0x84, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0x88, Size: 0x8]
	int AlternateMaterialSplitIndex;//[Offset: 0x90, Size: 0x4]
	Vector4[] BakedRenderData;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: PaperSpriteSocket
	Transform LocalTransform;//[Offset: 0x0, Size: 0x30]
	FName SocketName;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: ArrowComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ArrowColor;//[Offset: 0x670, Size: 0x4]
	float ArrowSize;//[Offset: 0x674, Size: 0x4]
	float ScreenSize;//[Offset: 0x678, Size: 0x4]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x67c, Size: 0x1]
	bool bTreatAsASprite;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x67c, Size: 0x1]
	void SetArrowColor(LinearColor NewColor);// 0x4b54b80

--------------------------------
Class: ArkSoftStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	StaticMesh* SoftStaticMesh;//[Offset: 0x7f8, Size: 0x28]
	MaterialInterface*[] SoftOverrideMaterials;//[Offset: 0x820, Size: 0x10]
	StaticPhysicsAsset* StaticPhysicsAsset;//[Offset: 0x830, Size: 0x8]
	int NumMaterials;//[Offset: 0x840, Size: 0x4]
	delegate OnAsyncLoadFinishedDelegate;//[Offset: 0x848, Size: 0x10]
	BoxSphereBounds SoftBounds;//[Offset: 0x87c, Size: 0x1c]
	SceneComponent* CustomBoundComp;//[Offset: 0x8a0, Size: 0x8]
	<int,MaterialInterface*> RuntimeOverrideSoftMaterials;//[Offset: 0x8a8, Size: 0x50]
	<int,MaterialInterface*> RuntimeOverrideSoftMaterialsCache;//[Offset: 0x8f8, Size: 0x50]
	void SetUsingCustomBound(bool bNewUsing, SceneComponent* TargetComp);// 0x2968eb0
	void SetRunTimeSoftMaterialsByArray(out const MaterialInterface*[] SkinMaterialConfig);// 0x2968450
	void SetRunTimeSoftMaterials(out const <int,MaterialInterface*> SkinMaterialConfig);// 0x29681a0
	void SetRunTimeSoftMaterial(MaterialInterface* SkinMaterial);// 0x2967e80
	void RevertMaterials();// 0x2967750
	void BP_SetSoftStaticMesh(StaticMesh* InStaticMesh);// 0x2967170

--------------------------------
Class: InteractedCharacterInfo
	ArkCharacterBase* CharacterPtr;//[Offset: 0x0, Size: 0x8]
	enum InteractionType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: InteractionRepAnimInfo
	bool bInitiator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Object* InteractiveTarget;//[Offset: 0x8, Size: 0x8]
	enum InteractionType;//[Offset: 0x10, Size: 0x1]
	AnimSequenceBase* AnimSequenceRef;//[Offset: 0x18, Size: 0x8]
	float PlayRate;//[Offset: 0x20, Size: 0x4]
	float MaxPitchingHeight;//[Offset: 0x24, Size: 0x4]
	float MinPitchingHeight;//[Offset: 0x28, Size: 0x4]
	bool IsStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	bool ForcePlayBit;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: ArkSafeHouseVolume.Volume.Brush.Actor.Object
	bool bSafeHouseOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	bool bSafeHouseDected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x391, Size: 0x1]
	bool bSafeHouseEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x392, Size: 0x1]
	void SetSafeHouseOpendValue();// 0x2933720
	void SetEnable(bool InEnable);// 0x2933600
	void OnRep_SafeHouseOpened();// 0xae2270
	void OnRep_SafeHouseEnable();// 0x29333d0
	void OnRep_SafeHouseDected();// 0x29333d0
	bool IsEnable();// 0x2932eb0

--------------------------------
Class: ArkPickUp.ArkInteractiveActor.ArkStaticActor.Actor.Object
	float BeginDestroyTimeInSeconds;//[Offset: 0x5c4, Size: 0x4]
	float AutoDestroyRange;//[Offset: 0x5c8, Size: 0x4]
	delegate OnItemDisappear;//[Offset: 0x5d0, Size: 0x10]
	CurveFloat* PickUpFlySpeedCurve;//[Offset: 0x5e0, Size: 0x8]
	CurveFloat* PickUpFlyScaleCurve;//[Offset: 0x5e8, Size: 0x8]
	float lerpSpeed;//[Offset: 0x5f0, Size: 0x4]
	CurveVector* ScaleCurve;//[Offset: 0x5f8, Size: 0x8]
	AkAudioEvent* PickUpSoundEvent;//[Offset: 0x608, Size: 0x28]
	AkAudioEvent* DropSoundEvent;//[Offset: 0x630, Size: 0x28]
	bool bIsComponentRelevantForNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 0x1]
	float BreakDownInfoLocationOffsetZ;//[Offset: 0x680, Size: 0x4]
	ArkPickUpSpawnerBase* PickupSpawner;//[Offset: 0x688, Size: 0x8]
	bool bShouldDestroyAfterPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x690, Size: 0x1]
	bool bOptimizedVisiable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x691, Size: 0x1]
	ArkWidgetComponentWithPool* PlayerDetectedWidgetComponent;//[Offset: 0x698, Size: 0x8]
	ArkSafeHouseVolume* SafeHouseVolume;//[Offset: 0x6a0, Size: 0x8]
	bool bIsImportantPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a8, Size: 0x1]
	bool bNoNeedPlaySpawnAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 0x1]
	Vector AnimStartPosition;//[Offset: 0x6f8, Size: 0xc]
	ArkSoftParticleSystemComponent* PickupPSC;//[Offset: 0x708, Size: 0x8]
	ArkSoftParticleSystemComponentWithPool* AnimParticleSysComp;//[Offset: 0x710, Size: 0x8]
	ParticleSystem* RespawningFX;//[Offset: 0x718, Size: 0x28]
	ParticleSystem* ActiveFX;//[Offset: 0x740, Size: 0x28]
	int CullDistance;//[Offset: 0x774, Size: 0x4]
	class ArkInteractionIndicator* IndicatorClass;//[Offset: 0x778, Size: 0x8]
	bool bShouldPlayIndicatorEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x780, Size: 0x1]
	ArkInteractionIndicator* Indicator;//[Offset: 0x788, Size: 0x8]
	enum SkeletalMeshOptimizeTickOption;//[Offset: 0x791, Size: 0x1]
	bool bAffectedByCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x838, Size: 0x1]
	bool bShow3DEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83b, Size: 0x1]
	class ArkPickUp3DEffectBase* PickUp3DEffectClass;//[Offset: 0x840, Size: 0x8]
	class ArkPickUp3DEffectBase* PickUp3DEffectClass_SPGT;//[Offset: 0x848, Size: 0x8]
	ArkPickUp3DEffectBase* PickUp3DEffect;//[Offset: 0x850, Size: 0x8]
	enum PickUpLevel;//[Offset: 0x858, Size: 0x1]
	CurveVector* TransformCurve;//[Offset: 0x860, Size: 0x8]
	ParticleSystem* MiddleFlyingEffectClass;//[Offset: 0x868, Size: 0x28]
	ParticleSystem* SeniorFlyingEffectClass;//[Offset: 0x890, Size: 0x28]
	ParticleSystem* MiddleSpawnEffectClass;//[Offset: 0x8b8, Size: 0x28]
	ParticleSystem* SeniorSpawnEffectClass;//[Offset: 0x8e0, Size: 0x28]
	bool bPickUpWithAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x908, Size: 0x1]
	bool bMultipleAutoPickItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x909, Size: 0x1]
	float MultiplePickDistance;//[Offset: 0x90c, Size: 0x4]
	bool bAutoPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x910, Size: 0x1]
	bool bMultiplePickAffectStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x911, Size: 0x1]
	class ArkScoreFlyEffect* FlyEffectRef;//[Offset: 0x918, Size: 0x8]
	float AutoPickUpRange;//[Offset: 0x920, Size: 0x4]
	ArkPlayer* PickMultipleEffectPlayer;//[Offset: 0x928, Size: 0x8]
	static ArkPickUp* SpawnPickUp(const Object* WorldContex, class ArkPickUp PickUpClass, out const Vector StartLocation, out const Rotator DropRotation, float TraceExtent, Vector SpawnerPosition, bool needPlaySpawnAnim, bool bDeferredSpawn);// 0x2898200
	void SetAllPickUpMeshMaterialParam(FName ParamName, float InValue);// 0x28969f0
	void SetAllPickUpMeshMaterial(MeshComponent* InMesh, MaterialInstance* InMaterial);// 0x2896920
	void RemoveIndicatorTarget();// 0x28942d0
	void OnRespawnEvent();// 0x305c9c0
	void OnRep_PickMultipleEffectPlayer();// 0x2893ac0
	void OnRep_AnimStartPosition();// 0x28938a0
	void OnPickedUpEvent(ArkCharacterBase* InteractedBy, enum InteractionType);// 0x305c9c0
	void OnExitCinematic(int CinematicParams);// 0x2893050
	void OnEnterCinematic(int CinematicParams);// 0x2892e00
	enum GetPickUpType();// 0x2753200
	bool CheckAutoPickUp(ArkPlayer* InPlayer);// 0x288ed20

--------------------------------
Class: ArkPickUpSpawnerBase.NavigationObjectBase.Actor.Object
	bool ShouldSpawnAtBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	ArkPickUp*[] SpawnedItems;//[Offset: 0x310, Size: 0x10]
	MaterialBillboardComponent* GetAlwaysVisibleSprite();// 0xb72780
	BillboardComponent* BPGetGoodSprite();// 0xb72780
	CapsuleComponent* BPGetCapsuleComponent();// 0x282a640
	BillboardComponent* BPGetBadSprite();// 0xb72780

--------------------------------
Class: MaterialBillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bTreatAsASprite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x670, Size: 0x1]
	MaterialSpriteElement[] Elements;//[Offset: 0x678, Size: 0x10]
	void SetElements(out const MaterialSpriteElement[] NewElements);// 0x4c29be0
	void AddElement(MaterialInterface* Material, CurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, CurveFloat* DistanceToSizeCurve);// 0x4c29a10

--------------------------------
Class: MaterialSpriteElement
	MaterialInterface* Material;//[Offset: 0x0, Size: 0x8]
	CurveFloat* DistanceToOpacityCurve;//[Offset: 0x8, Size: 0x8]
	bool bSizeIsInScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	float BaseSizeX;//[Offset: 0x14, Size: 0x4]
	float BaseSizeY;//[Offset: 0x18, Size: 0x4]
	CurveFloat* DistanceToSizeCurve;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x670, Size: 0x8]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x678, Size: 0x1]
	float ScreenSize;//[Offset: 0x67c, Size: 0x4]
	float U;//[Offset: 0x680, Size: 0x4]
	float UL;//[Offset: 0x684, Size: 0x4]
	float V;//[Offset: 0x688, Size: 0x4]
	float VL;//[Offset: 0x68c, Size: 0x4]
	LinearColor Color;//[Offset: 0x690, Size: 0x10]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x4b5d010
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x4b5ce90
	void SetSprite(Texture2D* NewSprite);// 0x4b5ce00

--------------------------------
Class: ArkWidgetComponentWithPool.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x750, Size: 0x1]
	enum TimingPolicy;//[Offset: 0x751, Size: 0x1]
	class UserWidget* WidgetClass;//[Offset: 0x758, Size: 0x8]
	IntPoint DrawSize;//[Offset: 0x760, Size: 0x8]
	bool bUpdateCenterPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x768, Size: 0x1]
	bool bUseCustomZOrder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x769, Size: 0x1]
	float CustomZOrder;//[Offset: 0x76c, Size: 0x4]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x770, Size: 0x1]
	bool bAutoRedrawOnCultureChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x771, Size: 0x1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x772, Size: 0x1]
	float RedrawTime;//[Offset: 0x774, Size: 0x4]
	IntPoint CurrentDrawSize;//[Offset: 0x780, Size: 0x8]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x788, Size: 0x1]
	Vector2D Pivot;//[Offset: 0x78c, Size: 0x8]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x794, Size: 0x1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x795, Size: 0x1]
	enum WindowVisibility;//[Offset: 0x796, Size: 0x1]
	bool bApplyGammaCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x797, Size: 0x1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x798, Size: 0x8]
	LinearColor BackgroundColor;//[Offset: 0x7a0, Size: 0x10]
	LinearColor TintColorAndOpacity;//[Offset: 0x7b0, Size: 0x10]
	float OpacityFromTexture;//[Offset: 0x7c0, Size: 0x4]
	enum BlendMode;//[Offset: 0x7c4, Size: 0x1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c5, Size: 0x1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c6, Size: 0x1]
	UserWidget* Widget;//[Offset: 0x7c8, Size: 0x8]
	BodySetup* BodySetup;//[Offset: 0x7f0, Size: 0x8]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x7f8, Size: 0x8]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x800, Size: 0x8]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x808, Size: 0x8]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x810, Size: 0x8]
	MaterialInterface* MaskedMaterial;//[Offset: 0x818, Size: 0x8]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x820, Size: 0x8]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x828, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x830, Size: 0x8]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x838, Size: 0x1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x839, Size: 0x1]
	FName SharedLayerName;//[Offset: 0x83c, Size: 0x8]
	int LayerZOrder;//[Offset: 0x844, Size: 0x4]
	enum GeometryMode;//[Offset: 0x848, Size: 0x1]
	float CylinderArcAngle;//[Offset: 0x84c, Size: 0x4]
	void SetWindowVisibility(enum InVisibility);// 0x416ef40
	void SetWindowFocusable(bool bInWindowFocusable);// 0x416eeb0
	void SetWidgetSpace(enum NewSpace);// 0x416ee30
	void SetWidget(UserWidget* Widget);// 0x416eda0
	void SetTwoSided(const bool bWantTwoSided);// 0x416ed10
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x416ec90
	void SetTickWhenOffscreen(const bool bWantTickWhenOffscreen);// 0x416ec10
	void SetRedrawTime(float InRedrawTime);// 0x416eb90
	void SetPivot(out const Vector2D InPivot);// 0x416eb00
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x416ea80
	void SetManuallyRedraw(bool bUseManualRedraw);// 0x416e9f0
	void SetGeometryMode(enum InGeometryMode);// 0x416e970
	void SetDrawSize(Vector2D Size);// 0x416e870
	void SetDrawAtDesiredSize(bool bInDrawAtDesiredSize);// 0x416e7f0
	void SetCylinderArcAngle(const float InCylinderArcAngle);// 0x416e770
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x416e610
	void RequestRedraw();// 0x416e430
	void HandleCultureChanged();// 0x416dcb0
	enum GetWindowVisiblility();// 0x416dc90
	bool GetWindowFocusable();// 0x416dc70
	enum GetWidgetSpace();// 0x416dc50
	UserWidget* GetUserWidgetObject();// 0x416da50
	bool GetTwoSided();// 0x416da30
	bool GetTickWhenOffscreen();// 0x416da10
	TextureRenderTarget2D* GetRenderTarget();// 0x416d9e0
	float GetRedrawTime();// 0x416d9c0
	Vector2D GetPivot();// 0x416d8e0
	LocalPlayer* GetOwnerPlayer();// 0x416d8b0
	MaterialInstanceDynamic* GetMaterialInstance();// 0x416d690
	bool GetManuallyRedraw();// 0x416d670
	enum GetGeometryMode();// 0x416d5a0
	Vector2D GetDrawSize();// 0x416d560
	bool GetDrawAtDesiredSize();// 0x416d540
	float GetCylinderArcAngle();// 0x416d520
	Vector2D GetCurrentDrawSize();// 0x416d4e0

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0x180, Size: 0x4]
	int SizeY;//[Offset: 0x184, Size: 0x4]
	LinearColor ClearColor;//[Offset: 0x188, Size: 0x10]
	byte AddressX;//[Offset: 0x198, Size: 0x1]
	byte AddressY;//[Offset: 0x199, Size: 0x1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19a, Size: 0x1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19a, Size: 0x1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19a, Size: 0x1]
	byte RenderTargetFormat;//[Offset: 0x19b, Size: 0x1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19c, Size: 0x1]
	byte MipsSamplerFilter;//[Offset: 0x19d, Size: 0x1]
	byte MipsAddressU;//[Offset: 0x19e, Size: 0x1]
	byte MipsAddressV;//[Offset: 0x19f, Size: 0x1]
	byte OverrideFormat;//[Offset: 0x1a0, Size: 0x1]

--------------------------------
Class: TextureRenderTarget.Texture.StreamableRenderAsset.Object
	float TargetGamma;//[Offset: 0x178, Size: 0x4]

--------------------------------
Class: ArkInteractionIndicator.Actor.Object
	float DistanceConfig;//[Offset: 0x318, Size: 0x4]
	CurveVector* QualityParticleDistanceScaleCurve;//[Offset: 0x328, Size: 0x8]
	ArkInteractiveActor* OwnerPickUp;//[Offset: 0x330, Size: 0x8]
	ArkSoftParticleSystemComponent* ParticleSystem;//[Offset: 0x338, Size: 0x8]
	int IndicatorQuality;//[Offset: 0x340, Size: 0x4]
	bool bAffectedByCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 0x1]
	<int,float> QualityToAlpha;//[Offset: 0x348, Size: 0x50]
	void ShowOutline();// 0x305c9c0
	void SetParticleActive(bool bActive);// 0x2801bb0
	void ReceiveOnReturnToPool();// 0x305c9c0
	void ReceiveOnPickFromPool();// 0x305c9c0
	void OnIndicatorQualityChanged();// 0x305c9c0
	void OnExitCinematic(int CinematicParams);// 0x2801480
	void OnEnterCinematic(int CinematicParams);// 0x2801400
	MeshComponent*[] GetOwnerPickUpMeshes();// 0x28010d0
	int GetIndicatorQuality();// 0x2800c70
	void ClearOutline();// 0x305c9c0
	void BP_MakeTransformDirty(ArkPickUpLineParticleComponent* inParticle);// 0x27ffef0

--------------------------------
Class: ArkPickUpLineParticleComponent.NextLineParticleComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	CurveFloat* DistanceScaleCurve;//[Offset: 0x6b8, Size: 0x8]

--------------------------------
Class: NextLineParticleComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum ShapeType;//[Offset: 0x678, Size: 0x1]
	float CirceRadius;//[Offset: 0x67c, Size: 0x4]
	int CircleSegments;//[Offset: 0x680, Size: 0x4]
	Vector LineStart;//[Offset: 0x684, Size: 0xc]
	Vector LineEnd;//[Offset: 0x690, Size: 0xc]
	LinearColor LineColor;//[Offset: 0x69c, Size: 0x10]
	float Thickness;//[Offset: 0x6ac, Size: 0x4]
	float LinePow;//[Offset: 0x6b0, Size: 0x4]

--------------------------------
Class: ArkPickUp3DEffectBase.Actor.Object
	void ReceiveOnReturnToPool();// 0x305c9c0
	void ReceiveOnPickFromPool();// 0x305c9c0
	void ReceiveOnFadeOut();// 0x305c9c0
	void ReceiveOnFadeIn();// 0x305c9c0
	void FadeOut();// 0x2890430
	void FadeIn();// 0x2890410

--------------------------------
Class: ArkScoreFlyEffect.Actor.Object
	ArkCharacterBase* TargetPickedPlayer;//[Offset: 0x308, Size: 0x8]
	SkeletalMeshComponent* BagMesh;//[Offset: 0x310, Size: 0x8]
	bool bUseArm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]
	FName BagSocketName;//[Offset: 0x34c, Size: 0x8]
	float DelayDestoryTime;//[Offset: 0x354, Size: 0x4]
	FName ParticleSocketName;//[Offset: 0x358, Size: 0x8]
	ParticleSystem* AttachBagParticleRef;//[Offset: 0x360, Size: 0x28]
	ParticleSystem* AttachParticleRef;//[Offset: 0x388, Size: 0x28]
	float MiniBezierVal;//[Offset: 0x3b0, Size: 0x4]
	float MaxBezierVal;//[Offset: 0x3b4, Size: 0x4]
	float MoveSpeed;//[Offset: 0x3b8, Size: 0x4]
	float BezierXRate;//[Offset: 0x3bc, Size: 0x4]
	float BezierYRate;//[Offset: 0x3c0, Size: 0x4]
	float BezierHeightVal;//[Offset: 0x3c4, Size: 0x4]
	float BezierHeightestTime;//[Offset: 0x3c8, Size: 0x4]
	float RotateDegree;//[Offset: 0x3cc, Size: 0x4]
	bool bOpenRandomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 0x1]
	float MinBezierXRate;//[Offset: 0x3e0, Size: 0x4]
	float MaxBezierXRate;//[Offset: 0x3e4, Size: 0x4]
	float MinBezierYRate;//[Offset: 0x3e8, Size: 0x4]
	float MaxBezierYRate;//[Offset: 0x3ec, Size: 0x4]
	float MinBezierHeightVal;//[Offset: 0x3f0, Size: 0x4]
	float MaxBezierHeightVal;//[Offset: 0x3f4, Size: 0x4]
	float MinBezierHeightestTime;//[Offset: 0x3f8, Size: 0x4]
	float MaxBezierHeightestTime;//[Offset: 0x3fc, Size: 0x4]
	void OnHandleShowOrHiddenEffect(bool bShow);// 0x305c9c0
	void OnHandleDestorySelf();// 0x293ee30

--------------------------------
Class: ArkNewDarkErosionManager.Actor.Object
	DataTable* DarkErosionDataTable;//[Offset: 0x2e8, Size: 0x8]
	DataTable* DarkErosionMapNumDataTable;//[Offset: 0x2f0, Size: 0x8]
	DataTable* DynamicMazeLevelNames;//[Offset: 0x2f8, Size: 0x8]
	int LoadDynamicMazeLevelNum;//[Offset: 0x300, Size: 0x4]
	float DelayAddTeammateIndicatorTime;//[Offset: 0x304, Size: 0x4]
	Actor*[] AllSourceArray;//[Offset: 0x3b0, Size: 0x10]
	int TestMapMode;//[Offset: 0x410, Size: 0x4]
	ArkAllPlayersNewDarkErosionPortakGateMap[] AllPlayersNewDarkErosionPortakGateMap;//[Offset: 0x428, Size: 0x10]
	void SpawnDarkErosionByTier();// 0x284f740
	ArkNewDarkErosionBase* SpawnDarkErosionByRowName(FName RowName, Transform SpawnTransform, bool bStartFromReady, bool bIsDTMap);// 0x284f590
	void SpawnDarkErosionByLocation(Transform SpawnTransform, bool bStartFromReady, bool bIsDTMap);// 0x284f410
	void OnRep_AllPlayersNewDarkErosionPortakGateMapChanged();// 0x284f250
	void OnQuestFinish(int questID, bool bSucceed);// 0x284f190
	void OnPlayerUnRegistered(ArkCharacterBase* Character);// 0x284f090
	void OnPlayerRegistered(ArkCharacterBase* Character);// 0x284ef90
	void OnLoadStreamLevelFinished(int Linkage);// 0x284ed60
	void OnLoadStreamLevelByCommandFinished(int Linkage);// 0x12c2b10
	void OnGameFlowChanged(enum LastMode, enum NewMode, float StartTime);// 0x284ea10
	void LoadAllDynamicMaze();// 0x284e860

--------------------------------
Class: ArkNewDarkErosionBase.Actor.Object
	float TriggerActiveDis;//[Offset: 0x2e8, Size: 0x4]
	float TriggerIdleDis;//[Offset: 0x2ec, Size: 0x4]
	float MaximumIdleTime;//[Offset: 0x2f0, Size: 0x4]
	float TickGapTime;//[Offset: 0x2f4, Size: 0x4]
	bool bNeedSpawnLootBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	class ArkNewDarkErosionLootBox* LootBoxBP;//[Offset: 0x300, Size: 0x8]
	FName[] LootNameList;//[Offset: 0x308, Size: 0x10]
	FName[] ShareableLootNameList;//[Offset: 0x318, Size: 0x10]
	bool bNeedAutoFailedWhenLevelFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	int DarkErosionQuestID;//[Offset: 0x32c, Size: 0x4]
	FText DarkErosionQuestTitle;//[Offset: 0x330, Size: 0x18]
	enum DarkErosionState;//[Offset: 0x348, Size: 0x1]
	int NewDarkErosionIndex;//[Offset: 0x36c, Size: 0x4]
	void SetCurrentShareableloot(ArkPlayer* Player, enum LootTier);// 0x284f350
	void PlayerSuccess();// 0x284f310
	void PlayerFailed();// 0x284f2f0
	void OnStateChange_BP(enum NewDarkErosionState);// 0x305c9c0
	void OnRep_DarkErosionState();// 0x284f290
	bool NeedAutoFailedWhenLevelFinish();// 0x2836530

--------------------------------
Class: ArkNewDarkErosionLootBox.ArkInteractiveActor.ArkStaticActor.Actor.Object
	bool bHasBeenInteracted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 0x1]
	float DelaySpawnLootTime;//[Offset: 0x594, Size: 0x4]
	FName[] LootNameList;//[Offset: 0x5a0, Size: 0x10]
	FName[] ShareableLootNameList;//[Offset: 0x5b0, Size: 0x10]
	ArkPickUp*[] AllSpawnedActors;//[Offset: 0x5c0, Size: 0x10]
	void SetBeenInteractedTrue();// 0x284f330
	void OnHandleSpawnedPickSuc(ArkPickUp* InPickUp, int InCount, FString InItemAttributes);// 0x284eb10
	void OnBoxInteract_BP();// 0x305c9c0

--------------------------------
Class: ArkAllPlayersNewDarkErosionPortakGateMap
	ArkPlayer* PortalPlayer;//[Offset: 0x0, Size: 0x8]
	ArkNewDarkErosionPortalGate* RecordPortalGate;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ArkNewDarkErosionPortalGate.ArkWrapGate.ArkInteractiveActor.ArkStaticActor.Actor.Object
	Actor* SpawnAIActor;//[Offset: 0x670, Size: 0x8]
	ArkNewDarkErosion_PickUpClear*[] PickUpClearArray;//[Offset: 0x678, Size: 0x10]
	delegate OnInteractNewDarkErosionPortalGate;//[Offset: 0x688, Size: 0x10]
	enum PortalGateState;//[Offset: 0x698, Size: 0x1]
	enum MapDataType;//[Offset: 0x699, Size: 0x1]
	bool bEntrance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69a, Size: 0x1]
	FString ExitTag;//[Offset: 0x6a0, Size: 0x10]
	FString EntranceTag;//[Offset: 0x6b0, Size: 0x10]
	float DelayTeleportTime;//[Offset: 0x6c0, Size: 0x4]
	FString[] PriorityMatchTagArray;//[Offset: 0x6c8, Size: 0x10]
	bool bNeedClientShowGate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d8, Size: 0x1]
	bool bClientAlreadyShowGate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d9, Size: 0x1]
	float PlayerTeleportInvincibleTime;//[Offset: 0x6dc, Size: 0x4]
	ArkNewDarkErosionPortalGate*[] OtherOutGates;//[Offset: 0x6e0, Size: 0x10]
	bool bTwoWayGate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0, Size: 0x1]
	bool bNeedChangeSkyWhenTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f1, Size: 0x1]
	void SetSpecialTagExitForbid_BP(bool bValid);// 0x305c9c0
	void SetClientPortalGateVisiablity(bool bVisiable);// 0x305c9c0
	void OnRep_PortalGateStateChange();// 0x284f2d0
	void OnRep_MapDataType();// 0x284f2b0
	void OnPortalStateChangeToReady_BP();// 0x305c9c0
	void OnPortalStateChangeToEnd_BP();// 0x305c9c0
	void OnPortalStateChangeToActive_BP(int questID, out const FText QuestTitle);// 0x305c9c0
	void OnPortalGateStateChange_BP(enum NewPortalGateState);// 0x305c9c0
	void OnInGateShowOnClient_BP();// 0x305c9c0
	void OnClientSwitchSky_BP(bool bIsOut);// 0x305c9c0
	int GetSwitchToSkyNum_BP();// 0x284e830
	enum GetPortalGateState();// 0x2775720
	bool GetNeedChangeSky();// 0x284e810
	float GetCapsuleCompHalfHeight();// 0x284e7e0
	void ClientSetSpecialTagExitForbid(bool bValid);// 0x284e750
	void ClientBeginEnterGate(ArkDarkErosionInfo DarkErosionInfo);// 0x284e6b0

--------------------------------
Class: ArkWrapGate.ArkInteractiveActor.ArkStaticActor.Actor.Object
	ArkWrapGate* PairGate;//[Offset: 0x5a8, Size: 0x8]
	ArkRoomActor* OwnerRoom;//[Offset: 0x5b0, Size: 0x8]
	bool bShowWrapPlayerIndicator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 0x1]
	ArkWrapGatePlayerState[] WrapGatePlayerStateArray;//[Offset: 0x5c0, Size: 0x10]
	float WrapCooldown;//[Offset: 0x5d0, Size: 0x4]
	ArkWrapGateLandingPointInfo[] LandingPointInfos;//[Offset: 0x5d8, Size: 0x10]
	int PlayWrapExitTimes;//[Offset: 0x5e8, Size: 0x4]
	FString[] PlayerNavIndicatorShowArray;//[Offset: 0x660, Size: 0x10]
	void UpdateWrapPlayerIndicatorTarget(int SocketIndex, WrapPlayerIndicatorSocket* IndicatorSocket);// 0x29db6b0
	void ReleaseLandingPoint(int PointIndex, bool bRelease);// 0x29daf60
	void RegisterLandingPoint(Transform InPointTransform, FName InLevelSequenceName);// 0x29dae20
	void OnRep_WrapGatePlayerStateArray();// 0xca7aa0
	void OnRep_PlayWrapExitTimes();// 0x29dab60
	void OnRep_PlayerNavIndicatorShowArray();// 0x29dab80
	void OnPlayerEnterWrapGateSignature__DelegateSignature(ArkPlayer* InPlayer, ArkWrapGate* InGate);// 0x305c9c0
	void OnOwnerRoomGoalSucceed();// 0x29daaa0
	Rotator GetWrapRotation();// 0x305c9c0
	Vector GetWrapPosition();// 0x305c9c0
	SkeletalMeshComponent* GetSkeletalMeshComp_BP();// 0x305c9c0
	Vector GetIndicatorWorldLocation();// 0x305c9c0
	FString FormatPlayerNameString(ArkPlayer* InPlayer);// 0x305c9c0
	void ClientPlayWrapEnterSequence(ArkWrapEnterSequenceInfo SequenceInfo);// 0x29da140
	void BP_ShowNavIndicator(bool bShow);// 0x305c9c0
	void BP_PlayWrapEnterSequence();// 0x305c9c0
	void BP_PlayWarpExitSequence();// 0x305c9c0
	void BP_PlayPlayerPortalSequence(ArkPlayer* BindingActor, ArkWrapEnterSequenceInfo SequenceInfo);// 0x305c9c0
	void BP_PlayFakePortalSequence(ArkPlayer* BindingActor);// 0x305c9c0
	void BP_OnWrapPlayerStateUpdated();// 0x305c9c0

--------------------------------
Class: ArkNewDarkErosion_PickUpClear.Actor.Object
	ArkPickUp*[] MarkedPickUps;//[Offset: 0x2e8, Size: 0x10]
	BoxComponent* BoxComp;//[Offset: 0x2f8, Size: 0x8]
	void TryMarkPickUp(ArkPickUp* PickUpActor);// 0x305c9c0
	void ClearMarkedPickUp();// 0x305c9c0

--------------------------------
Class: ArkRoomActor.Actor.Object
	int RoomID;//[Offset: 0x300, Size: 0x4]
	<int,ArkAISpawnRuleCollectionMap> SpawnRuleCollectionMap;//[Offset: 0x308, Size: 0x50]
	ArkRoomRadarActorGroup[] RadarActorGroups;//[Offset: 0x358, Size: 0x10]
	ArkSpawnRule*[] CurrentRules;//[Offset: 0x368, Size: 0x10]
	ArkSpawnRule*[] ExecutedRules;//[Offset: 0x378, Size: 0x10]
	delegate NpcNumChangeSignature;//[Offset: 0x3e8, Size: 0x10]
	void SetActive(FName InActiveRuleCollection);// 0x107d1f0
	void RegisterCleanRoomTrigger(<FName,int> InCleanTargetAITypes);// 0x292f510
	void OnSpawnRuleExecuted(ArkSpawnRule* InSpawnRule, int SpawnWave, ArkNpc*[] InNPCArray);// 0x292f300
	void OnRoomGoalSucceed__DelegateSignature();// 0x305c9c0
	void OnPlayerEnterRoom__DelegateSignature(ArkPlayer* InPlayer, ArkRoomActor* InRoom);// 0x305c9c0
	void OnPlayerEnterRoom(ArkPlayer* InPlayer);// 0xbb6750
	void OnNpcTakeDamage(ArkCharacterBase* Character, out const TakeHitInfo HitInfo);// 0x292ecc0
	void OnNpcDeath(ArkCharacterBase* InCharacter);// 0x292ec40
	bool IsWaveSpawned(int SpawnWave);// 0x292e750
	ArkNpc*[] GetNpcArrayBySpawnWave(int InSpawnWave);// 0x292e540
	void ClientNotifyRoomGoalSucceed(int InRoomIndex, bool IsHiddenRoom);// 0x292e3f0
	void ClientNotifyCleanRoom(Vector EffectLocation, FString InCleanRoomPlayerName);// 0x292e210
	void CleanRoom(Vector EffectLocation, bool bCleanAll);// 0x292e130
	void BP_PlayRoomCleanEffect(Vector EffectLocation);// 0x305c9c0
	ArkPVEMapMarkerComponent* BP_GetMapMarkerComponent(Actor* TargetActor);// 0x305c9c0
	void BP_ClientOnRoomGoalSucceed(int InRoomIndex, bool IsHiddenRoom);// 0x305c9c0

--------------------------------
Class: ArkSpawnRule.Object
	DataTable* SpawnPatternCollectionDataTable;//[Offset: 0x28, Size: 0x8]
	ArkAISpawnRuleConfig SpawnRuleConfig;//[Offset: 0x30, Size: 0x98]
	bool IsTickAble;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	void UnInit();// 0x188cea0
	void TickRule(float DeltaTime, ArkRoomActor* RoomActor);// 0x296e110
	void OnSpawnRuleExecuted__DelegateSignature(ArkSpawnRule* SpawnRule, int SpawnWave, ArkNpc*[] NPCArray);// 0x305c9c0
	void Init(ArkAISpawnRuleConfig InSpawnRuleConfig, byte InRoomIndex);// 0x296d720
	ArkAISpawnPatternConfig* GetSpawnPatternConfigFromCollection();// 0x296d6f0
	<FName,int> GetSpawnAITypeFormCollection();// 0x296d5f0
	void Execute(ArkRoomActor* RoomActor);// 0x296d4a0
	void C2BP_UnInit();// 0x305c9c0
	void C2BP_TickRule(float DeltaTime, ArkRoomActor* RoomActor);// 0x305c9c0
	void C2BP_Init(ArkAISpawnRuleConfig InSpawnRuleConfig);// 0x305c9c0
	void C2BP_Execute(ArkRoomActor* RoomActor);// 0x305c9c0

--------------------------------
Class: ArkAISpawnRuleConfig
	bool bSpawnWithPattern;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	class ArkSpawnRule* SpawnRuleClass;//[Offset: 0x8, Size: 0x8]
	Actor* TriggerActor;//[Offset: 0x10, Size: 0x8]
	Actor* SpawnTargetActor;//[Offset: 0x18, Size: 0x8]
	Vector SpawnLocation;//[Offset: 0x20, Size: 0xc]
	float SpawnRadius;//[Offset: 0x2c, Size: 0x4]
	float DelayTime;//[Offset: 0x30, Size: 0x4]
	int AINumMinlimitat;//[Offset: 0x34, Size: 0x4]
	int SpawnWave;//[Offset: 0x38, Size: 0x4]
	int ListenWave;//[Offset: 0x3c, Size: 0x4]
	FName SpawnPatternCollectionName;//[Offset: 0x40, Size: 0x8]
	<FName,int> SpawnAIType;//[Offset: 0x48, Size: 0x50]

--------------------------------
Class: ArkAISpawnPatternConfig.DataAsset.Object
	DataTable*[] ReferencedDataTables;//[Offset: 0x30, Size: 0x10]
	FName[] Tags;//[Offset: 0x40, Size: 0x10]
	GameplayTagContainer GameplayTags;//[Offset: 0x50, Size: 0x20]
	FName[] SpawnGroupLinks;//[Offset: 0x70, Size: 0x10]
	ArkAISpawnPatternGroup[] SpawnGroups;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: ArkAISpawnPatternGroup
	ArkAISpawnPatternRandArchive[] SpawnGroup;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ArkAISpawnPatternRandArchive
	FName AITypeName;//[Offset: 0x0, Size: 0x8]
	int MinAmount;//[Offset: 0x8, Size: 0x4]
	int MaxAmount;//[Offset: 0xc, Size: 0x4]
	float MinDistance;//[Offset: 0x10, Size: 0x4]
	float MaxDistance;//[Offset: 0x14, Size: 0x4]
	float HalfAngle;//[Offset: 0x18, Size: 0x4]
	int SpawnStatus;//[Offset: 0x1c, Size: 0x4]
	float Weight;//[Offset: 0x20, Size: 0x4]
	int SpecifiedIntensityLevel;//[Offset: 0x24, Size: 0x4]
	FName[] Tags;//[Offset: 0x28, Size: 0x10]
	GameplayTagContainer GameplayTags;//[Offset: 0x38, Size: 0x20]

--------------------------------
Class: TakeHitInfo
	float ActualDamage;//[Offset: 0x0, Size: 0x4]
	float BuffShieldDamage;//[Offset: 0x4, Size: 0x4]
	float ShieldDamage;//[Offset: 0x8, Size: 0x4]
	float ShieldAbsorbs;//[Offset: 0xc, Size: 0x4]
	float HealthDamage;//[Offset: 0x10, Size: 0x4]
	float DamageWithoutResultModify;//[Offset: 0x14, Size: 0x4]
	class DamageType* DamageTypeClass;//[Offset: 0x18, Size: 0x8]
	ArkCharacterBase* PlayerInstigator;//[Offset: 0x20, Size: 0x8]
	ArkCharacterBase* PawnInstigator;//[Offset: 0x28, Size: 0x8]
	Actor* DamageCauser;//[Offset: 0x30, Size: 0x8]
	ArkCharacterBase* Victim;//[Offset: 0x38, Size: 0x8]
	Vector_NetQuantizeNormal ShotDirection;//[Offset: 0x40, Size: 0xc]
	Vector_NetQuantize RadialOrigin;//[Offset: 0x4c, Size: 0xc]
	HitResult HitResult;//[Offset: 0x58, Size: 0x88]
	enum HitReactionDirection;//[Offset: 0xe0, Size: 0x1]
	byte HitReactionCount;//[Offset: 0xe1, Size: 0x1]
	bool bExtraTakeHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe2, Size: 0x1]
	bool bCritical;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe2, Size: 0x1]
	bool bHitWeakpoint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe2, Size: 0x1]
	bool bKilled;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe2, Size: 0x1]
	bool bExecuted;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe2, Size: 0x1]
	bool bResistDeath;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe2, Size: 0x1]
	bool bDamageForSameEnergy;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe2, Size: 0x1]
	enum AliveState;//[Offset: 0xe3, Size: 0x1]
	int PlayerState;//[Offset: 0xe4, Size: 0x4]
	bool bBrokeShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 0x1]
	bool bFullHealth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 0x1]
	bool bFullShield;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe8, Size: 0x1]
	bool bBulletFlyingBack;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe8, Size: 0x1]
	bool bImmunity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe8, Size: 0x1]
	bool bKnockDownState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe8, Size: 0x1]
	bool bKnockDown;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe8, Size: 0x1]
	bool bStartleState;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe8, Size: 0x1]
	bool bStartle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe9, Size: 0x1]
	float HitPauseDuration;//[Offset: 0xec, Size: 0x4]
	SwarmTakeHitInfo SwarmTakeHitInfo;//[Offset: 0xf0, Size: 0x2c]
	int64 Timestamp;//[Offset: 0x120, Size: 0x8]
	int64 InstigatorID;//[Offset: 0x128, Size: 0x8]
	byte ShieldQuality;//[Offset: 0x130, Size: 0x1]
	int FireID;//[Offset: 0x134, Size: 0x4]
	bool bTriggerEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x138, Size: 0x1]
	float CurTime;//[Offset: 0x13c, Size: 0x4]
	byte Index;//[Offset: 0x140, Size: 0x1]
	byte EnsureReplicationByte;//[Offset: 0x141, Size: 0x1]

--------------------------------
Class: SwarmTakeHitInfo
	ArkCompressedTransform SelfLogicTransform;//[Offset: 0x0, Size: 0x10]
	Vector_NetQuantize SelfLogicVelocity;//[Offset: 0x10, Size: 0xc]
	Vector_NetQuantize CauserLogicLocation;//[Offset: 0x1c, Size: 0xc]
	byte MovementState;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: ArkCompressedTransform
	int Location;//[Offset: 0x0, Size: 0x4]
	int8 Rotation;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: ArkPVEMapMarkerComponent.ActorComponent.Object
	ArkMapMarkerInfo MapMarkerInfo;//[Offset: 0x1e0, Size: 0x18]
	void OnRep_MapMarkerInfo();// 0x2913aa0

--------------------------------
Class: ArkMapMarkerInfo
	enum MarkerMapDataType;//[Offset: 0x0, Size: 0x1]
	FString[] ShowMarkerPlayerIDStrings;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ArkAISpawnRuleCollectionMap
	<FName,ArkAISpawnWaveRuleCollection> RoomSpawnRuleMap;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: ArkAISpawnWaveRuleCollection
	<FName,ArkAISpawnRuleCollection> WaveRuleCollection;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: ArkAISpawnRuleCollection
	ArkAISpawnRuleConfig[] RuleCollection;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ArkRoomRadarActorGroup
	enum MapDataType;//[Offset: 0x0, Size: 0x1]
	Actor*[] RadarActor;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: WrapPlayerIndicatorSocket.Actor.Object
	ArkPlayer* WrapPlayer;//[Offset: 0x2e8, Size: 0x8]
	ArkPlayer* GetWrapPlayer();// 0x1918110
	bool GetShowIndicator();// 0x29ee720

--------------------------------
Class: ArkWrapEnterSequenceInfo
	UInt64Property PlayerId;//[Size: 0x8]
	FName ExitSequenceName;//[Offset: 0x8, Size: 0x8]
	Vector StartLocation;//[Offset: 0x10, Size: 0xc]
	Rotator StartRotation;//[Offset: 0x1c, Size: 0xc]
	Vector EndLocation;//[Offset: 0x28, Size: 0xc]
	Rotator EndRotation;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: ArkWrapGatePlayerState
	UInt64Property PlayerId;//[Size: 0x8]
	bool bInGate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bFirstIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]

--------------------------------
Class: ArkWrapGateLandingPointInfo
	Transform PointTransform;//[Offset: 0x0, Size: 0x30]
	bool bOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	FString LandingPlayerIDString;//[Offset: 0x38, Size: 0x10]
	FName LevelSequenceName;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: ArkDarkErosionInfo
	UInt64Property PlayerId;//[Size: 0x8]
	bool bIsOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: ArkHavenNpc.ArkAvatarNpc.ArkAvatarPawn.Character.Pawn.Actor.Object
	ArkStationGroupActorBase* StationGroup;//[Offset: 0x950, Size: 0x8]
	bool AnimLookAtUseCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x958, Size: 0x1]
	FName InteractiveObjectName;//[Offset: 0x95c, Size: 0x8]
	enum[] AvaliableInteractionTypes;//[Offset: 0x988, Size: 0x10]
	delegate OnNotifyMoveToBeginDelegate;//[Offset: 0x9a8, Size: 0x10]
	GameplayTagContainer StationGameplayTags;//[Offset: 0x9c0, Size: 0x20]
	bool bCollidedWithWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e0, Size: 0x1]
	CapsuleComponent* NpcBlockCapsuleComponent;//[Offset: 0x9e8, Size: 0x8]
	WalkGreetConfig[] WalkGreetConfig;//[Offset: 0x9f0, Size: 0x10]
	float LastGreetTime;//[Offset: 0xa00, Size: 0x4]
	ArkHavenNPCInfoComponent* NpcInfoComponent;//[Offset: 0xa08, Size: 0x8]
	ArkHavenNPCMainAnimInstance* AnimInstance;//[Offset: 0xa10, Size: 0x8]
	float MinimumBlockingWallImpactZ;//[Offset: 0xa18, Size: 0x4]
	bool bGreetingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa70, Size: 0x1]
	float GreetCooldown;//[Offset: 0xa74, Size: 0x4]
	float LastGestureEndTime;//[Offset: 0xa78, Size: 0x4]
	bool bLookAtEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa7c, Size: 0x1]
	SkeletalMeshComponent* PlayerSkeletalMesh;//[Offset: 0xa80, Size: 0x8]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0xa88, Size: 0x8]
	ArkDialogueComponent* DialogueComponent;//[Offset: 0xa90, Size: 0x8]
	ArkHavenNPCLookAtSelector* LookAtSelectorComponent;//[Offset: 0xa98, Size: 0x8]
	FName GreetingEventName;//[Offset: 0xaa0, Size: 0x8]
	FName GreetingEachOtherEventName;//[Offset: 0xaa8, Size: 0x8]
	FName BumpedEventName;//[Offset: 0xab0, Size: 0x8]
	FName InteractEventName;//[Offset: 0xab8, Size: 0x8]
	float DebugRootThickness;//[Offset: 0xac0, Size: 0x4]
	float DebugRootScale;//[Offset: 0xac4, Size: 0x4]
	float GreetToPlayerProbability;//[Offset: 0xad0, Size: 0x4]
	float GreetToHavenNpcProbability;//[Offset: 0xad4, Size: 0x4]
	BlackboardComponent* Blackboard;//[Offset: 0xae0, Size: 0x8]
	float LastKnockbackTime;//[Offset: 0xaf0, Size: 0x4]
	bool bWouldBeKnockedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf4, Size: 0x1]
	void ResetAvatarFacialBlend(AnimSequence*[] AnimSequences);// 0x27b0250
	void ResetAvatarBodyParts(out const ArkAvatarPartData PartData);// 0x27b0180
	void OnTargetPerceptionUpdated(Actor* Actor, AIStimulus Stimulus);// 0x27afe60
	void OnNotifyMoveToBeginDelegate__DelegateSignature(out const FText Identifier);// 0x305c9c0
	void OnNotifyMoveTo(out const FText Text);// 0x27afd90
	void OnMeshLoaded(enum PartType, SkeletalMeshComponent* MeshComp, bool bFPPPart);// 0x27afc80
	void OnGestureForSeconds(float Seconds);// 0x27afc00
	void OnComponentHit(PrimitiveComponent* HitComp, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x27afa30
	void OnAvatarFacialBlendAnimLoaded(AnimSequence*[] AnimSequences);// 0x27af8f0
	void InStationGreet(Actor* Player, AnimMontage* AnimMontage);// 0x27af730
	interface class GetInUseStation();// 0x27af380
	ArkDialogueComponent* GetDialogueComponent();// 0x27af350
	float GetAngleDelta(float Start, float End);// 0x27af020
	void CarryPropItem(FName SlotName, StaticMesh* StaticMesh);// 0x27aef20
	bool CanKnockback();// 0x27aeef0
	void BP_OnPlayerLeaveNearRange();// 0x305c9c0
	void BP_OnPlayerEnterNearRange();// 0x305c9c0

--------------------------------
Class: ArkAvatarNpc.ArkAvatarPawn.Character.Pawn.Actor.Object
	delegate OnNpcVOTypeChanged;//[Offset: 0x668, Size: 0x10]
	ArkAkComponent* AkComponent;//[Offset: 0x678, Size: 0x8]
	enum GenderType;//[Offset: 0x680, Size: 0x1]
	enum VOType;//[Offset: 0x681, Size: 0x1]
	bool bInferVOType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x682, Size: 0x1]
	Object*[] ResourceToLoad;//[Offset: 0x688, Size: 0x10]
	ArkSoftSkeletalMeshComponent* AttachedSkelMeshComponent;//[Offset: 0x8c0, Size: 0x8]
	ArkSoftStaticMeshComponent* AttachedStaticMeshComponent;//[Offset: 0x8c8, Size: 0x8]
	void SetVOType(enum InVOType);// 0x267de90
	void SetGenderType(enum InGenderType);// 0x267dc00
	void OnSoftSkeletalMeshAsyncLoaded();// 0xae2270
	enum GetVOType();// 0x267d140
	enum GetGenderType();// 0x267d0b0
	ArkAvatarComponent* GetAvatarComponent();// 0x267d070
	void BpInitAvatar();// 0x305c9c0

--------------------------------
Class: ArkAvatarPawn.Character.Pawn.Actor.Object
	delegate OnCreateAvatarDoneDelegate;//[Offset: 0x590, Size: 0x10]
	bool bCreateAvatarDone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 0x1]
	ArkAvatarComponent* AvatarComponent;//[Offset: 0x5a8, Size: 0x8]
	<class ArkItemAvatar,ArkAvatarAttachmentItemInfo> AvatarItemArray;//[Offset: 0x5b0, Size: 0x50]
	bool bAutoAttachAvatarInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x661, Size: 0x1]
	void TryAttachAvatarInEditor();// 0xae2270
	void SetAvatarForcedMinLOD(int iLOD);// 0x267d8d0
	void SetAllPartVisibility(bool InVisible);// 0x267d840
	void SetAllPartPhysicsState(bool bOpen);// 0x267d7b0
	void PostMeshComponentPoseUpdate();// 0x267d6f0
	void PlayAnimationPose(AnimationAsset* PoseAnim);// 0x267d650
	void OnSkeletalMeshAsyncLoadFinished();// 0x267d510
	void OnCreateAvatarDoneDelegate__DelegateSignature();// 0x305c9c0
	void OnCreateAvatarDone(const ArkItemAvatar* AvatarItem);// 0x267d480
	void InitAvatar(bool bInEditorMode);// 0x267d170
	void BindSkeletalMeshToSocket(SkeletalMeshComponent* InMesh, out const FName InSkeletalSocket);// 0x267ce00
	void AddTag(FName Tag);// 0x267cd80

--------------------------------
Class: ArkAkComponent.AkComponent.AkGameObject.SceneComponent.ActorComponent.Object
	bool bUpdateRoomOnlyOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 0x1]
	enum MultiPositionType;//[Offset: 0x591, Size: 0x1]
	Vector[] Points;//[Offset: 0x598, Size: 0x10]
	AkGameSyncInfo GameSyncInfo;//[Offset: 0x5a8, Size: 0xf0]
	ArkAkRoomComponent*[] OverlappingRooms;//[Offset: 0x698, Size: 0x10]
	ArkAkRoomComponent* CurrentSoundRegionRoom;//[Offset: 0x6a8, Size: 0x8]
	void SetPoints(out const Vector[] InPoints);// 0x2662430
	bool HasMultiPositions();// 0x2662230
	int GetNumberOfActiveEvents();// 0x26620c0
	AkGameSyncInfo GetGameSyncInfo();// 0x2661fd0
	void AddPoint();// 0x2661f70

--------------------------------
Class: AkComponent.AkGameObject.SceneComponent.ActorComponent.Object
	bool bUseSpatialAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 0x1]
	byte OcclusionCollisionChannel;//[Offset: 0x3d0, Size: 0x1]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d1, Size: 0x1]
	float OuterRadius;//[Offset: 0x3d4, Size: 0x4]
	float InnerRadius;//[Offset: 0x3d8, Size: 0x4]
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x3e0, Size: 0x8]
	FString EarlyReflectionAuxBusName;//[Offset: 0x3e8, Size: 0x10]
	int EarlyReflectionOrder;//[Offset: 0x3f8, Size: 0x4]
	float EarlyReflectionBusSendGain;//[Offset: 0x3fc, Size: 0x4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x400, Size: 0x4]
	float roomReverbAuxBusGain;//[Offset: 0x404, Size: 0x4]
	int diffractionMaxEdges;//[Offset: 0x408, Size: 0x4]
	int diffractionMaxPaths;//[Offset: 0x40c, Size: 0x4]
	float diffractionMaxPathLength;//[Offset: 0x410, Size: 0x4]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 0x1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x415, Size: 0x1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x416, Size: 0x1]
	bool DrawDiffraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x417, Size: 0x1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 0x1]
	float AttenuationScalingFactor;//[Offset: 0x41c, Size: 0x4]
	float OcclusionRefreshInterval;//[Offset: 0x420, Size: 0x4]
	bool bUseReverbVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 0x1]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x8c6980
	void UseEarlyReflections(AkAuxBus* AuxBus, int Order, float BusSendGain, float MaxPathLength, bool SpotReflectors, FString AuxBusName);// 0x8c67a0
	void SetSwitch(AkSwitchValue* SwitchValue, FString SwitchGroup, FString SwitchState);// 0x8c6630
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x8c65a0
	void SetOutputBusVolume(float BusVolume);// 0x8c6520
	void SetListeners(out const AkComponent*[] Listeners);// 0x8c6470
	void SetGameObjectRadius(float in_outerRadius, float in_innerRadius);// 0x8c6320
	void SetEarlyReflectionsVolume(float SendVolume);// 0x8c62a0
	void SetEarlyReflectionsAuxBus(FString AuxBusName);// 0x8c6200
	void SetAttenuationScalingFactor(float Value);// 0x8c6100
	void PostTrigger(AkTrigger* TriggerValue, FString Trigger);// 0x8c5ee0
	void PostAssociatedAkEventAndWaitForEndAsync(out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x8c5d20
	int PostAssociatedAkEventAndWaitForEnd(out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x8c5bc0
	int PostAkEventByName(FString in_EventName);// 0x8c5b10
	void PostAkEventAndWaitForEndAsync(AkAudioEvent* AkEvent, out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x8c5940
	int PostAkEventAndWaitForEnd(AkAudioEvent* AkEvent, FString in_EventName, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x8c5760
	float GetAttenuationRadius();// 0x8c5430

--------------------------------
Class: AkGameObject.SceneComponent.ActorComponent.Object
	AkAudioEvent* AkAudioEvent;//[Offset: 0x3a8, Size: 0x8]
	FString EventName;//[Offset: 0x3b0, Size: 0x10]
	void Stop();// 0x8cc2f0
	void SetRTPCValue(AkRtpc* RTPCValue, float Value, int InterpolationTimeMs, FString RTPC);// 0x8cb820
	void PostAssociatedAkEventAsync(const Object* WorldContextObject, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo, out int PlayingID);// 0x8c9cc0
	int PostAssociatedAkEvent(int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources);// 0x8c9b30
	void PostAkEventAsync(const Object* WorldContextObject, AkAudioEvent* AkEvent, out int PlayingID, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x8c93b0
	int PostAkEvent(AkAudioEvent* AkEvent, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, FString in_EventName);// 0x8c9190
	void GetRTPCValue(AkRtpc* RTPCValue, enum InputValueType, out float Value, out enum OutputValueType, FString RTPC, int PlayingID);// 0x8c86c0

--------------------------------
Class: AkAuxBus.AkAssetBase.AkAudioType.Object
	AkAudioBank* RequiredBank;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: AkRtpc.AkAudioType.Object

--------------------------------
Class: AkSwitchValue.AkGroupValue.AkAudioType.Object

--------------------------------
Class: AkGroupValue.AkAudioType.Object
	AkMediaAsset*[] MediaDependencies;//[Offset: 0x40, Size: 0x10]
	UInt32Property GroupShortID;//[Size: 0x4]

--------------------------------
Class: AkMediaAsset.Object
	UInt32Property ID;//[Size: 0x4]
	FString MediaName;//[Offset: 0x30, Size: 0x10]
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	Object*[] UserData;//[Offset: 0x48, Size: 0x10]
	FString Language;//[Offset: 0x58, Size: 0x10]
	AkMediaAssetData* CurrentMediaAssetData;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: AkMediaAssetData.Object
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool UseDeviceMemory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	FString Language;//[Offset: 0x30, Size: 0x10]
	FString AssetPlatform;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: AkTrigger.AkAudioType.Object

--------------------------------
Class: AkExternalSourceInfo
	FString ExternalSrcName;//[Offset: 0x0, Size: 0x10]
	enum CodecID;//[Offset: 0x10, Size: 0x1]
	FString Filename;//[Offset: 0x18, Size: 0x10]
	AkExternalMediaAsset* ExternalSourceAsset;//[Offset: 0x28, Size: 0x8]
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AkExternalMediaAsset.AkMediaAsset.Object

--------------------------------
Class: AkGameSyncInfo
	<FString,float> RTPC_Map;//[Offset: 0x0, Size: 0x50]
	<FString,FString> Switch_Map;//[Offset: 0x50, Size: 0x50]
	<FString,FString> State_Map;//[Offset: 0xa0, Size: 0x50]

--------------------------------
Class: ArkAkRoomComponent.AkRoomComponent.AkGameObject.SceneComponent.ActorComponent.Object
	AkGroupValue* GunTailSwitchAsset;//[Offset: 0x3f8, Size: 0x28]
	AkGroupValue* PositionStateAsset;//[Offset: 0x420, Size: 0x28]
	AkAuxBus* AuxBus;//[Offset: 0x448, Size: 0x8]
	float AuxSendLevelToSelf;//[Offset: 0x450, Size: 0x4]
	ArkAkPortalComponent*[] mConnectedPortals;//[Offset: 0x458, Size: 0x10]

--------------------------------
Class: AkRoomComponent.AkGameObject.SceneComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 0x1]
	bool bDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c9, Size: 0x1]
	float Priority;//[Offset: 0x3cc, Size: 0x4]
	float WallOcclusion;//[Offset: 0x3d0, Size: 0x4]
	float AuxSendLevel;//[Offset: 0x3d4, Size: 0x4]
	bool AutoPost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 0x1]
	AkAcousticTextureSetComponent* GeometryComponent;//[Offset: 0x3e8, Size: 0x8]
	void SetGeometryComponent(AkAcousticTextureSetComponent* textureSetComponent);// 0x8d5ad0
	PrimitiveComponent* GetPrimitiveParent();// 0x8d5730

--------------------------------
Class: AkAcousticTextureSetComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ArkAkPortalComponent.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x698, Size: 0x1]
	bool bInitOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x699, Size: 0x1]
	float ObstructionRefreshInterval;//[Offset: 0x69c, Size: 0x4]
	byte ObstructionCollisionChannel;//[Offset: 0x6a0, Size: 0x1]
	bool bOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a1, Size: 0x1]
	<Object*,bool> mBlockers;//[Offset: 0x6a8, Size: 0x50]
	ArkAkRoomComponent* FrontRoom;//[Offset: 0x6f8, Size: 0x8]
	ArkAkRoomComponent* BackRoom;//[Offset: 0x700, Size: 0x8]
	void OpenPortal();// 0x26622f0
	bool IsOpen();// 0x2662290
	void ClosePortal();// 0x2661f90

--------------------------------
Class: ArkAvatarComponent.ArkCharacterLiteComponent.LiteComponent.Object
	World* MainWorld;//[Offset: 0xb0, Size: 0x8]
	World* LocalWorld;//[Offset: 0xb8, Size: 0x8]
	delegate OnAvatarItemAttachedCallBack;//[Offset: 0xc0, Size: 0x10]
	delegate OnAvatarPartAttachedCallBack;//[Offset: 0xd0, Size: 0x10]
	delegate OnChangeSuitOverCallBack;//[Offset: 0xe0, Size: 0x10]
	SkeletalMeshComponent* MasterMeshComponent;//[Offset: 0xf8, Size: 0x8]
	SkeletalMeshComponent* FPPMasterMeshComponent;//[Offset: 0x100, Size: 0x8]
	<enum,SkeletalMeshComponent*> AvatarPartMeshMap;//[Offset: 0x108, Size: 0x50]
	<enum,SkeletalMeshComponent*> AvatarPartMeshMapForFPP;//[Offset: 0x1a8, Size: 0x50]
	ArkItemAvatar* CurrentAvatarSuitItem;//[Offset: 0x428, Size: 0x8]
	ArkItemAvatar*[] CurrentAvatarItemList;//[Offset: 0x430, Size: 0x10]
	SceneComponent* CameraAttachParent;//[Offset: 0x4f0, Size: 0x8]
	SkeletalMeshComponent*[] MergedPartMeshes;//[Offset: 0x4f8, Size: 0x10]
	SkeletalMeshComponent* MergedAvatarMesh;//[Offset: 0x508, Size: 0x8]
	float ResetAllPhysicsStateDelay;//[Offset: 0x51c, Size: 0x4]
	<enum,int> LODShowThreadHoldMapping;//[Offset: 0x520, Size: 0x50]
	<enum,int> MinLODInGameMapping;//[Offset: 0x570, Size: 0x50]
	MaterialInstance* DefaultMergeMaterial;//[Offset: 0x5c0, Size: 0x8]
	MaterialInstance*[] ElementMaterialInstances;//[Offset: 0x5c8, Size: 0x10]
	<enum,GFurComponent*> FurMeshComponents;//[Offset: 0x5d8, Size: 0x50]
	<enum,AvatarPartMaterialInfo> AvatarMaterialMap;//[Offset: 0xb30, Size: 0x50]
	<enum,AvatarPartAttachmentsMaterialInfo> AvatarAttachmentsMaterialMap;//[Offset: 0xb80, Size: 0x50]
	MaterialInterface* OverrideAvatarMaterial;//[Offset: 0xbd0, Size: 0x8]
	delegate OnAvatarCustomDepthEnableChanged;//[Offset: 0x1198, Size: 0x10]
	delegate OnAvatarCustomDepthStencilChanged;//[Offset: 0x11a8, Size: 0x10]
	delegate OnAvatarAllBodyMaterialFloatChanged;//[Offset: 0x11b8, Size: 0x10]
	delegate OnAvatarAllBodyMaterialVectorChanged;//[Offset: 0x11c8, Size: 0x10]
	delegate OnAvatarLightingChannelsChanged;//[Offset: 0x11d8, Size: 0x10]
	void SuspendClothingSimulation();// 0x2679cc0
	void StablizeDynamicAnims();// 0x2679b40
	void SetVisibleInRayTracing(bool bVisible);// 0x2679ab0
	void SetUsingInsetShadow(bool bUse);// 0x2679a20
	void SetStateForCapture();// 0x2679a00
	void SetPartMeshesUseAttachBound(bool bUse);// 0x2679900
	void SetPartMaterialVectorParam(enum PartType, FName ParamName, Vector Value, bool bFPPPart);// 0x2679790
	void SetPartMaterialTextureParam(enum PartType, FName ParamName, Texture* Value, bool bFPPPart);// 0x2679640
	void SetPartMaterialFloatParam(enum PartType, FName ParamName, float Value, bool bFPPPart);// 0x26794f0
	void SetPartMaterialColorParam(enum PartType, FName ParamName, LinearColor Value, bool bFPPPart);// 0x2679390
	void SetPartEnableDynamicAnimation(enum PartType, bool bEnable);// 0x26792c0
	void SetNeverDistanceCull(bool bNeverDistanceCull);// 0x2678c50
	void SetMergedMaterialVectorParam(FName ParamName, Vector Value);// 0x2678b80
	void SetMergedMaterialFloatParam(FName ParamName, float Value);// 0x2678ab0
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x2678990
	void SetEnableDynamicAnimation(bool bEnable);// 0x2678900
	void SetDissolvePercent(float fPercent, FName MaterialParamterName);// 0x2678830
	void SetCustomDepthStencil(byte Stencil);// 0x26787b0
	void SetCustomDepthEnable(bool bEnable);// 0x2678720
	void SetAvatarVisibilityBySlot(bool bVisible, FName SlotName);// 0x2678660
	void SetAvatarVisibility(bool bVisible);// 0x26785d0
	void SetAvatarTickEnabled(bool bEnable);// 0x2678540
	void SetAvatarPartVisibilityBySlot(enum PartType, bool bVisible, FName SlotName);// 0x2678440
	void SetAvatarPartVisibility(enum PartType, bool bVisible);// 0x2678370
	void SetAvatarPartAnimPhysicsEnabled(bool bEnable);// 0x26782e0
	void SetAvatarOwnerNoSee(bool bOwnerNoSee);// 0x2678250
	void SetAvatarMaterial(MaterialInstance* NewMaterial);// 0x26781d0
	void SetAvatarForcedLOD(int NewLOD);// 0x2678150
	void SetAnimTickOption(enum NewOption, bool bFPPMesh);// 0x2678080
	void SetAllPartsMaterialVectorParam(FName ParamName, Vector Value, bool bFPPPart);// 0x2677f70
	void SetAllPartsMaterialTextureParam(FName ParamName, Texture* Value, bool bFPPPart);// 0x2677e60
	void SetAllPartsMaterialFloatParam(FName ParamName, float Value, bool bFPPPart);// 0x2677d50
	void SetAllPartsMaterialColorParam(FName ParamName, LinearColor Value, bool bFPPPart);// 0x2677c40
	void SetAllMipsStreamedIn(int MipBios);// 0x2677bc0
	void ResumeClothingSimulation();// 0x2677ba0
	void PrintCurAvatarMainRenderState();// 0x2677b80
	void OnMasterMeshLODChanged(int OldLOD, int NewLOD);// 0x2677ac0
	void OnHeadMeshLoadOverDelegate__DelegateSignature();// 0x305c9c0
	void OnFaceLoadOverDelegate__DelegateSignature();// 0x305c9c0
	void OnCharacterMeshForNpcLoaded(SkeletalMeshComponent* AvatarMesh, ArkAvatarPartData PartData);// 0x26779a0
	void OnChangeSuitOverDelegate__DelegateSignature(const ArkItemAvatar* AvatarItem);// 0x305c9c0
	void OnAvatarPartAttachedDelegate__DelegateSignature(enum PartType, SkeletalMeshComponent* MeshComp, bool bFPPPart);// 0x305c9c0
	void OnAvatarItemAttachedDelegate__DelegateSignature(const ArkItemAvatar* AvatarItem, enum PartType, SkeletalMeshComponent* MeshComp, bool bFPPPart);// 0x305c9c0
	bool IsRenderStateCreated();// 0x26777e0
	bool IsAllPartsMipsStreamedIn(int MipBios);// 0x26776d0
	void HideAvatarPart(enum PartType, bool bHide, FName HideBone);// 0x26773e0
	SkeletalMeshComponent* GetMasterMeshComponentForFPP();// 0x26773b0
	SkeletalMeshComponent* GetMasterMeshComponent();// 0x2677380
	enum GetGender();// 0xad18a0
	SkeletalMeshComponent* GetAvatarPartMeshComponentForFPP(enum PartType);// 0x2677270
	SkeletalMeshComponent* GetAvatarPartMeshComponent(enum PartType);// 0x26771e0
	AnimInstance* GetAvatarPartAnimInstanceForFPP(enum PartType);// 0x2677150
	AnimInstance* GetAvatarPartAnimInstance(enum PartType);// 0x26770c0
	FString GenerateAvatarItemIDString();// 0x2677040

--------------------------------
Class: AvatarPartMaterialInfo
	MaterialInterface*[] MaterialArray;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AvatarPartAttachmentsMaterialInfo
	AvatarPartMaterialInfo[] AttachmentArray;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ArkSoftSkeletalMeshComponent.ArkSkeletalMeshComponent.SkeletalMeshComponentBudgeted.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SoftSkeletalMesh;//[Offset: 0xfc0, Size: 0x28]
	MaterialInterface*[] SoftOverrideMaterials;//[Offset: 0xfe8, Size: 0x10]
	Skeleton* Skeleton;//[Offset: 0xff8, Size: 0x8]
	class AnimInstance* SoftAnimClass;//[Offset: 0x1000, Size: 0x28]
	CachedAnimPlayInfo CachedAnimPlayInfo;//[Offset: 0x1028, Size: 0x18]
	delegate OnAsyncLoadFinishedDelegate;//[Offset: 0x1040, Size: 0x10]
	<int,MaterialInterface*> RuntimeOverrideSoftMaterials;//[Offset: 0x1070, Size: 0x50]
	<int,MaterialInterface*> RuntimeOverrideSoftMaterialsCache;//[Offset: 0x10c0, Size: 0x50]
	void TryPlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping, float StartPosition);// 0x29690e0
	void SetSoftSkeletalMesh(SkeletalMesh* InSoftSkeletalMesh);// 0x2968d20
	void SetSoftAnimClass(class AnimInstance InNewClass);// 0x2968a00
	void SetRunTimeSoftMaterialsByArray(out const MaterialInterface*[] SkinMaterialConfig);// 0x29682b0
	void SetRunTimeSoftMaterials(out const <int,MaterialInterface*> SkinMaterialConfig);// 0x2967f80
	void SetRunTimeSoftMaterial(MaterialInterface* SkinMaterial);// 0x2967c80
	void SetCachedAnimPosition(float InPosition);// 0x2967810
	void RevertMaterials();// 0x2967710
	void ClearAsyncLoadSoftAsset();// 0x2967290

--------------------------------
Class: ArkSkeletalMeshComponent.SkeletalMeshComponentBudgeted.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	UInt32Property LastTickPoseFrame;//[Size: 0x4]
	UInt32Property LastBoneTransformsRefreshFrame;//[Size: 0x4]
	FName BoundFollowBoneName;//[Offset: 0xedc, Size: 0x8]
	Vector BoundFollowBoneBoxExtent;//[Offset: 0xee4, Size: 0xc]
	float BoundFollowBoneSphereRadius;//[Offset: 0xef0, Size: 0x4]
	<Object*,SkeletalMeshComponent*> AttachedSkeletalMeshComponentMap;//[Offset: 0xef8, Size: 0x50]
	<Object*,StaticMeshComponent*> AttachedStaticMeshComponentMap;//[Offset: 0xf48, Size: 0x50]

--------------------------------
Class: SkeletalMeshComponentBudgeted.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bAutoRegisterWithBudgetAllocator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xec8, Size: 0x1]
	bool bAutoCalculateSignificance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xec8, Size: 0x1]
	bool bShouldUseActorRenderedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xec8, Size: 0x1]
	void SetAutoRegisterWithBudgetAllocator(bool bInAutoRegisterWithBudgetAllocator);// 0xd54e20

--------------------------------
Class: CachedAnimPlayInfo
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 0x8]
	bool bLoopingPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	float StartTime;//[Offset: 0xc, Size: 0x4]
	float StartPosition;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ArkStationGroupActorBase.Actor.Object
	bool bOverride_SetRandomStream;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	RandomStream CustomRandomStream;//[Offset: 0x2fc, Size: 0x8]
	FName UniqueLocationName;//[Offset: 0x304, Size: 0x8]
	ArkAnimStationBase* SyncGroupLeaderStation;//[Offset: 0x310, Size: 0x8]
	float DynamicObjRadius;//[Offset: 0x318, Size: 0x4]
	RandomStream RandomStream;//[Offset: 0x31c, Size: 0x8]
	GameplayTagContainer GameplayTags;//[Offset: 0x328, Size: 0x20]
	float DisbandProbability;//[Offset: 0x348, Size: 0x4]
	interface class[] Stations;//[Offset: 0x350, Size: 0x10]
	void OnSingleStationKnockedBack(ArkAnimStationBase* KnockedBackStation);// 0x2971ed0
	void OnGroupLeaderStationFinishAnim();// 0x2971eb0

--------------------------------
Class: ArkAnimStationBase.ArkStationActor.ArkPlayerSpawnerBase.NavigationObjectBase.Actor.Object
	bool bAnimAlwaysTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 0x1]
	bool bNoCollisionWhenKnockback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x469, Size: 0x1]
	ArkAnimStationIntroAnim[] IntroAnims;//[Offset: 0x470, Size: 0x10]
	AnimSequence* PreviewAnimation;//[Offset: 0x480, Size: 0x8]
	AnimMontage* InStationGreetingMontage;//[Offset: 0x488, Size: 0x8]
	AnimMontage* InStationGreetingMontageLeft;//[Offset: 0x490, Size: 0x8]
	AnimMontage* InStationGreetingMontageRight;//[Offset: 0x498, Size: 0x8]
	float NPCInStationBoundScale;//[Offset: 0x4a0, Size: 0x4]
	bool bNPCBoundFollowPelvis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a4, Size: 0x1]
	class ArkStationNPCInStationAIBase* InStationAnimGraphClass;//[Offset: 0x4a8, Size: 0x8]
	BehaviorTree* StationSubTreeAsset;//[Offset: 0x4b0, Size: 0x8]
	ArkHavenSurvivorNpc* Occupier;//[Offset: 0x4d0, Size: 0x8]
	AnimSequence* SelectedIntroSequence;//[Offset: 0x4d8, Size: 0x8]
	ArkStationNPCInStationAIBase* InStationNPCAnimInstance;//[Offset: 0x4e0, Size: 0x8]
	void OnEndStationComplete();// 0x305c9c0
	ArkStationNPCAnimInstanceBase* GetStationNPCAnimBaseInstance();// 0x2667680
	ArkStationNPCInStationAIBase* GetNPCInStationAnimInstance();// 0x26675b0
	void EndStationComplete();// 0x26671a0
	void DurationTimerElapsed();// 0x2667180

--------------------------------
Class: ArkStationActor.ArkPlayerSpawnerBase.NavigationObjectBase.Actor.Object
	enum StationGender;//[Offset: 0x308, Size: 0x1]
	RandomStream RandomAnimationStream;//[Offset: 0x30c, Size: 0x8]
	StationCooldowns CooldownSettings;//[Offset: 0x314, Size: 0x8]
	bool StagedOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 0x1]
	bool bEnableSpawnedNPCCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31d, Size: 0x1]
	bool HasDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31e, Size: 0x1]
	float DurationMin;//[Offset: 0x320, Size: 0x4]
	float DurationMax;//[Offset: 0x324, Size: 0x4]
	Transform EntryTransform;//[Offset: 0x330, Size: 0x30]
	delegate OnStationEndForUser;//[Offset: 0x360, Size: 0x10]
	bool bApproachPointEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 0x1]
	bool bApproachPointByEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x371, Size: 0x1]
	int[] AvaliableSuits;//[Offset: 0x378, Size: 0x10]
	FName[] NPCSpawnTags;//[Offset: 0x388, Size: 0x10]
	StationPickupItem[] PickupItems;//[Offset: 0x398, Size: 0x10]
	interface class * ReservedUser;//[Offset: 0x3a8, Size: 0x10]
	ArkStationValidEntryZonePrimComp* ValidEntryZonePrimComp;//[Offset: 0x3c0, Size: 0x8]
	bool InStationUseCurveLookAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 0x1]
	ArkHavenStationInfoComponent* InfoComponent;//[Offset: 0x3d0, Size: 0x8]
	ValidEntryZone[] ValidEntryZones;//[Offset: 0x3d8, Size: 0x10]
	float AnimationArrivalDistance;//[Offset: 0x3e8, Size: 0x4]
	float NavMeshProjectDirection;//[Offset: 0x3ec, Size: 0x4]
	float NavMeshProjectStartDistance;//[Offset: 0x3f0, Size: 0x4]
	Vector ApproachPoint;//[Offset: 0x3f4, Size: 0xc]
	bool bApproachPointCalculated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 0x1]
	GameplayTagContainer StationGameplayTags;//[Offset: 0x408, Size: 0x20]
	float SpawnNPCProbability;//[Offset: 0x428, Size: 0x4]
	interface class * ActiveUser;//[Offset: 0x430, Size: 0x10]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1]
	bool bIsEnabledForTesting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x441, Size: 0x1]
	ArkStationGroupActorBase* Group;//[Offset: 0x444, Size: 0x8]
	ArkStationActorApproachTurnDistances ApproachTurnDistances;//[Offset: 0x44c, Size: 0x10]
	bool TryGetNavTarget(out Vector NavTarget, Vector NpcLocation);// 0x29723d0
	void SetEnabled(const bool IsEnabled);// 0x2972160
	StationPickupItem GetPickupItemMesh(int MeshIndex);// 0x29717d0
	bool GetEnabled();// 0x2971770
	SkeletalMesh* DoPickupSkeletalMeshItem(int MeshIndex);// 0x29715a0
	StaticMesh* DoPickupItem(int MeshIndex);// 0x2971510
	void DoGiveBackItem(int MeshIndex);// 0x2971490

--------------------------------
Class: ArkPlayerSpawnerBase.NavigationObjectBase.Actor.Object

--------------------------------
Class: ArkStationNPCAnimInstanceBase.ArkHavenNPCAnimInstanceBase.ArkAnimInstanceBase.AnimInstance.Object
	AnimSequence* IntroAnim;//[Offset: 0x2f0, Size: 0x8]
	AnimSequence* BlendToGroundAnim;//[Offset: 0x2f8, Size: 0x8]
	bool bHasIntroAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	bool bMoveToInStationImmediately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 0x1]
	ArkAnimStationBase* Station;//[Offset: 0x308, Size: 0x8]
	ArkHavenEnterStationNPCRootWarpData EnterStationRootWarpData;//[Offset: 0x310, Size: 0xb8]
	void StartEnterAnim();// 0x29723b0
	void OnExitStation();// 0x305c9c0
	void OnEnterStation(bool SpawnedInStation);// 0x305c9c0
	void EndEnterAnim();// 0x2971630

--------------------------------
Class: ArkHavenNPCAnimInstanceBase.ArkAnimInstanceBase.AnimInstance.Object
	bool TryGetAnimStateName(FName StateMachineName, out FName OutStateName);// 0x27b0420

--------------------------------
Class: ArkAnimInstanceBase.AnimInstance.Object
	bool AnimIsDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1]
	<AnimMontage*,ArkMontageWrapperWithPool*> PoolMontages;//[Offset: 0x2a0, Size: 0x50]
	void SetRootMotionEnabled(bool bEnable);// 0x2664090
	AnimMontage* PlayMultipleSlotAnimationAsDynamicMontageUsingPool(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x2663e10
	bool IsPlayingSlotMontage(FName SlotName);// 0x2663cb0
	bool IsMontageInPool(AnimMontage* Montage);// 0x2663c20
	ArkMontageWrapperWithPool* GetMontageWrapper(const AnimMontage* Montage);// 0x2663b90
	ArkMontageWrapperWithPool* CreateSlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x26638d0

--------------------------------
Class: ArkMontageWrapperWithPool.Object
	AnimMontage* Montage;//[Offset: 0x48, Size: 0x8]
	void OnMontageEnd(AnimMontage* MontageEnded, bool Interrupted);// 0x2663d40

--------------------------------
Class: ArkHavenEnterStationNPCRootWarpData
	ArkHavenRootMotionExtMetaData* MetaData;//[Offset: 0x8, Size: 0x8]
	FName XOffsetCurveName;//[Offset: 0x60, Size: 0x8]
	FName YOffsetCurveName;//[Offset: 0x68, Size: 0x8]
	FName RotOffsetCurveName;//[Offset: 0x70, Size: 0x8]
	Actor* OwnerPawn;//[Offset: 0xa8, Size: 0x8]
	SkeletalMeshComponent* OwnerSkeletalMeshComponent;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: ArkHavenRootMotionExtMetaData.AnimMetaData.Object
	float WalkMatchFrac;//[Offset: 0x28, Size: 0x4]
	float WalkCycleDistance;//[Offset: 0x2c, Size: 0x4]
	float WalkCycleSpeed;//[Offset: 0x30, Size: 0x4]
	enum RotationDirection;//[Offset: 0x34, Size: 0x1]

--------------------------------
Class: ArkStationNPCInStationAIBase.ArkAnimInstanceBase.AnimInstance.Object
	RandomStream RandomAnimationStream;//[Offset: 0x2f0, Size: 0x8]
	ArkHavenNpc* NpcOwner;//[Offset: 0x2f8, Size: 0x8]
	delegate EndKnockback;//[Offset: 0x300, Size: 0x10]
	ArkAnimStationBase* Station;//[Offset: 0x310, Size: 0x8]
	ArkStationNPCAnimInstanceBase* Owner;//[Offset: 0x318, Size: 0x8]
	bool bKnockbackActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1]
	void StartBlendToGround();// 0x2972390
	void PerformKnockback(float KnockbackDirection, enum Power);// 0x305c9c0
	void OnInitStation();// 0x305c9c0
	void OnExitStation();// 0x305c9c0
	void InterruptCurrentAnim();// 0x305c9c0
	void ForceExitStation();// 0x2971710
	void ExitStationComplete();// 0x29716f0

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 0x4]
	int Seed;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ArkAnimStationIntroAnim
	AnimSequence* Sequence;//[Offset: 0x0, Size: 0x8]
	float MinAngle;//[Offset: 0x8, Size: 0x4]
	float MaxAngle;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x30, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0x38, Size: 0x8]
	BTDecorator*[] RootDecorators;//[Offset: 0x40, Size: 0x10]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x58, Size: 0x10]
	BTService*[] Services;//[Offset: 0x68, Size: 0x10]
	bool bApplyDecoratorScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 0x10]
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 0x8]
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 0x8]
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 0x8]
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 0x10]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x58, Size: 0x10]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x60, Size: 0x4]
	float RandomDeviation;//[Offset: 0x64, Size: 0x4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x60, Size: 0x1]
	byte FlowAbortMode;//[Offset: 0x64, Size: 0x1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 0x1]
	uint16 Number;//[Offset: 0x2, Size: 0x2]

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x30, Size: 0x8]
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 0x10]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 0x8]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 0x8]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: ArkHavenSurvivorNpc.ArkHavenNpc.ArkAvatarNpc.ArkAvatarPawn.Character.Pawn.Actor.Object
	FString SurvivorID;//[Offset: 0xb00, Size: 0x10]
	bool bUIVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb10, Size: 0x1]
	float EnterUIRadiusModifier;//[Offset: 0xb14, Size: 0x4]
	ArkHavenSurvivorInfo SurvivorInfo;//[Offset: 0xb18, Size: 0x98]
	ArkHavenWidgetSurvivorViewModel* ViewData;//[Offset: 0xbb0, Size: 0x8]
	bool bCanBeInteracted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc0, Size: 0x1]
	bool bCanEnterHeroMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc1, Size: 0x1]
	FString DefaultInteractiveTitle;//[Offset: 0xbc8, Size: 0x10]
	FString InteractiveTitle;//[Offset: 0xbd8, Size: 0x10]
	FText InteractiveTitleText;//[Offset: 0xbe8, Size: 0x18]
	FString DefaultInteractiveDesc;//[Offset: 0xc00, Size: 0x10]
	FString InteractiveDesc;//[Offset: 0xc10, Size: 0x10]
	LinearColor InteractiveTitleColor;//[Offset: 0xc20, Size: 0x10]
	void UpdateSurvivor();// 0x27cefa0
	void SwapSurvivorIDWithPlayer(ArkCharacterBase* InteractedBy, bool Teleport);// 0x27ce710
	void SetupSurvivorNPC(FString SurvivorID);// 0x27ce630
	void SetUIVisibleBP(bool bVisible);// 0x27ce430
	void PostSwapSurvivorIDWithPlayer(ArkCharacterBase* InteractedBy, FString OldPlayerSurvivorID, bool Teleport);// 0x27cdf90
	void OnTryEndInteractingBy(ArkCharacterBase* InteractedBy, enum InteractionType);// 0x305c9c0
	void OnTryBeginInteractingBy(ArkCharacterBase* InteractedBy, enum InteractionType);// 0x305c9c0
	void OnSwapSurvivorID(bool Silent);// 0x305c9c0
	void OnServerSurvivorStateChanged(byte Result, FString SurvivorIDChanged, enum OldState, enum NewStat);// 0x27cdd10
	void OnPostSetupSurvivorNPC();// 0x305c9c0
	bool IsUIVisibleBP();// 0x27cdc60
	ArkHavenWidgetSurvivorViewModel* GetViewModel();// 0x27cdaf0
	ArkHavenWidgetSurvivorInfo GetSurvivorData();// 0x27cd7f0

--------------------------------
Class: ArkHavenWidgetSurvivorViewModel.Object
	ArkHavenWidgetSurvivorInfo Struct;//[Offset: 0x28, Size: 0xb0]
	void SetStruct(out const ArkHavenWidgetSurvivorInfo Data);// 0x27d52f0
	ArkHavenWidgetSurvivorInfo GetStruct();// 0x27d28c0

--------------------------------
Class: ArkHavenWidgetSurvivorInfo
	FText Name;//[Offset: 0x0, Size: 0x18]
	FText Class;//[Offset: 0x18, Size: 0x18]
	FString SurvivorID;//[Offset: 0x30, Size: 0x10]
	int Rank;//[Offset: 0x40, Size: 0x4]
	enum Type;//[Offset: 0x44, Size: 0x1]
	bool bElite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	int ArmBandID;//[Offset: 0x48, Size: 0x4]
	ArkPerkSkillInfo[] ArmBandSkills;//[Offset: 0x50, Size: 0x10]
	enum Rarity;//[Offset: 0x60, Size: 0x1]
	ArkPerkTree Perks;//[Offset: 0x68, Size: 0x30]
	HavenWidgetSurvivorBonusQuestInfo BonusQuestInfo;//[Offset: 0x98, Size: 0x8]
	int[] Perks_ID;//[Offset: 0xa0, Size: 0x10]

--------------------------------
Class: ArkPerkSkillInfo
	bool IsActiveSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	PaperSprite* SkillIconSprite;//[Offset: 0x8, Size: 0x28]
	FText SkillName;//[Offset: 0x30, Size: 0x18]
	FText SkillDesc;//[Offset: 0x48, Size: 0x18]

--------------------------------
Class: ArkPerkTree.TableRowBase
	int PerkTreeID;//[Offset: 0x8, Size: 0x4]
	ArkPerkTreeEachLevel[] PerkTreeEachLevel;//[Offset: 0x10, Size: 0x10]
	FName PerkTag;//[Offset: 0x20, Size: 0x8]
	int ClassID;//[Offset: 0x28, Size: 0x4]
	bool ForChief;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: ArkPerkTreeEachLevel
	int[] PerkIDS;//[Offset: 0x0, Size: 0x10]
	enum[] PerkTypes;//[Offset: 0x10, Size: 0x10]
	int[] PerkSet;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: HavenWidgetSurvivorBonusQuestInfo
	int BonusQuestState;//[Offset: 0x0, Size: 0x4]
	int BonusQuestID;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ArkHavenSurvivorInfo
	FString SurvivorID;//[Offset: 0x0, Size: 0x10]
	FText FirstName;//[Offset: 0x10, Size: 0x18]
	FText LastName;//[Offset: 0x28, Size: 0x18]
	enum Type;//[Offset: 0x40, Size: 0x1]
	enum Category;//[Offset: 0x41, Size: 0x1]
	enum State;//[Offset: 0x42, Size: 0x1]
	int MedBaySlot;//[Offset: 0x44, Size: 0x4]
	float RecoveryTime;//[Offset: 0x48, Size: 0x4]
	int ClassID;//[Offset: 0x4c, Size: 0x4]
	ArkPerkTree Perks;//[Offset: 0x50, Size: 0x30]
	int gender;//[Offset: 0x80, Size: 0x4]
	int SuitItemID;//[Offset: 0x84, Size: 0x4]
	int RaceID;//[Offset: 0x88, Size: 0x4]
	int ArmBandID;//[Offset: 0x8c, Size: 0x4]
	enum Skin;//[Offset: 0x90, Size: 0x1]
	enum SubRace;//[Offset: 0x91, Size: 0x1]
	enum VOType;//[Offset: 0x92, Size: 0x1]
	enum Rarity;//[Offset: 0x93, Size: 0x1]

--------------------------------
Class: StationCooldowns
	float CooldownMin;//[Offset: 0x0, Size: 0x4]
	float CooldownMax;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: StationPickupItem
	enum State;//[Offset: 0x0, Size: 0x1]
	StaticMeshComponent* MeshComp;//[Offset: 0x8, Size: 0x8]
	SkeletalMeshComponent* SkeletalMeshComp;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ArkStationValidEntryZonePrimComp.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ValidEntryZone[] ValidEntryZones;//[Offset: 0x670, Size: 0x10]
	float AnimationArrivalDistance;//[Offset: 0x680, Size: 0x4]
	float NavMeshProjectDirection;//[Offset: 0x684, Size: 0x4]
	Vector ApproachPoint;//[Offset: 0x688, Size: 0xc]
	bool bApproachPointEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x694, Size: 0x1]
	bool bApproachPointCalculated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x695, Size: 0x1]

--------------------------------
Class: ValidEntryZone
	float CenterDirectionAngle;//[Offset: 0x0, Size: 0x4]
	float IntroAngle;//[Offset: 0x4, Size: 0x4]
	float HalfAngle;//[Offset: 0x8, Size: 0x4]
	Color DebugColor;//[Offset: 0xc, Size: 0x4]
	float ArrivalDistance;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ArkHavenStationInfoComponent.ArkHavenNPCInfoComponentBase.SceneComponent.ActorComponent.Object
	ArkHavenNPCInfoLineWidget* NameLine;//[Offset: 0x3b8, Size: 0x8]
	ArkHavenNPCInfoLineWidget* GroupLine;//[Offset: 0x3c0, Size: 0x8]
	ArkHavenNPCInfoLineWidget* TypeLine;//[Offset: 0x3c8, Size: 0x8]
	ArkHavenNPCInfoLineWidget* StateLine;//[Offset: 0x3d0, Size: 0x8]
	ArkHavenNPCInfoLineWidget* StatusLine;//[Offset: 0x3d8, Size: 0x8]
	ArkHavenNPCInfoLineWidget* Timeline;//[Offset: 0x3e0, Size: 0x8]
	ArkHavenNPCInfoLineWidget* NPCLine;//[Offset: 0x3e8, Size: 0x8]
	ArkHavenNPCInfoLineWidget* ReservedNPCLine;//[Offset: 0x3f0, Size: 0x8]
	ArkStationActor* Station;//[Offset: 0x400, Size: 0x8]

--------------------------------
Class: ArkHavenNPCInfoComponentBase.SceneComponent.ActorComponent.Object
	class ArkHavenNPCInfoWidgetContainer* WidgetClass;//[Offset: 0x3a8, Size: 0x8]
	ArkHavenNPCInfoWidgetContainer* WidgetObject;//[Offset: 0x3b0, Size: 0x8]

--------------------------------
Class: ArkHavenNPCInfoLineWidget.UserWidget.Widget.Visual.Object
	void SetText(out const FText Text);// 0x305c9c0

--------------------------------
Class: ArkHavenNPCInfoWidgetContainer.UserWidget.Widget.Visual.Object
	ArkHavenNPCInfoLineWidget* AddEntry(out const FName WidgetName);// 0x305c9c0

--------------------------------
Class: ArkStationActorApproachTurnDistances
	float MinApproachDistance;//[Offset: 0x0, Size: 0x4]
	float MinTurnDistance;//[Offset: 0x4, Size: 0x4]
	float MaxApproachDistance;//[Offset: 0x8, Size: 0x4]
	float MaxTurnDistance;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 0x4]
	float ExpirationAge;//[Offset: 0x4, Size: 0x4]
	float Strength;//[Offset: 0x8, Size: 0x4]
	Vector StimulusLocation;//[Offset: 0xc, Size: 0xc]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 0xc]
	FName Tag;//[Offset: 0x24, Size: 0x8]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: ArkAvatarAttachmentItemInfo
	<int,class ArkItemAvatarAttachment> AttachmentSlots;//[Offset: 0x0, Size: 0x50]
	<int,class ArkItemAvatarDecal> DecalSlots;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: ArkItemAvatarAttachment.ArkItemAvatar.ArkItem.Object

--------------------------------
Class: ArkItemAvatarDecal.ArkItemDecal.ArkItem.Object
	enum PartType;//[Offset: 0xc0, Size: 0x1]

--------------------------------
Class: ArkItemDecal.ArkItem.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x98, Size: 0x28]

--------------------------------
Class: WalkGreetConfig
	float Probability;//[Offset: 0x0, Size: 0x4]
	AnimMontage* GreetMontage;//[Offset: 0x8, Size: 0x8]
	AnimMontage* GreetMontageFemale;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ArkHavenNPCInfoComponent.ArkHavenNPCInfoComponentBase.SceneComponent.ActorComponent.Object
	ArkHavenNPCInfoLineWidget* NameLine;//[Offset: 0x3c0, Size: 0x8]
	ArkHavenNPCInfoLineWidget* StationLine;//[Offset: 0x3c8, Size: 0x8]
	ArkHavenNPCInfoLineWidget* AnimStateLine;//[Offset: 0x3d0, Size: 0x8]
	ArkHavenNPCInfoLineWidget* StationGroupLine;//[Offset: 0x3d8, Size: 0x8]
	ArkHavenNPCInfoLineWidget* BTStateLine;//[Offset: 0x3e0, Size: 0x8]
	ArkHavenNPCInfoLineWidget* AvoidLine;//[Offset: 0x3e8, Size: 0x8]

--------------------------------
Class: ArkHavenNPCMainAnimInstance.ArkHavenNPCAnimInstanceBase.ArkAnimInstanceBase.AnimInstance.Object
	bool RotateToStationTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f2, Size: 0x1]
	float RotateToStationAngle;//[Offset: 0x2f4, Size: 0x4]
	bool LookAtUseAnimCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1]
	Rotator AOLookAtRotator;//[Offset: 0x308, Size: 0xc]
	Vector AOLookAtLocation;//[Offset: 0x314, Size: 0xc]
	float WalkPlayRate;//[Offset: 0x320, Size: 0x4]
	enum State;//[Offset: 0x324, Size: 0x1]
	enum PrevState;//[Offset: 0x325, Size: 0x1]
	float RotationDelta;//[Offset: 0x328, Size: 0x4]
	float InitialRotationToTarget;//[Offset: 0x32c, Size: 0x4]
	bool AnimIsLeftFoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	float RootMotionRotationDelta;//[Offset: 0x334, Size: 0x4]
	float MotionTurnThresholdAngle;//[Offset: 0x338, Size: 0x4]
	float IdleTurnThresholdAngle;//[Offset: 0x33c, Size: 0x4]
	float MoveSpeedThreshold;//[Offset: 0x340, Size: 0x4]
	bool bKnockbackActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 0x1]
	float KnockbackDirection;//[Offset: 0x348, Size: 0x4]
	enum KnockbackPower;//[Offset: 0x34c, Size: 0x1]
	bool bIsNpcMale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34d, Size: 0x1]
	FName CurrentLocomotionState;//[Offset: 0x350, Size: 0x8]
	float LastMoveLookAtEnd;//[Offset: 0x358, Size: 0x4]
	bool bInMoveLookAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c, Size: 0x1]
	ArkFacialAdditiveBlendAlphaData FacialAdditiveBlendAlphaData;//[Offset: 0x360, Size: 0x50]
	ArkFacialAdditiveAnimData FacialAdditiveAnimData;//[Offset: 0x3b0, Size: 0x50]
	Vector PreviousLocation;//[Offset: 0x404, Size: 0xc]
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x410, Size: 0x8]
	ArkHavenNPCMovementComponent* MovementComponent;//[Offset: 0x418, Size: 0x8]
	ArkHavenNpc* NPC;//[Offset: 0x420, Size: 0x8]
	float CapsuleHalfHeight;//[Offset: 0x428, Size: 0x4]
	void StateOnMoveLookAt(bool bIsStart);// 0x27b46f0
	void SetState(enum InState, FString Source);// 0x27b4470
	void SetInStationKnockbackActive(bool bActive);// 0x14a8ec0
	void SetAOLookAtLocation(const Vector LookAtLocation);// 0x27b4370
	void RotateToFaceStation(float DeltaAngle, out const delegate OnFaceStationComplete);// 0x305c9c0
	void ResetRootMotionRotationDelta();// 0x27b4350
	void ResetFacialAnim(AnimSequence*[] AnimSequences);// 0x27b4270
	void OnRotateToStationComplete__DelegateSignature();// 0x305c9c0
	void InStationKnockbackEnd();// 0x27b3ac0

--------------------------------
Class: ArkFacialAdditiveBlendAlphaData

--------------------------------
Class: ArkFacialAdditiveAnimData

--------------------------------
Class: ArkHavenNPCMovementComponent.ArkCharacterMovementBase.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0x1e0, Size: 0x10]
	class AISense* DominantSense;//[Offset: 0x1f0, Size: 0x8]
	AIController* AIOwner;//[Offset: 0x208, Size: 0x8]
	delegate OnPerceptionUpdated;//[Offset: 0x290, Size: 0x10]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x2a0, Size: 0x10]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x4efc860
	void RequestStimuliListenerUpdate();// 0x4efc560
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x4efc120
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x4efb500
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x4efb410
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x4efb2d0
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x4efb080
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x4efae80
	void ForgetAll();// 0x4efade0

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x28, Size: 0x4]
	float MaxAge;//[Offset: 0x2c, Size: 0x4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 0x4]
	enum NotifyType;//[Offset: 0x2c, Size: 0x1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: AIPerceptionSystem.AISubsystem.Object
	AISense*[] Senses;//[Offset: 0x88, Size: 0x10]
	float PerceptionAgingRate;//[Offset: 0x98, Size: 0x4]
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* perceptionEvent);// 0x4efc4b0
	void ReportEvent(AISenseEvent* perceptionEvent);// 0x4efc430
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x4efc320
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x4efc1e0
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x4efb5b0

--------------------------------
Class: AISubsystem.Object
	AISystem* AISystem;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AISystem.AISystemBase.Object
	SoftClassPath PerceptionSystemClassName;//[Offset: 0x58, Size: 0x18]
	SoftClassPath HotSpotManagerClassName;//[Offset: 0x70, Size: 0x18]
	float AcceptanceRadius;//[Offset: 0x88, Size: 0x4]
	float PathfollowingRegularPathPointAcceptanceRadius;//[Offset: 0x8c, Size: 0x4]
	float PathfollowingNavLinkAcceptanceRadius;//[Offset: 0x90, Size: 0x4]
	bool bFinishMoveOnGoalOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	bool bAcceptPartialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 0x1]
	bool bAllowStrafing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 0x1]
	bool bEnableBTAITasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97, Size: 0x1]
	bool bAllowControllersAsEQSQuerier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	bool bEnableDebuggerPlugin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1]
	bool bForgetStaleActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 0x1]
	byte DefaultSightCollisionChannel;//[Offset: 0x9b, Size: 0x1]
	BehaviorTreeManager* BehaviorTreeManager;//[Offset: 0xa0, Size: 0x8]
	EnvQueryManager* EnvironmentQueryManager;//[Offset: 0xa8, Size: 0x8]
	AIPerceptionSystem* PerceptionSystem;//[Offset: 0xb0, Size: 0x8]
	AIAsyncTaskBlueprintProxy*[] AllProxyObjects;//[Offset: 0xb8, Size: 0x10]
	AIHotSpotManager* HotSpotManager;//[Offset: 0xc8, Size: 0x8]
	NavLocalGridManager* NavLocalGrids;//[Offset: 0xd0, Size: 0x8]
	void AILoggingVerbose();// 0x2875c10
	void AIIgnorePlayers();// 0x2875ed0

--------------------------------
Class: BehaviorTreeManager.Object
	int MaxDebuggerSteps;//[Offset: 0x28, Size: 0x4]
	BehaviorTreeTemplateInfo[] LoadedTemplates;//[Offset: 0x30, Size: 0x10]
	BehaviorTreeComponent*[] ActiveComponents;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: BehaviorTreeTemplateInfo
	BehaviorTree* Asset;//[Offset: 0x0, Size: 0x8]
	BTCompositeNode* Template;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x260, Size: 0x10]
	BehaviorTree* DefaultBehaviorTreeAsset;//[Offset: 0x398, Size: 0x8]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x4f057f0
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x4f04f80
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0x4f04c00

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0x1e8, Size: 0x8]
	AIController* AIOwner;//[Offset: 0x1f0, Size: 0x8]
	void StopLogic(FString Reason);// 0x4f06180
	void StartLogic();// 0x4c5c8c0
	void RestartLogic();// 0x27bc740
	bool IsRunning();// 0x4f05720
	bool IsPaused();// 0x26410f0

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0x1e0, Size: 0x8]
	BlackboardData* DefaultBlackboardAsset;//[Offset: 0x1e8, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0x1f0, Size: 0x8]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0x218, Size: 0x10]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x4f06090
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x4f05f60
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x4f05e70
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x4f05da0
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x4f05cd0
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x4f05c00
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x4f05b30
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x4f05a60
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x4f05990
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x4f058c0
	bool IsVectorValueSet(out const FName KeyName);// 0x4f05750
	Vector GetValueAsVector(out const FName KeyName);// 0x4f05610
	FString GetValueAsString(out const FName KeyName);// 0x4f05530
	Rotator GetValueAsRotator(out const FName KeyName);// 0x4f05480
	Object* GetValueAsObject(out const FName KeyName);// 0x4f053e0
	FName GetValueAsName(out const FName KeyName);// 0x4f05340
	int GetValueAsInt(out const FName KeyName);// 0x4f052a0
	float GetValueAsFloat(out const FName KeyName);// 0x4f05200
	byte GetValueAsEnum(out const FName KeyName);// 0x4f05160
	class Object GetValueAsClass(out const FName KeyName);// 0x4f050c0
	bool GetValueAsBool(out const FName KeyName);// 0x4f05020
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x4f04e90
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x4f04da0
	void ClearValue(out const FName KeyName);// 0x4f04d10

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStartAILogicOnPossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x398, Size: 0x1]
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x398, Size: 0x1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x398, Size: 0x1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x398, Size: 0x1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x398, Size: 0x1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x398, Size: 0x1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x398, Size: 0x1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x3a0, Size: 0x8]
	BrainComponent* BrainComponent;//[Offset: 0x3a8, Size: 0x8]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x3b0, Size: 0x8]
	PawnActionsComponent* ActionsComp;//[Offset: 0x3b8, Size: 0x8]
	BlackboardComponent* Blackboard;//[Offset: 0x3c0, Size: 0x8]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x3c8, Size: 0x8]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x3d0, Size: 0x8]
	delegate ReceiveMoveCompleted;//[Offset: 0x3d8, Size: 0x10]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x4efcee0
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x4efccb0
	void SetPathFollowingComponent(PathFollowingComponent* NewPFComponent);// 0x4efc7e0
	void SetMoveBlockDetection(bool bEnable);// 0x4efc750
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x4efc580
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x305c9c0
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x4efbf90
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x4efbd20
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x4efbb00
	void K2_SetFocus(Actor* NewFocus);// 0x4efb970
	void K2_SetFocalPoint(Vector FP);// 0x4efb8e0
	void K2_ClearFocus();// 0x4efb8c0
	bool HasPartialPath();// 0x4efb6e0
	PathFollowingComponent* GetPathFollowingComponent();// 0x4efb3f0
	byte GetMoveStatus();// 0x4efb3c0
	Vector GetImmediateMoveDestination();// 0x4efb290
	Actor* GetFocusActor();// 0x4efb260
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x4efb1b0
	Vector GetFocalPoint();// 0x4efb170
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x4caaac0
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x4efaba0

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0x218, Size: 0x8]
	NavigationData* MyNavData;//[Offset: 0x228, Size: 0x8]
	void OnNavDataRegistered(NavigationData* NavData);// 0x4f14be0
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x4f14a50
	Vector GetPathDestination();// 0x4f14660
	byte GetPathActionType();// 0x4f14630

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x2f0, Size: 0x8]
	NavDataConfig NavDataConfig;//[Offset: 0x2f8, Size: 0x78]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x370, Size: 0x1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x370, Size: 0x1]
	bool bAutoDestroyWhenNoNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x370, Size: 0x1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x370, Size: 0x1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x370, Size: 0x1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x370, Size: 0x1]
	enum RuntimeGeneration;//[Offset: 0x374, Size: 0x1]
	float ObservedPathsTickInterval;//[Offset: 0x378, Size: 0x4]
	UInt32Property DataVersion;//[Size: 0x4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x460, Size: 0x10]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x30, Size: 0x8]
	Color Color;//[Offset: 0x38, Size: 0x4]
	Vector DefaultQueryExtent;//[Offset: 0x3c, Size: 0xc]
	class Actor* NavigationDataClass;//[Offset: 0x48, Size: 0x8]
	class Actor* NavDataClass;//[Offset: 0x50, Size: 0x28]

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 0x10]
	int AreaId;//[Offset: 0x10, Size: 0x4]
	class Object* AreaClass;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0x1e0, Size: 0x8]
	PawnActionStack[] ActionStacks;//[Offset: 0x1e8, Size: 0x10]
	PawnActionEvent[] ActionEvents;//[Offset: 0x1f8, Size: 0x10]
	PawnAction* CurrentAction;//[Offset: 0x208, Size: 0x8]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x4f14950
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x4f14860
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x4f147d0
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x4f14740

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 0x8]
	PawnAction* ParentAction;//[Offset: 0x30, Size: 0x8]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 0x8]
	Object* Instigator;//[Offset: 0x40, Size: 0x8]
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 0x8]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1]
	byte GetActionPriority();// 0x4f14610
	void Finish(byte WithResult);// 0x4166430
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x4f143c0

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 0x10]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 0x4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 0x8]
	float TravelCostOverride;//[Offset: 0x8, Size: 0x4]
	float EnteringCostOverride;//[Offset: 0xc, Size: 0x4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: NavArea.NavAreaBase.Object
	float DefaultCost;//[Offset: 0x30, Size: 0x4]
	float FixedAreaEnteringCost;//[Offset: 0x34, Size: 0x4]
	Color DrawColor;//[Offset: 0x38, Size: 0x4]
	NavAgentSelector SupportedAgents;//[Offset: 0x3c, Size: 0x4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x40, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x40, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x40, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x40, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x40, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x41, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x41, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x41, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x41, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x41, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x41, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x41, Size: 0x1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: EnvQueryManager.AISubsystem.Object
	EnvQueryInstanceCache[] InstanceCache;//[Offset: 0xa8, Size: 0x10]
	EnvQueryContext*[] LocalContexts;//[Offset: 0xb8, Size: 0x10]
	EnvQueryInstanceBlueprintWrapper*[] GCShieldedWrappers;//[Offset: 0xc8, Size: 0x10]
	float MaxAllowedTestingTime;//[Offset: 0x12c, Size: 0x4]
	bool bTestQueriesUsingBreadth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	int QueryCountWarningThreshold;//[Offset: 0x134, Size: 0x4]
	double QueryCountWarningInterval;//[Offset: 0x138, Size: 0x8]
	static EnvQueryInstanceBlueprintWrapper* RunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Object* Querier, byte RunMode, class EnvQueryInstanceBlueprintWrapper WrapperClass);// 0x4f11660

--------------------------------
Class: EnvQuery.DataAsset.Object
	FName QueryName;//[Offset: 0x30, Size: 0x8]
	EnvQueryOption*[] Options;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: EnvQueryOption.Object
	EnvQueryGenerator* Generator;//[Offset: 0x28, Size: 0x8]
	EnvQueryTest*[] Tests;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: EnvQueryGenerator.EnvQueryNode.Object
	FString OptionName;//[Offset: 0x30, Size: 0x10]
	class EnvQueryItemType* ItemType;//[Offset: 0x40, Size: 0x8]
	bool bAutoSortTests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: EnvQueryNode.Object
	int VerNum;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest.EnvQueryNode.Object
	int TestOrder;//[Offset: 0x30, Size: 0x4]
	byte TestPurpose;//[Offset: 0x34, Size: 0x1]
	FString TestComment;//[Offset: 0x38, Size: 0x10]
	byte MultipleContextFilterOp;//[Offset: 0x48, Size: 0x1]
	byte MultipleContextScoreOp;//[Offset: 0x49, Size: 0x1]
	byte FilterType;//[Offset: 0x4a, Size: 0x1]
	AIDataProviderBoolValue BoolValue;//[Offset: 0x50, Size: 0x38]
	AIDataProviderFloatValue FloatValueMin;//[Offset: 0x88, Size: 0x38]
	AIDataProviderFloatValue FloatValueMax;//[Offset: 0xc0, Size: 0x38]
	byte ScoringEquation;//[Offset: 0xf9, Size: 0x1]
	byte ClampMinType;//[Offset: 0xfa, Size: 0x1]
	byte ClampMaxType;//[Offset: 0xfb, Size: 0x1]
	enum NormalizationType;//[Offset: 0xfc, Size: 0x1]
	AIDataProviderFloatValue ScoreClampMin;//[Offset: 0x100, Size: 0x38]
	AIDataProviderFloatValue ScoreClampMax;//[Offset: 0x138, Size: 0x38]
	AIDataProviderFloatValue ScoringFactor;//[Offset: 0x170, Size: 0x38]
	AIDataProviderFloatValue ReferenceValue;//[Offset: 0x1a8, Size: 0x38]
	bool bDefineReferenceValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	bool bWorkOnFloatValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1]

--------------------------------
Class: AIDataProviderBoolValue.AIDataProviderTypedValue.AIDataProviderValue
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AIDataProviderTypedValue.AIDataProviderValue
	class Object* PropertyType;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: AIDataProviderValue
	AIDataProvider* DataBinding;//[Offset: 0x10, Size: 0x8]
	FName DataField;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: AIDataProvider.Object

--------------------------------
Class: AIDataProviderFloatValue.AIDataProviderTypedValue.AIDataProviderValue
	float DefaultValue;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: EnvQueryInstanceBlueprintWrapper.Object
	int QueryID;//[Offset: 0x30, Size: 0x4]
	class EnvQueryItemType* ItemType;//[Offset: 0x58, Size: 0x8]
	int OptionIndex;//[Offset: 0x60, Size: 0x4]
	delegate OnQueryFinishedEvent;//[Offset: 0x68, Size: 0x10]
	void SetNamedParam(FName ParamName, float Value);// 0x4f117e0
	Vector[] GetResultsAsLocations();// 0x4f115e0
	Actor*[] GetResultsAsActors();// 0x4f11560
	bool GetQueryResultsAsLocations(out Vector[] ResultLocations);// 0x4f114a0
	bool GetQueryResultsAsActors(out Actor*[] ResultActors);// 0x4f113e0
	float GetItemScore(int ItemIndex);// 0x4f11350
	void EQSQueryDoneSignature__DelegateSignature(EnvQueryInstanceBlueprintWrapper* QueryInstance, byte QueryStatus);// 0x305c9c0

--------------------------------
Class: EnvQueryInstanceCache
	EnvQuery* Template;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: EnvQueryContext.Object

--------------------------------
Class: AIAsyncTaskBlueprintProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFail;//[Offset: 0x38, Size: 0x10]
	void OnMoveCompleted(AIRequestID RequestID, byte MovementResult);// 0x4efc060

--------------------------------
Class: AIRequestID
	UInt32Property RequestID;//[Size: 0x4]

--------------------------------
Class: AIHotSpotManager.Object

--------------------------------
Class: NavLocalGridManager.Object
	static bool SetLocalNavigationGridDensity(Object* WorldContextObject, float CellSize);// 0x4f14dd0
	static void RemoveLocalNavigationGrid(Object* WorldContextObject, int GridId, bool bRebuildGrids);// 0x4f14c60
	static bool FindLocalNavigationGridPath(Object* WorldContextObject, out const Vector Start, out const Vector End, out Vector[] PathPoints);// 0x4f14480
	static int AddLocalNavigationGridForPoints(Object* WorldContextObject, out const Vector[] Locations, const int Radius2D, const float Height, bool bRebuildGrids);// 0x4f14200
	static int AddLocalNavigationGridForPoint(Object* WorldContextObject, out const Vector Location, const int Radius2D, const float Height, bool bRebuildGrids);// 0x4f14050
	static int AddLocalNavigationGridForCapsule(Object* WorldContextObject, out const Vector Location, float CapsuleRadius, float CapsuleHalfHeight, const int Radius2D, const float Height, bool bRebuildGrids);// 0x4f13e50
	static int AddLocalNavigationGridForBox(Object* WorldContextObject, out const Vector Location, Vector Extent, Rotator Rotation, const int Radius2D, const float Height, bool bRebuildGrids);// 0x4f13c30

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 0x10]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: ArkDialogueComponent.ActorComponent.Object
	delegate OnPlayDialogueLine;//[Offset: 0x1e0, Size: 0x10]
	FText ActorSubtitleName;//[Offset: 0x1f8, Size: 0x18]
	float LipSyncBlendInTime;//[Offset: 0x210, Size: 0x4]
	float LipSyncBlendOutTime;//[Offset: 0x214, Size: 0x4]
	bool bCombatVOEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1]
	ArkVOPlayInstance[] VOPlayInstances;//[Offset: 0x220, Size: 0x10]
	bool IsCinematicTalking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	<FString,ArkDialogLineVOData> AkEventLoadMap;//[Offset: 0x248, Size: 0x50]
	DataTable* DialogLogicalLineTable;//[Offset: 0x2a0, Size: 0x8]
	<enum,DataTable*> DialogLineVODataConfigMap;//[Offset: 0x2a8, Size: 0x50]
	bool bUseInteractiveTitleAsActorSubtitleName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	FName ActorUniqueFName;//[Offset: 0x2fc, Size: 0x8]
	DataTable* DialogLineVODataConfig;//[Offset: 0x308, Size: 0x8]
	enum VOTypeOverride;//[Offset: 0x368, Size: 0x1]
	float MotionStartTime;//[Offset: 0x36c, Size: 0x4]
	float MotionLastTime;//[Offset: 0x370, Size: 0x4]
	ArkPlayLineMotion MotionPlaying;//[Offset: 0x378, Size: 0x10]
	AnimSequenceTable TalkingAnimSequenceTable;//[Offset: 0x388, Size: 0x10]
	bool bPlayingLineShowSubtitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 0x1]
	ArkConversationDirector* ConversationDirector;//[Offset: 0x460, Size: 0x8]
	Actor* CachedOwner;//[Offset: 0x468, Size: 0x8]
	Actor* PromptVOPlayerPtr;//[Offset: 0x548, Size: 0x8]
	<int,PlayingSubtitleList> CurrentPlayingSubtitles;//[Offset: 0x550, Size: 0x50]
	DataTable* DialogLineVODataTable;//[Offset: 0x5a0, Size: 0x8]
	class Actor* PromptVOPlayerClass;//[Offset: 0x5a8, Size: 0x8]
	AkAudioEvent* StopContinueAkEvent;//[Offset: 0x5b0, Size: 0x8]
	void StopContinueSoundEvent();// 0x2702ca0
	void SetMotionStart(AnimSequence* MotionSequence, float LastTime);// 0x2702bd0
	void SetMotionEnd();// 0x2702bb0
	void SetIsCinematicTalking(bool Val);// 0x2702a80
	void Say(out const FName Event, out const ArkFactDictionary ContextFactDictionary, out const delegate OnPlayDialogueEnd, out enum PlayLineResult, ArkConversationDirector* Director);// 0x2702690
	void PlaySingleLine(out const ArkContextualDialogueLine LineToPlay, out const ArkFactDictionary ContextFactDictionary, out const delegate OnPlayDialogueEnd);// 0x2702340
	void OnTimerCombatVOEvent(FName Event);// 0x27022c0
	void OnAKEventEnd(enum CallbackType, AkCallbackInfo* CallbackInfo);// 0x27021c0
	bool IsTalking();// 0x2702110
	void InteruptPlayingLine();// 0x27020c0
	void InitialiseInternal();// 0x27020a0
	bool HandleVOEvent(out const FName Event);// 0x2701fc0
	AnimSequenceTable GetTalkingAnimSequenceTable();// 0x2701f00
	bool GetIsCinematicTalking();// 0x2701e80
	int GetDialogueManagerId();// 0x2701de0
	ArkAkComponent* GetAttachedAkComponent();// 0x2701db0
	void EvaluateValidLines(out const FName Event, ArkFactDictionary ContextFactDictionary, out ArkContextualDialogueLine[] MatchingLines);// 0x2701a80
	void CombatVOEvent(out const FName Event);// 0x27017e0
	void ChooseLine(out const ArkContextualDialogueLine[] Lines, out ArkContextualDialogueLine ChosenLine);// 0x2701610
	void CheckVOState();// 0x27015f0
	void BroadcastVOEvent(float Radius, out const FName Event);// 0x27014e0

--------------------------------
Class: ArkVOPlayInstance

--------------------------------
Class: ArkDialogLineVOData
	FName AkEventName;//[Offset: 0x0, Size: 0x8]
	SoftObjectPath AkEventPath;//[Offset: 0x8, Size: 0x18]
	FString[] CulturedSubtitles;//[Offset: 0x20, Size: 0x10]
	AnimSequence* LipSyncAnim;//[Offset: 0x30, Size: 0x28]
	AnimSequence* MotionAsset;//[Offset: 0x58, Size: 0x8]
	FName ToTeamMateEvent;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: ArkPlayLineMotion
	AnimSequence* Asset;//[Offset: 0x0, Size: 0x8]
	float StartTime;//[Offset: 0x8, Size: 0x4]
	float LastTime;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ArkConversationDirector.Actor.Object
	SceneComponent* SceneRoot;//[Offset: 0x2e8, Size: 0x8]
	SceneComponent* SceneNPCCameraRoot;//[Offset: 0x2f0, Size: 0x8]
	SceneComponent* SceneNPCLightRoot;//[Offset: 0x2f8, Size: 0x8]
	ChildActorComponent*[] NPCSideCameraChilds;//[Offset: 0x300, Size: 0x10]
	ConversationCameraPositionConfig[] DefaultPosConfig;//[Offset: 0x310, Size: 0x10]
	float CameraBlendInTime;//[Offset: 0x320, Size: 0x4]
	float CameraBlendOutTime;//[Offset: 0x324, Size: 0x4]
	float WalkMoveSpeed;//[Offset: 0x328, Size: 0x4]
	float WalkTurnSpeed;//[Offset: 0x32c, Size: 0x4]
	float DefaultConversationDistance;//[Offset: 0x330, Size: 0x4]
	ArkSoftSkeletalMeshComponent* PlayerPreviewMesh;//[Offset: 0x338, Size: 0x8]
	ArkSoftSkeletalMeshComponent* NPCPreviewMesh;//[Offset: 0x340, Size: 0x8]
	BoxComponent* BoxComp;//[Offset: 0x348, Size: 0x8]
	bool bNPCTurnWhenConversation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1]
	float FixedApproachRotateAngleZ;//[Offset: 0x354, Size: 0x4]
	bool bCameraCheckWallHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	bool bCameraSwitchSkipSameTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x359, Size: 0x1]
	bool bThreeWayTurnAdjustment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35a, Size: 0x1]
	class CameraShake* CameraShakeClass;//[Offset: 0x360, Size: 0x8]
	CameraShake* CameraShakeInst;//[Offset: 0x368, Size: 0x8]
	float CameraLastTimeMin;//[Offset: 0x370, Size: 0x4]
	float CameraLastTimeMax;//[Offset: 0x374, Size: 0x4]
	float LastSetTimerTime;//[Offset: 0x378, Size: 0x4]
	ArkConversationCineCameraActor*[] NPCCameras;//[Offset: 0x380, Size: 0x10]
	FName[] StartCameraGroup;//[Offset: 0x390, Size: 0x10]
	FName LastCameraGroup;//[Offset: 0x3a0, Size: 0x8]
	<FName,ConversationCameraGroup> CameraGroups;//[Offset: 0x3a8, Size: 0x50]
	LightComponent* CurrentLight;//[Offset: 0x418, Size: 0x8]
	Rotator NPCOriginRotation;//[Offset: 0x440, Size: 0xc]
	void VOLineStart(Actor* Speaker);// 0x26ef020
	void StartDirectConversation(Actor* NPC, Actor* Player);// 0x26eef60
	void PlayerWalkToPosReached();// 0x26ee6c0
	void PlayerWalkToPos();// 0x26ee6a0
	void PlayerTeleportToPos();// 0x26ee680
	void OnSwitchTimerReached();// 0x26ee580
	void OnPlayerPressSkip();// 0xae2270
	void DestroySelf();// 0x26ee0e0
	void BP_OnStopConversationForce(Actor* NPCPtr, Actor* PlayerPtr);// 0x305c9c0

--------------------------------
Class: ConversationCameraPositionConfig
	float CamHeight;//[Offset: 0x0, Size: 0x4]
	float AxisDistance;//[Offset: 0x4, Size: 0x4]
	float OffAxisDistance;//[Offset: 0x8, Size: 0x4]
	float YawAngle;//[Offset: 0xc, Size: 0x4]
	float PitchAngle;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ArkConversationCineCameraActor.CineCameraActor.CameraActor.Actor.Object
	float Weight;//[Offset: 0x9c0, Size: 0x4]
	CameraAnim* CameraAnimToPlay;//[Offset: 0x9c8, Size: 0x8]
	FName ConversationSwitchGroupTag;//[Offset: 0x9d0, Size: 0x8]

--------------------------------
Class: CineCameraActor.CameraActor.Actor.Object
	CameraLookatTrackingSettings LookatTrackingSettings;//[Offset: 0x960, Size: 0x50]
	CineCameraComponent* GetCineCameraComponent();// 0x41746a0

--------------------------------
Class: CineCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0xa60, Size: 0xc]
	CameraFilmbackSettings Filmback;//[Offset: 0xa6c, Size: 0xc]
	CameraLensSettings LensSettings;//[Offset: 0xa78, Size: 0x18]
	CameraFocusSettings FocusSettings;//[Offset: 0xa90, Size: 0x58]
	float CurrentFocalLength;//[Offset: 0xae8, Size: 0x4]
	float CurrentAperture;//[Offset: 0xaec, Size: 0x4]
	float CurrentFocusDistance;//[Offset: 0xaf0, Size: 0x4]
	NamedFilmbackPreset[] FilmbackPresets;//[Offset: 0xb00, Size: 0x10]
	NamedLensPreset[] LensPresets;//[Offset: 0xb10, Size: 0x10]
	FString DefaultFilmbackPresetName;//[Offset: 0xb20, Size: 0x10]
	FString DefaultFilmbackPreset;//[Offset: 0xb30, Size: 0x10]
	FString DefaultLensPresetName;//[Offset: 0xb40, Size: 0x10]
	float DefaultLensFocalLength;//[Offset: 0xb50, Size: 0x4]
	float DefaultLensFStop;//[Offset: 0xb54, Size: 0x4]
	void SetLensPresetByName(FString InPresetName);// 0x4174b00
	void SetFilmbackPresetByName(FString InPresetName);// 0x4174a60
	void SetCurrentFocalLength(out const float InFocalLength);// 0x41749c0
	float GetVerticalFieldOfView();// 0x4174990
	static NamedLensPreset[] GetLensPresetsCopy();// 0x41748b0
	FString GetLensPresetName();// 0x4174830
	float GetHorizontalFieldOfView();// 0x4174800
	FString GetFilmbackPresetName();// 0x4174780
	FString GetDefaultFilmbackPresetName();// 0x41746c0

--------------------------------
Class: NamedLensPreset
	FString Name;//[Offset: 0x0, Size: 0x10]
	CameraLensSettings LensSettings;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: CameraLensSettings
	float MinFocalLength;//[Offset: 0x0, Size: 0x4]
	float MaxFocalLength;//[Offset: 0x4, Size: 0x4]
	float MinFStop;//[Offset: 0x8, Size: 0x4]
	float MaxFStop;//[Offset: 0xc, Size: 0x4]
	float MinimumFocusDistance;//[Offset: 0x10, Size: 0x4]
	int DiaphragmBladeCount;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: CameraFilmbackSettings
	float SensorWidth;//[Offset: 0x0, Size: 0x4]
	float SensorHeight;//[Offset: 0x4, Size: 0x4]
	float SensorAspectRatio;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CameraFocusSettings
	enum FocusMethod;//[Offset: 0x0, Size: 0x1]
	float ManualFocusDistance;//[Offset: 0x4, Size: 0x4]
	CameraTrackingFocusSettings TrackingFocusSettings;//[Offset: 0x8, Size: 0x38]
	bool bDrawDebugFocusPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	Color DebugFocusPlaneColor;//[Offset: 0x44, Size: 0x4]
	bool bSmoothFocusChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	float FocusSmoothingInterpSpeed;//[Offset: 0x4c, Size: 0x4]
	float FocusOffset;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: CameraTrackingFocusSettings
	Actor* ActorToTrack;//[Offset: 0x0, Size: 0x28]
	Vector RelativeOffset;//[Offset: 0x28, Size: 0xc]
	bool bDrawDebugTrackingFocusPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: NamedFilmbackPreset
	FString Name;//[Offset: 0x0, Size: 0x10]
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: CameraLookatTrackingSettings
	bool bEnableLookAtTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bDrawDebugLookAtTrackingPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	float LookAtTrackingInterpSpeed;//[Offset: 0x4, Size: 0x4]
	Actor* ActorToTrack;//[Offset: 0x18, Size: 0x28]
	Vector RelativeOffset;//[Offset: 0x40, Size: 0xc]
	bool bAllowRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: ConversationCameraGroup
	ArkConversationCineCameraActor*[] Group;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x3d8, Size: 0x4]
	float MaxDrawDistance;//[Offset: 0x3dc, Size: 0x4]
	float MaxDistanceFadeRange;//[Offset: 0x3e0, Size: 0x4]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e4, Size: 0x1]
	int ShadowMapChannel;//[Offset: 0x3e8, Size: 0x4]
	float MinRoughness;//[Offset: 0x3f0, Size: 0x4]
	float SpecularScale;//[Offset: 0x3f4, Size: 0x4]
	float ShadowResolutionScale;//[Offset: 0x3f8, Size: 0x4]
	float ShadowBias;//[Offset: 0x3fc, Size: 0x4]
	float ShadowSlopeBias;//[Offset: 0x400, Size: 0x4]
	float ShadowSharpen;//[Offset: 0x404, Size: 0x4]
	float ContactShadowLength;//[Offset: 0x408, Size: 0x4]
	bool ContactShadowLengthInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40c, Size: 0x1]
	float QDMContactShadowRayStartBias;//[Offset: 0x410, Size: 0x4]
	float QDMContactShadowCompareTolerance;//[Offset: 0x414, Size: 0x4]
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x418, Size: 0x1]
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x418, Size: 0x1]
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x418, Size: 0x1]
	bool bCastShadowsFromSwarm;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x418, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x418, Size: 0x1]
	bool bForceCachedShadowsForMovablePrimitives;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x418, Size: 0x1]
	bool bVisibleInScalabilityCine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41c, Size: 0x1]
	bool bVisibleInScalabilityVeryHigh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x41c, Size: 0x1]
	bool bVisibleInScalabilityHigh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x41c, Size: 0x1]
	bool bVisibleInScalabilityNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x41c, Size: 0x1]
	bool bVisibleInScalabilityLow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x41c, Size: 0x1]
	ShadowClipVolume*[] ClipVolumes;//[Offset: 0x420, Size: 0x10]
	LightingChannels LightingChannels;//[Offset: 0x430, Size: 0x1]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x438, Size: 0x8]
	Vector LightFunctionScale;//[Offset: 0x440, Size: 0xc]
	TextureLightProfile* IESTexture;//[Offset: 0x450, Size: 0x8]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x458, Size: 0x1]
	float IESBrightnessScale;//[Offset: 0x45c, Size: 0x4]
	float LightFunctionFadeDistance;//[Offset: 0x460, Size: 0x4]
	float DisabledBrightness;//[Offset: 0x464, Size: 0x4]
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x468, Size: 0x1]
	float BloomScale;//[Offset: 0x46c, Size: 0x4]
	float BloomThreshold;//[Offset: 0x470, Size: 0x4]
	float BloomMaxBrightness;//[Offset: 0x474, Size: 0x4]
	Color BloomTint;//[Offset: 0x478, Size: 0x4]
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47c, Size: 0x1]
	float RayStartOffsetDepthScale;//[Offset: 0x480, Size: 0x4]
	bool bAffectWaterCaustics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x484, Size: 0x1]
	float WaterCausticsPrecision;//[Offset: 0x488, Size: 0x4]
	int NumWaterCausticsMapCascades;//[Offset: 0x48c, Size: 0x4]
	float WaterCausticsMapCascadeScale;//[Offset: 0x490, Size: 0x4]
	void SetWaterCausticsPrecision(float NewValue);// 0x4c22bb0
	void SetWaterCausticsMapCascadeScale(float NewValue);// 0x4c22b30
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x4c22ab0
	void SetUseIESBrightness(bool bNewValue);// 0x4c22a20
	void SetTransmission(bool bNewValue);// 0x4c22990
	void SetTemperature(float NewTemperature);// 0x4c22910
	void SetSpecularScale(float NewValue);// 0x4c22890
	void SetShadowSlopeBias(float NewValue);// 0x4c22780
	void SetShadowBias(float NewValue);// 0x4c22700
	void SetNumWaterCausticsMapCascades(int NewValue);// 0x4c22600
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x4c224e0
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x4c22450
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x4c22340
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x4c22240
	void SetLightFunctionDisabledBrightness(float NewValue);// 0x4c22140
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x4c22070
	void SetIntensity(float NewIntensity);// 0x4c21ef0
	void SetIndirectLightingIntensity(float NewIntensity);// 0x4c21e70
	void SetIESTexture(TextureLightProfile* NewValue);// 0x4c21df0
	void SetIESBrightnessScale(float NewValue);// 0x4c21d70
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);// 0x4c21ce0
	void SetEnableLightShaftBloom(bool bNewValue);// 0x4c21bc0
	void SetBloomTint(Color NewValue);// 0x4c21880
	void SetBloomThreshold(float NewValue);// 0x4c21800
	void SetBloomScale(float NewValue);// 0x4c21780
	void SetBloomMaxBrightness(float NewValue);// 0x4c21700
	void SetAffectWaterCaustics(bool bNewValue);// 0x4c21670
	void SetAffectTranslucentLighting(bool bNewValue);// 0x4c215e0
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0x4c214c0

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x3a8, Size: 0x10]
	float Brightness;//[Offset: 0x3b8, Size: 0x4]
	float Intensity;//[Offset: 0x3bc, Size: 0x4]
	Color LightColor;//[Offset: 0x3c0, Size: 0x4]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c4, Size: 0x1]
	bool bContributeToGI;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c4, Size: 0x1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c4, Size: 0x1]
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c4, Size: 0x1]
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c4, Size: 0x1]
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c4, Size: 0x1]
	bool bTransmission;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c4, Size: 0x1]
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c4, Size: 0x1]
	bool bMainLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c5, Size: 0x1]
	bool bCastDeepShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c5, Size: 0x1]
	bool bCastRaytracedShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c5, Size: 0x1]
	bool bAffectReflection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c5, Size: 0x1]
	bool bAffectGlobalIllumination;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c5, Size: 0x1]
	float IndirectLightingIntensity;//[Offset: 0x3c8, Size: 0x4]
	float VolumetricScatteringIntensity;//[Offset: 0x3cc, Size: 0x4]
	int SamplesPerPixel;//[Offset: 0x3d0, Size: 0x4]
	void SetSamplesPerPixel(int NewValue);// 0x4c25c70
	void SetCastVolumetricShadow(bool bNewValue);// 0x4c25ad0
	void SetCastShadows(bool bNewValue);// 0x4c25a40
	void SetCastRaytracedShadow(bool bNewValue);// 0x4c259b0
	void SetCastDeepShadow(bool bNewValue);// 0x4c25920
	void SetAffectReflection(bool bNewValue);// 0x4c25810
	void SetAffectGlobalIllumination(bool bNewValue);// 0x4c25780
	LinearColor GetLightColor();// 0x4c25610

--------------------------------
Class: ShadowClipVolume.Volume.Brush.Actor.Object

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.StreamableRenderAsset.Object
	float Brightness;//[Offset: 0x198, Size: 0x4]
	float TextureMultiplier;//[Offset: 0x19c, Size: 0x4]

--------------------------------
Class: PlayingSubtitleList
	FString[] Subtitles;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ArkFactDictionary
	<FName,ArkBoxedValue> ValueMap;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: ArkBoxedValue
	float Value;//[Offset: 0x0, Size: 0x4]
	enum BoxedType;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: ArkContextualDialogueLine.TableRowBase
	FName Event;//[Offset: 0x10, Size: 0x8]
	CriteriaGeneric[] Criteria;//[Offset: 0x18, Size: 0x10]
	enum Priority;//[Offset: 0x28, Size: 0x1]
	bool OneTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	FName VOEvent;//[Offset: 0x2c, Size: 0x8]
	float ChanceToPlay;//[Offset: 0x34, Size: 0x4]
	bool PlayToTeamMates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bShowSubtitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	FName NextEvent;//[Offset: 0x3c, Size: 0x8]
	bool SwitchSpeakerAndListener;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	float ActorCooldown;//[Offset: 0x48, Size: 0x4]
	float GlobalCooldown;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: CriteriaGeneric
	FName Dictionary;//[Offset: 0x0, Size: 0x8]
	FName Key;//[Offset: 0x8, Size: 0x8]
	enum Operator;//[Offset: 0x10, Size: 0x1]
	FString TestValueString;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: AkCallbackInfo.Object
	AkComponent* AkComponent;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ArkHavenNPCLookAtSelector.ActorComponent.Object
	float LookAtTime;//[Offset: 0x1e0, Size: 0x4]
	float SleepTime;//[Offset: 0x1e4, Size: 0x4]
	ArkHavenNPCLookAtConstraints PitchConstraints;//[Offset: 0x1e8, Size: 0x8]
	ArkHavenNPCLookAtConstraints YawConstraints;//[Offset: 0x1f0, Size: 0x8]
	float DebugLineThickness;//[Offset: 0x1f8, Size: 0x4]
	float DebugSphereRadius;//[Offset: 0x1fc, Size: 0x4]
	int DebugSphereSegments;//[Offset: 0x200, Size: 0x4]
	bool bShowLookAtLines;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x204, Size: 0x1]
	AIPerceptionComponent* CachedPerceptionComponent;//[Offset: 0x208, Size: 0x8]
	ArkHavenNPCMainAnimInstance* CachedAnimInstance;//[Offset: 0x210, Size: 0x8]
	SkeletalMeshComponent* CachedSkeletalMesh;//[Offset: 0x218, Size: 0x8]
	SkeletalMeshComponent* CurrTarget;//[Offset: 0x238, Size: 0x8]
	void OnTargetPerceptionUpdated(Actor* Actor, AIStimulus Stimulus);// 0x27affe0

--------------------------------
Class: ArkHavenNPCLookAtConstraints
	float MaxAngle;//[Offset: 0x0, Size: 0x4]
	float MinAngle;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ArkFacilityBase.ArkCharacterBase.Character.Pawn.Actor.Object
	int FacilityID;//[Offset: 0x1b60, Size: 0x4]
	int FacilityLevel;//[Offset: 0x1b64, Size: 0x4]
	int TeamId;//[Offset: 0x1b68, Size: 0x4]
	bool bNeedToSetTeamID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b6c, Size: 0x1]
	Vector IndicatorOffset;//[Offset: 0x1b70, Size: 0xc]
	enum FacilityType;//[Offset: 0x1b7c, Size: 0x1]
	enum BreakageStatus;//[Offset: 0x1b7d, Size: 0x1]
	<int,ArkFacilityValueRange> BreakageLevels;//[Offset: 0x1b88, Size: 0x50]
	MaterialInterface* RebuildingMaterial;//[Offset: 0x1c28, Size: 0x8]
	ArkFacilityPlaceComponent* PlaceComp;//[Offset: 0x1c30, Size: 0x8]
	ArkFacilityRepairComponent* RepairComp;//[Offset: 0x1c38, Size: 0x8]
	ArkFacilityUpgradeComponent* UpgradeComp;//[Offset: 0x1c40, Size: 0x8]
	ArkFacilityModComponent* ModComp;//[Offset: 0x1c48, Size: 0x8]
	delegate OnFacility2ndProgressValueUpdate;//[Offset: 0x1c58, Size: 0x10]
	ArkFacilityAttributeRepairableComponentBase*[] RepairableAttributeComponents;//[Offset: 0x1c70, Size: 0x10]
	enum RepairStatus;//[Offset: 0x1c80, Size: 0x1]
	enum ProgressBarStyle;//[Offset: 0x1c94, Size: 0x1]
	bool bInited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c95, Size: 0x1]
	enum[] AvailableInteractionTypes;//[Offset: 0x1ca8, Size: 0x10]
	enum CurrentInteractionType;//[Offset: 0x1cb8, Size: 0x1]
	float LifeSpanAfterDeath;//[Offset: 0x1cbc, Size: 0x4]
	bool bCanBeSeen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc0, Size: 0x1]
	int UpgradeCostItemID;//[Offset: 0x1cc4, Size: 0x4]
	float UpgradeSelfCost;//[Offset: 0x1cc8, Size: 0x4]
	float UpgradeCost;//[Offset: 0x1ccc, Size: 0x4]
	bool bIsDestroyByUpgrade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd0, Size: 0x1]
	ArkFacilityBaseInfo[] UpgradeBranchesInfo;//[Offset: 0x1cd8, Size: 0x10]
	FacilityUpgradedAppearance[] UpgradedAppearanceArr;//[Offset: 0x1ce8, Size: 0x10]
	FName[] InvalidNpcName;//[Offset: 0x1cf8, Size: 0x10]
	enum[] InvalidNpcCategory;//[Offset: 0x1d08, Size: 0x10]
	enum[] AllowShowRangeType;//[Offset: 0x1d18, Size: 0x10]
	float SavePositionTime;//[Offset: 0x1d28, Size: 0x4]
	int ExistenceTime;//[Offset: 0x1d38, Size: 0x4]
	delegate OnFacilityOwnedModUpdate;//[Offset: 0x1d68, Size: 0x10]
	ArkHordeFacilityMod[] AlreadyOwnedMods;//[Offset: 0x1d78, Size: 0x10]
	ArkSavedRandomMods CacheRandomMods;//[Offset: 0x1d88, Size: 0x18]
	void Upgraded_BP(int NewLevel);// 0x305c9c0
	int StopClientFacilitySoundByID(int PlayingID);// 0x2727480
	int StopClientFacilitySoundByEvent(AkAudioEvent* StopSound);// 0x27273f0
	void StopClientFacilitySoundByAKComponent(ArkAkComponent* AkComponent, AkAudioEvent* StopSound, int PlayingID);// 0x27272f0
	void SetSelfCostInfo(int ItemId, float Cost);// 0x27271a0
	bool ReviveFacility(float ReviveHealthPercent, float Delay);// 0x2727070
	bool Recover(ArkPlayer* Player);// 0x2726fd0
	bool Reconstruction(ArkPlayer* Player);// 0x2726f30
	ArkAkComponent* PlayClientFacilitySoundAttachToTarget(AkAudioEvent* Sound, Actor* AttachTarget);// 0x2726e70
	ArkAkComponent* PlayClientFacilitySoundAtLocation(AkAudioEvent* Sound, Vector PlayLocation);// 0x2726d90
	int PlayClientFacilitySound(AkAudioEvent* Sound, float DelaySeconds, bool bForcePlay);// 0x2726c80
	void OnRepPlaceValidChange(bool bNewPlaceValid);// 0x2726900
	void OnRepPlaceStatusChange(enum LastStatus, enum NewStatus);// 0x2726840
	void OnRepPlace();// 0x2726820
	void OnRepCarry();// 0x2726800
	void OnRepairStatueChange_BP();// 0x2726bc0
	void OnRepairStarted_BP(ArkCharacterBase* Worker);// 0x2726b30
	void OnRepairing_BP();// 0x2710660
	void OnRepairing();// 0x2726be0
	void OnRepairCompleted_BP();// 0x2710720
	void OnRepairCanceled_BP();// 0x2726b10
	void OnRep_RepairStatus();// 0x2726af0
	void OnRep_Level();// 0x2726ad0
	void OnRep_FacilityID();// 0x2726a70
	void OnRep_CacheRandomMods();// 0x2726a30
	void OnRep_BreakageStatus(enum LastStatus);// 0x27269b0
	void OnRep_AlreadyOwnedMods();// 0x2726990
	void OnPlaceValidChange(bool bNewPlaceValid);// 0x2726770
	void OnPlaceStatusChange(enum LastStatus, enum NewStatus);// 0x27266b0
	void OnPlace();// 0x2726690
	void OnInfoChange_BP();// 0x2726670
	void OnFacilityHealthUpdate(ArkCharacterBase* Character, float OldHealth, float NewHealth);// 0x2726570
	void OnExitHordeState(enum ExitState);// 0x27264f0
	void OnEnterHordeState(enum EnterState);// 0x2726470
	void OnCarry();// 0x2726450
	void OnBreakageChange(enum LastStatus, enum NewStatus);// 0x2726390
	bool IsMaxLevel();// 0x27262f0
	bool IsLocalOwner();// 0x2726260
	bool IsInited();// 0x2726230
	bool IsFaultStatus();// 0x2726200
	bool IsCanRepair(ArkCharacterBase* Worker);// 0x2726170
	float GetUpgradeSelfCost();// 0x2725fa0
	FacilityUpgradedAppearance GetUpgradedAppearnce();// 0x2725fd0
	int GetUpgradeCostItemID();// 0x2725f70
	float GetUpgradeCost();// 0x2725f40
	ArkFacilityUpgradeComponent* GetUpgradeComp();// 0x2725f20
	ArkFacilityBaseInfo[] GetUpgradeBranches();// 0x2725d90
	enum GetRepairStatus();// 0x2725d60
	ArkFacilityRepairComponent* GetRepairComp();// 0x2725d40
	float GetPrice();// 0x2725d10
	ArkFacilityPlaceComponent* GetPlaceComp();// 0x2725cf0
	ArkFacilityModComponent* GetModComp();// 0x2725cd0
	enum GetFacilityType();// 0x2725c20
	ArkFacilityBaseInfo GetFacilityInfoRef();// 0x2725be0
	ArkAkComponent* GetFacilityCachedAkComponent();// 0x2725bb0
	enum GetBreakageStatus();// 0x2725b80
	ArkHordeFacilityMod[] GetAlreadyOwnedMods();// 0x2725930
	void FacilityPlayHit_BP(Vector ImpactPoint, Vector ImpactNormal, enum DamageType);// 0x305c9c0
	void ExecuteDeath();// 0x2725910
	bool CanUpgrade(ArkPlayer* Player, int BranchIndex);// 0x27256f0
	bool CanReconstruction(const ArkPlayer* Player);// 0x2725660
	void AddUpgradeCost(float AddUpgradeCost);// 0x27255a0

--------------------------------
Class: ArkFacilityValueRange
	float MinValue;//[Offset: 0x0, Size: 0x4]
	float MaxValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ArkFacilityPlaceComponent.ActorComponent.Object
	delegate OnPlaceStatusChange;//[Offset: 0x1e0, Size: 0x10]
	delegate OnRepPlaceStatusChange;//[Offset: 0x1f0, Size: 0x10]
	delegate OnPlaceValidChange;//[Offset: 0x200, Size: 0x10]
	delegate OnRepPlaceValidChange;//[Offset: 0x210, Size: 0x10]
	enum PlaceStatus;//[Offset: 0x220, Size: 0x1]
	bool bValidPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 0x1]
	Actor* CollisionActor;//[Offset: 0x228, Size: 0x8]
	class ArkFacilityRangeType* RangeTypeClass;//[Offset: 0x230, Size: 0x8]
	ArkFacilityRangeType* RangeType;//[Offset: 0x238, Size: 0x8]
	BoxComponent* PlaceRange;//[Offset: 0x240, Size: 0x8]
	bool bNeedCheckTopSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	Rotator RotationRate;//[Offset: 0x258, Size: 0xc]
	ArkFacilityCollisionData FacilityCollision;//[Offset: 0x268, Size: 0x18]
	class Actor* CollisionActorClass;//[Offset: 0x290, Size: 0x8]
	Vector RateOfPlaceNeedRange;//[Offset: 0x298, Size: 0xc]
	MaterialInterface* CarryingMaterial;//[Offset: 0x2b8, Size: 0x8]
	MaterialInterface* InvalidPlaceMaterial;//[Offset: 0x2c0, Size: 0x8]
	void OnRep_ValidPlace();// 0x272ad40
	void OnRep_PlaceStatus(enum LastStatus);// 0x272abc0
	void OnRep_CollisionActor();// 0x272ab60
	bool IsPlacedValid();// 0x272aaa0
	bool GetValidPlace();// 0x272aa00
	enum GetPlaceStatus();// 0x272a8b0
	Actor* GetCollisionActor();// 0x272a610

--------------------------------
Class: ArkFacilityRangeType.Object
	void OnShowRange();// 0x188cec0
	void OnHideRange();// 0x188cea0
	void OnChangeRangeColor(bool bIsPlacedValid);// 0x272aad0
	SceneComponent* GetRangeRoot();// 0x272a9a0
	float GetRangeMin();// 0x272a970
	float GetRangeMax();// 0x272a940
	float GetRangeAngle();// 0x272a910

--------------------------------
Class: ArkFacilityCollisionData
	float CheckInterval;//[Offset: 0x0, Size: 0x4]
	byte[] CheckChannels;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ArkFacilityRepairComponent.ActorComponent.Object

--------------------------------
Class: ArkFacilityUpgradeComponent.ActorComponent.Object

--------------------------------
Class: ArkFacilityModComponent.ActorComponent.Object
	enum Option1FixedGenre;//[Offset: 0x1e0, Size: 0x1]
	enum Option2FixedGenre;//[Offset: 0x1e1, Size: 0x1]
	enum Option3FixedGenre;//[Offset: 0x1e2, Size: 0x1]
	bool bOption1PrioritizeExistGenre;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e3, Size: 0x1]
	bool bOption2PrioritizeExistGenre;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 0x1]
	bool bOption3PrioritizeExistGenre;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e5, Size: 0x1]

--------------------------------
Class: ArkFacilityAttributeRepairableComponentBase.ActorComponent.Object
	ArkCharacterBase* RepairWorker;//[Offset: 0x1e0, Size: 0x8]
	enum RepairStatus;//[Offset: 0x1e8, Size: 0x1]
	ArkFacilityAttributeRepairableInfo RepairableAttributeInfo;//[Offset: 0x1ec, Size: 0x14]
	void OnRepairing();// 0x27229f0
	void OnClientRepairing();// 0xcbd8c0
	enum GetRepairStatus();// 0x27226f0

--------------------------------
Class: ArkFacilityAttributeRepairableInfo
	enum RepairableAttributeType;//[Offset: 0x0, Size: 0x1]
	int RepairQuantity;//[Offset: 0x4, Size: 0x4]
	float RepairInterval;//[Offset: 0x8, Size: 0x4]
	int RepairCost;//[Offset: 0xc, Size: 0x4]
	int CostItemID;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ArkFacilityBaseInfo.TableRowBase
	FText FacilityName;//[Offset: 0x8, Size: 0x18]
	class ArkFacilityBase* Class;//[Offset: 0x20, Size: 0x8]
	FText FacilityDesc;//[Offset: 0x28, Size: 0x18]
	int ItemId;//[Offset: 0x40, Size: 0x4]
	int MaxBuyNum;//[Offset: 0x44, Size: 0x4]
	int Level;//[Offset: 0x48, Size: 0x4]
	int Quality;//[Offset: 0x4c, Size: 0x4]
	int Health;//[Offset: 0x50, Size: 0x4]
	int Defence;//[Offset: 0x54, Size: 0x4]
	float SpeedFactor;//[Offset: 0x58, Size: 0x4]
	FName AttachSocketLeft;//[Offset: 0x5c, Size: 0x8]
	FName AttackSocketRight;//[Offset: 0x64, Size: 0x8]
	SoftObjectPath IconForHUD;//[Offset: 0x70, Size: 0x18]
	int UpgradeNeedItem;//[Offset: 0x88, Size: 0x4]
	int UpgradeNeedItemCount;//[Offset: 0x8c, Size: 0x4]
	FacilityUpgradedBranch[] UpgradedBranches;//[Offset: 0x90, Size: 0x10]
	bool bSupportRepair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	ArkFacilityAttributeRepairableInfo[] RepairableAttribute;//[Offset: 0xa8, Size: 0x10]
	FacilityReconstruction Reconstruction;//[Offset: 0xb8, Size: 0x10]
	AnimMontage* RecoverAnimMontage;//[Offset: 0xc8, Size: 0x8]
	float DepreciationFactor;//[Offset: 0xd0, Size: 0x4]
	ArkFacilityAttackRulesInfo FacilityAttackRulesInfo;//[Offset: 0xd8, Size: 0x20]
	FacilityBaseSound FacilityBaseSound;//[Offset: 0xf8, Size: 0x30]

--------------------------------
Class: FacilityUpgradedBranch
	enum FacilityType;//[Offset: 0x0, Size: 0x1]
	int FacilityID;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FacilityReconstruction
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int CostItemID;//[Offset: 0x4, Size: 0x4]
	int CostItemNum;//[Offset: 0x8, Size: 0x4]
	float HPRecoveryPercent;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ArkFacilityAttackRulesInfo
	enum[] AllowAttackNpcCategoryArr;//[Offset: 0x0, Size: 0x10]
	bool ActivateFacilityAttackNpcLevelLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float CriticalHitChanceAI;//[Offset: 0x14, Size: 0x4]
	float CriticalHitDamagePctAI;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: FacilityBaseSound
	AkAudioEvent* DestroySound;//[Offset: 0x0, Size: 0x8]
	AkAudioEvent* DownSound;//[Offset: 0x8, Size: 0x8]
	AkAudioEvent* UpSound;//[Offset: 0x10, Size: 0x8]
	AkAudioEvent* UpgradeSound;//[Offset: 0x18, Size: 0x8]
	AkAudioEvent* ReconstructionSound;//[Offset: 0x20, Size: 0x8]
	AkAudioEvent* RotationSound;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: FacilityUpgradedAppearance
	SkeletalMesh* UpgradedSkeletalMesh;//[Offset: 0x0, Size: 0x28]
	StaticMesh* UpgradedStaticMesh;//[Offset: 0x28, Size: 0x28]
	StaticMesh* UpgradedGunMesh;//[Offset: 0x50, Size: 0x28]
	ParticleSystem* OnUpgradingParticle;//[Offset: 0x78, Size: 0x28]
	ParticleSystem* UpgradedParticle;//[Offset: 0xa0, Size: 0x28]

--------------------------------
Class: ArkHordeFacilityMod.TableRowBase
	int ModID;//[Offset: 0x8, Size: 0x4]
	int[] BuffID;//[Offset: 0x10, Size: 0x10]
	FText ModName;//[Offset: 0x20, Size: 0x18]
	FText ModDes;//[Offset: 0x38, Size: 0x18]
	enum GenreType;//[Offset: 0x50, Size: 0x1]
	enum[] AllowFacilityType;//[Offset: 0x58, Size: 0x10]
	Texture2D* IconRes;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: ArkSavedRandomMods
	UInt64Property PlayerId;//[Size: 0x8]
	ArkHordeFacilityMod[] Mods;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ArkExchange.Actor.Object
	int MaxBuyCount;//[Offset: 0x2e8, Size: 0x4]
	float RefreshClientDuration;//[Offset: 0x2ec, Size: 0x4]
	TimerHandle DurationHandle;//[Offset: 0x2f8, Size: 0x8]
	void ClientRefreshPointView();// 0x271e170

--------------------------------
Class: TimerHandle
	UInt64Property Handle;//[Size: 0x8]

--------------------------------
Class: ArkPoiVolume.Volume.Brush.Actor.Object
	bool bMicroPOI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	enum POIType;//[Offset: 0x329, Size: 0x1]
	FText PoiName;//[Offset: 0x330, Size: 0x18]
	Vector POISignaturePosition;//[Offset: 0x348, Size: 0xc]
	Vector POISignaturePositionOnMap;//[Offset: 0x354, Size: 0xc]
	UAccessedPlayerIDs(UInt64Property)[] UAccessedPlayerIDs;//[Offset: 0x368, Size: 0x10]
	int GetAccessedCount();// 0x28e7400

--------------------------------
Class: ArkAISpawnVolume.Volume.Brush.Actor.Object
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	bool bIsForScheduleSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 0x1]
	ArkAISpawnPatternConfig* SpawnPatternConfig;//[Offset: 0x330, Size: 0x8]
	<int,ArkAISpawnPatternConfigContainer> HierarchicalSpawnPatternConfigs;//[Offset: 0x338, Size: 0x50]
	<FName,int> SpecifiedAITypes;//[Offset: 0x388, Size: 0x50]
	int SpawnStatus;//[Offset: 0x3d8, Size: 0x4]
	float OverrideRetreatDistance;//[Offset: 0x3dc, Size: 0x4]
	enum AssembleType;//[Offset: 0x3e0, Size: 0x1]
	Volume* assembleVolume;//[Offset: 0x3e8, Size: 0x8]
	Vector AssembleCenter;//[Offset: 0x3f0, Size: 0xc]
	float AssembleRadius;//[Offset: 0x3fc, Size: 0x4]
	enum[] MarkerTags;//[Offset: 0x400, Size: 0x10]
	bool bIgnoreVolumeConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 0x1]
	ArkAISpawnComponent* SpawnComponent;//[Offset: 0x448, Size: 0x8]
	Vector RandomASpawnPoint();// 0x265e4f0

--------------------------------
Class: ArkAISpawnPatternConfigContainer
	<ArkAISpawnPatternConfig*,float> AISpawnPatternConfigs;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: ArkAISpawnComponent.SceneComponent.ActorComponent.Object
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 0x1]
	bool bIsForScheduleSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a9, Size: 0x1]
	ArkAISpawnPatternConfig* SpawnPatternConfig;//[Offset: 0x3b0, Size: 0x8]
	<int,ArkAISpawnPatternConfigContainer> HierarchicalSpawnPatternConfigs;//[Offset: 0x3b8, Size: 0x50]
	<FName,int> SpecifiedAITypes;//[Offset: 0x408, Size: 0x50]
	int SpawnStatus;//[Offset: 0x458, Size: 0x4]
	float SampleDist;//[Offset: 0x45c, Size: 0x4]
	float OverrideRetreatDistance;//[Offset: 0x460, Size: 0x4]
	enum AssembleType;//[Offset: 0x464, Size: 0x1]
	Volume* assembleVolume;//[Offset: 0x468, Size: 0x8]
	Vector AssembleCenter;//[Offset: 0x470, Size: 0xc]
	float AssembleRadius;//[Offset: 0x47c, Size: 0x4]
	enum[] MarkerTags;//[Offset: 0x480, Size: 0x10]
	bool bIgnoreVolumeConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 0x1]
	PrimitiveComponent* ParentPrimitive;//[Offset: 0x4c8, Size: 0x8]
	ArkAISpawnMarker* SpawnMarker;//[Offset: 0x4d0, Size: 0x8]

--------------------------------
Class: ArkAISpawnMarker.Actor.Object
	bool bIsForScheduleSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	ArkAISpawnVolume*[] SpawnVolumes;//[Offset: 0x2f8, Size: 0x10]
	ArkAISpawnComponent*[] SpawnComponents;//[Offset: 0x308, Size: 0x10]
	int RandomVolumeNum;//[Offset: 0x318, Size: 0x4]
	float IntensityEffectRadius;//[Offset: 0x31c, Size: 0x4]
	<ArkAISpawnPatternConfig*,float> SpawnPatternConfigs;//[Offset: 0x320, Size: 0x50]
	<int,ArkAISpawnPatternConfigContainer> HierarchicalSpawnPatternConfigs;//[Offset: 0x370, Size: 0x50]
	float OverrideRetreatDistance;//[Offset: 0x3c0, Size: 0x4]
	enum AssembleType;//[Offset: 0x3c4, Size: 0x1]
	Volume* assembleVolume;//[Offset: 0x3c8, Size: 0x8]
	Vector AssembleCenter;//[Offset: 0x3d0, Size: 0xc]
	float AssembleRadius;//[Offset: 0x3dc, Size: 0x4]
	int MaxSamplePointsNum;//[Offset: 0x3e0, Size: 0x4]
	ArkNpc*[] ServerSpawnedAIs;//[Offset: 0x400, Size: 0x10]
	enum[] MarkerTags;//[Offset: 0x410, Size: 0x10]
	ArkAISpawnPatternConfig* LastUsedSpawnPatternConfig;//[Offset: 0x4d8, Size: 0x8]
	void EnableSpawnMarker(const bool bInEnable);// 0x265ddd0

--------------------------------
Class: ArkPlayerStateBattle.ArkPlayerStateBase.PlayerState.Info.Actor.Object
	delegate OnPlayerGamingStateChanged;//[Offset: 0x3f8, Size: 0x10]
	enum PlayerGamingState;//[Offset: 0x408, Size: 0x1]
	int ArkTeamID;//[Offset: 0x40c, Size: 0x4]
	ArkPlayerStateBattle* LastHitPlayerState;//[Offset: 0x410, Size: 0x8]
	class DamageType* LastHitDamageTypeClass;//[Offset: 0x418, Size: 0x8]
	int ArkSuitID;//[Offset: 0x420, Size: 0x4]
	int ArkPlayerIndex;//[Offset: 0x424, Size: 0x4]
	UInt64Property ArkPlayerID;//[Size: 0x8]
	int ChannelID;//[Offset: 0x430, Size: 0x4]
	int AreaId;//[Offset: 0x434, Size: 0x4]
	UInt64Property GVoiceMemberID;//[Size: 0x8]
	Vector WayPointLocation;//[Offset: 0x444, Size: 0xc]
	Vector CommandPointLocation;//[Offset: 0x450, Size: 0xc]
	Vector TeamStartLocation;//[Offset: 0x45c, Size: 0xc]
	bool bIsArkSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 0x1]
	ArkPlayerStateBattle*[] SpectatingPlayers;//[Offset: 0x470, Size: 0x10]
	bool bIsInteracting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 0x1]
	float InteractDuration;//[Offset: 0x484, Size: 0x4]
	bool bIsQuitMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x488, Size: 0x1]
	<FString,ArkBattleSurvivorInfo> BattleSurvivors;//[Offset: 0x490, Size: 0x50]
	ArkBattleSurvivorInfo[] AllBattleSurvivors;//[Offset: 0x4e0, Size: 0x10]
	FString CurrentBattleSurvivorID;//[Offset: 0x4f0, Size: 0x10]
	int CoreChipID;//[Offset: 0x560, Size: 0x4]
	int KilledTeamID;//[Offset: 0x564, Size: 0x4]
	int MatchSuccessServerTime;//[Offset: 0x568, Size: 0x4]
	float MatchWeaponMasterExpBonusRate;//[Offset: 0x56c, Size: 0x4]
	ArkItem*[] PlayerInvertoryItems;//[Offset: 0x578, Size: 0x10]
	ArkBattleSurvivorRecruitInfo[] BattleSurvivorRecruits;//[Offset: 0x588, Size: 0x10]
	ArkBattleSurvivorRecruitInfo[] RecruitedSurvivors;//[Offset: 0x598, Size: 0x10]
	int EventMarkerID;//[Offset: 0x5a8, Size: 0x4]
	ArkMarkerActor* EventMarker;//[Offset: 0x5b0, Size: 0x8]
	ArkMarkerActor*[] NormalMarkerActor;//[Offset: 0x5b8, Size: 0x10]
	int GenderType;//[Offset: 0x5c8, Size: 0x4]
	int HavenLevel;//[Offset: 0x5cc, Size: 0x4]
	int HavenXP;//[Offset: 0x5d0, Size: 0x4]
	int SoftCurrency;//[Offset: 0x5d4, Size: 0x4]
	int KillCount;//[Offset: 0x5d8, Size: 0x4]
	int ExchangeTimes;//[Offset: 0x5dc, Size: 0x4]
	int[] ExchangeModTypeBuyTimeCD;//[Offset: 0x5e0, Size: 0x10]
	FString[] SuperPerksSchool;//[Offset: 0x5f0, Size: 0x10]
	int KillNonRobotCount;//[Offset: 0x600, Size: 0x4]
	int RelifeTeammateTimes;//[Offset: 0x670, Size: 0x4]
	delegate OnPlayerNameChange;//[Offset: 0x678, Size: 0x10]
	delegate OnRespawnCountChanged;//[Offset: 0x688, Size: 0x10]
	delegate OnPlayerIDChange;//[Offset: 0x698, Size: 0x10]
	delegate OnPlayerCharacterStateChange;//[Offset: 0x6a8, Size: 0x10]
	delegate OnPlayerInteractionChange;//[Offset: 0x6b8, Size: 0x10]
	delegate OnPlayerInteractDurationChange;//[Offset: 0x6c8, Size: 0x10]
	delegate OnPlayerHeroIdChanged;//[Offset: 0x6d8, Size: 0x10]
	delegate OnWayPointChanged;//[Offset: 0x6e8, Size: 0x10]
	delegate OnMarkerActorChanged;//[Offset: 0x6f8, Size: 0x10]
	delegate OnPlayerSetCommandpoint;//[Offset: 0x728, Size: 0x10]
	delegate OnPlayerRecruitStateSignature;//[Offset: 0x748, Size: 0x10]
	delegate OnPlayerLikeCountUpdate;//[Offset: 0x758, Size: 0x10]
	enum CharacterState;//[Offset: 0x788, Size: 0x1]
	ArkRelifePlayerInfo RelifeInfo;//[Offset: 0x798, Size: 0x78]
	ArkRelifePlayerInfo ScoreInfo;//[Offset: 0x810, Size: 0x78]
	ArkRelifePlayerInfo DropScoreInfo;//[Offset: 0x888, Size: 0x78]
	int RelifeCount;//[Offset: 0x900, Size: 0x4]
	ArkRelifeTimeInfo RelifeTimeInfo;//[Offset: 0x908, Size: 0x20]
	ArkRelifeItemInfo[] BackHavenSaveInfo;//[Offset: 0x928, Size: 0x10]
	int[] PlayerStatistics;//[Offset: 0x948, Size: 0x10]
	bool[] ShowPlayerStatistics;//[Offset: 0x958, Size: 0x10]
	<FString,ArkBattleSurvivorStatistics> HeroStatistics;//[Offset: 0x968, Size: 0x50]
	<FString,int> PlayerHavenStats;//[Offset: 0xa10, Size: 0x50]
	<int,WeaponStatistics> WeaponStatisticsMap;//[Offset: 0xa60, Size: 0x50]
	<FString,SyncStatistics> SyncStatisticsMap;//[Offset: 0xab0, Size: 0x50]
	SyncNanoInfo SyncNanoStatistics;//[Offset: 0xb00, Size: 0x50]
	int CurrentSurvivorBonusQuestID;//[Offset: 0xb58, Size: 0x4]
	ArkQuestComponent* QuestComponent;//[Offset: 0xb60, Size: 0x8]
	bool bCanARKDataChart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba0, Size: 0x1]
	float ARKDataChartTickTime;//[Offset: 0xba4, Size: 0x4]
	float CheckInShuttleRangeSquared;//[Offset: 0xbc0, Size: 0x4]
	FString[] CurrentWeaponInfoAttributes;//[Offset: 0xc78, Size: 0x10]
	int RespawnCount;//[Offset: 0xc98, Size: 0x4]
	int PlayerScore;//[Offset: 0xc9c, Size: 0x4]
	ArkRecruitInfo RecruitInfo;//[Offset: 0xca0, Size: 0xc]
	int RecruitStartIndex;//[Offset: 0xcb0, Size: 0x4]
	int RecruitStartSocket;//[Offset: 0xcb4, Size: 0x4]
	ArkRecruitSubSocket* BestRecruitSubSocket;//[Offset: 0xcb8, Size: 0x8]
	ArkRecruitPoint* BestRecruitPoint;//[Offset: 0xcc0, Size: 0x8]
	Vector LastDeathLocation;//[Offset: 0xcc8, Size: 0xc]
	float RecruitPreviousPoint;//[Offset: 0xcd4, Size: 0x4]
	float RecruitCurrentPoint;//[Offset: 0xcd8, Size: 0x4]
	int CurrentRecruitRuleIndex;//[Offset: 0xcdc, Size: 0x4]
	int[] MimirNetObj_CanBeInteracteds;//[Offset: 0xce0, Size: 0x10]
	int[] MimirNetObj_FinishedInteracteds;//[Offset: 0xcf0, Size: 0x10]
	int[] MimirNetObj_HasBeenInteracteds;//[Offset: 0xd00, Size: 0x10]
	<FString> CanUnlockMimirNetEventData;//[Offset: 0xd10, Size: 0x50]
	<FString> MimirNetBattleEventData;//[Offset: 0xd60, Size: 0x50]
	<enum,ArkNotebookData> NotebookDataMap;//[Offset: 0xea0, Size: 0x50]
	ArkNotebookKilledNanoData KilledNotebookNanoData;//[Offset: 0xef0, Size: 0x20]
	class ArkNanoCommandMarker* NanoCommandMarkerClass;//[Offset: 0xf10, Size: 0x8]
	ArkPlayerNotificationComponent* NotificationComponent;//[Offset: 0xf18, Size: 0x8]
	PermanentAttributeInfo[] PermanentAttributesArray;//[Offset: 0x1018, Size: 0x10]
	PermanentAttributeInfo[] ModifiedSubTypeAttributesArray;//[Offset: 0x1028, Size: 0x10]
	float HeartBeatInterval;//[Offset: 0x1038, Size: 0x4]
	float ReliableHeartBeatsLostToError;//[Offset: 0x103c, Size: 0x4]
	float ConnectionTimeout;//[Offset: 0x1040, Size: 0x4]
	ArkPersonalSettlementData PersonalSettlementData;//[Offset: 0x10d0, Size: 0x18]
	LikePlayerIDArray(UInt64Property)[] LikePlayerIDArray;//[Offset: 0x10e8, Size: 0x10]
	bool bShowAllInfoForHUDFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f8, Size: 0x1]
	bool bShowIndicatorForHUDFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f9, Size: 0x1]
	bool bShowAllRadarInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10fa, Size: 0x1]
	bool bOnlyShowCharacterRadarInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10fb, Size: 0x1]
	bool bShowDamageNumberForHUDFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10fc, Size: 0x1]
	void UnlockNewNotebook(enum Type, int NotebookID);// 0x28d0c90
	bool TryMimirEventUnlockByKey(FString EventKey);// 0x28d0be0
	void TryMimirEventUnlock(enum EventType, FString EventParam);// 0x28d0b00
	bool TryChangeToCurrentBattleSurvivorForPlayer(FString SurvivorID);// 0x28d0a50
	bool SurvivorDeath();// 0x28d0950
	void SetWayPointAt(Vector Loc);// 0x28d0890
	void SetSyncNanoName(FString AITypeName);// 0x28d07b0
	void SetSyncNanoInfo(out const SyncNanoInfo InData);// 0x28d06b0
	void SetSyncNanoChip(int[] ChipItemIDs);// 0x28d05d0
	void SetSyncItems(out const <FName,ArkSyncItemData> InData);// 0x28d04c0
	void SetSyncCoreChip(int CoreChipID);// 0x28d0440
	void SetSurvivorBonusQuest(int questID);// 0x28d03c0
	void SetStatisticsWithComplexDatas(out const <FString,int> Map);// 0x28d0290
	void SetSoftCurrency(int InData);// 0x28d0210
	void SetShowIndicatorForHUDFade(bool bShow);// 0x28d0180
	void SetShowDamageNumberForHUDFade(bool bShow);// 0x28d00f0
	void SetShowAllRadarInfo(bool bShow);// 0x28d0060
	void SetShowAllInfoForHUDFade(bool bShow);// 0x28cffd0
	void SetRecruitType(enum NewType, int Count);// 0x28cff10
	void SetPlayerStatistics(enum StatisticsType, int Value);// 0x28cfe50
	void SetPlayerHavenStat(out const ArkHavenStatPropertyRef HavenStat, int NewValue);// 0x28cfd70
	void SetPermanentAttributes(out const FName Key, float Val, bool bOverride);// 0x28cfc50
	void SetPerkTree(out const ArkPerkTree PerkTree);// 0x28cfb50
	void SetOnlyShowCharacterRadarInfo(bool bShow);// 0x28cfac0
	void SetMatchSuccessServerTime(int64 serverTime);// 0x28cfa40
	void SetInitPlayerFromStartMatch(bool bInit);// 0x28cf9b0
	void SetInitDataFromGS(bool bInit);// 0x28cf920
	void SetHavenXP(int InData);// 0x28cf8a0
	void SetHavenLevel(int inLevel);// 0x28cf820
	void SetHasGiveUpMatch(bool InBool);// 0x28cf790
	void SetGender(int InGenderType);// 0x28cf710
	void SetFinishedGame(bool bFinished);// 0x28cf680
	void SetFightResult(enum Result);// 0x28cf600
	void SetEquipedGearChips(out const <FString,int> GearChipIDs);// 0x28cf4d0
	void SetCurrentBattleSurvivor(FString SurvivorID);// 0x28cf430
	void SetClassID(int ClassID);// 0x28cf3b0
	void SetCharacterState(enum Value);// 0x28cf330
	void SetChannelID(int inID);// 0x28cf2b0
	void SetArmBandID(int MyArmBandID);// 0x28cf230
	void SetAreaID(int inID);// 0x28cf1b0
	void SetAllWeaponStatistics(out const <int,WeaponStatistics> Map);// 0x28cf080
	void SetAllSyncStatsData(out const <FString,SyncStatistics> InSyncStat);// 0x28cef50
	void SetAllHeroStatistic(out const <FString,ArkBattleSurvivorStatistics> InMap);// 0x28cee40
	void ServerSetWayPointAt(Vector Loc);// 0x28ced70
	void ServerSetPermanentAttributes(const FName Key, float Val, bool bOverride);// 0x28cec70
	void ServerSetGVoiceMemberID(MemberId(UInt64Property) MemberId);// 0x28cebb0
	void ServerSetCurrentRecruitRuleIndex(int Index);// 0x28ceaf0
	void ServerSetCurrentBattleSurvivorInternal(FString SurvivorID);// 0x28cea50
	void ServerSetCommandPointAt(Vector Loc);// 0x28ce980
	void ServerRespawnDeadPlayer(ArkPlayerStateBattle* DeadPlayerState);// 0x28ce8f0
	void ServerReportSpecifications(int GraphicSettingLevel, FString Specifications, FString GraphicSettings);// 0x28ce790
	void ServerReportFPS(int FPS, int MinFPS, float FPSDelayCount, int InPing);// 0x28ce610
	void ServerQuestEventMarker();// 0x28ce5f0
	void ServerPlayerHeartBeat_Reliable(int HeartBeatID);// 0x28ce560
	void ServerPlayerHeartBeat(int HeartBeatID);// 0x28ce4d0
	void ServerGetStatisticalEventInfo();// 0x28ce480
	void ServerDebugSetPlayerHavenStat(FString Name, int Value);// 0x28ce3a0
	void ServerAddNewDetectedScoreNodes(const ArkScoreNode*[] NewScoreNodes);// 0x28ce2e0
	void ServerAddNewDetectedSafeHouse(const ArkSafeHouseVolume*[] NewSafeHouses);// 0x28ce220
	void ServerAddLike(LikePlayerID(UInt64Property) LikePlayerID);// 0x28ce190
	void Respawn();// 0x28ce170
	void ProcessKillSpecifyAIData(ArkCharacterBase* Killer, out const FName AITypeName);// 0x28ce080
	void PrepareForRespawn(int Seconds);// 0x28ce000
	void OnTriggerGameplayEventSyncDyingRecover(const ArkGameplayEventWrapper* InGameplayEvent);// 0x28cdf80
	void OnTriggerGameplayEventSyncAISuccess(const ArkGameplayEventWrapper* InGameplayEvent);// 0x28cdf00
	void OnTriggerGameplayEventSpecialObjInteracted(const ArkGameplayEventWrapper* InGameplayEvent);// 0x28cde80
	void OnTriggerGameplayEventPickUpWeapon(const ArkGameplayEventWrapper* InGameplayEvent);// 0x28cde00
	void OnTriggerGameplayEventNpcDeath(const ArkGameplayEventWrapper* InGameplayEvent);// 0x28cdd80
	void OnTriggerGameplayEventMimirNetInteracted(const ArkGameplayEventWrapper* InGameplayEvent);// 0x28cdd00
	void OnTriggerGameplayEventEnemyDetected(const ArkGameplayEventWrapper* InGameplayEvent);// 0x28cdc80
	void OnTriggerGameplayEventDeath(const ArkGameplayEventWrapper* DeathGameplayEvent);// 0x28cdb70
	void OnTriggerGameplayEventDamage(const ArkGameplayEventWrapper* DamageGameplayEvent);// 0x28cda60
	void OnTriggerGameplayEventAddOrRemoveItem(const ArkGameplayEventWrapper* InGameplayEvent);// 0x28cd9e0
	void OnRep_WayPoint();// 0x28cd920
	void OnRep_UseReconCoreTime();// 0xae2270
	void OnRep_TeamID();// 0x28cd8e0
	void OnRep_RespawnCount();// 0x28cd8c0
	void OnRep_RelifeTimeInfo();// 0x28cd8a0
	void OnRep_RecruitStartIndex();// 0x28cd880
	void OnRep_RecruitPreviousPoint();// 0x28cd860
	void OnRep_RecruitInfo();// 0x28cd840
	void OnRep_RecruitCurrentPoint();// 0x28cd820
	void OnRep_PlayerScore();// 0x28cd800
	void OnRep_PlayerGamingState();// 0x28cd7e0
	void OnRep_PersonalSettlementData();// 0x28cd7c0
	void OnRep_PermanentAttributes();// 0x28cd7a0
	void OnRep_ModifiedSubTypeAttributes();// 0x28cd780
	void OnRep_MimirNetObjHasBeenInteracteds();// 0x28cd760
	void OnRep_MimirNetObjFinishedInteracteds();// 0x28cd740
	void OnRep_MimirNetObjCanBeInteracteds();// 0x28cd720
	void OnRep_LikePlayerIDArray();// 0x28cd700
	void OnRep_LastDeathLocation();// 0x28cd6e0
	void OnRep_IsQuitMatch();// 0x28cd6c0
	void OnRep_IsInteracting();// 0x28cd6a0
	void OnRep_InteractDuration();// 0x28cd680
	void OnRep_EventMarkerChanged();// 0x28cd640
	void OnRep_CurrentRecruitRuleIndex();// 0xae2270
	void OnRep_CurrentBattleSurvivorID();// 0x28cd620
	void OnRep_CommandPoint();// 0x28cd600
	void OnRep_CharacterState(enum _CharacterStateOld);// 0x28cd580
	void OnRep_bShowIndicatorForHUDFade();// 0x28cd9c0
	void OnRep_bShowAllRadarInfo();// 0x28cd9a0
	void OnRep_bShowAllInfoForHUDFade();// 0x28cd980
	void OnRep_bOnlyShowCharacterRadarInfo();// 0x28cd960
	void OnRep_BestRecruitSubSocket();// 0x28cd560
	void OnRep_ArkPlayerID();// 0x28cd540
	void OnReconnectionLimitTimer();// 0x28cd520
	void OnNpcDying(ArkNpc* NPC);// 0x28cd410
	void ModifyWeaponStatistics(int WeaponItemID, enum WeaponStatKey, float ModifyValue);// 0x28cd180
	void ModifySyncStatistics(FString SyncAITypeName, enum SyncStatKey, float ModifyValue);// 0x28cd020
	void ModifyPlayerStatistics(enum StatisticsType, int ModifyValue);// 0x28ccf60
	void ModifyPlayerHavenStat(out const ArkHavenStatPropertyRef HavenStat, int ModifyValue);// 0x28cce80
	void LoadGSQuestInfo(out const GSPlayerQuestInfo[] QuestInfos);// 0x28ccd40
	void KillNotebookNano(int NotebookID, int Num);// 0x28ccc80
	bool IsShowIndicatorForHUDFade();// 0x28ccb80
	bool IsShowAllInfoForHUDFade();// 0x28ccb50
	bool IsSamePlayer(const ArkPlayerStateBattle* InPlayerState);// 0x28cca90
	bool IsQuitMatch();// 0x28cca60
	bool IsPlayerNetLag(bool bOnlyReliable);// 0x28cc9d0
	bool IsNotebookUnlocked(enum Type, int NotebookID);// 0x28cc910
	bool IsMimirCanNewUnlock(FString EventKey);// 0x28cc860
	bool IsInitDataFromGS();// 0x28cc830
	bool IsFinishedGame();// 0x28cc800
	bool IsChief();// 0x28cc7d0
	bool IsAlive(bool bIgnoreRelifeCount);// 0x28cc740
	void InitUnlockedNotebook(out const <enum,ArkNotebookData> InNotebookData);// 0x28cc630
	void InitMimirNetObjInteractedData(out const int[] ObjCanBeInteracteds, out const int[] FinishedInteracteds);// 0x28cc470
	void InitMimirNetObjBeenInteracteds(out const int[] MimirObjBeenInteracteds);// 0x28cc3c0
	void InitMimirNetCurrentBattleUnlockInfo(out const ArkMimirNetBattleUnlockInfo InMimirNetBattleUnlockInfo);// 0x28cc2e0
	void InitCanUnlockMimirEventData(out const int[] EventTypes, out const FString[] EventParams, out const int[] EventLevelIDs);// 0x28cc130
	bool HasSurvivorBonusQuestFinish();// 0x28cc100
	bool HasInitPlayerFromStartMatch();// 0x28cc0d0
	bool HasGiveUpMatch();// 0x28cc0a0
	void GetWeaponUnlockQuest(out int[] OutArray);// 0x28cbf30
	float GetWeaponMasterExpSum();// 0x28cbed0
	float GetWeaponMasterExp(int WeaponItemID);// 0x28cbe40
	ArkWeaponItemData[] GetWeaponItems();// 0x28cbd60
	FString[] GetWeaponInfoAttributes();// 0x28cbce0
	FString[] GetTeamPlayerName();// 0x28cbb80
	int GetTeamID();// 0x28cbb50
	bool GetSyncStat(FString AITypeName, out SyncStatistics OutStat);// 0x28cb9f0
	SyncNanoInfo GetSyncNanoInfo();// 0x28cb970
	int GetSyncCoreChip();// 0x28cb940
	int[] GetSyncChipList();// 0x28cb900
	bool GetSurvivorInAllSurvivor(FString SurvivorID, out ArkBattleSurvivorInfo OutSurvivor);// 0x28cb6f0
	void GetStatisticsWithComplexDatas(out FString[] OutKeys, out int[] OutValues);// 0x28cb5b0
	void GetSpectatingPlayerIDs(out FString[] OutIDs);// 0x28cb4e0
	int GetSoftCurrency();// 0x28cb4b0
	int GetRespawnCount();// 0x28cb480
	enum GetRecruitType();// 0x28cb450
	ArkQuestComponent* GetQuestComponent();// 0x28cb180
	float GetPlayerWeaponStat(int WeaponItemID, enum WeaponStatKey);// 0x28cb0c0
	void GetPlayerUsedWeaponIDs(out int[] OutArray);// 0x28cb010
	int GetPlayerStatistics(enum StatisticsType);// 0x28caf80
	int GetPlayerScore();// 0x28caf50
	int GetPlayerIndex();// 0x28caf20
	FString GetPlayerIDStringLLU();// 0x28caea0
	FString GetPlayerIDString();// 0x28cae20
	ReturnValue(UInt64Property) GetPlayerId();// 0x28cadf0
	int GetPlayerHavenStat(out const ArkHavenStatPropertyRef HavenStat);// 0x28cad40
	LinearColor GetPlayerColor();// 0x28cacd0
	bool GetPermanentAttributes(enum AttrType, out float PercentVal, out float AbsoluteVal, enum DamageSubType, bool bTargetNonePlayer, bool bNoInherits);// 0x28caad0
	ArkPerkTree GetPerkTree();// 0x28caa70
	int[] GetPerkSet(int EffectiveAtLevel);// 0x28ca9d0
	ArkPlayerNotificationComponent* GetNotificationComponent();// 0x28ca9a0
	int[] GetMimirNetObjBeenInteracteds();// 0x28ca920
	ArkMimirNetBattleUnlockInfo GetMimirNetCurrentBattleUnlockInfo();// 0x28ca850
	float GetMatchWeaponMasterExpBonusRate();// 0x28ca7f0
	int GetMatchSuccessServerTime();// 0x28ca7c0
	int GetKillNonRobotCount();// 0x28ca760
	int GetKilledTeamID();// 0x28ca790
	int GetKillCount();// 0x28ca730
	ArkItem*[] GetInGameLootItems();// 0x28ca500
	ArkItem*[] GetInGameGearChipItems();// 0x28ca480
	bool GetHeroStatistic(FString SurvivalName, out ArkBattleSurvivorStatistics OutStat);// 0x28ca320
	int GetHavenXP();// 0x28ca2f0
	int GetHavenLevel();// 0x28ca2c0
	void GetGSQuestInfo(out GSPlayerQuestInfo[] QuestInfos);// 0x28ca180
	int GetGender();// 0x28ca290
	enum GetFightResult();// 0x28ca150
	FString GetEquipedGearTLogString();// 0x28ca0a0
	FString GetCurrentBattleSurvivor();// 0x28c9fd0
	enum GetCharacterStateOld();// 0x28c9f70
	enum GetCharacterState();// 0x28c9f40
	int GetChannelID();// 0x28c9f10
	void GetBattleSurvivorsSettlementInfo(out ArkBattleSurvivorSettlementInfo[] OutInfo);// 0x28c9c60
	void GetBattleSurvivors(out ArkBattleSurvivorInfo[] OutSurvivors);// 0x28c9b40
	bool GetBattleSurvivor(FString SurvivorID, out ArkBattleSurvivorInfo OutSurvivor);// 0x28c9930
	void GetBattleHeroes(out ArkBattleHeroInfo[] OutHeroes);// 0x28c9860
	bool GetBatchSubTypesPermanentAttributes(enum AttrType, out float PercentVal, out float AbsoluteVal, enum[] DamageSubTypes, bool bTargetNonePlayer, bool bNoInherits);// 0x28c9620
	ArkRelifeItemInfo[] GetBackToHavenData();// 0x28c9530
	int GetArmBandID();// 0x28c94d0
	int GetAreaID();// 0x28c94a0
	<int,WeaponStatistics> GetAllWeaponStatistics();// 0x28c9460
	<FString,SyncStatistics> GetAllSyncStats();// 0x28c93c0
	void GetAllSyncStatKeys(out FString[] OutArray);// 0x28c92f0
	<FString,int> GetAllStatisticsWithComplexDatas();// 0x28c9250
	int[] GetAllPlayerStatistics();// 0x28c9120
	void ClientShowNotebookPipTips(enum Type, int NotebookID);// 0x28c9030
	void ClientShowMimirPipTips(FString MimirEventKey);// 0x28c8f90
	void ClientSetWeaponMasterCfg(enum MapMode, const FName CfgName, float CfgValue);// 0x28c8e90
	void ClientSendDebugWeaponStatistics(const int[] WeaponItemIDs, const WeaponStatistics[] WeaponStats);// 0x28c8d70
	void ClientSendDebugPlayerStatistics(int StatisticsType, int StatisticsValue);// 0x28c8cb0
	void ClientReceiveStatisticalEventInfo(const StatisticalInfo[] StatisticalEventList, const StatisticalTeamScoreInfo[] StatisticalScoreList);// 0x28c8b70
	void ClientPlayerHeartBeat_Reliable(int HeartBeatID);// 0x28c8ae0
	void ClientPlayerHeartBeat(int HeartBeatID);// 0x28c8a50
	void ClientEventMarkerChanged(int CurPlayerIndex, int MarkerActorID);// 0x28c88b0
	void ClientDebugSetPlayerHavenStat(FString Name, int Value);// 0x28c8730
	void BroadcastDeath(ArkPlayerStateBattle* KillerPlayerState, const DamageType* KillerDamageType, ArkPlayerStateBattle* KilledPlayerState, const ArkDeathInfo ArkDeathInfo);// 0x28c7ef0
	void AddWeaponMasterExp(int WeaponItemID, float Value);// 0x28c7e20
	void AddWeaponItem(int ItemId, int ItemCount, FString ItemAttributes);// 0x28c7d10
	void AddPerkSet(int EffectiveAtLevel, int PerkSetID);// 0x28c7c50
	void AddNotification(out const ArkNotificationParam Notification);// 0x28c7b80
	void AddMimirNewUnlock(FString EventKey);// 0x28c7ae0
	void AddMimirNetInteractiveObj(int InteractiveObjID);// 0x28c7a60
	void AddInGameQuestByID(int InGameQuestID, bool bShareWithTeam, int StartSequenceIndex);// 0x28c7960
	void AddCanUnlockMimirEventData(int EventType, FString EventParam, int EventLevelID);// 0x28c77d0
	void AddBattleSurvivor(out const ArkBattleSurvivorInfo Survivor);// 0x28c7610

--------------------------------
Class: ArkPlayerStateBase.PlayerState.Info.Actor.Object
	void ClientLog(FString LogString, bool ShowOnScreen);// 0x28c8970
	void ClientEnsureFailed(FString ErrorString);// 0x28c8810
	void ClientDebugDraw(int Type, const Color Color, const Vector[] Vectors, const Quat Rotation, FString Text, float LifeTime, byte DepthPriority, float Thickness);// 0x28c84d0

--------------------------------
Class: SyncNanoInfo
	FString First;//[Offset: 0x0, Size: 0x10]
	FString FirstChip;//[Offset: 0x10, Size: 0x10]
	FString FirstSync;//[Offset: 0x20, Size: 0x10]
	FString LastSync;//[Offset: 0x30, Size: 0x10]
	FString LastChip;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: ArkSyncItemData
	FName AITypeName;//[Offset: 0x0, Size: 0x8]
	<int,int> Children;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: ArkBattleSurvivorInfo
	FString SurvivorID;//[Offset: 0x0, Size: 0x10]
	FString FirstName;//[Offset: 0x10, Size: 0x10]
	FString LastName;//[Offset: 0x20, Size: 0x10]
	enum State;//[Offset: 0x30, Size: 0x1]
	int ClassID;//[Offset: 0x34, Size: 0x4]
	ArkPerkTree Perks;//[Offset: 0x38, Size: 0x30]
	int gender;//[Offset: 0x68, Size: 0x4]
	ArkSurvivorAvatarDataForDS[] SurvivorAvatarData;//[Offset: 0x70, Size: 0x10]
	int ArmBandID;//[Offset: 0x80, Size: 0x4]
	int CoreChipID;//[Offset: 0x84, Size: 0x4]
	int RaceID;//[Offset: 0x88, Size: 0x4]
	int BonusQuestID;//[Offset: 0x8c, Size: 0x4]
	bool bHasFinishBonusQuest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	bool bChief;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 0x1]
	enum VOType;//[Offset: 0x92, Size: 0x1]
	int[] AnimationAndEmotes;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: ArkSurvivorAvatarDataForDS
	int ItemId;//[Offset: 0x0, Size: 0x4]
	FString Attribute;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: WeaponStatistics
	float[] Stats;//[Offset: 0x0, Size: 0x10]
	float MasterExp;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SyncStatistics
	float[] Stats;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ArkBattleSurvivorStatistics
	int[] Statistics;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ArkGameplayEventWrapper.Object

--------------------------------
Class: GSPlayerQuestInfo
	int questID;//[Offset: 0x0, Size: 0x4]
	enum State;//[Offset: 0x4, Size: 0x1]
	int SequenceIdx;//[Offset: 0x8, Size: 0x4]
	enum QuestType;//[Offset: 0xc, Size: 0x1]
	GSPlayerObjectiveInfo[] ObjectiveInfos;//[Offset: 0x10, Size: 0x10]
	GSCommonEventInfo[] CommonEvents;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: GSPlayerObjectiveInfo
	int ObjectiveUniqueID;//[Offset: 0x0, Size: 0x4]
	FString SerializedString;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: GSCommonEventInfo
	int EventID;//[Offset: 0x0, Size: 0x4]
	int CurrentValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ArkNotebookData
	int[] UnlockedNotebookIDs;//[Offset: 0x0, Size: 0x10]
	int[] NewUnlockedNotebookIDs;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ArkMimirNetBattleUnlockInfo
	int[] MimirNetObjBeenInteracteds;//[Offset: 0x0, Size: 0x10]
	FString[] MimirNetBattleEventData;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ArkWeaponItemData
	int ItemId;//[Offset: 0x0, Size: 0x4]
	int ItemCount;//[Offset: 0x4, Size: 0x4]
	FString ItemAttributes;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ArkQuestComponent.ActorComponent.Object
	delegate OnGlobalQuestUpdated;//[Offset: 0x1e0, Size: 0x10]
	delegate OnInGameQuestUpdated;//[Offset: 0x1f0, Size: 0x10]
	delegate OnGameplayEventQuestUpdated;//[Offset: 0x200, Size: 0x10]
	delegate OnCurrentSequenceChange;//[Offset: 0x210, Size: 0x10]
	delegate OnQuestStateChange;//[Offset: 0x220, Size: 0x10]
	delegate OnQuestStateChangeByID;//[Offset: 0x230, Size: 0x10]
	delegate OnObjectiveStateChange;//[Offset: 0x240, Size: 0x10]
	ArkQuestInstance*[] ProcessingGlobalQuests;//[Offset: 0x250, Size: 0x10]
	ArkQuestInstance*[] ProcessingInGameQuests;//[Offset: 0x260, Size: 0x10]
	ArkQuestInstance*[] ProcessingGameplayEventQuests;//[Offset: 0x270, Size: 0x10]
	ArkQuestInstance*[] PendingUpdateQuestInstances;//[Offset: 0x288, Size: 0x10]
	ArkQuestInstance* CachedQuestInstance;//[Offset: 0x2a8, Size: 0x8]
	GSPlayerQuestInfo[] DelaySetGlobalQuestInfos;//[Offset: 0x2b0, Size: 0x10]
	<int,GSPlayerQuestInfo> PVPGuideGlobalQuestInfos;//[Offset: 0x2c0, Size: 0x50]
	void UpdateExistingQuests(float GameStartDelay);// 0x2919af0
	void TriggerDelaySetGlobalQuestInfos();// 0x2919ad0
	void RemoveInGameQuestByID(int questID);// 0x2919a50
	void OnRep_ProcessingInGameQuests();// 0x29199f0
	void OnRep_ProcessingGlobalQuests();// 0x2862de0
	void MarkPendingUpdated(enum InQuestType);// 0x2919950
	bool IsQuestFinished(enum QuestType, int questID);// 0x2919860
	ArkQuestInstance*[] GetProcessingQuests(enum QuestType);// 0x2919300
	ArkQuestInstance* GetProcessingQuestByID(enum QuestType, int questID);// 0x2919240
	ArkQuestInstance*[] GetProcessingInGameQuestsByType(enum InGameQuestType);// 0x29191b0
	void GainQuestReward(ArkQuestInstance* FinishedQuestInstance, out int OutExpCount);// 0x2918780
	void FinishQuestByID(enum QuestType, int questID, bool bSucceed);// 0x2918670
	void FinishQuest(ArkQuestInstance* FinishedQuestInstance, bool bSucceed);// 0x29185a0
	void FinishObjective(ArkObjectiveInstance* FinishedObjectiveInstance, bool bSucceed);// 0x29184d0
	void ClientNotifyQuestFinish(int questID, bool bSucceed);// 0x2918400
	void ClientNotifyEventFinish(int questID, int ExpCount, const FText OptionText, enum ShowTipsType, LinearColor TextColor, const FText OrignalDescription, const FText VictimName, const FText InjuredName, bool inShouldShowOnCrossHair, enum InValue, int OverrideCount);// 0x2918010
	void ClientNotificationAchievementEvent(FString EventName, const ArkQuestReward[] Rewards);// 0x2917ec0
	void ClientNotificationAchievement(FString EventName, const ArkQuestReward[] Rewards);// 0x2917d70
	void ClientInitGameplayEventQuest();// 0x2917d50
	ArkQuestInstance* AddInGameQuestByID(int questID, int StartSequenceIndex);// 0x2917b90

--------------------------------
Class: ArkQuestInstance.Object
	bool bAllowTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	enum QuestType;//[Offset: 0x40, Size: 0x1]
	int questID;//[Offset: 0x44, Size: 0x4]
	enum State;//[Offset: 0x48, Size: 0x1]
	QuestSequenceInstance CurrentSequence;//[Offset: 0x50, Size: 0x18]
	ArkQuestComponent* QuestComponent;//[Offset: 0x68, Size: 0x8]
	int RemainTime;//[Offset: 0x104, Size: 0x4]
	int RepPauseDuration;//[Offset: 0x118, Size: 0x4]
	int RepTimeFactorDuration;//[Offset: 0x11c, Size: 0x4]
	void ReceiveTick(float DeltaSeconds);// 0x305c9c0
	void OnRep_State();// 0x2919a30
	void OnRep_QuestID();// 0x2919a10
	void OnRep_CurrentSequence();// 0x29199d0
	bool IsTracking();// 0x2919920
	bool IsGlobalQuestFinished();// 0x2919830
	bool IsFinalStep();// 0x2919800
	int GetTotalSequences();// 0x29197c0
	enum GetState();// 0x29196e0
	enum GetQuestType();// 0x10a42f0
	int GetQuestRemainTime();// 0x29194e0
	int GetQuestID();// 0x29194c0
	ArkQuestDefine GetQuestDefine();// 0x2919390
	ArkInGameQuestDefine GetInGameQuestDefine();// 0x2919150
	ArkGlobalQuestDefine GetGlobalQuestDefine();// 0x2918ff0
	ArkGameplayEventQuestDefine GetGameplayEventQuestDefine();// 0x2918f80
	QuestSequenceInstance GetCurrentSequence();// 0x2918d70

--------------------------------
Class: QuestSequenceInstance
	enum Op;//[Offset: 0x0, Size: 0x1]
	int SequenceIndex;//[Offset: 0x4, Size: 0x4]
	ArkObjectiveInstance*[] Objectives;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ArkObjectiveInstance.Object
	bool bAllowTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	enum QuestType;//[Offset: 0x40, Size: 0x1]
	ArkObjectiveDesc ObjectiveDesc;//[Offset: 0x44, Size: 0xc]
	ArkQuestInstance* QuestInstance;//[Offset: 0x50, Size: 0x8]
	enum ObjectiveState;//[Offset: 0x58, Size: 0x1]
	ArkQuestComponent* QuestComponent;//[Offset: 0x60, Size: 0x8]
	ArkQuestManager* QuestManager;//[Offset: 0x68, Size: 0x8]
	int RemainTime;//[Offset: 0x88, Size: 0x4]
	int TotalCount;//[Offset: 0x8c, Size: 0x4]
	int CurrentCount;//[Offset: 0x90, Size: 0x4]
	void SetTotalCount(int Count);// 0x2870d00
	void SetCurrentCount(int Count, bool bSyncToTeam);// 0x2870aa0
	void ReceiveTick(float DeltaSeconds);// 0x305c9c0
	void OnTriggerNotifyObjectiveStarted(ArkGameplayEventWrapper* InObjectiveCounterGameplayEvent);// 0x28708f0
	void OnTriggerNotifyObjectiveFinished(ArkGameplayEventWrapper* InObjectiveCounterGameplayEvent);// 0x2870870
	void OnRep_ObjectiveState();// 0x2870600
	void OnRep_ObjectiveDesc();// 0x28705e0
	void OnRep_CurrentCount();// 0xb04e90
	void OnFinished(enum FinishedState);// 0x28703e0
	void OnActive();// 0x188cec0
	bool IsFinished();// 0x28703a0
	int GetTotalCount();// 0x2870020
	ArkQuestReward[] GetRewards();// 0x286fe90
	float GetQuestRemainTime();// 0x286fe60
	ArkQuestInstance* GetQuestInstance();// 0x286fe40
	FText GetProgressText();// 0x286fda0
	enum GetObjectiveState();// 0x286fd50
	ArkObjectiveDesc GetObjectiveDesc();// 0x286fd20
	ArkObjectiveDefine GetObjectiveDefine();// 0x286fce0
	int GetCurrentCount();// 0x286fcb0
	void FinishObjective(bool bSucceed);// 0x286fc20
	static ArkObjectiveInstance* CreateObjectiveInstanceByDesc(enum InQuestType, out const ArkObjectiveDesc InObjectiveDesc, Object* OuterObj);// 0x286faf0
	bool CheckIfObjectiveFinished();// 0x286fa20
	void AddCurrentCount(int Count, bool bSyncToTeam);// 0x286f910

--------------------------------
Class: ArkQuestReward
	int ItemId;//[Offset: 0x0, Size: 0x4]
	int Count;//[Offset: 0x4, Size: 0x4]
	FText Description;//[Offset: 0x8, Size: 0x18]
	bool bShowIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: ArkObjectiveDesc
	enum ObjectiveType;//[Offset: 0x0, Size: 0x1]
	int ObjectiveID;//[Offset: 0x4, Size: 0x4]
	bool bNeedShowUINum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: ArkQuestManager.ArkResourceManagerBase.ArkManagerBase.Object
	ArkObjectiveManager* ObjectiveManager;//[Offset: 0xb8, Size: 0x8]
	ArkEventTriggerManager* TriggerManager;//[Offset: 0xc0, Size: 0x8]
	ArkConditionManager* ConditionManager;//[Offset: 0xc8, Size: 0x8]
	<int,ArkObjectiveDefine_TriggerRes> AllObjectiveResMap;//[Offset: 0x170, Size: 0x50]
	<int,ArkObjectiveDefine_TriggerInfo> AllObjectiveInfoMap;//[Offset: 0x1c0, Size: 0x50]
	ArkQuestTableConfigs QuestTableConfigs;//[Offset: 0x210, Size: 0x28]
	ArkQuestTableConfigs TargetQuestTableConfigs;//[Offset: 0x238, Size: 0x28]
	SoftObjectPath ObjectiveTriggerDataTablePath;//[Offset: 0x260, Size: 0x18]
	static float GetTotalQuestInstanceNum(const ArkQuestInstance* Instance, int Index);// 0x2919700
	FText GetQuestTitle(int InQuestID);// 0x2919640
	void GetQuestReward(int InQuestID, out ArkQuestReward[] OutQuestReward);// 0x2919500
	FText GetQuestDescription(int InQuestID);// 0x29193d0
	static float GetCurrentQuestRemainTime(ArkQuestInstance* Instance);// 0x2918ce0
	static bool GetCurrentQuestQuestDefinesNeedShowUI(const ArkQuestInstance* Instance, int Index);// 0x2918c20
	static float GetCurrentQuestInstanceRemainTime(const ArkQuestInstance* Instance, int Index);// 0x2918b60
	static float GetCurrentQuestInstanceNum(const ArkQuestInstance* Instance, int Index);// 0x2918aa0

--------------------------------
Class: ArkResourceManagerBase.ArkManagerBase.Object
	DataTable*[] TableReferences;//[Offset: 0x90, Size: 0x10]
	StringTable*[] StringTableReferences;//[Offset: 0xa0, Size: 0x10]
	DynamicObjectContainer* ObjectContainer;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: ArkObjectiveManager.Object
	<enum,class ArkObjective> ClassMap;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: ArkObjective.Object

--------------------------------
Class: ArkEventTriggerManager.Object
	<enum,class ArkEventTrigger> ClassMap;//[Offset: 0x28, Size: 0x50]
	<enum,bool> ClassPropMap;//[Offset: 0x78, Size: 0x50]

--------------------------------
Class: ArkEventTrigger.Object
	enum GetEventType();// 0x106f800
	void GetEventCharacter(const ArkGameplayEventWrapper* InEvent, out ArkEventCharacter OutEventCharacter);// 0x271e1c0
	bool Check(const ArkCharacterBase* Checker, const ArkGameplayEventWrapper* InEvent);// 0x271e0a0

--------------------------------
Class: ArkEventCharacter
	ArkCharacterBase* Causer;//[Offset: 0x0, Size: 0x8]
	ArkCharacterBase* Target;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ArkConditionManager.Object
	<enum,class ArkCondition> ClassMap;//[Offset: 0x28, Size: 0x50]
	<enum,bool> ClassPropMap;//[Offset: 0x78, Size: 0x50]

--------------------------------
Class: ArkCondition.Object
	bool LeaveCheck(ArkCharacterBase* Checker, const ArkGameplayEventWrapper* InEvent, out bool bOutState);// 0x26eb300
	bool IsInState(ArkCharacterBase* Character);// 0x26eb260
	enum GetLeaveEventType();// 0x260c0a0
	enum GetEnterEventType();// 0x12c2a30
	bool EnterCheck(ArkCharacterBase* Checker, const ArkGameplayEventWrapper* InEvent, out bool bOutState);// 0x26ea8f0
	bool Check(ArkCharacterBase* Checker, const ArkGameplayEventWrapper* InEvent, out bool bOutState);// 0x26ea7b0

--------------------------------
Class: StringTable.Object

--------------------------------
Class: ArkObjectiveDefine_TriggerRes.ArkObjectiveDefine.TableRowBase
	enum ObjectiveTriggerType;//[Offset: 0x100, Size: 0x1]
	int Count;//[Offset: 0x104, Size: 0x4]
	bool Sync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	FName[] SyncName;//[Offset: 0x110, Size: 0x10]
	FString ObjectiveSubType;//[Offset: 0x120, Size: 0x10]
	FString ObjectiveParam1;//[Offset: 0x130, Size: 0x10]
	FString ObjectiveParam2;//[Offset: 0x140, Size: 0x10]
	FString ObjectiveParam3;//[Offset: 0x150, Size: 0x10]
	FString ObjectiveParam4;//[Offset: 0x160, Size: 0x10]
	enum ConditionType;//[Offset: 0x170, Size: 0x1]
	FString ConditionSubType;//[Offset: 0x178, Size: 0x10]
	FString ConditionParam1;//[Offset: 0x188, Size: 0x10]
	FString ConditionParam2;//[Offset: 0x198, Size: 0x10]
	FString ConditionParam3;//[Offset: 0x1a8, Size: 0x10]
	FString ConditionParam4;//[Offset: 0x1b8, Size: 0x10]
	enum TriggerEventType;//[Offset: 0x1c8, Size: 0x1]
	FString TriggerSubType;//[Offset: 0x1d0, Size: 0x10]
	FString TriggerParam1;//[Offset: 0x1e0, Size: 0x10]
	FString TriggerParam2;//[Offset: 0x1f0, Size: 0x10]
	FString TriggerParam3;//[Offset: 0x200, Size: 0x10]
	FString TriggerParam4;//[Offset: 0x210, Size: 0x10]

--------------------------------
Class: ArkObjectiveDefine.TableRowBase
	int ID;//[Offset: 0x8, Size: 0x4]
	bool bFailObjective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bNotifyOthersWhenSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	bool bClearProgressWhenRoundBegin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1]
	enum ObjectiveType;//[Offset: 0xf, Size: 0x1]
	ArkQuestReward[] reward;//[Offset: 0x10, Size: 0x10]
	ArkDescText Description;//[Offset: 0x20, Size: 0x28]
	PaperSprite* icon;//[Offset: 0x48, Size: 0x28]
	bool bUseIndicator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	FText IndicatorText;//[Offset: 0x78, Size: 0x18]
	LinearColor EventColor;//[Offset: 0x90, Size: 0x10]
	bool ShouldShowOnCrossHair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	<enum,ArkObjectiveNotificationsDefine> Notifications;//[Offset: 0xa8, Size: 0x50]
	float LimitTime;//[Offset: 0xf8, Size: 0x4]

--------------------------------
Class: ArkDescText
	FText Content;//[Offset: 0x0, Size: 0x18]
	FText[] SubFills;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ArkObjectiveNotificationsDefine
	FString[] NotificationNames;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ArkObjectiveDefine_TriggerInfo
	ArkObjectiveInfo Objective;//[Offset: 0x0, Size: 0x38]
	ArkBuffConditionInfo Condition;//[Offset: 0x38, Size: 0x28]
	ArkBuffTriggerEventInfo Trigger;//[Offset: 0x60, Size: 0x38]

--------------------------------
Class: ArkObjectiveInfo
	int ID;//[Offset: 0x0, Size: 0x4]
	enum Type;//[Offset: 0x4, Size: 0x1]
	int Count;//[Offset: 0x8, Size: 0x4]
	float LimitTime;//[Offset: 0xc, Size: 0x4]
	bool Sync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	FName[] SyncName;//[Offset: 0x18, Size: 0x10]
	ArkBuffParamInfo[] ParamList;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: ArkBuffParamInfo
	FString SubType;//[Offset: 0x0, Size: 0x10]
	FString Param1;//[Offset: 0x10, Size: 0x10]
	FString Param2;//[Offset: 0x20, Size: 0x10]
	FString Param3;//[Offset: 0x30, Size: 0x10]
	FString Param4;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: ArkBuffConditionInfo
	int Idx;//[Offset: 0x0, Size: 0x4]
	enum Type;//[Offset: 0x4, Size: 0x1]
	ArkCondition* Condition;//[Offset: 0x8, Size: 0x8]
	enum ConditionMethod;//[Offset: 0x10, Size: 0x1]
	ArkBuffParamInfo[] ParamList;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ArkBuffTriggerEventInfo
	int Idx;//[Offset: 0x0, Size: 0x4]
	enum Type;//[Offset: 0x4, Size: 0x1]
	ArkEventTrigger* EventTrigger;//[Offset: 0x8, Size: 0x8]
	float Probability;//[Offset: 0x10, Size: 0x4]
	FName TriggerCDTag;//[Offset: 0x14, Size: 0x8]
	float TriggerCD;//[Offset: 0x1c, Size: 0x4]
	enum TargetType;//[Offset: 0x20, Size: 0x1]
	ArkBuffParamInfo[] ParamList;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: ArkQuestTableConfigs
	DataTable* QuestTable;//[Offset: 0x0, Size: 0x8]
	DataTable*[] ObjectiveTables;//[Offset: 0x8, Size: 0x10]
	class ArkObjectiveInstance[] ObjectiveTemplates;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ArkQuestDefine.TableRowBase
	int ID;//[Offset: 0x8, Size: 0x4]
	bool bIsLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bIsLoopOnFail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	FText Title;//[Offset: 0x10, Size: 0x18]
	ArkDescText Description;//[Offset: 0x28, Size: 0x28]
	int ObjectiveTotalCount;//[Offset: 0x50, Size: 0x4]
	int LevelID;//[Offset: 0x54, Size: 0x4]
	FText Story;//[Offset: 0x58, Size: 0x18]
	float LimitTime;//[Offset: 0x70, Size: 0x4]
	int Priority;//[Offset: 0x74, Size: 0x4]
	ArkCountDownTimeData[] CountDownTimeDatas;//[Offset: 0x78, Size: 0x10]
	ArkQuestReward[] Rewards;//[Offset: 0x88, Size: 0x10]
	PaperSprite* icon;//[Offset: 0x98, Size: 0x28]
	Texture2D* PreviewTexture;//[Offset: 0xc0, Size: 0x28]
	ArkQuestSequence[] Sequences;//[Offset: 0xe8, Size: 0x10]

--------------------------------
Class: ArkCountDownTimeData.TableRowBase
	float StartTimeCountDown;//[Offset: 0x8, Size: 0x4]
	float DurationTimeCountDown;//[Offset: 0xc, Size: 0x4]
	FText DescriptionCountDown;//[Offset: 0x10, Size: 0x18]
	enum TypeCountDown;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: ArkQuestSequence
	enum Op;//[Offset: 0x0, Size: 0x1]
	ArkObjectiveDesc[] ObjectiveDescs;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ArkInGameQuestDefine.ArkQuestDefine.TableRowBase
	enum QuestType;//[Offset: 0xf8, Size: 0x1]
	enum StatisticalEvent;//[Offset: 0xf9, Size: 0x1]

--------------------------------
Class: ArkGlobalQuestDefine.ArkQuestDefine.TableRowBase
	FText TutorialQuestTitle;//[Offset: 0xf8, Size: 0x18]
	bool bAutoReceive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	int[] RequiredQuests;//[Offset: 0x118, Size: 0x10]
	int[] ClientRequiredQuests;//[Offset: 0x128, Size: 0x10]
	int RequiredHavenLevel;//[Offset: 0x138, Size: 0x4]
	enum QuestType;//[Offset: 0x13c, Size: 0x1]
	int VendorID;//[Offset: 0x140, Size: 0x4]
	ArkCommonEventList UnlockCondition;//[Offset: 0x148, Size: 0x20]
	int QuestStepInGroup;//[Offset: 0x168, Size: 0x4]
	int GroupQuestNum;//[Offset: 0x16c, Size: 0x4]
	int activityID;//[Offset: 0x170, Size: 0x4]
	bool bIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 0x1]
	ArkCommonEventList HavenSequences;//[Offset: 0x178, Size: 0x20]
	Texture2D* BackGroundTexture;//[Offset: 0x198, Size: 0x28]

--------------------------------
Class: ArkCommonEventList.TableRowBase
	enum Op;//[Offset: 0x8, Size: 0x1]
	ArkCommonEventRefer[] Events;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ArkCommonEventRefer.TableRowBase
	int EventID;//[Offset: 0x8, Size: 0x4]
	FString EventTarget;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ArkGameplayEventQuestDefine.ArkQuestDefine.TableRowBase
	FName VOName;//[Offset: 0xf8, Size: 0x8]
	bool bDoOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	enum ShowTipsType;//[Offset: 0x101, Size: 0x1]

--------------------------------
Class: ArkPlayerNotificationComponent.LiteComponent.Object
	ArkNotificationParam[] Notifications;//[Offset: 0xb0, Size: 0x10]
	void OnRep_NotificationUpdate();// 0x28be7e0

--------------------------------
Class: ArkNotificationParam
	FString ParentNotificationName;//[Offset: 0x0, Size: 0x10]
	FString TargetNotificationName;//[Offset: 0x10, Size: 0x10]
	int Priority;//[Offset: 0x20, Size: 0x4]
	UInt64Property NotificationPlayerID;//[Size: 0x8]
	int NotificationTeamID;//[Offset: 0x30, Size: 0x4]
	FString NotificationString;//[Offset: 0x38, Size: 0x10]
	int NotificationPoint;//[Offset: 0x48, Size: 0x4]
	float NotificationTime;//[Offset: 0x4c, Size: 0x4]
	bool bIsNotify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: ArkBattleSurvivorSettlementInfo
	FString SurvivorID;//[Offset: 0x0, Size: 0x10]
	enum State;//[Offset: 0x10, Size: 0x1]
	bool HasFinishBonusQuest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]

--------------------------------
Class: ArkBattleHeroInfo
	FString SurvivorID;//[Offset: 0x0, Size: 0x10]
	int Count;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ArkRelifeItemInfo
	int ItemId;//[Offset: 0x0, Size: 0x4]
	enum ItemType;//[Offset: 0x4, Size: 0x1]
	int ItemCount;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: StatisticalInfo
	int MyTeamID;//[Offset: 0x0, Size: 0x4]
	int TargetTeamMyID;//[Offset: 0x4, Size: 0x4]
	int Time;//[Offset: 0x8, Size: 0x4]
	StatisticalEventData[] StatisticalEventData;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: StatisticalEventData
	enum Type;//[Offset: 0x0, Size: 0x1]
	FString[] Params;//[Offset: 0x8, Size: 0x10]
	float Timestamp;//[Offset: 0x18, Size: 0x4]
	int Score;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: StatisticalTeamScoreInfo
	int TeamId;//[Offset: 0x0, Size: 0x4]
	int Time;//[Offset: 0x4, Size: 0x4]
	int Score;//[Offset: 0x8, Size: 0x4]
	StatisticalPersonScoreInfo[] PersonScoreList;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: StatisticalPersonScoreInfo
	int64 PlayerId;//[Offset: 0x0, Size: 0x8]
	FString PlayerName;//[Offset: 0x8, Size: 0x10]
	float Timestamp;//[Offset: 0x18, Size: 0x4]
	StatisticalScoreData[] ScoreList;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: StatisticalScoreData
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	int Score;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ArkDeathInfo
	Actor* DamageCauser;//[Offset: 0x0, Size: 0x8]
	FName DamageAIName;//[Offset: 0x8, Size: 0x8]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	enum CurrentState;//[Offset: 0x11, Size: 0x1]

--------------------------------
Class: ArkBattleSurvivorRecruitInfo
	FString SurvivorID;//[Offset: 0x0, Size: 0x10]
	enum State;//[Offset: 0x10, Size: 0x1]
	bool bIsChief;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]

--------------------------------
Class: ArkMarkerActor.Actor.Object
	MarkerActorData MarkerActorData;//[Offset: 0x2e8, Size: 0x68]
	ArkNewDarkErosion_PickUpClear* LastRoom;//[Offset: 0x350, Size: 0x8]
	ArkNewDarkErosion_PickUpClear* SpawnRoom;//[Offset: 0x358, Size: 0x8]
	delegate OnMarkerOperated;//[Offset: 0x360, Size: 0x10]
	delegate OnMarkerDataChanged;//[Offset: 0x370, Size: 0x10]
	delegate OnEventFinished;//[Offset: 0x380, Size: 0x10]
	delegate OnTransparencyChanged;//[Offset: 0x390, Size: 0x10]
	TimerHandle TimerHandle;//[Offset: 0x3a0, Size: 0x8]
	TimerHandle DestroyTimerHandle;//[Offset: 0x3a8, Size: 0x8]
	SceneComponent* RootSceneComponent;//[Offset: 0x3b0, Size: 0x8]
	void OnRep_MarkerActorChanged();// 0x2836af0
	void OnPlayerStateRegistered(ArkPlayerStateBattle* PlayerState);// 0x2836a70
	void OnLocalTeamSyncFinished(int LocalTeamID);// 0x28369f0
	void OnCharacterMetaStateChanged(enum MetaStateType, bool bNewState, ArkCharacterBase* Character);// 0x28368f0
	void OnActorDisappear(int TeamId);// 0x2836870
	void EndDisplay();// 0x2835cc0
	void ClientShowMenuTips(bool bResponed, int CurTeamID, int CurPlayerIndex, bool bCancel, bool bWithVoice);// 0x2835b20
	void ClientRespondMarker(int PlayerIndex, bool bCancel);// 0x2835a50
	void ClientRemoveIndicator(int PlayerIndex);// 0x28359c0
	void ClientEventFinish(int FinishTeamID);// 0x2835930
	void ClientDestroyMarkerActor();// 0x77ed40

--------------------------------
Class: MarkerActorData
	enum MarkerType;//[Offset: 0x0, Size: 0x1]
	bool bAdmitMarker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	int TeamId;//[Offset: 0x4, Size: 0x4]
	int MasterPlayerIndex;//[Offset: 0x8, Size: 0x4]
	Actor* RelatedActor;//[Offset: 0x10, Size: 0x8]
	int Quality;//[Offset: 0x18, Size: 0x4]
	int ItemId;//[Offset: 0x1c, Size: 0x4]
	enum InputType;//[Offset: 0x20, Size: 0x1]
	int MarkerActorID;//[Offset: 0x24, Size: 0x4]
	enum IndicatorType;//[Offset: 0x28, Size: 0x1]
	int[] AllMarkerPlayerIndexList;//[Offset: 0x30, Size: 0x10]
	int[] CancelPlayerIndexList;//[Offset: 0x40, Size: 0x10]
	bool bLifeEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	float AutoRemoveWayPointMarkerDis;//[Offset: 0x54, Size: 0x4]
	int[] DetectedTeamIDList;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: ArkRelifePlayerInfo

--------------------------------
Class: ArkRelifeTimeInfo
	float RelifePickUpStartTime;//[Offset: 0x0, Size: 0x4]
	float RelifePickUpLastRecordTime;//[Offset: 0x4, Size: 0x4]
	float RelifePickUpTotalTime;//[Offset: 0x8, Size: 0x4]
	UInt64Property PlayerId;//[Size: 0x8]
	bool bShowHudInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: ArkRecruitInfo
	enum Type;//[Offset: 0x0, Size: 0x1]
	float StartTime;//[Offset: 0x4, Size: 0x4]
	byte RecruitLastCount;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: ArkRecruitSubSocket.NavigationObjectBase.Actor.Object
	float CountDown;//[Offset: 0x304, Size: 0x4]

--------------------------------
Class: ArkRecruitPoint.NavigationObjectBase.Actor.Object
	ArkRecruitSubSocket*[] SubSockets;//[Offset: 0x300, Size: 0x10]
	int Index;//[Offset: 0x310, Size: 0x4]

--------------------------------
Class: ArkNotebookKilledNanoData
	int[] KilledNanoNotebookID;//[Offset: 0x0, Size: 0x10]
	int[] KilledNanoNum;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ArkNanoCommandMarker.Actor.Object

--------------------------------
Class: PermanentAttributeInfo
	enum AttrType;//[Offset: 0x0, Size: 0x1]
	enum DamageSubType;//[Offset: 0x1, Size: 0x1]
	AttrValues AttrValue;//[Offset: 0x4, Size: 0x10]

--------------------------------
Class: AttrValues
	float PercentValue;//[Offset: 0x0, Size: 0x4]
	float AbsoluteValue;//[Offset: 0x4, Size: 0x4]
	float PercentValue_NonPlayer;//[Offset: 0x8, Size: 0x4]
	float AbsoluteValue_NonPlayer;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ArkPersonalSettlementData
	bool bNeedPersonalSettlement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int[] PlayerStatistics;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ArkNPC_EliteBase.ArkNpc.ArkCharacterBase.Character.Pawn.Actor.Object
	AnimationCompressionLibraryDatabase* ACLDataBase;//[Offset: 0x2850, Size: 0x8]
	bool bIsLite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2858, Size: 0x1]
	float[] kMoveSpeedValues;//[Offset: 0x2860, Size: 0x10]
	<FString,int> kMoveSpeedStages;//[Offset: 0x2870, Size: 0x50]
	ArkNpcSpeedModifier_Distance[] kSpeedModifierByDistance;//[Offset: 0x28c0, Size: 0x10]
	ArkNpcDodgeParams DodgeParams;//[Offset: 0x28d0, Size: 0x1c]
	ArkAIAttackPosFindingParams AttackPosFindingParams;//[Offset: 0x28f0, Size: 0x28]
	ArkNpcCrossConfig CrossConfig;//[Offset: 0x2918, Size: 0x78]
	Vector2D kPatrolInterval;//[Offset: 0x2990, Size: 0x8]
	float kPatrolRadius;//[Offset: 0x2998, Size: 0x4]
	AnimMontage* AM_Born;//[Offset: 0x29a0, Size: 0x8]
	AnimMontage* AM_Land;//[Offset: 0x29a8, Size: 0x8]
	AnimMontage* AM_Fury;//[Offset: 0x29b0, Size: 0x8]
	float kAlertDuration;//[Offset: 0x29b8, Size: 0x4]
	HeadIKParams HeadIKParams;//[Offset: 0x29bc, Size: 0x10]
	float kRagdollDeactivateTime;//[Offset: 0x29cc, Size: 0x4]
	float[] LODDistanceSettings;//[Offset: 0x29d0, Size: 0x10]
	int ImportanceLOD;//[Offset: 0x29e0, Size: 0x4]
	float ImportanceDistance;//[Offset: 0x29e4, Size: 0x4]
	delegate AIStateChangeDelegate;//[Offset: 0x29e8, Size: 0x10]
	ParticleSystem* PS_ForVisibilty;//[Offset: 0x29f8, Size: 0x28]
	float TargetedByPlayerFadeOutTime;//[Offset: 0x2a20, Size: 0x4]
	int CustomAnimParam;//[Offset: 0x2a24, Size: 0x4]
	FName FadingEffectMaterialParam;//[Offset: 0x2ae0, Size: 0x8]
	float FadingInTargetAlpha;//[Offset: 0x2ae8, Size: 0x4]
	float FadingOutTargetAlpha;//[Offset: 0x2aec, Size: 0x4]
	float VisibleFadingValueThreshold;//[Offset: 0x2af0, Size: 0x4]
	float InvisibleFadingValueThreshold;//[Offset: 0x2af4, Size: 0x4]
	bool bEnableLookAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0a, Size: 0x1]
	ArkEliteMovementComponent* EliteMovementComp;//[Offset: 0x2b10, Size: 0x8]
	ArkAbilitySystemComponent* AbilitySystem;//[Offset: 0x2b18, Size: 0x8]
	ArkSoftSkeletalMeshComponent* NeuronMesh;//[Offset: 0x2b20, Size: 0x8]
	<enum,class GameplayAbility> AbilityClassConfig;//[Offset: 0x2b28, Size: 0x50]
	ArkEliteAiController* MyController;//[Offset: 0x2b78, Size: 0x8]
	Actor* AITarget;//[Offset: 0x2b80, Size: 0x8]
	ArkCharacterBase* AITargetCharacter;//[Offset: 0x2b88, Size: 0x8]
	ArkPlayer* AITargetPlayer;//[Offset: 0x2b90, Size: 0x8]
	Actor* LastAITarget;//[Offset: 0x2b98, Size: 0x8]
	int AIState;//[Offset: 0x2ba4, Size: 0x4]
	Enum* AIStateEnum;//[Offset: 0x2bb0, Size: 0x8]
	enum OrderType;//[Offset: 0x2bbc, Size: 0x1]
	Vector OrderLocation;//[Offset: 0x2bc0, Size: 0xc]
	Vector FallingStartPos;//[Offset: 0x2bcc, Size: 0xc]
	float FallingStartTime;//[Offset: 0x2bd8, Size: 0x4]
	bool bIsObjective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2be0, Size: 0x1]
	int SpeedCursor;//[Offset: 0x2be4, Size: 0x4]
	uint16 SimRPCCmd;//[Offset: 0x2bf2, Size: 0x2]
	float DyingInterectPositonZOffset;//[Offset: 0x2c10, Size: 0x4]
	void SwitchRagdoll();// 0x285fa80
	void SimRPC(byte Cmd);// 0x285fa00
	void SetRenderCustomDepthStencilWithDetecter(bool Enable, FName detecter, byte Stencil, byte Priority, FName IgnoreTag);// 0x285f860
	void SetRenderCustomDepthStencil(bool bEnabled, int Stencil, FName IgnoreTag);// 0x285f760
	void SetMoveSpeedByName(FString Name);// 0x285f6c0
	void SetMoveSpeedByIndex(int InSpeedIndex);// 0x285f640
	void SetFadingEffectNative(float FadingDuration, bool bFadeIn, FName InHandler, bool bResetCurrentFadingValue, bool bFromCurrentFadingValue, AkAudioEvent* AudioEvent);// 0x285f360
	Transform OverrideSocketTransform(FName SocketName, out const Transform Transform);// 0x285f170
	void OnSimRPC(byte Cmd);// 0x285f070
	void OnSetOrder_BP(enum NewOrderType, out const Vector Location);// 0x305c9c0
	void OnRep_SpeedCursor();// 0x285f050
	void OnRep_SimRPCCmd();// 0x285f030
	void OnRep_AITarget();// 0x285ef60
	void OnRep_AIState();// 0x285ef40
	void OnLand_BP(out const Vector FallingOffset, float FallingDuration);// 0x285ee30
	void OnCheat_BP(FString Command);// 0x285ebb0
	void OnAnimMontageStarted(AnimMontage* Montage);// 0x285eb20
	void OnAnimMontageSectionChanged(AnimMontage* Montage, FName PrevSectionName, FName CurSectionName);// 0x285ea20
	void OnAnimMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x285e950
	void OnAnimMontageBlendingOut(AnimMontage* Montage, bool bInterrupted);// 0x285e880
	void OnAIStateChange_BP(enum OldState, enum NewState);// 0x305c9c0
	bool IsPlayingLandAnimation();// 0x285e850
	bool IsPlayingBornAnimation();// 0x285e820
	float GetStartTimeOfCurrentAITarget();// 0x285e6a0
	float GetStartTimeOfCurrentAIState();// 0x285e680
	int GetSpeedCursor();// 0x285e660
	float GetSpeedByIndex(int InSpeedIndex);// 0x285e5d0
	float GetMoveSpeedByName(FString Name);// 0x285e520
	static ArkNPC_EliteBase*[] GetElitesTargetingTeam(int TeamId);// 0x285e460
	static ArkNPC_EliteBase*[] GetElitesTargetingCharacter(const ArkCharacterBase* Character);// 0x285e390
	void FireCustomEvent(byte EventID);// 0x285e310
	void ClientSetOrder(enum NewOrderType, Vector Location);// 0x285e240
	void CalcCrossInfo();// 0xae2270

--------------------------------
Class: AnimationCompressionLibraryDatabase.Object
	byte[] CookedCompressedBytes;//[Offset: 0x28, Size: 0x10]
	CookedAnimSequenceMappings(UInt64Property)[] CookedAnimSequenceMappings;//[Offset: 0x38, Size: 0x10]
	UInt32Property MaxStreamRequestSizeKB;//[Size: 0x4]
	static void SetVisualFidelity(Object* WorldContextObject, LatentActionInfo LatentInfo, AnimationCompressionLibraryDatabase* DatabaseAsset, out enum Result, enum VisualFidelity);// 0x130d8a0
	static enum GetVisualFidelity(AnimationCompressionLibraryDatabase* DatabaseAsset);// 0x130d820

--------------------------------
Class: ArkNpcSpeedModifier_Distance
	float Distance;//[Offset: 0x0, Size: 0x4]
	int SpeedIndex;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ArkNpcDodgeParams
	float CD;//[Offset: 0x0, Size: 0x4]
	float Dist;//[Offset: 0x4, Size: 0x4]
	float MinDuration;//[Offset: 0x8, Size: 0x4]
	float MaxDuration;//[Offset: 0xc, Size: 0x4]
	bool bAdjustPreferDistFromGA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Vector2D PreferTargetDist;//[Offset: 0x14, Size: 0x8]

--------------------------------
Class: ArkAIAttackPosFindingParams
	int MinDist;//[Offset: 0x0, Size: 0x4]
	int BestDist;//[Offset: 0x4, Size: 0x4]
	int SpreadAngle;//[Offset: 0x8, Size: 0x4]
	int ExtraTraceRadius;//[Offset: 0xc, Size: 0x4]
	bool bTryNavMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	class ArkAIGABuff_Performable[] RefGAs;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ArkNpcCrossConfig
	AnimMontage* AM_JumpOff;//[Offset: 0x0, Size: 0x8]
	AnimMontage* AM_JumpFlat_Slow;//[Offset: 0x8, Size: 0x8]
	AnimMontage* AM_JumpFlat_Fast;//[Offset: 0x10, Size: 0x8]
	AnimMontage* AM_Climb_High;//[Offset: 0x18, Size: 0x8]
	AnimMontage* AM_Climb_Low;//[Offset: 0x20, Size: 0x8]
	AnimMontage* AM_Cross_High;//[Offset: 0x28, Size: 0x8]
	AnimMontage* AM_Cross_Low;//[Offset: 0x30, Size: 0x8]
	bool bTriggerLandForClimb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float RotationRateOverride;//[Offset: 0x3c, Size: 0x4]
	float BestDistToPeak_ClimbLow;//[Offset: 0x40, Size: 0x4]
	float BestDistToPeak_ClimbHigh;//[Offset: 0x44, Size: 0x4]
	float BestDistToPeak_CrossLow;//[Offset: 0x48, Size: 0x4]
	float BestDistToPeak_CrossHigh;//[Offset: 0x4c, Size: 0x4]
	float ClimbDist_After;//[Offset: 0x50, Size: 0x4]
	float CrossDist_After;//[Offset: 0x54, Size: 0x4]
	float JumpOffDist_Before;//[Offset: 0x58, Size: 0x4]
	float JumpOffDist_After;//[Offset: 0x5c, Size: 0x4]
	float JumpFlatDist_Before;//[Offset: 0x60, Size: 0x4]
	float JumpFlatDist_After;//[Offset: 0x64, Size: 0x4]
	float MinJumpOffHeight;//[Offset: 0x68, Size: 0x4]
	float CrossLowHeight;//[Offset: 0x6c, Size: 0x4]
	float CrossHighHeight;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: HeadIKParams
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float PitchLimit;//[Offset: 0x4, Size: 0x4]
	float YawLimit;//[Offset: 0x8, Size: 0x4]
	float RotationRate;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ArkEliteMovementComponent.ArkNpcMovementComponent.ArkCharacterMovementBase.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float StartAngle;//[Offset: 0xb08, Size: 0x4]
	float MinChangePathInterval;//[Offset: 0xb0c, Size: 0x4]
	float SwitchStateAngle;//[Offset: 0xb10, Size: 0x4]
	float PivotInvalidSegmentLength;//[Offset: 0xb14, Size: 0x4]
	float PivotNextSegmentMinLength;//[Offset: 0xb18, Size: 0x4]
	float[] MinEndDistanceMap;//[Offset: 0xb20, Size: 0x10]
	float[] MaxEndDistanceMap;//[Offset: 0xb30, Size: 0x10]
	float[] PivotDistanceMap;//[Offset: 0xb40, Size: 0x10]
	float[] StartSpeedMap;//[Offset: 0xb50, Size: 0x10]
	MotionArchive CurrentMotionArchive;//[Offset: 0xb60, Size: 0x18]
	ArkNPC_EliteBase* EliteOwner;//[Offset: 0xb78, Size: 0x8]

--------------------------------
Class: MotionArchive
	int MotionSpeedCursor;//[Offset: 0x0, Size: 0x4]
	AnimMontage* MotionAnim;//[Offset: 0x8, Size: 0x8]
	enum MotionAnimType;//[Offset: 0x10, Size: 0x1]
	float MotionEndPosition;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ArkAbilitySystemComponent.AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
	void ServerSetReplicatedVector(GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, const Vector VectorData, PredictionKey CurrentPredictionKey);// 0x2607900
	void ServerSetReplicatedByte(GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, const byte ByteData, PredictionKey CurrentPredictionKey);// 0x2607730
	void ServerSetReplicatedActor(GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, Actor* ActorRef, PredictionKey CurrentPredictionKey);// 0x2607560
	void ClientSetReplicatedVector(GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, const Vector VectorData);// 0x2606f90
	void ClientSetReplicatedByte(GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, const byte ByteData);// 0x2606e60
	void ClientSetReplicatedActor(GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, Actor* ActorRef);// 0x2606d30
	void AddOrRemoveGameplayTags(bool bAdd, GameplayTagContainer Tags);// 0x2606c00
	void AddOrRemoveBlockingTags(bool bAdd, GameplayTagContainer Tags);// 0x2606ad0

--------------------------------
Class: ArkEliteAiController.ArkAIControllerBase.AIController.Controller.Actor.Object
	bool bNoMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 0x1]
	bool bTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x451, Size: 0x1]
	ArkNPC_EliteBase* MyChar;//[Offset: 0x458, Size: 0x8]
	NavigationSystemV1* mNavSysCache;//[Offset: 0x460, Size: 0x8]
	RecastNavMesh* mNavMeshCache;//[Offset: 0x468, Size: 0x8]
	ArkNPCPathFollowingComponent* ElitePathFollowingComp;//[Offset: 0x470, Size: 0x8]
	ArkAITargetScoreEvaluator* OverridenTargetScoreEveluator;//[Offset: 0x478, Size: 0x8]
	ArkCharacterBase* AvoidingTarget;//[Offset: 0x5c8, Size: 0x8]
	bool TargetTouchable(Actor* Target, float TouchableDistance, float TouchableAngle, int CheckCollision);// 0x271a2c0
	void SetAIStateByName(FString NewStateName);// 0x2719e40
	void SetAIStateByEnum(enum NewState);// 0x2719dc0
	void SetAIState(int NewAIState);// 0x2719d40
	void OverrideSpeedStage(int NewSpeedIdx);// 0x2719c60
	void OnCustomEvent(byte EventID);// 0x2719b60
	ArkNPC_EliteBase* GetElite();// 0x2719b20
	bool CanBeTarget(Actor* Target);// 0x2719970

--------------------------------
Class: ArkAIControllerBase.AIController.Controller.Actor.Object
	bool ShouldHurtCharacter(ArkCharacterBase* InCharacter);// 0x2625590
	void SetNavLinkOptions(bool AllowCrossUp, bool AllowCrossOver, bool AllowJumpDown);// 0x2625470
	void OnPerceptionEvent(out const ArkAIPerceptionEvent perceptionEvent);// 0x2624ed0
	bool IsNavLinkAllowed(const ArkNavLinkCustomComponent* NavLinkCustomComponent);// 0x2624c60

--------------------------------
Class: NavigationSystemV1.NavigationSystemBase.Object
	NavigationData* MainNavData;//[Offset: 0x28, Size: 0x8]
	NavigationData* AbstractNavData;//[Offset: 0x30, Size: 0x8]
	FName DefaultAgentName;//[Offset: 0x38, Size: 0x8]
	class CrowdManagerBase* CrowdManagerClass;//[Offset: 0x40, Size: 0x28]
	bool bAutoCreateNavigationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bSpawnNavDataInNavBoundsLevel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	bool bAllowClientSideNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1]
	bool bShouldDiscardSubLevelNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1]
	bool bTickWhilePaused;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1]
	bool bSupportRebuilding;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1]
	bool bInitialBuildingLocked;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1]
	bool bSkipAgentHeightCheckWhenPickingNavData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1]
	enum DataGatheringMode;//[Offset: 0x6c, Size: 0x1]
	bool bGenerateNavigationOnlyAroundNavigationInvokers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	float ActiveTilesUpdateInterval;//[Offset: 0x74, Size: 0x4]
	NavDataConfig[] SupportedAgents;//[Offset: 0x78, Size: 0x10]
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x88, Size: 0x4]
	NavigationData*[] NavDataSet;//[Offset: 0x90, Size: 0x10]
	NavigationData*[] NavDataRegistrationQueue;//[Offset: 0xa0, Size: 0x10]
	delegate OnNavDataRegisteredEvent;//[Offset: 0xc0, Size: 0x10]
	delegate OnNavigationGenerationFinishedDelegate;//[Offset: 0xd0, Size: 0x10]
	enum OperationMode;//[Offset: 0x1bc, Size: 0x1]
	float DirtyAreasUpdateFreq;//[Offset: 0x514, Size: 0x4]
	void UnregisterNavigationInvoker(Actor* Invoker);// 0x4da2e60
	static void SimpleMoveToLocation(Controller* Controller, out const Vector Goal);// 0x4da2da0
	static void SimpleMoveToActor(Controller* Controller, const Actor* Goal);// 0x27c2360
	void SetMaxSimultaneousTileGenerationJobsCount(int MaxNumberOfJobs);// 0x4da2d20
	void SetGeometryGatheringMode(enum NewMode);// 0x4da2ca0
	void ResetMaxSimultaneousTileGenerationJobsCount();// 0x4da2c80
	void RegisterNavigationInvoker(Actor* Invoker, float TileGenerationRadius, float TileRemovalRadius);// 0x4da2b80
	static Vector ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x4da29b0
	void OnNavigationBoundsUpdated(NavMeshBoundsVolume* NavVolume);// 0x4da2930
	static bool NavigationRaycast(Object* WorldContextObject, out const Vector RayStart, out const Vector RayEnd, out Vector HitLocation, class NavigationQueryFilter FilterClass, Controller* Querier);// 0x4da2720
	bool K2_ReplaceAreaInOctreeData(const Object* Object, class NavArea OldArea, class NavArea NewArea);// 0x4da2620
	static bool K2_ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, out Vector ProjectedLocation, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x4da2440
	static bool K2_GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, float HeightLimit, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x4da2220
	static bool K2_GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, float HeightLimit, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x4da2000
	static bool K2_GetRandomLocationInNavigableRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, float HeightLimit, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x4da2000
	static bool IsNavigationBeingBuiltOrLocked(Object* WorldContextObject);// 0x4da1f20
	static bool IsNavigationBeingBuilt(Object* WorldContextObject);// 0x4da1ea0
	static Vector GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x4da1cd0
	static Vector GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x4da1b00
	static byte GetPathLength(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathLength, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x4da18e0
	static byte GetPathCost(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathCost, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x4da1690
	static NavigationSystemV1* GetNavigationSystem(Object* WorldContextObject);// 0x4da15e0
	static NavigationPath* FindPathToLocationSynchronously(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x4da13b0
	static NavigationPath* FindPathToActorSynchronously(Object* WorldContextObject, out const Vector PathStart, Actor* GoalActor, float TetherDistance, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x4da11c0

--------------------------------
Class: CrowdManagerBase.Object

--------------------------------
Class: NavMeshBoundsVolume.Volume.Brush.Actor.Object
	NavAgentSelector SupportedAgents;//[Offset: 0x320, Size: 0x4]

--------------------------------
Class: NavigationPath.Object
	delegate PathUpdatedNotifier;//[Offset: 0x28, Size: 0x10]
	Vector[] PathPoints;//[Offset: 0x38, Size: 0x10]
	byte RecalculateOnInvalidation;//[Offset: 0x48, Size: 0x1]
	bool IsValid();// 0x4da1fd0
	bool IsStringPulled();// 0x12c2120
	bool IsPartial();// 0x4da1fa0
	float GetPathLength();// 0x4da18b0
	float GetPathCost();// 0x4da1660
	FString GetDebugString();// 0x4da1560
	void EnableRecalculationOnInvalidation(byte DoRecalculation);// 0x4da1140
	void EnableDebugDrawing(bool bShouldDrawDebugData, LinearColor PathColor);// 0x4da1060

--------------------------------
Class: RecastNavMesh.NavigationData.Actor.Object
	bool bDrawTriangleEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c8, Size: 0x1]
	bool bDrawPolyEdges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c8, Size: 0x1]
	bool bDrawFilledPolys;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c8, Size: 0x1]
	bool bDrawNavMeshEdges;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c8, Size: 0x1]
	bool bDrawTileBounds;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c8, Size: 0x1]
	bool bDrawPathCollidingGeometry;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4c8, Size: 0x1]
	bool bDrawTileLabels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4c8, Size: 0x1]
	bool bDrawPolygonLabels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4c8, Size: 0x1]
	bool bDrawDefaultPolygonCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c9, Size: 0x1]
	bool bDrawLabelsOnPathNodes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c9, Size: 0x1]
	bool bDrawNavLinks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c9, Size: 0x1]
	bool bDrawFailedNavLinks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c9, Size: 0x1]
	bool bDrawClusters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c9, Size: 0x1]
	bool bDrawOctree;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4c9, Size: 0x1]
	bool bDrawOctreeDetails;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4c9, Size: 0x1]
	bool bDrawMarkedForbiddenPolys;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4c9, Size: 0x1]
	bool bDistinctlyDrawTilesBeingBuilt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4ca, Size: 0x1]
	bool bDrawNavMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4ca, Size: 0x1]
	float DrawOffset;//[Offset: 0x4cc, Size: 0x4]
	bool bFixedTilePoolSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4d0, Size: 0x1]
	int TilePoolSize;//[Offset: 0x4d4, Size: 0x4]
	float TileSizeUU;//[Offset: 0x4d8, Size: 0x4]
	float CellSize;//[Offset: 0x4dc, Size: 0x4]
	float CellHeight;//[Offset: 0x4e0, Size: 0x4]
	float AgentRadius;//[Offset: 0x4e4, Size: 0x4]
	float AgentHeight;//[Offset: 0x4e8, Size: 0x4]
	float AgentMaxHeight;//[Offset: 0x4ec, Size: 0x4]
	float AgentMaxSlope;//[Offset: 0x4f0, Size: 0x4]
	float AgentMaxStepHeight;//[Offset: 0x4f4, Size: 0x4]
	float MinRegionArea;//[Offset: 0x4f8, Size: 0x4]
	float MergeRegionSize;//[Offset: 0x4fc, Size: 0x4]
	float MaxSimplificationError;//[Offset: 0x500, Size: 0x4]
	int MaxSimultaneousTileGenerationJobsCount;//[Offset: 0x504, Size: 0x4]
	int TileNumberHardLimit;//[Offset: 0x508, Size: 0x4]
	int PolyRefTileBits;//[Offset: 0x50c, Size: 0x4]
	int PolyRefNavPolyBits;//[Offset: 0x510, Size: 0x4]
	int PolyRefSaltBits;//[Offset: 0x514, Size: 0x4]
	Vector NavMeshOriginOffset;//[Offset: 0x518, Size: 0xc]
	float DefaultDrawDistance;//[Offset: 0x524, Size: 0x4]
	float DefaultMaxSearchNodes;//[Offset: 0x528, Size: 0x4]
	float DefaultMaxHierarchicalSearchNodes;//[Offset: 0x52c, Size: 0x4]
	byte RegionPartitioning;//[Offset: 0x530, Size: 0x1]
	byte LayerPartitioning;//[Offset: 0x531, Size: 0x1]
	int RegionChunkSplits;//[Offset: 0x534, Size: 0x4]
	int LayerChunkSplits;//[Offset: 0x538, Size: 0x4]
	bool bSortNavigationAreasByCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x53c, Size: 0x1]
	bool bPerformVoxelFiltering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x53c, Size: 0x1]
	bool bMarkLowHeightAreas;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x53c, Size: 0x1]
	bool bFilterLowSpanSequences;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x53c, Size: 0x1]
	bool bFilterLowSpanFromTileCache;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x53c, Size: 0x1]
	bool bDoFullyAsyncNavDataGathering;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x53c, Size: 0x1]
	bool bUseBetterOffsetsFromCorners;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x53c, Size: 0x1]
	bool bStoreEmptyTileLayers;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x53c, Size: 0x1]
	bool bUseVirtualFilters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x53d, Size: 0x1]
	bool bAllowNavLinkAsPathEnd;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x53d, Size: 0x1]
	bool bUseVoxelCache;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x53d, Size: 0x1]
	float TileSetUpdateInterval;//[Offset: 0x540, Size: 0x4]
	float HeuristicScale;//[Offset: 0x544, Size: 0x4]
	float VerticalDeviationFromGroundCompensation;//[Offset: 0x548, Size: 0x4]
	bool K2_ReplaceAreaInTileBounds(Box Bounds, class NavArea OldArea, class NavArea NewArea, bool ReplaceLinks);// 0x4da4ba0

--------------------------------
Class: ArkNPCPathFollowingComponent.PathFollowingComponent.ActorComponent.Object
	ArkNPC_EliteBase* EliteOwner;//[Offset: 0x388, Size: 0x8]
	interface class * CurrentLink;//[Offset: 0x390, Size: 0x10]
	ArkNPC_EliteBase* OwnerElite();// 0x2862c00
	void OnCrossStateChange(bool bIsCrossing);// 0x2862af0

--------------------------------
Class: ArkAIPerceptionEvent
	ArkNpc* NpcCharacter;//[Offset: 0x0, Size: 0x8]
	enum EventType;//[Offset: 0x8, Size: 0x1]
	Vector Location;//[Offset: 0xc, Size: 0xc]
	float Magnitude;//[Offset: 0x18, Size: 0x4]
	Actor* Actor;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: ArkNavLinkCustomComponent.NavLinkCustomComponent.NavRelevantComponent.ActorComponent.Object
	float PeakFromHigherEnd;//[Offset: 0x2c0, Size: 0x4]

--------------------------------
Class: NavLinkCustomComponent.NavRelevantComponent.ActorComponent.Object
	UInt32Property NavLinkUserId;//[Size: 0x4]
	class NavArea* EnabledAreaClass;//[Offset: 0x220, Size: 0x8]
	class NavArea* DisabledAreaClass;//[Offset: 0x228, Size: 0x8]
	NavAgentSelector SupportedAgents;//[Offset: 0x230, Size: 0x4]
	Vector LinkRelativeStart;//[Offset: 0x234, Size: 0xc]
	Vector LinkRelativeEnd;//[Offset: 0x240, Size: 0xc]
	byte LinkDirection;//[Offset: 0x24c, Size: 0x1]
	bool bLinkEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x250, Size: 0x1]
	bool bNotifyWhenEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x250, Size: 0x1]
	bool bNotifyWhenDisabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x250, Size: 0x1]
	bool bCreateBoxObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x250, Size: 0x1]
	Vector ObstacleOffset;//[Offset: 0x254, Size: 0xc]
	Vector ObstacleExtent;//[Offset: 0x260, Size: 0xc]
	class NavArea* ObstacleAreaClass;//[Offset: 0x270, Size: 0x8]
	float BroadcastRadius;//[Offset: 0x278, Size: 0x4]
	float BroadcastInterval;//[Offset: 0x27c, Size: 0x4]
	byte BroadcastChannel;//[Offset: 0x280, Size: 0x1]

--------------------------------
Class: Enum.Field.Object

--------------------------------
Class: ArkAIExtraSpawner.Actor.Object
	bool bDirectorExtraSystemEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	DataTable* AIExtraSpawnerDataTable;//[Offset: 0x2f0, Size: 0x8]
	Actor*[] PVEShuttlesArray;//[Offset: 0x630, Size: 0x10]
	FName[] TimerNPCTags;//[Offset: 0x640, Size: 0x10]
	FString EffectSpawnTag;//[Offset: 0x650, Size: 0x10]
	float PhantomEffectFireGhostPercent;//[Offset: 0x6c4, Size: 0x4]
	void ServerToClientShowGoldenBossUI();// 0x26314b0
	void OnSpawnTensionNpc(ArkGameplayEventWrapper* GameplayEvent);// 0x26313a0
	void OnQuestFinish(int questID, bool bSucceed);// 0x2631220
	void OnNpcDead(ArkCharacterBase* Character);// 0x26310f0
	void OnGoldenBossEscape(ArkCharacterBase* Character, float CurrentHealth);// 0x2630ee0
	void OnGameFlowChangeCallback(enum LastMode, enum NewMode, float StartTime);// 0x2630de0
	void KillOneFireGhostPhantom();// 0x2630ab0
	float GetPhantomEffectFireGhostPercent();// 0x2630a90
	int GetFireGhostPhantomKillTime();// 0x2630a70
	void BP_OnShowGoldenBossWarningUI();// 0x305c9c0

--------------------------------
Class: ArkCineSubSocket.Actor.Object
	SceneComponent* CineRootComponet;//[Offset: 0x2e8, Size: 0x8]

--------------------------------
Class: ArkRoomVolumeComponent.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ArkRoomPointComponent*[] AttachRoomPoints;//[Offset: 0x698, Size: 0x10]

--------------------------------
Class: ArkRoomPointComponent.SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector GetRandomLocationOnRoomFloorFor(ArkNpc* NpcRef);// 0x292e610

--------------------------------
Class: ArkBuildingActorBase.Actor.Object
	float OutlineIntensityBlendSeconds;//[Offset: 0x2e8, Size: 0x4]
	int OutlineUsedCustomStencil;//[Offset: 0x2ec, Size: 0x4]
	ArkRoomVolumeComponent*[] BuildingRooms;//[Offset: 0x300, Size: 0x10]
	float TargetedIntersity;//[Offset: 0x314, Size: 0x4]
	float TargetedThickness;//[Offset: 0x318, Size: 0x4]
	float SelectedThickness;//[Offset: 0x31c, Size: 0x4]
	CurveFloat* SelectedAppearIntensityCurve;//[Offset: 0x328, Size: 0x8]
	CurveFloat* SelectedExistIntensityCurve;//[Offset: 0x338, Size: 0x8]
	void SetOutlineTargetThickness(float InThickness);// 0x26a3d10
	void SetOutlineTargetIntensity(float InOutlineIntensity);// 0x26a3c90
	void SetBeTargeted(bool bTargeted);// 0x26a3a20
	void SetBeSelected();// 0x26a3a00
	bool IsInOutline();// 0x26a3670
	float GetOutlineTargetThickness();// 0x26a35f0
	float GetCurrentOutlineIntensity();// 0x26a35d0
	void CancelSelected();// 0x26a32f0

--------------------------------
Class: MotionDatabase.Object
	<int,int> SpeedCursorToMotionKeyMap;//[Offset: 0x28, Size: 0x50]
	Skeleton* Skeleton;//[Offset: 0x78, Size: 0x8]
	MotionSequenceProperty[] AnimationProperties;//[Offset: 0x80, Size: 0x10]
	FName[] MotionBones;//[Offset: 0x90, Size: 0x10]
	AnimSequence*[] SourceAnimations;//[Offset: 0xa0, Size: 0x10]
	MotionDatabaseProperty MotionDatabaseProperty;//[Offset: 0xb0, Size: 0x10]
	MotionKey[] MotionKeys;//[Offset: 0xc0, Size: 0x10]
	MotionKey[] LoopingMotionKeys;//[Offset: 0xd0, Size: 0x10]
	StartMotionKey[] StartMotionKeys;//[Offset: 0xe0, Size: 0x10]
	PivotMotionKey[] PivotMotionKeys;//[Offset: 0xf0, Size: 0x10]
	EndMotionKey[] EndMotionKeys;//[Offset: 0x100, Size: 0x10]
	TagMotionKey[] TagMotionKeys;//[Offset: 0x110, Size: 0x10]

--------------------------------
Class: MotionSequenceProperty
	float SequenceSampleTimeStep;//[Offset: 0x0, Size: 0x4]
	int SpeedCursor;//[Offset: 0x4, Size: 0x4]
	GameplayTag MotionTag;//[Offset: 0x8, Size: 0x8]
	StartTransitionProperty[] StartTransitionProperties;//[Offset: 0x10, Size: 0x10]
	PivotTransitionProperty[] PivotTransitionProperties;//[Offset: 0x20, Size: 0x10]
	EndTransitionProperty[] EndTransitionProperties;//[Offset: 0x30, Size: 0x10]
	TagTransitionProperty[] TagTransitionProperties;//[Offset: 0x40, Size: 0x10]
	bool bIsLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool bIsStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	bool bIsPivot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1]
	bool bIsEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 0x1]
	bool bIsTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]

--------------------------------
Class: StartTransitionProperty.TransitionProperty

--------------------------------
Class: TransitionProperty
	float FirstSequenceTime;//[Offset: 0x0, Size: 0x4]
	float SecondSequenceTime;//[Offset: 0x4, Size: 0x4]
	int SpeedCursor;//[Offset: 0x8, Size: 0x4]
	float StartCustomRotationTime;//[Offset: 0xc, Size: 0x4]
	float EndTransitionTime;//[Offset: 0x10, Size: 0x4]
	float RotationMakeUpDuration;//[Offset: 0x14, Size: 0x4]
	float BlendInTime;//[Offset: 0x18, Size: 0x4]
	float BlendOutTime;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: PivotTransitionProperty.TransitionProperty
	float PivotTransitionTime;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: EndTransitionProperty.TransitionProperty
	int EndSpeedCursor;//[Offset: 0x20, Size: 0x4]
	float EndSpeed;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: TagTransitionProperty.TransitionProperty
	GameplayTag MotionTag;//[Offset: 0x20, Size: 0x8]
	float ForcePlayToPosition;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: MotionDatabaseProperty
	float SampleTimeStep;//[Offset: 0x0, Size: 0x4]
	float PredictTimeStep;//[Offset: 0x4, Size: 0x4]
	float MeshRelativeRotationYaw;//[Offset: 0x8, Size: 0x4]
	float MeshScale;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MotionKey
	MotionBoneData[] MotionBoneData;//[Offset: 0x0, Size: 0x10]
	enum AnimType;//[Offset: 0x10, Size: 0x1]
	int SourceSequenceIndex;//[Offset: 0x14, Size: 0x4]
	float PlayPosition;//[Offset: 0x18, Size: 0x4]
	int SpeedCursor;//[Offset: 0x1c, Size: 0x4]
	float BlendInTime;//[Offset: 0x20, Size: 0x4]
	float BlendOutTime;//[Offset: 0x24, Size: 0x4]
	float EndTransitionTime;//[Offset: 0x28, Size: 0x4]
	float MotionDirection;//[Offset: 0x2c, Size: 0x4]
	float StartCustomRotationTime;//[Offset: 0x30, Size: 0x4]
	float RotationMakeUpDuration;//[Offset: 0x34, Size: 0x4]
	float DeltaRotationYaw;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: MotionBoneData
	Vector BoneLocation;//[Offset: 0x0, Size: 0xc]
	Vector BoneVelocity;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: StartMotionKey.MotionKey

--------------------------------
Class: PivotMotionKey.MotionKey
	float PivotTransitionTime;//[Offset: 0x40, Size: 0x4]
	float PivotDistance;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: EndMotionKey.MotionKey
	int EndSpeedCursor;//[Offset: 0x40, Size: 0x4]
	float EndDistance;//[Offset: 0x44, Size: 0x4]
	float EndSpeed;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: TagMotionKey.MotionKey
	GameplayTag MotionTag;//[Offset: 0x40, Size: 0x8]
	float ForcePlayToPosition;//[Offset: 0x48, Size: 0x4]
	bool bIsLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: ArkFloatingPath
	ArkFloatingPathPoint[] PathPoints;//[Offset: 0x0, Size: 0x10]
	Vector_NetQuantizeNormal GoalDir;//[Offset: 0x10, Size: 0xc]
	bool bHasDownLink;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: ArkFloatingPathPoint
	Vector_NetQuantize Location;//[Offset: 0x0, Size: 0xc]
	UInt32Property CustomLinkId;//[Size: 0x4]
	float MaxTurningSpeed;//[Offset: 0x10, Size: 0x4]
	Vector TurningCenter;//[Offset: 0x14, Size: 0xc]
	float TurningRadius;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: ArkNpcRepMovement
	Vector_NetQuantize Location;//[Offset: 0x0, Size: 0xc]
	bool bForceUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bFollowingPath;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bPlayingMontage;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: ArkFlammableComponent.ArkCharacterLiteComponent.LiteComponent.Object
	class DamageType* DamageClass;//[Offset: 0xb8, Size: 0x8]
	float DamagePerTick;//[Offset: 0xc0, Size: 0x4]
	bool EnableDamagePercentHP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]
	float DamagePercentPerTick;//[Offset: 0xc8, Size: 0x4]
	float TickPeriod;//[Offset: 0xcc, Size: 0x4]

--------------------------------
Class: ArkMontageRepInfo
	UInt32Property PlaySequenceID;//[Size: 0x4]
	UInt32Property StopSequenceID;//[Size: 0x4]
	AnimMontage* Montage;//[Offset: 0x8, Size: 0x8]
	AnimMontage* StoppedMontage;//[Offset: 0x10, Size: 0x8]
	float BlendOutTime;//[Offset: 0x18, Size: 0x4]
	FName SectionName;//[Offset: 0x1c, Size: 0x8]
	float PlayRate;//[Offset: 0x24, Size: 0x4]
	int Flags;//[Offset: 0x28, Size: 0x4]
	enum RootMotionOption;//[Offset: 0x2c, Size: 0x1]
	Transform StartTransform;//[Offset: 0x30, Size: 0x30]
	Vector TargetLocation;//[Offset: 0x60, Size: 0xc]
	float PlayTime;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: ArkNpcFocusInfo
	bool bIsFocusing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Actor* FocusActor;//[Offset: 0x8, Size: 0x8]
	Vector FocusLocation;//[Offset: 0x10, Size: 0xc]
	bool bIgnoreFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: CriticalStunRepInfo
	ArkCharacterBase* Causer;//[Offset: 0x0, Size: 0x8]
	enum LastStunType;//[Offset: 0x8, Size: 0x1]
	enum StunType;//[Offset: 0x9, Size: 0x1]
	int Count;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ArkNpcAnimInstance.ArkCharacterAnimInstance.ArkAnimInstanceBase.AnimInstance.Object
	Rotator AnimHeadRot;//[Offset: 0x398, Size: 0xc]
	BlendSpaceBase* AnimAimAOAsset;//[Offset: 0x3a8, Size: 0x8]
	float AnimAimAOPitch;//[Offset: 0x3b0, Size: 0x4]
	float AnimAimAOYaw;//[Offset: 0x3b4, Size: 0x4]
	ArkAimOffsetInfo HeadAO;//[Offset: 0x3b8, Size: 0x68]
	<FName,ArkAimOffsetInfo> AimOffsets;//[Offset: 0x420, Size: 0x50]
	FName[] RopeBones;//[Offset: 0x470, Size: 0x10]
	float StrafeAngleChangeRate;//[Offset: 0x480, Size: 0x4]
	AnimSequence* Anim_TurnL90;//[Offset: 0x488, Size: 0x8]
	AnimSequence* Anim_TurnR90;//[Offset: 0x490, Size: 0x8]
	AnimNodeParams_ArkModifyBones AnimNodeParams;//[Offset: 0x498, Size: 0x28]
	float TargetStrafeAngle;//[Offset: 0x4e8, Size: 0x4]
	float StrafeAngle;//[Offset: 0x4ec, Size: 0x4]
	float SpeedCursor;//[Offset: 0x4f0, Size: 0x4]
	float AngularSpeed;//[Offset: 0x4f4, Size: 0x4]
	float PlayRate;//[Offset: 0x4f8, Size: 0x4]
	Rotator TargetHeadRot;//[Offset: 0x4fc, Size: 0xc]
	bool bIsFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 0x1]
	bool bIsDodge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x509, Size: 0x1]
	ArkCharacterBase* OwnerChar;//[Offset: 0x510, Size: 0x8]
	ArkNpc* NpcOwner;//[Offset: 0x518, Size: 0x8]
	bool AnimIsFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 0x1]
	bool AnimIsLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c9, Size: 0x1]
	bool AnimIsBackStrafe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ca, Size: 0x1]
	bool AnimIsWeakStun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cb, Size: 0x1]
	void SetSpecialFlag(FName FlagName, bool bOn);// 0x2862fa0
	void SetAimOffset(FName AimName, out const Vector AimTarget, bool bForce);// 0x2862cd0
	void OnAnimMontageStarted(AnimMontage* Montage);// 0x2862a60
	void OnAnimMontageSectionChanged(AnimMontage* Montage, FName PrevSectionName, FName CurSectionName);// 0x2862960
	void OnAnimMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x2862890
	void OnAnimMontageBlendingOut(AnimMontage* Montage, bool bInterrupted);// 0x28627c0
	bool GetSpecialFlag(FName FlagName);// 0x2862730
	void ClearAllSpecialFlags();// 0x2862330

--------------------------------
Class: ArkCharacterAnimInstance.ArkAnimInstanceBase.AnimInstance.Object
	bool AnimIsPlayingMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	int AnimSpeedCursor;//[Offset: 0x2f4, Size: 0x4]
	float EnterIdleBreakTime;//[Offset: 0x2f8, Size: 0x4]
	bool AnimIsIdleBreak;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 0x1]
	bool bAnimUseShakeBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fd, Size: 0x1]
	ArkShakeBonesInfo ArkShakeBonesInfo;//[Offset: 0x300, Size: 0x40]
	float WorldTime;//[Offset: 0x340, Size: 0x4]
	ArkCharacterBase* CharacterOwner;//[Offset: 0x348, Size: 0x8]

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	float AnimLength;//[Offset: 0x8c, Size: 0x4]
	InterpolationParameter InterpolationParam;//[Offset: 0x90, Size: 0x8]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0xa8, Size: 0x4]
	byte NotifyTriggerMode;//[Offset: 0xac, Size: 0x1]
	AnimSequence*[] AllSequences;//[Offset: 0xc8, Size: 0x10]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0xd8, Size: 0x10]
	int SampleIndexWithMarkers;//[Offset: 0xe8, Size: 0x4]
	BlendSample[] SampleData;//[Offset: 0xf0, Size: 0x10]
	EditorElement[] GridSamples;//[Offset: 0x100, Size: 0x10]
	BlendParameter BlendParameters;//[Offset: 0x110, Size: 0x20]

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 0x4]
	byte InterpolationType;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10]
	float InterpolationSpeedPerSec;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 0x8]
	Vector SampleValue;//[Offset: 0x8, Size: 0xc]
	float RateScale;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 0x4]
	float Weights;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 0x10]
	float Min;//[Offset: 0x10, Size: 0x4]
	float Max;//[Offset: 0x14, Size: 0x4]
	int GridNum;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ArkShakeBonesInfo
	FName[] ShakeBones;//[Offset: 0x0, Size: 0x10]
	float[] ShakeBoneStartTimes;//[Offset: 0x10, Size: 0x10]
	float[] ShakeBoneWeights;//[Offset: 0x20, Size: 0x10]
	Vector[] ShakeBoneUnits;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ArkAimOffsetInfo
	bool bDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	BlendSpaceBase* AimOffsetAsset;//[Offset: 0x8, Size: 0x8]
	FName RefSocketName;//[Offset: 0x10, Size: 0x8]
	Vector2D PitchLimit;//[Offset: 0x18, Size: 0x8]
	Vector2D YawLimit;//[Offset: 0x20, Size: 0x8]
	float RotationRate;//[Offset: 0x28, Size: 0x4]
	float MinTargetDistance;//[Offset: 0x2c, Size: 0x4]
	Rotator TargetRot;//[Offset: 0x30, Size: 0xc]
	Rotator CurRot;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: AnimNodeParams_ArkModifyBones
	int LOD;//[Offset: 0x0, Size: 0x4]
	FName[] RopeBones;//[Offset: 0x8, Size: 0x10]
	AnimNode_ModifyBone[] BoneModifications;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: AnimNode_ModifyBone.AnimNode_SkeletalControlBase.AnimNode_Base
	BoneReference BoneToModify;//[Offset: 0xd0, Size: 0x10]
	Vector Translation;//[Offset: 0xe0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xec, Size: 0xc]
	Vector Scale;//[Offset: 0xf8, Size: 0xc]
	byte TranslationMode;//[Offset: 0x104, Size: 0x1]
	byte RotationMode;//[Offset: 0x105, Size: 0x1]
	byte ScaleMode;//[Offset: 0x106, Size: 0x1]
	byte TranslationSpace;//[Offset: 0x107, Size: 0x1]
	byte RotationSpace;//[Offset: 0x108, Size: 0x1]
	byte ScaleSpace;//[Offset: 0x109, Size: 0x1]

--------------------------------
Class: AnimNode_SkeletalControlBase.AnimNode_Base
	ComponentSpacePoseLink ComponentPose;//[Offset: 0x18, Size: 0x10]
	int LODThreshold;//[Offset: 0x28, Size: 0x4]
	float ActualAlpha;//[Offset: 0x2c, Size: 0x4]
	enum AlphaInputType;//[Offset: 0x30, Size: 0x1]
	bool bAlphaBoolEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	float Alpha;//[Offset: 0x34, Size: 0x4]
	InputScaleBias AlphaScaleBias;//[Offset: 0x38, Size: 0x8]
	InputAlphaBoolBlend AlphaBoolBlend;//[Offset: 0x40, Size: 0x48]
	FName AlphaCurveName;//[Offset: 0x88, Size: 0x8]
	InputScaleBiasClamp AlphaScaleBiasClamp;//[Offset: 0x90, Size: 0x30]

--------------------------------
Class: AnimNode_Base

--------------------------------
Class: ComponentSpacePoseLink.PoseLinkBase

--------------------------------
Class: PoseLinkBase
	int LinkID;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: InputScaleBias
	float Scale;//[Offset: 0x0, Size: 0x4]
	float Bias;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: InputAlphaBoolBlend
	float BlendInTime;//[Offset: 0x0, Size: 0x4]
	float BlendOutTime;//[Offset: 0x4, Size: 0x4]
	enum BlendOption;//[Offset: 0x8, Size: 0x1]
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	CurveFloat* CustomCurve;//[Offset: 0x10, Size: 0x8]
	AlphaBlend AlphaBlend;//[Offset: 0x18, Size: 0x30]

--------------------------------
Class: InputScaleBiasClamp
	bool bMapRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bClampResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bInterpResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	InputRange InRange;//[Offset: 0x4, Size: 0x8]
	InputRange OutRange;//[Offset: 0xc, Size: 0x8]
	float Scale;//[Offset: 0x14, Size: 0x4]
	float Bias;//[Offset: 0x18, Size: 0x4]
	float ClampMin;//[Offset: 0x1c, Size: 0x4]
	float ClampMax;//[Offset: 0x20, Size: 0x4]
	float InterpSpeedIncreasing;//[Offset: 0x24, Size: 0x4]
	float InterpSpeedDecreasing;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InputRange
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ArkAIBehaviorManipulator.ArkActorManipulator.ActorComponent.Object
	delegate OnPerceptionEvent;//[Offset: 0x1e0, Size: 0x10]
	void ServerTogglePerceptions(bool Enable, int perceptionFlags);// 0x2610ec0
	void ServerStopAbility(bool isInterrupted);// 0x2610e30
	bool ServerStartAbilityByName(FName AbilityName, Actor* TargetActor, Vector TargetLocation, Vector IntermediateLocation, Vector IntermediateLocation2, Vector TargetDirection, enum TargetType);// 0x2610c00
	bool ServerStartAbilityAtLocation(int AbilityIndex, out const Vector Location, out const Vector IntemediateLocation, out const Vector IntemediateLocation2);// 0x2610a70
	bool ServerStartAbilityAtIndex(int AbilityIndex, Actor* TargetActor, Vector TargetLocation, Vector IntermediateLocation, Vector IntermediateLocation2, Vector TargetDirection, enum TargetType);// 0x2610840
	bool ServerStartAbilityAtDirection(int AbilityIndex, out const Vector Direction);// 0x2610760
	bool ServerStartAbilityAtCharacter(int AbilityIndex, ArkCharacterBase* Character);// 0x26106a0
	bool ServerStartAbilityAtActor(int AbilityIndex, Actor* TargetActor);// 0x26106a0
	ArkPlayer*[] ServerSearchThreatsAround(float Radius, float FOV);// 0x2610580
	void ServerRecruitCurrentTask(int expectedParticipatorNum);// 0x2610500
	void ServerDismissCurrentTask();// 0x26104e0
	void ServerDismissAllTasks();// 0x26104c0
	void ServerBroadcastPerceptionEvent(enum EventType, Actor* TargetActor, float Magnitude);// 0x26103b0
	ArkAIAbility* GetAbility(int AbilityIndex);// 0x260f590
	int FindAbilityWithName(FName AbilityName, float targetDistance, bool isNeedExcutable, Actor* TargetActor, out const Vector TargetLocation, out const Vector TargetDirection);// 0x260e900
	int FindAbilityWithCategory(enum Category, float targetDistance, bool isNeedExcutable, Actor* TargetActor, out const Vector TargetLocation, out const Vector TargetDirection, enum mobilityOption);// 0x260e6d0

--------------------------------
Class: ArkActorManipulator.ActorComponent.Object

--------------------------------
Class: ArkAIAbility.Object
	FName AbilityName;//[Offset: 0x48, Size: 0x8]
	ArkNpc* OwnerCharacter;//[Offset: 0x50, Size: 0x8]
	ArkCharacterBase* TargetCharacter;//[Offset: 0x58, Size: 0x8]
	Actor* TargetActor;//[Offset: 0x60, Size: 0x8]
	Vector IntermediateLocation;//[Offset: 0x68, Size: 0xc]
	Vector IntermediateLocation2;//[Offset: 0x74, Size: 0xc]
	Vector TargetLocation;//[Offset: 0x80, Size: 0xc]
	Vector TargetDirection;//[Offset: 0x8c, Size: 0xc]
	Transform StartTransform;//[Offset: 0xa0, Size: 0x30]
	float CurrentTime;//[Offset: 0xd0, Size: 0x4]
	enum[] Categories;//[Offset: 0xd8, Size: 0x10]
	float MinExcuteDistance;//[Offset: 0xe8, Size: 0x4]
	float MaxExcuteDistance;//[Offset: 0xec, Size: 0x4]
	FName MontageSection;//[Offset: 0xf0, Size: 0x8]
	AnimMontage* AnimMontage;//[Offset: 0xf8, Size: 0x8]
	CurveFloat* AnimMontageOffsetDistributionCurve;//[Offset: 0x100, Size: 0x8]
	bool bIsBackgroundExecute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	float[] ExcuteFloatParams;//[Offset: 0x110, Size: 0x10]
	bool bShouldInterruptWhenFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	float Cooldown;//[Offset: 0x138, Size: 0x4]
	float PowerFactor;//[Offset: 0x13c, Size: 0x4]
	bool bIsLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	bool bIterruptbile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x141, Size: 0x1]
	bool bCanExcuteDuringMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x142, Size: 0x1]
	bool bUseRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x143, Size: 0x1]
	float RootMotionDistance;//[Offset: 0x144, Size: 0x4]
	int RandSeed;//[Offset: 0x148, Size: 0x4]
	float CurrentMontageLength;//[Offset: 0x174, Size: 0x4]
	<FName,FString> CustomParams;//[Offset: 0x178, Size: 0x50]
	void StopExcute_BP();// 0x305c9c0
	void StopExcute();// 0x188d0c0
	bool StartExcute_BP();// 0xb72190
	bool StartExcute();// 0x260c0a0
	void OnPlayHit_BP(out const TakeHitInfo HitInfo);// 0x305c9c0
	void OnAnimNotify_BP(FName NotifyName);// 0x305c9c0
	void ModifyStartTransform_BP();// 0x305c9c0
	void ModifyStartTransform();// 0x260b8d0
	bool IsServer();// 0x260b8a0
	bool IsReadyForExcute(Actor* targetActorSpecified, out const Vector targetLocationSpecified, out const Vector targetDirectionSpecified);// 0x260b770
	World* GetWorld();// 0xb050a0
	void GenerateTargetLocation_BP();// 0x305c9c0
	void GenerateTargetLocation();// 0x260b450
	void GenerateTargetDirection_BP();// 0x305c9c0
	void GenerateTargetDirection();// 0x260b430
	void GenerateTargetCharacter_BP();// 0x305c9c0
	void GenerateTargetCharacter();// 0x260b410
	void ExcuteOnce_BP();// 0x305c9c0

--------------------------------
Class: ArkAIDisplayManipulator.ArkActorManipulator.ActorComponent.Object
	delegate OnAIBirth;//[Offset: 0x1e0, Size: 0x10]
	delegate OnAIDeath;//[Offset: 0x1f0, Size: 0x10]
	delegate OnAITakeDamage;//[Offset: 0x200, Size: 0x10]
	delegate OnAIReceiveTask;//[Offset: 0x210, Size: 0x10]
	delegate OnAIStartAbility;//[Offset: 0x220, Size: 0x10]
	delegate OnAIAbilityExcuteOnce;//[Offset: 0x230, Size: 0x10]
	delegate OnAIStopAbility;//[Offset: 0x240, Size: 0x10]
	delegate OnAIEmotionChange;//[Offset: 0x250, Size: 0x10]
	delegate OnAIEnterControlled;//[Offset: 0x260, Size: 0x10]
	delegate OnAILeaveControlled;//[Offset: 0x270, Size: 0x10]
	delegate OnAIReceivePlayerCommand;//[Offset: 0x280, Size: 0x10]
	delegate OnReceiveAICommand;//[Offset: 0x290, Size: 0x10]
	delegate OnAICommandReachedTarget;//[Offset: 0x2a0, Size: 0x10]
	void SwarmSetFlagInAnimNode(bool flag, enum flagType);// 0x262ccd0
	void SwarmSetByteInAnimNode(byte byte, enum byteType);// 0x262cc10
	void StopAnimMontage(AnimMontage* AnimMontage, bool isForceStop);// 0x262cb40
	bool SetMontageNextSection(AnimMontage* AnimMontage, FName SectionName, bool useRootMotion, bool isInterrupt, bool isForceAdjustZ, bool forceNoBlending, bool traceTarget);// 0x262c930
	void PlayRagDoll();// 0x262c850
	bool PlayAnimMontage(AnimMontage* AnimMontage, float PlayRate, FName SectionName, out const Transform playTransform, Vector TargetLocation, Vector TargetDirection, bool hasTargetLocation, bool useRootMotion, FName overrideInAirSection, bool isJustTest, float StartTime, bool forceNoBlending, bool traceTarget);// 0x262c430
	void DetachComponentFromSocket(SceneComponent* Component);// 0x262bcf0
	void DetachActorFromSocket(Actor* Actor);// 0x262bc70
	void AttachComponentToSocket(SceneComponent* Component, FName SocketName, bool destroyWithOwner);// 0x262bb60
	void AttachComponentToOffset(SceneComponent* Component, Transform Offset, bool destroyWithOwner);// 0x262b9e0
	void AttachActorToSocket(Actor* Actor, FName SocketName, bool destroyWithOwner);// 0x262b8d0
	void AttachActorToOffset(Actor* Actor, Transform Offset, bool destroyWithOwner);// 0x262b750

--------------------------------
Class: ArkAICharacterData.ArkGameDataCollection.Object
	int ID;//[Offset: 0x58, Size: 0x4]
	ArkAITypeInfo AITypeInfo;//[Offset: 0x60, Size: 0x1b0]
	ArkAIBehaviorInfo BehaviorInfo;//[Offset: 0x210, Size: 0x120]
	ArkAICombatInfo CombatInfo;//[Offset: 0x330, Size: 0x230]
	ArkAIMovementInfo MovementInfo;//[Offset: 0x560, Size: 0x98]
	ArkSwarmTriggerVolume*[] OverlappingTriggerVolumes;//[Offset: 0x5f8, Size: 0x10]
	int StealthStack;//[Offset: 0x608, Size: 0x4]
	ArkPlayer*[] NearbyPlayerCharacters;//[Offset: 0x610, Size: 0x10]
	ArkAIAbility*[] Abilities;//[Offset: 0x620, Size: 0x10]
	ArkAIAbility* CurrentAbility;//[Offset: 0x630, Size: 0x8]
	Actor* TaskTargetActor;//[Offset: 0x640, Size: 0x8]
	int PerceptionMaskLegacy;//[Offset: 0x648, Size: 0x4]
	ArkAIGameplayAbilityBuff*[] GameplayAbilityBuffs;//[Offset: 0x650, Size: 0x10]
	ArkAIGABuff_Performable*[] PerformableGABuffs;//[Offset: 0x660, Size: 0x10]
	ArkAIGABuff_Performable* PerformingGA;//[Offset: 0x670, Size: 0x8]
	int AbilityLockStack;//[Offset: 0x678, Size: 0x4]
	int MontagePauseMovementStack;//[Offset: 0x790, Size: 0x4]
	ArkAITask*[] ServerRunningAITasks;//[Offset: 0x7a0, Size: 0x10]
	FName VisibilityEyeSocket;//[Offset: 0x7b0, Size: 0x8]
	ArkNpc*[] ServerCombatingNPCs;//[Offset: 0x7c0, Size: 0x10]
	ArkPlayer* ServerControlledOwner;//[Offset: 0x7d0, Size: 0x8]
	ArkAICommand* ServerCurrentCommand;//[Offset: 0x7d8, Size: 0x8]
	ArkAICommand*[] ServerPendedCommands;//[Offset: 0x7e0, Size: 0x10]
	ArkAICommand* LastCommandCDO;//[Offset: 0x7f0, Size: 0x8]
	ArkNpc* ServerAttackGroupLeader;//[Offset: 0x7f8, Size: 0x8]
	ArkCharacterBase* SpawnOwner;//[Offset: 0x808, Size: 0x8]
	<enum,ArkAIPerceptionDataArray> ServerPerceptionData;//[Offset: 0x870, Size: 0x50]
	<Actor*> ServerKeyTargets;//[Offset: 0x918, Size: 0x50]
	ArkAIVisualDataForNoise[] ServerVisualDataForNoise;//[Offset: 0x968, Size: 0x10]
	bool bHasAttackTicket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d0, Size: 0x1]
	ArkAISpawnMarker* ServerSpawnMarker;//[Offset: 0x9d8, Size: 0x8]
	bool bCanDespawnByAIDirector;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e0, Size: 0x1]
	ArkPatrolSpline* PatrollingWay;//[Offset: 0xa20, Size: 0x8]
	ArkPlayer* SpawnedByShuttleIntensityPlayer;//[Offset: 0xa38, Size: 0x8]
	enum ClientAITaskType;//[Offset: 0xa64, Size: 0x1]
	float OverridedDarkValue;//[Offset: 0xa68, Size: 0x4]
	void SetOverridedDarkValue(float NewDarkValue);// 0x261dd00
	enum ServerGetVisibility(Actor* TargetActor, float ExpireTime);// 0x261d190
	ArkAITask* ServerGetLastAITask();// 0x261d160
	ArkAITask* ServerGetCurrentAITask();// 0x261d130
	enum GetCurrentAITaskType();// 0x261cca0

--------------------------------
Class: ArkAITask.Object
	ArkAIPerceptionEvent perceptionEvent;//[Offset: 0x28, Size: 0x28]
	enum TaskType;//[Offset: 0x50, Size: 0x1]
	ArkNpc* NpcCharacter;//[Offset: 0x58, Size: 0x8]
	enum TaskState;//[Offset: 0x60, Size: 0x1]
	BehaviorTree* BehaviorTree;//[Offset: 0x68, Size: 0x8]
	float TickInterval;//[Offset: 0x70, Size: 0x4]
	FName DynamicDamageTakenInfoName;//[Offset: 0x74, Size: 0x8]
	void OnTickTask_BP(float DeltaTime);// 0x305c9c0
	void OnFinishTask_BP();// 0x305c9c0
	void OnBeginTask_BP();// 0x305c9c0

--------------------------------
Class: ArkAITypeInfo.TableRowBase
	bool bIsSwarmAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	int Level;//[Offset: 0x10, Size: 0x4]
	FText DisplayName;//[Offset: 0x18, Size: 0x18]
	enum Category;//[Offset: 0x30, Size: 0x1]
	class ArkNpc* CharacterClass;//[Offset: 0x38, Size: 0x28]
	class Actor* DisplayModel;//[Offset: 0x60, Size: 0x8]
	<FName,float> ScalarMaterialParams;//[Offset: 0x68, Size: 0x50]
	FName BehaviorProfileName;//[Offset: 0xb8, Size: 0x8]
	FName CombatProfileName;//[Offset: 0xc0, Size: 0x8]
	FName MovementProfileName;//[Offset: 0xc8, Size: 0x8]
	FName LootProfileName;//[Offset: 0xd0, Size: 0x8]
	<class DamageType,FName> LootProfileNameByDamageType;//[Offset: 0xd8, Size: 0x50]
	class InstancedSkeletalMeshActor* AIMeshTemplate;//[Offset: 0x128, Size: 0x8]
	int CustomPattern;//[Offset: 0x130, Size: 0x4]
	<AnimMontage*,FName> AnimMontageWhiteList;//[Offset: 0x138, Size: 0x50]
	PaperSprite* icon;//[Offset: 0x188, Size: 0x28]

--------------------------------
Class: InstancedSkeletalMeshActor.InstancedSkeletalMeshBase.Actor.Object
	SceneComponent* SceneRoot;//[Offset: 0x630, Size: 0x8]
	bool bTickFakeMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 0x1]
	float SortAllNodesInterval;//[Offset: 0x63c, Size: 0x4]
	InstancedSkeletalAnimEvlComponent* InstancedAnimEvalComp;//[Offset: 0x640, Size: 0x8]
	InstancedSkeletalMeshGPUDrivenComponent* GPUDrivenMeshComponent;//[Offset: 0x648, Size: 0x8]
	InstancedStaticMeshComponent*[] InstancedAttachments;//[Offset: 0x650, Size: 0x10]
	int MaxMoveSpeed;//[Offset: 0x660, Size: 0x4]
	float MoveBlendFactor;//[Offset: 0x664, Size: 0x4]
	float RotationBlendTime;//[Offset: 0x668, Size: 0x4]
	int MaxCSMShadowNumber;//[Offset: 0x66c, Size: 0x4]
	delegate OnAnimNotifyEvent;//[Offset: 0x670, Size: 0x10]
	AttachToInstanceActor[] AttachedActors;//[Offset: 0x680, Size: 0x10]
	delegate OnActorAnimNotifyEvent;//[Offset: 0x690, Size: 0x10]
	void UnfreezeInstancePhysics(int InInstanceIdx);// 0x27fc370
	void TurnOnHitDownEffect(int InInstanceIdx, bool bWithJointBreak, bool bWithCCDOn);// 0x27fc270
	void TurnOffHitDownEffectWithOverrideBodyCenter(int InInstanceIdx, out const Transform OverrideBodyCenter, float BlendToLocomotionDuring);// 0x27fc110
	void TurnOffHitDownEffect(int InInstanceIdx, float BlendToLocomotionDuring);// 0x27fc040
	void StopPlayMontageAnimation(int InstanceIndex, bool bForceStop);// 0x27fbf80
	bool SphereTraceInstanceSkeletalMesh(out const Vector Pos, out const Rotator rot, float InRadious, byte TraceChannel, out HitResult OutHitRes, out int OutInstanceId, out FName OutHitBoneName);// 0x27fbce0
	void SetSingleLODDistance(int LODIndex, int LODDistance);// 0x27fbc20
	void SetMontageNextSection(int InstanceIndex, FString MontageName, out const FName SectionName, bool bInterrupt, bool bTriggerEndNotify, bool bForceNoBlending);// 0x27fba30
	void SetLODDistance(int LOD01, int LOD12, int LOD23, int LOD34);// 0x27fb8f0
	void SetInstanceVisibility(int InstanceIndex, bool InVisibility);// 0x27fb730
	void SetInstanceVelocity(int InstanceIndex, out const Vector InVelocity);// 0x27fb660
	void SetInstanceTransform(int InstanceIndex, out const Transform InTransform);// 0x27fb540
	void SetInstanceTargetVelocity(int InstanceIndex, out const Vector TargetVelocity);// 0x27fb470
	void SetInstanceSyncedState(int InstanceIndex, int InSyncedState);// 0x27fb3b0
	void SetInstancesStealth(out const int[] InstanceIndices, bool bStealth);// 0x27fb7f0
	void SetInstanceScale(int InstanceIndex, out const Vector InScale);// 0x27fb2e0
	void SetInstanceRotation(int InstanceIndex, out const Rotator rot);// 0x27fb210
	void SetInstanceReplaceGroupChange(int InstanceIndex, int SrcGroup, int DstGroup, bool SrcFading, bool DstFading);// 0x27fb090
	void SetInstancePreferredMotionTags(int InInstanceIndex, out const FName[] motionTags);// 0x27fafb0
	void SetInstancePhysicalResponse(int InInstanceIndex, byte ResponseChannel, byte InResponse);// 0x27faeb0
	bool SetInstancePhysicalBodyLocalFixTransform(int InstanceIndex, int BodyIndex, out const Transform InFixTransform);// 0x27fad50
	void SetInstanceOutline(int InstanceIndex, bool bOutline);// 0x27fac90
	void SetInstanceMotionMatchParams(int InInstanceIndex, out const Vector PreviousLocalVelocity, out const Vector CurrentLocalVelocity, out const Vector FutureLocalVelocity, out const Vector FarFutureLocalVelocity);// 0x27faac0
	void SetInstanceMontageAnimationPlayRata(int InstanceIndex, float InPlayRate);// 0x27fa9f0
	void SetInstanceIsPreferMirrored(int InInstanceIndex, bool isPreferMirroredAnimation);// 0x27fa930
	void SetInstanceForceFadeInEffect(int InstanceIndex);// 0x27fa8b0
	void SetInstanceForbiddenMotionTags(int InInstanceIndex, out const FName[] motionTags);// 0x27fa7d0
	void SetInstanceFadingEffect(int InstanceIndex, float FadingAlpha, float InBlendSeconds);// 0x27fa6d0
	void SetInstanceDissovle(int InstanceIndex, bool bDissolve, float InBlendSeconds);// 0x27fa5c0
	void SetInstanceDesiredTrajectoryData(int InInstanceIndex, out const float[] DesiredTrajectoryData);// 0x27fa4e0
	void SetInstanceByteInNodeCustomProperty(int InstanceIndex, int byte, int RightToLeft);// 0x27fa3e0
	void SetInstanceBitInNodeCustomProperty(int InstanceIndex, bool Bit, int RightToLeft);// 0x27fa2e0
	void SetInstanceBeginSyncout(int InstanceIndex);// 0x27fa260
	void SetInstanceBeginSyncin(int InstanceIndex);// 0x27fa1e0
	void SetInstanceAttachMentCustomParameter(int InstanceIndex, float InVal);// 0x27fa110
	void SetInstanceAnimationPlayRata(int InstanceIndex, float InPlayRate);// 0x27fa040
	void SetEnableInstanceIKTargetWithGlobalTarget(int InstanceIndex, out const FName BoneName, bool bEnable);// 0x27f9e00
	void SetCullingVolume(out const Box InCullingVolume, bool bOnlyAffectStaticPose, out const Rotator VolumeWorldRot);// 0x27f9cd0
	void SetByteInInstanceNodeCustomProperty(int InstanceIndex, int InByte, int RightToLeftOffset);// 0x27f9bd0
	void SetBitInInstanceNodeCustomProperty(int InstanceIndex, bool InBit, int RightToLeftOffset);// 0x27f9ad0
	void RemoveStaticPose(int InStaticPoseIndex);// 0x27f9a50
	int RemoveInstanceIndex(int InInstanceIndex, bool bRemainBody);// 0x27f9990
	void RemoveCapsuleBound(int InstanceIndex);// 0x27f9910
	void RemoveAllInstances();// 0x27f98f0
	bool QueryShapeSweepCollision(const ShapeComponent* InShapeComponent, out const Vector TrailStart, out const Vector TrailEnd, byte TraceChannel, bool bShowDebug, out InstanceHitResult[] OutHitInfo);// 0x27f96e0
	bool QueryMontageSectionInfo(FString QueryMontageName, out FName[] OutMontageSectionNames, out float[] OutSectionLengths, out int[] OutSectionFrames);// 0x27f9500
	int QueryInstancePhysicalNum(int InstanceIndex);// 0x27f9470
	void PlayMontageAnimation(int InstanceIndex, FString MontageName, out const FName SectionName, bool bPlayAtOnce, bool bForceNoBlending);// 0x27f92d0
	void PendingRemoveInstanceIndex(int InInstanceIndex, bool PlayingDeadSimulating, float DelaySeconds);// 0x27f91c0
	bool OverlapMulti(out int[] OutOverlaps, out const Vector Pos, out const Rotator rot, float InRadious, byte TraceChannel);// 0x27f8fc0
	bool LineTraceInstanceSkeletalMesh(out const Vector Start, out const Vector End, byte TraceChannel, out const Actor*[] InIgnoreActors, out const <int> IgnoreSwarmInstance, out HitResult OutHitRes, out int OutInstanceId, out FName OutHitBoneName);// 0x27f8990
	void JumpToMontageTargetSeconds(int InstanceIndex, float TargetSeconds);// 0x27f88c0
	bool IsInMontageState(int InstanceIndex);// 0x27f8750
	bool IsInMontage(int InstanceIndex);// 0x27f86c0
	bool IsInitialized();// 0x27f87e0
	void IntializeDebugRVO();// 0x27f8620
	void Initialize(SkeletalMeshComponent* InSrcSkeletalMesh, int CachedPoolNumber, CapsuleComponent* InOverrideComponent);// 0x27f8520
	BoxSphereBounds GetSkeletalMeshInstanceBound(int InstanceIndex);// 0x27f8470
	bool GetInstanceVisibility(int InstanceIndex);// 0x27f8240
	Vector GetInstanceVelocity(int InstanceIndex);// 0x27f81a0
	Transform GetInstanceTransform(int InstanceIndex);// 0x27f80e0
	bool GetInstanceSocketTransform(int InstanceIndex, out const FName SocketName, out Transform OutTransform);// 0x27f7f80
	bool GetInstanceSocketRefPoseWorldTransform(int InstanceIndex, out const FName QuerySocketName, out Transform OutTransform);// 0x27f7e20
	Transform GetInstanceRootmotionMeshTransform(int InstanceIndex);// 0x27f7d60
	bool GetInstancePhysicalBodyLocalFixTransform(int InstanceIndex, int BodyIndex, out Transform OutFixTransform);// 0x27f7c00
	Transform GetInstanceMontageRootMotionOffsetTransform(int InstanceIndex);// 0x27f7b40
	float GetInstanceMontageAnimationPlayRate(int InstanceIndex);// 0x27f7ab0
	bool GetInstanceBoneWorldTransform(int InstanceIndex, out const FName QueryBoneName, out Transform OutTransform);// 0x27f7950
	bool GetInstanceBoneRefPoseWorldTransform(int InstanceIndex, out const FName QueryBoneName, out Transform OutTransform);// 0x27f77f0
	bool GetInstanceBonePoseAnimationTransform(int InstanceIndex, out const FName QueryBoneName, out Transform OutTransform);// 0x27f7690
	float GetInstanceAnimationPlayRate(int InstanceIndex);// 0x27f7600
	int GetDebugCurrentDrawVertices();// 0x27f7510
	int GetDebugCurrentDrawTriangles();// 0x27f7510
	int GetDebugCurrentDrawInstanceNum();// 0x27f7510
	int GetByteInInstanceNodeCustomProperty(int InstanceIndex, int RightToLeftOffset);// 0x27f7450
	bool GetBitInInstanceNodeCustomProperty(int InstanceIndex, int RightToLeftOffset);// 0x27f7390
	void FreezeInstancePhysics(int InInstanceIdx);// 0x27f7230
	bool DoesSocketExist(out const FName SocketName);// 0x27f6bf0
	void DefaultOnAnimNotifyHandle(int InstanceIndex, out const InstanceAnimNotify AnimNotify);// 0x27f67b0
	void DebugDrawInstanceBound(int InInstanceIdx, LinearColor Color, float LifeTime, float Thickness);// 0x27f6650
	void BreakInstanceJointsAndAddImpulse(int InInstanceIdx, out const Vector InJointImpulse);// 0x27f6510
	void BreakInstanceJoint(int InstanceIndex, out const FName JointName);// 0x27f6440
	void AppendCurrentIKTarget(out const FName BoneName, int MaxEffectLayer, out const Vector GlobalTargetAnchorPos);// 0x27f6320
	void AddSrcAttachment(out const FName BindSocketName, StaticMesh* InSrcStaticMesh);// 0x27f6250
	int AddInstanceWorldSpace(out const Transform InWorldTransform, int InInstanceID, int InCustomPattern);// 0x27f6100
	int AddInstanceStaticPose(out const FName[] InBoneNames, out const Transform[] InBoneTransforms, int InRandomIndex);// 0x27f5f90
	void AddImpulseForInstanceBoneAtLocation(int InInstanceIdx, out const FName InBoneName, out const Vector InImpulse, out const Vector InPosition, float InDuration, bool bHitDown, float JointDamageScale, bool bNeedPerBoneImpulseScale);// 0x27f5d10
	void AddImpulseForInstanceBelowBoneAtLocation(int InInstanceIdx, out const FName InBoneName, out const FName InBelowBoneName, out const Vector InImpulse, out const Vector InPosition, float InDuration);// 0x27f5b10
	void AddImpulseForInstance(int InInstanceIdx, out const Vector InImpulse, float InDuration, bool bHitDown, bool bWithCCDOn);// 0x27f5960
	void AddExplosionImpulseAtLocation(out const Vector CenterPosition, float InfluseRange, float InImpulse);// 0x27f5850
	void AddDecal(MaterialInterface* DecalMaterialSource, out const Transform DecalTransform, out const Vector DecalSize, out const float DecalLifeSpan);// 0x27f5680
	void AddDebugRVO(int InstanceIndex);// 0x27f5600
	void AddBoneDamageForInstance(int InInstanceIdx, out const FName InBoneName, float InBoneDamage);// 0x27f54f0
	void AddAttachmentActor(int InstanceIndex, out const FName InBoneName, Actor* AttachedActor, out const Transform InWorldTransform);// 0x27f5340
	void AddAllBoneDamageForInstance(int InInstanceIdx, float InBoneDamage);// 0x27f5270

--------------------------------
Class: InstancedSkeletalMeshBase.Actor.Object
	InstancedSkeletalMeshAnimNode[] NodeList;//[Offset: 0x2e8, Size: 0x10]
	InstancedSkeletalMeshAnimNode[] StaticPoseList;//[Offset: 0x2f8, Size: 0x10]
	Transform[] StaticPoseComponentTransform;//[Offset: 0x308, Size: 0x10]
	Box[] StaticPoseBounds;//[Offset: 0x318, Size: 0x10]
	bool[] StaticPoseInBlaster;//[Offset: 0x328, Size: 0x10]
	Texture2D* InstanceBoneAnimationTexture;//[Offset: 0x338, Size: 0x8]
	int MaxInstanceNumInPhysicalBuffer;//[Offset: 0x340, Size: 0x4]
	int MaxStaticPoseNumInPhysicalBuffer;//[Offset: 0x344, Size: 0x4]
	float ToggleBackfaceOcclusionSeconds;//[Offset: 0x348, Size: 0x4]
	bool bForceRaytracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 0x1]
	int MaxRTXTriangleNum;//[Offset: 0x350, Size: 0x4]
	int MaxRTXVerticeNum;//[Offset: 0x354, Size: 0x4]
	int MinForceLOD;//[Offset: 0x358, Size: 0x4]
	int MaxInstanceToDrawInRTXBVH;//[Offset: 0x35c, Size: 0x4]
	bool CastRayTracingShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	CurveFloat* CustomFadeCurve;//[Offset: 0x368, Size: 0x8]
	bool bReceiveDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 0x1]
	bool bReceiveDecals2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x371, Size: 0x1]
	FName[] BreakableJointNames;//[Offset: 0x378, Size: 0x10]
	float[] BreakableJointStiffness;//[Offset: 0x388, Size: 0x10]
	void SetInstanceFadingAlpha(int InstanceIndex, float InTargetBlendAlpha, float InBlendSeconds);// 0x4bbdd20
	void SetInstanceCustomBlendAlpha(int InstanceIndex, float InTargetBlendAlpha, float InBlendSeconds);// 0x4bbdc20

--------------------------------
Class: InstancedSkeletalAnimEvlComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	NEXTNanoBakedData* CachedData;//[Offset: 0x670, Size: 0x28]
	int[] NodeRecorderList;//[Offset: 0x698, Size: 0x10]
	int[] NodePhysicalRecorderList;//[Offset: 0x6a8, Size: 0x10]
	bool bUsingParallelPhysicalSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 0x1]
	float MaxPhysicalSpeedRange;//[Offset: 0x6bc, Size: 0x4]
	float BaseJointBreakScale;//[Offset: 0x6c0, Size: 0x4]
	float RandomJointBreakScale;//[Offset: 0x6c4, Size: 0x4]
	bool bBreakBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c8, Size: 0x1]
	bool bLockPelvisPhysical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c9, Size: 0x1]
	FName[] IgnorePhysicsBoneMask;//[Offset: 0x6d0, Size: 0x10]
	int MaxInstanceNumberPhysicUpdateOneFrame;//[Offset: 0x6e0, Size: 0x4]
	int MaxInstanceNumberAnimationUpdate;//[Offset: 0x6e4, Size: 0x4]
	int MaxDistanceToAllowDetailPhysics;//[Offset: 0x6e8, Size: 0x4]
	int MaxInstanceNumberAnimationEvaluation;//[Offset: 0x6ec, Size: 0x4]
	int MaxInstanceNumberAnimationAssetTick;//[Offset: 0x6f0, Size: 0x4]
	byte WeaponTraceChannel;//[Offset: 0x6f4, Size: 0x1]
	byte DecoratorObjectChannel;//[Offset: 0x6f5, Size: 0x1]
	int MaxPhysicalTextureWidth;//[Offset: 0x6f8, Size: 0x4]
	int MaxStaticPoseTextureWidth;//[Offset: 0x6fc, Size: 0x4]
	int MaxDecoratorPhysicalTextureWidth;//[Offset: 0x700, Size: 0x4]
	bool bUseParallelAnimationEvaluate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x704, Size: 0x1]
	float MaxPhysicalAnimationBlendSeconds;//[Offset: 0x708, Size: 0x4]
	Texture2D* AnimationBoneTexture;//[Offset: 0x710, Size: 0x8]
	Texture2D* AnimationModelTexture;//[Offset: 0x718, Size: 0x8]
	Texture2D* PhysicAnimationTexture;//[Offset: 0x720, Size: 0x8]
	Texture2D* StaticPoseAnimationTexture;//[Offset: 0x728, Size: 0x8]
	Texture2D* DecrotorPhysicalTexture;//[Offset: 0x730, Size: 0x8]
	Texture2D* MontageAnimationBoneTexture;//[Offset: 0x738, Size: 0x8]
	delegate OnInstanceInPhysic;//[Offset: 0x740, Size: 0x10]
	int PreCachedNumBones;//[Offset: 0x750, Size: 0x4]
	int PreCachedNumLocoAnimFrames;//[Offset: 0x754, Size: 0x4]
	int PreCachedNumMontageAnimFrames;//[Offset: 0x758, Size: 0x4]
	InstanceMontageConfig[] CachedMontages;//[Offset: 0x760, Size: 0x10]
	InstanceNodeAnimInstance* SrcAnimInstance;//[Offset: 0x8e8, Size: 0x8]
	BodySetup* OverridedCapsuleComponentSetUp;//[Offset: 0x8f0, Size: 0x8]
	PhysicsAsset* UsedPhysAsset;//[Offset: 0x1340, Size: 0x8]
	PhysicsAsset* SimplePhysAsset;//[Offset: 0x1348, Size: 0x8]
	SkeletalMesh* UsedSklMesh;//[Offset: 0x1350, Size: 0x8]
	PrimitiveComponent* PhysicalOwningComp;//[Offset: 0x1358, Size: 0x8]
	void UnFreezePhysics(int InInstanceIndex);// 0x4bbad80
	void TurnOnFoliagePhysicalState(out const int[] InNodeIndices);// 0x4bbacd0
	void StopPlayMontage(int InstanceIndex, bool bForceStop);// 0x4bbac10
	void SortAllNodes(out const Vector CenterPos, float DeltaSeconds);// 0x4bbab30
	void SortActive();// 0x4bbab10
	void SetSrcAnimInstance(out const class AnimInstance InSrcAnimInstanceClass, SkeletalMeshComponent* SrcSkeletalMeshComp, PhysicsAsset* SrcPhysicAsset, PhysicsAsset* SrcSimplePhysicAsset, PrimitiveComponent* SrcPhysicalOwnComponent);// 0x4bba970
	void SetRecorderList(out const int[] InNodeReorderList);// 0x4bba7e0
	void SetNextMontageSection(int InstanceIndex, FString MontageName, out const FName MontageSectionName, bool bSwitchAtOnce, bool bTriggerMontageEndNotify, bool bNoBlendingTime);// 0x4bba5f0
	void SetInstancePhysicalResponse(int InInstanceIndex, byte ResponseChannel, byte InResponse);// 0x4bba4f0
	bool SetInstancePhysicalBodyLocalFixTransform(int InstanceIndex, int BodyIndex, out const Transform InFixTransform);// 0x4bba390
	static void SetByteInNodeCustomProperty(out InstancedSkeletalMeshAnimNode RefNode, int InByte, int RightToLeftOffset);// 0x4bba220
	static void SetBitInNodeCustomProperty(out InstancedSkeletalMeshAnimNode RefNode, bool InBit, int RightToLeftOffset);// 0x4bba0a0
	void RemoveServerCapsule(int InstanceIndex);// 0x4bba020
	void RemoveNode(out InstancedSkeletalMeshAnimNode Node);// 0x4bb9f20
	void RemoveBakedStaticPose(int InStaticPoseIndex);// 0x4bb9de0
	void RemoveAllNodes();// 0x4bb9dc0
	bool QueryTwoClosestBone(out const Vector Pos, float InRadious, out int OutInstanceIndex, out Transform OutFirstBoneTransform, out int OutFirstBoneIndex, out int OutFirstBodyIndex, out FName OutFirstBoneName, out Transform OutSecondBoneTransform, out int OutSecondBoneIndex, out int OutSecondBodyIndex, out FName OutSecondBoneName);// 0x4bb9960
	bool QueryShapeSweepCollision(const ShapeComponent* InShapeComponent, out const Vector TrailStart, out const Vector TrailEnd, byte TraceChannel, bool bShowDebug, out InstanceHitResult[] OutHitInfo);// 0x4bb9750
	bool QueryPointInstancedSkeletalMeshCollision(out const Vector Pos, out const Rotator rot, float InRadious, byte TraceChannel, out const <int> IgnoreLists, out HitResult OutHitRes, out int OutInstanceId, out FName OutHitBoneName);// 0x4bb9360
	bool QueryLineTraceInstancedSkeletalMeshCollision(out const Vector Start, out const Vector End, byte TraceChannel, out const Actor*[] InIgnoreActors, out const <int> IgnoreSwarmInstance, out HitResult OutHitRes, out int OutInstanceId, out FName OutHitBoneName);// 0x4bb8f40
	bool QueryLineTraceInstancedSkeletalMeshBound(out const Vector Start, out const Vector End, out HitResult OutHitRes, out int OutInstanceId, out FName OutHitBoneName);// 0x4bb8d20
	int QueryInstancePhysicalNum(int InstanceIndex);// 0x4bb8c90
	bool QueryBonePointInstancedSkeletalMeshCollision(out const Vector Pos, out const Rotator rot, float InRadious, byte TraceChannel, out const FName QueryBoneName, out HitResult OutHitRes, out int OutInstanceId);// 0x4bb89f0
	void PlayMontage(int InstanceIndex, FString MontageName, out const FName SectionName, bool bPlayAtOnce, bool bNoBlendingTime);// 0x4bb8850
	bool OverlapMulti(out int[] OutOverlaps, out const Vector Pos, out const Rotator rot, float InRadious, byte TraceChannel);// 0x4bb8650
	void JumpToMontageTargetSeconds(int InstanceIndex, float TargetSeconds);// 0x4bb8580
	void InitializeAnimMontages(SkeletalMesh* QuerydSklMesh);// 0x4bb8500
	bool Initialize(InstancedSkeletalMeshBase* InInstanceNodes, out const class AnimInstance InSrcAnimInstanceClass, SkeletalMeshComponent* SrcSkeletalMeshComp, PhysicsAsset* SrcPhysicAsset, PhysicsAsset* SrcSimplePhysicAsset, PrimitiveComponent* SrcPhysicalOwnComponent, int PoolNum, CapsuleComponent* InOverridedCapsuleComponent);// 0x4bb82a0
	bool GetSocketRelativeTransform(out const FName QuerySocketName, out Transform OutTransform, out int OutParentBoneIndex);// 0x4bb8060
	SkeletalMesh* GetRefSkeletalMesh();// 0x4bb8040
	bool GetNodeTransformBasedOnRootMotion(int InstanceIndex, out const Transform PreferredTransform, out Transform OutTransform);// 0x4bb7e90
	bool GetInstanceSocketTransform(int InstanceIndex, out const FName QuerySocketName, out Transform OutTransform);// 0x4bb7d30
	bool GetInstanceSocketRefPoseWorldTransform(int InstanceIndex, out const FName QuerySocketName, out Transform OutTransform);// 0x4bb7bd0
	bool GetInstancePhysicalBodyLocalFixTransform(int InstanceIndex, int BodyIndex, out Transform OutFixTransform);// 0x4bb7a70
	bool GetInstanceBoneWorldTransform(int InstanceIndex, out const FName QueryBoneName, out Transform OutTransform);// 0x4bb7910
	bool GetInstanceBoneRefPoseWorldTransform(int InstanceIndex, out const FName QueryBoneName, out Transform OutTransform);// 0x4bb77b0
	bool GetInstanceBoneAnimationPoseWorldTransform(int InstanceIndex, out const FName QueryBoneName, out Transform OutTransform);// 0x4bb7650
	int GetByteInEvalNodeCustomProperty(int InstanceIndex, int RightToLeftOffset);// 0x4bb7590
	bool GetBitInEvalNodeCustomProperty(int InstanceIndex, int RightToLeftOffset);// 0x4bb74d0
	void GetAllSimpleBodyBoneNames(out FName[] OutBoneNames);// 0x4bb7420
	void GetAllInstanceSocketNames(out FName[] OutSocketNames);// 0x4bb7370
	void GetAllBodyBoneNames(out FName[] OutBoneNames);// 0x4bb72c0
	void FreezePhysics(int InInstanceIndex);// 0x4bb7240
	void EndiHitDownWithOverrideCenter(int InInstanceIdx, out const Transform OverrideCenter, float InResDuration);// 0x4bb70e0
	void EndiHitDown(int InInstanceIdx, float InResDuration);// 0x4bb7010
	bool DebugPhysicalAssetCurrentAnimTransform(int InstanceIndex, out const FName QueryBoneName, out Transform[] OutTransform, out int[] OutPrimitiveIds, out Vector[] OutPrimitiveParameters, bool bUseSimpleAsset);// 0x4bb6dd0
	void DebugDrawPhysicalRootBoneOffset(int InInstanceIndex);// 0x4bb6d50
	bool DebugBoneTransform(out const FName QueryBoneName, out Transform OutTransform);// 0x4bb6c20
	void ClearNodePool();// 0x4bb6c00
	void BreakRandomJoints(int InstanceIndex, int RandomIndex);// 0x4bb6b40
	void BreakInstanceJointsAndAddImpulse(int InInstanceIdx, int RandomIndex, out const bool bAddImpulse, out const Vector InJointImpulse);// 0x4bb69d0
	void BreakInstanceJoint(int InstanceIndex, out const FName JointName);// 0x4bb6900
	void BeginSimulatePhysics(int InInstanceIdx, float InDuration);// 0x4bb64c0
	void BeginHitDown(int InInstanceIdx, bool bWithCCDOn);// 0x4bb6400
	int BakeNodePoseToStaticTexture(int InInstanceIndex);// 0x4bb6370
	int AddStaticPoseFromBone(out const FName[] InBoneNames, out const Transform[] InBoneTransforms, out Transform OutCenterBoneTransform);// 0x4bb61c0
	int AddNodeWordSpace(out const Transform WorldTransform, bool bNeedAlwaysSimulating);// 0x4bb60a0
	void AddImpulseForInstanceBoneAtLocation(int InInstanceIdx, out const FName InBoneName, out const Vector InImpulse, out const Vector InPosition, float InDuration, bool bHitDown, float JointDamageScale);// 0x4bb5c00
	void AddImpulseForInstanceBelowBoneAtLocation(int InInstanceIdx, out const FName InBoneName, out const FName InBelowBoneName, out const Vector InImpulse, out const Vector InPosition, float InDuration);// 0x4bb5a00
	void AddImpulseForInstance(int InInstanceIdx, out const Vector InImpulse, float InDuration, bool bHitDown, bool bWithCCDOn);// 0x4bb5850
	void AddForceForInstanceBoneAtLocation(int InInstanceIdx, out const FName InBoneName, out const Vector InForce, out const Vector InPosition);// 0x4bb56d0
	void AddForceForInstanceAtLocation(int InInstanceIdx, out const Vector InForce, out const Vector InPosition);// 0x4bb55b0
	void AddBoneDamageForInstance(int InInstanceIdx, out const FName InBoneName, float InBoneDamage);// 0x4bb54a0
	void AddAllBoneDamageForInstance(int InInstanceIdx, float InBoneDamage);// 0x4bb53d0

--------------------------------
Class: NEXTNanoBakedData.DataAsset.Object
	NextNanoBakedBoneData* BoneData;//[Offset: 0x30, Size: 0x8]
	NextNanoBakedLocomotionAnimData* LocoAnimData;//[Offset: 0x38, Size: 0x8]
	NextNanoBakedMontageData* MontageData;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: NextNanoBakedBoneData.DataAsset.Object
	byte[] BoneRefPoseMatrix;//[Offset: 0x30, Size: 0x10]
	byte[] BoneRefPoseBoneSpaceMatrix;//[Offset: 0x40, Size: 0x10]
	byte[] BoneRefInvMatrix;//[Offset: 0x50, Size: 0x10]
	byte[] BoneToParentIndexArray;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: NextNanoBakedLocomotionAnimData.DataAsset.Object
	int CachedNumBones;//[Offset: 0x30, Size: 0x4]
	int CachedNumLocoAnimFrames;//[Offset: 0x34, Size: 0x4]
	Texture2D* CachedAnimBoneSpaceTexture;//[Offset: 0x38, Size: 0x8]
	Texture2D* CachedAnimMeshSpaceTexture;//[Offset: 0x40, Size: 0x8]
	byte[] CachedAnimationBoneTransforms;//[Offset: 0x48, Size: 0x10]
	byte[] CachedAnimationBoneSpaceMatrix;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: NextNanoBakedMontageData.DataAsset.Object
	int CachedNumBones;//[Offset: 0x30, Size: 0x4]
	int CachedNumMontageFrames;//[Offset: 0x34, Size: 0x4]
	Texture2D* CachedMontageAnimationBoneTexture;//[Offset: 0x38, Size: 0x8]
	byte[] CachedMontageBoneTransforms;//[Offset: 0x40, Size: 0x10]
	byte[] CachedMontageBoneSpaceMatrix;//[Offset: 0x50, Size: 0x10]
	byte[] CachedMontageBoneTransformsRelativeToPB;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: InstanceMontageConfig
	AnimMontage* SrcMontage;//[Offset: 0x0, Size: 0x8]
	FName PartionBoneName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: InstanceNodeAnimInstance.AnimInstance.Object
	SkeletalMeshComponent* RefSkeletalMeshComponent;//[Offset: 0x298, Size: 0x8]
	InstancedAnimNode CurrentAnimNode;//[Offset: 0x2a0, Size: 0x380]
	int GetByteFromCustomAnimationNode(out const InstancedAnimNode InNode, int RightToLeftOffset);// 0x4bbd380
	bool GetBitFromCustomAnimationNode(out const InstancedAnimNode InNode, int RightToLeftOffset);// 0x4bbd250
	bool BlueprintUpdateInstanceAnimNode(out InstancedAnimNode NewAnimationNode);// 0x305c9c0
	void BlueprintSwitchToCurrentAnimNode(out const InstancedAnimNode NewAnimationNode);// 0x305c9c0
	void BlueprintInitializeInstanceAnimNode(out InstancedAnimNode NewAnimationNode);// 0x305c9c0

--------------------------------
Class: InstancedAnimNode
	Vector Velocity;//[Offset: 0x0, Size: 0xc]
	float PlayRate;//[Offset: 0xc, Size: 0x4]
	float MontagePlayRate;//[Offset: 0x10, Size: 0x4]
	Vector AngularVelocity;//[Offset: 0x14, Size: 0xc]
	int AnimState;//[Offset: 0x20, Size: 0x4]
	int PrevAnimState;//[Offset: 0x24, Size: 0x4]
	int CurrentTransitionIndex;//[Offset: 0x28, Size: 0x4]
	float CurrentStateKeyVal;//[Offset: 0x2c, Size: 0x4]
	Vector4 CustomProperty1;//[Offset: 0x30, Size: 0x10]
	Vector4 CustomProperty2;//[Offset: 0x40, Size: 0x10]
	Vector4 CustomProperty3;//[Offset: 0x50, Size: 0x10]
	Vector4 CustomProperty4;//[Offset: 0x60, Size: 0x10]
	float AnimStateFirstFrameIndex;//[Offset: 0x70, Size: 0x4]
	float AnimStateSecondFrameIndex;//[Offset: 0x74, Size: 0x4]
	float CurrentStateBlendspaceSample;//[Offset: 0x78, Size: 0x4]
	float TargetCurrentStateBlendSample;//[Offset: 0x7c, Size: 0x4]
	float AnimTransitionStateFirstFrameIndex;//[Offset: 0x80, Size: 0x4]
	float AnimTransitionStateSecondFrameIndex;//[Offset: 0x84, Size: 0x4]
	float TransitionStateBlendspaceSample;//[Offset: 0x88, Size: 0x4]
	float CurrentPlayedSeconds;//[Offset: 0x8c, Size: 0x4]
	float TransitionPlayedSeconds;//[Offset: 0x90, Size: 0x4]
	float CurrentStateAnimBlendAlpha;//[Offset: 0x94, Size: 0x4]
	float TransitionStateAnimBlendAlpha;//[Offset: 0x98, Size: 0x4]
	float CurrentTransitionBlendAlpha;//[Offset: 0x9c, Size: 0x4]
	bool bAnimStateDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bInMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	int CurrentMontageSectionIndex;//[Offset: 0xa4, Size: 0x4]
	int NextMontageSectionIndex;//[Offset: 0xa8, Size: 0x4]
	int CurrentMontageStartFrame;//[Offset: 0xac, Size: 0x4]
	int LastMontageStartFrame;//[Offset: 0xb0, Size: 0x4]
	int LastMontageEndFrame;//[Offset: 0xb4, Size: 0x4]
	float CurrentMontageFirstFrame;//[Offset: 0xb8, Size: 0x4]
	float CurrentMontageSecondFrame;//[Offset: 0xbc, Size: 0x4]
	int CurrentMontageRootBoneIndex;//[Offset: 0xc0, Size: 0x4]
	int TransitionMontageRootBoneIndex;//[Offset: 0xc4, Size: 0x4]
	float CurrentMontagePlayedSeconds;//[Offset: 0xc8, Size: 0x4]
	float MontageTransitionAlpha;//[Offset: 0xcc, Size: 0x4]
	float MontageBlendingAlpha;//[Offset: 0xd0, Size: 0x4]
	float CurrentStatePlayPercent;//[Offset: 0xd4, Size: 0x4]
	float TransitionStatePlayPercent;//[Offset: 0xd8, Size: 0x4]
	Matrix MontageRootMatrix;//[Offset: 0xe0, Size: 0x40]
	Matrix MontagePartitionMatrix;//[Offset: 0x120, Size: 0x40]
	Matrix MontageOffsetMatrix;//[Offset: 0x160, Size: 0x40]
	Matrix MontageRootMotionFixMatrix;//[Offset: 0x1a0, Size: 0x40]
	Matrix LastMontageRootMotionFixMatrix;//[Offset: 0x1e0, Size: 0x40]
	Matrix LastPhysicalRootBoneMatrix;//[Offset: 0x220, Size: 0x40]
	Matrix LastPhysicalSplineBoneMatrix;//[Offset: 0x260, Size: 0x40]
	int MontageFirstFrame;//[Offset: 0x2a0, Size: 0x4]
	bool MontageInterrupt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 0x1]
	float MontageInterruptPercent;//[Offset: 0x2a8, Size: 0x4]
	int Priority;//[Offset: 0x2ac, Size: 0x4]
	Vector4 FirstEvalFrames;//[Offset: 0x2b0, Size: 0x10]
	Vector4 FirstEvalFrameWeights;//[Offset: 0x2c0, Size: 0x10]
	Vector4 SecondEvalFrames;//[Offset: 0x2d0, Size: 0x10]
	Vector4 SecondEvalFrameWeights;//[Offset: 0x2e0, Size: 0x10]
	float FirstAdditiveFrame;//[Offset: 0x2f0, Size: 0x4]
	float FirstAdditiveWeight;//[Offset: 0x2f4, Size: 0x4]
	float MasterNodePlayPercent;//[Offset: 0x2f8, Size: 0x4]
	float MontageTargetSeconds;//[Offset: 0x2fc, Size: 0x4]
	Vector FacingDirection;//[Offset: 0x300, Size: 0xc]
	Vector PreviousLocalVelocity;//[Offset: 0x30c, Size: 0xc]
	Vector CurrentLocalVelocity;//[Offset: 0x318, Size: 0xc]
	Vector FutureLocalVelocity;//[Offset: 0x324, Size: 0xc]
	Vector FarFutureLocalVelocity;//[Offset: 0x330, Size: 0xc]
	FName[] PreferrdMotionTags;//[Offset: 0x340, Size: 0x10]
	FName[] ForbiddenMotionTags;//[Offset: 0x350, Size: 0x10]
	bool bIsPreferMirroredAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	float[] DesiredTrajectoryData;//[Offset: 0x368, Size: 0x10]

--------------------------------
Class: InstancedSkeletalMeshAnimNode
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator rot;//[Offset: 0xc, Size: 0xc]
	int NodeIndex;//[Offset: 0x18, Size: 0x4]
	float UpdateDeltaSeconds;//[Offset: 0x1c, Size: 0x4]
	float EvaluateDeltaSeconds;//[Offset: 0x20, Size: 0x4]
	float AssetPlayerTickDeltaSeconds;//[Offset: 0x24, Size: 0x4]
	float MontageEvaluateDeltaSeconds;//[Offset: 0x28, Size: 0x4]
	float LifeSeconds;//[Offset: 0x2c, Size: 0x4]
	Box PhysicalBound;//[Offset: 0x30, Size: 0x1c]
	bool bInRagDoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool bPendingDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	int RandomIndex;//[Offset: 0x50, Size: 0x4]
	int PhysicalCol;//[Offset: 0x54, Size: 0x4]
	bool bInBlast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	Transform ComponentSpaceTransform;//[Offset: 0x60, Size: 0x30]
	Transform LastFrameComponentTransform;//[Offset: 0x90, Size: 0x30]
	float PhysicalBlendWeight;//[Offset: 0xc0, Size: 0x4]
	int MontageRefCount;//[Offset: 0xc4, Size: 0x4]
	bool bVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	int CustomPerinstanceVal;//[Offset: 0xcc, Size: 0x4]
	int CustomPerInstanceState;//[Offset: 0xd0, Size: 0x4]
	bool bNeedPhysicalForDecoractor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	int DecoractorPhysicxCol;//[Offset: 0xd8, Size: 0x4]
	float PhysicalDeltaSeconds;//[Offset: 0xdc, Size: 0x4]
	InstancedAnimNode CurrentAnimateStateParameters;//[Offset: 0xe0, Size: 0x380]

--------------------------------
Class: InstanceHitResult
	HitResult Hit;//[Offset: 0x0, Size: 0x88]
	int HitInstanceIndex;//[Offset: 0x88, Size: 0x4]
	FName HitInstanceBoneName;//[Offset: 0x8c, Size: 0x8]

--------------------------------
Class: InstancedSkeletalMeshGPUDrivenComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* BackFaceDrawMaterial;//[Offset: 0x878, Size: 0x8]
	MaterialInterface*[] MaterialMap;//[Offset: 0x880, Size: 0x10]
	MaterialInterface*[] StaticPoseMaterialMap;//[Offset: 0x890, Size: 0x10]
	MaterialInterface*[] DebugDrawCallMaterialMap;//[Offset: 0x8a0, Size: 0x10]
	MaterialInterface* DebugDrawCallMaterial;//[Offset: 0x8b0, Size: 0x8]
	Texture2D* StaticPoseAnimationTexture;//[Offset: 0x8b8, Size: 0x8]
	MaterialInterface*[] OverridenBatchMaterials;//[Offset: 0x8c0, Size: 0x10]

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x7e8, Size: 0x10]
	int NumCustomDataFloats;//[Offset: 0x7f8, Size: 0x4]
	float[] PerInstanceSMCustomData;//[Offset: 0x800, Size: 0x10]
	int InstancingRandomSeed;//[Offset: 0x810, Size: 0x4]
	bool OverrideInstanceRandom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x814, Size: 0x1]
	bool IsAlwaysVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x815, Size: 0x1]
	Vector[] CustomInstanceParameter;//[Offset: 0x818, Size: 0x10]
	int InstanceStartCullDistance;//[Offset: 0x828, Size: 0x4]
	int InstanceEndCullDistance;//[Offset: 0x82c, Size: 0x4]
	int[] InstanceReorderTable;//[Offset: 0x830, Size: 0x10]
	int NumPendingLightmaps;//[Offset: 0x888, Size: 0x4]
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x890, Size: 0x10]
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x4bbde20
	bool SetCustomDataValue(int InstanceIndex, int CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty);// 0x4bbdad0
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0x4bbda10
	void ResizeInstancesNum(int AddedInstanceCount);// 0x26b6650
	bool RemoveInstance(int InstanceIndex);// 0x4bbd970
	void PreAllocateInstancesMemory(int AddedInstanceCount);// 0x4bbd8e0
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x4bbd4e0
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0x4bbd770
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0x4bbd640
	int GetInstanceCount();// 0x4bbd4b0
	void ClearInstances();// 0x4bbd230
	bool BatchUpdateInstancesTransforms(int StartInstanceIndex, out const Transform[] NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x4bbd040
	bool BatchUpdateInstancesTransform(int StartInstanceIndex, int NumInstances, out const Transform NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x4bbce10
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0x4bbcd30
	int AddInstance(out const Transform InstanceTransform);// 0x4bbcc50

--------------------------------
Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 0x40]

--------------------------------
Class: InstancedStaticMeshMappingInfo

--------------------------------
Class: AttachToInstanceActor
	Actor* AttachedActor;//[Offset: 0x0, Size: 0x8]
	int AttachedInstanceIndex;//[Offset: 0x8, Size: 0x4]
	FName AttachedBoneName;//[Offset: 0xc, Size: 0x8]
	Transform AttachReleativeTransform;//[Offset: 0x20, Size: 0x30]

--------------------------------
Class: InstanceAnimNotify
	FName NotifyName;//[Offset: 0x0, Size: 0x8]
	AnimNotify* Notify;//[Offset: 0x8, Size: 0x8]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x10, Size: 0x8]
	float TriggerTime;//[Offset: 0x18, Size: 0x4]
	float Priority;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ArkAIBehaviorInfo.TableRowBase
	float VisualDistanceFactor_HideArea;//[Offset: 0x8, Size: 0x4]
	float VisualDistance;//[Offset: 0xc, Size: 0x4]
	float VisualDistanceAfterAlert;//[Offset: 0x10, Size: 0x4]
	float VisualDistanceInCombat;//[Offset: 0x14, Size: 0x4]
	float VisualDistanceForceCombat;//[Offset: 0x18, Size: 0x4]
	float VisualPerceiveSpeedAfterAlert;//[Offset: 0x1c, Size: 0x4]
	float OverriedGlobalIndisdinctVisualRateModifier;//[Offset: 0x20, Size: 0x4]
	float FOVAngle;//[Offset: 0x24, Size: 0x4]
	FName EyeSocketName;//[Offset: 0x28, Size: 0x8]
	float VerticalFOVAngle;//[Offset: 0x30, Size: 0x4]
	float NearPerceiveRadius;//[Offset: 0x34, Size: 0x4]
	float GeneralReactionTime;//[Offset: 0x38, Size: 0x4]
	float TargetLostVisibilityReactionTime;//[Offset: 0x3c, Size: 0x4]
	float CombatForceNoticeTime;//[Offset: 0x40, Size: 0x4]
	float VisualLostTime;//[Offset: 0x44, Size: 0x4]
	float VisualLostRetreatTime;//[Offset: 0x48, Size: 0x4]
	float VisualLostProtectTimeEnterCombat;//[Offset: 0x4c, Size: 0x4]
	float VisualWarningProgress;//[Offset: 0x50, Size: 0x4]
	float TryRetreatDistance;//[Offset: 0x54, Size: 0x4]
	<enum,ArkAIPerceptionConfig> PerceptionThresholds;//[Offset: 0x58, Size: 0x50]
	<enum,class ArkAITask> BehaviorTasks;//[Offset: 0xa8, Size: 0x50]
	float AlertBroadcastRadius;//[Offset: 0xf8, Size: 0x4]
	float AlertBroadcastDelay;//[Offset: 0xfc, Size: 0x4]
	int AlertBroadcastMinNum;//[Offset: 0x100, Size: 0x4]
	int AlertBroadcastMaxNum;//[Offset: 0x104, Size: 0x4]
	float TaskRecruitRadius;//[Offset: 0x108, Size: 0x4]
	float TaskBroadcastDelay;//[Offset: 0x10c, Size: 0x4]
	int TaskBroadcastMinNum;//[Offset: 0x110, Size: 0x4]
	int TaskBroadcastMaxNum;//[Offset: 0x114, Size: 0x4]
	float MinSurroundCount;//[Offset: 0x118, Size: 0x4]

--------------------------------
Class: ArkAIPerceptionConfig
	float AlertThreshold;//[Offset: 0x0, Size: 0x4]
	float TargetThreshold;//[Offset: 0x4, Size: 0x4]
	float MaxAccumulatedMagnitude;//[Offset: 0x8, Size: 0x4]
	float StageLockTime;//[Offset: 0xc, Size: 0x4]
	float CullingThreshold;//[Offset: 0x10, Size: 0x4]
	float DecaySpeed;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ArkAICombatInfo.TableRowBase
	float Health;//[Offset: 0x8, Size: 0x4]
	float MaxHealth;//[Offset: 0xc, Size: 0x4]
	float HealthPerUISegment;//[Offset: 0x10, Size: 0x4]
	float CellHealth;//[Offset: 0x14, Size: 0x4]
	float MaxShieldRatio;//[Offset: 0x18, Size: 0x4]
	float RecoverRate;//[Offset: 0x1c, Size: 0x4]
	float HurtAffectDuration;//[Offset: 0x20, Size: 0x4]
	float ShieldDamageRate;//[Offset: 0x24, Size: 0x4]
	float DyingRecoverDuration;//[Offset: 0x28, Size: 0x4]
	float DyingRecoverHealthMaxPercentage;//[Offset: 0x2c, Size: 0x4]
	float DyingRecoverHealthRate;//[Offset: 0x30, Size: 0x4]
	float SyncedDamageToSwarmModifier;//[Offset: 0x34, Size: 0x4]
	float SyncedDamageToEliteModifier;//[Offset: 0x38, Size: 0x4]
	float DamageToSyncedNpcModifier;//[Offset: 0x3c, Size: 0x4]
	<enum,float> DamageModifierFromPlayer;//[Offset: 0x40, Size: 0x50]
	<enum,float> DamageModifierFromNPC;//[Offset: 0x90, Size: 0x50]
	bool bCanReceiveKnockDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	float KnockDownValueResistFactor;//[Offset: 0xe4, Size: 0x4]
	float AttackPower;//[Offset: 0xe8, Size: 0x4]
	float AttackSpeed;//[Offset: 0xec, Size: 0x4]
	float AttackableDistance;//[Offset: 0xf0, Size: 0x4]
	float AttackableAngle;//[Offset: 0xf4, Size: 0x4]
	FName[] Abilities;//[Offset: 0xf8, Size: 0x10]
	class ArkGameBuff[] AbilityBuffs;//[Offset: 0x108, Size: 0x10]
	ArkAIPhaseArgs[] CombatPhases;//[Offset: 0x118, Size: 0x10]
	bool bAlwaysAllowCriticalHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	ArkAIDamageTakenInfo[] DamageTakenInfos;//[Offset: 0x130, Size: 0x10]
	<FName,ArkAIDynamicDamgeTakenInfo> DynamicDamageTakenInfos;//[Offset: 0x140, Size: 0x50]
	float MeleeDmgFactorWhenOpenDynamicWP;//[Offset: 0x190, Size: 0x4]
	<enum,AnimMontage*> TakeDamageMontages;//[Offset: 0x198, Size: 0x50]
	ArkAIShotTakenInfo[] ShotTakenInfos;//[Offset: 0x1e8, Size: 0x10]
	ArkAICriticalStunResponseInfo[] CriticalStunResponseInfos;//[Offset: 0x1f8, Size: 0x10]
	class ArkAIHurtConfig* HurtConfig;//[Offset: 0x208, Size: 0x8]
	AnimMontage* PushedMontage;//[Offset: 0x210, Size: 0x8]
	ArkAITargetScoreEvaluator* TargetScoreEvaluator;//[Offset: 0x218, Size: 0x8]
	FName AttackTicketCategory;//[Offset: 0x220, Size: 0x8]
	float AIResCriticalChanceNormal;//[Offset: 0x228, Size: 0x4]
	float AIResCriticalChanceWeakPoint;//[Offset: 0x22c, Size: 0x4]

--------------------------------
Class: ArkAIPhaseArgs
	FName PhaseName;//[Offset: 0x0, Size: 0x8]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 0x8]
	class ArkGameBuff[] AbilityBuffs;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ArkAIDamageTakenInfo
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	float DamageFactor;//[Offset: 0x8, Size: 0x4]
	bool bIsWeakPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bAllowCriticalHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	int SwarmKillAnimIndex;//[Offset: 0x10, Size: 0x4]
	float SwarmKillAnimRate;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ArkAIDynamicDamgeTakenInfo
	FName[] BoneNames;//[Offset: 0x0, Size: 0x10]
	BoneHitInfoOverride BoneHitOverride;//[Offset: 0x10, Size: 0xc]
	ParticleSystem* Particle;//[Offset: 0x20, Size: 0x28]
	int Priority;//[Offset: 0x48, Size: 0x4]
	int SwarmDisplayState;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: BoneHitInfoOverride
	enum WeakPointOverride;//[Offset: 0x0, Size: 0x1]
	enum AllowCriticalHitOverride;//[Offset: 0x1, Size: 0x1]
	int HitReactionOverride;//[Offset: 0x4, Size: 0x4]
	float DamageFactorOverride;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ArkAIShotTakenInfo
	FName[] BoneNames;//[Offset: 0x0, Size: 0x10]
	AnimMontage* Montage;//[Offset: 0x10, Size: 0x8]
	float StartHalfAngle;//[Offset: 0x18, Size: 0x4]
	float EndHalfAngle;//[Offset: 0x1c, Size: 0x4]
	float MinSpeed;//[Offset: 0x20, Size: 0x4]
	float MaxSpeed;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: ArkAICriticalStunResponseInfo
	bool bNeedCriticalHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bDiedBecauseOfCritialStun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	FName[] BoneNames;//[Offset: 0x8, Size: 0x10]
	ArkDamageFilterDefinition[] ApplicableDamageTypes;//[Offset: 0x18, Size: 0x10]
	ArkDamageFilterDefinition[] ExclusiveDamageTypes;//[Offset: 0x28, Size: 0x10]
	AnimMontage* Montage;//[Offset: 0x38, Size: 0x8]
	bool bHitReactionAdjustToDamageSourceForward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	float MinHealthRadio;//[Offset: 0x44, Size: 0x4]
	float MaxHealthRadio;//[Offset: 0x48, Size: 0x4]
	float GroupStunMinTime;//[Offset: 0x4c, Size: 0x4]
	float GroupStunMaxTime;//[Offset: 0x50, Size: 0x4]
	float CriticalStunDuration;//[Offset: 0x54, Size: 0x4]
	float CriticalStunThresholdRatio;//[Offset: 0x58, Size: 0x4]
	float StunValueDampingProtectTime;//[Offset: 0x60, Size: 0x4]
	float StunValueDampingRatio;//[Offset: 0x64, Size: 0x4]
	float Probability;//[Offset: 0x68, Size: 0x4]
	bool bQuitCurrentCommand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	bool bCheckBrokeShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d, Size: 0x1]
	float MinTriggerInterval;//[Offset: 0x70, Size: 0x4]
	int StackCount;//[Offset: 0x74, Size: 0x4]
	enum CriticalStunType;//[Offset: 0x78, Size: 0x1]

--------------------------------
Class: ArkDamageFilterDefinition
	class ArkDamageType* DamageTypeClass;//[Offset: 0x0, Size: 0x8]
	enum DamageTypeTag;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: ArkDamageType.DamageType.Object
	enum damagetag;//[Offset: 0x40, Size: 0x1]
	enum OnHitTag;//[Offset: 0x41, Size: 0x1]
	FName[] Tags;//[Offset: 0x48, Size: 0x10]
	enum ElementType;//[Offset: 0x58, Size: 0x1]
	Texture2D* DamageTypeIcon;//[Offset: 0x60, Size: 0x28]
	bool bDot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	ForceFeedbackEffect* HitForceFeedback;//[Offset: 0x90, Size: 0x8]
	ForceFeedbackEffect* KilledForceFeedback;//[Offset: 0x98, Size: 0x8]
	class CameraShake* CameraShake;//[Offset: 0xa0, Size: 0x8]
	class ArkImpactEffect* ImpactEffect;//[Offset: 0xa8, Size: 0x8]
	ArkApplyBuffWithProbability[] AddingBuffs;//[Offset: 0xb0, Size: 0x10]
	int ExcludeCharacters;//[Offset: 0xc0, Size: 0x4]
	bool bAllowFriendlyDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]
	bool bAllowSelfDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 0x1]
	bool bExecutionType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6, Size: 0x1]
	bool bExecuteDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7, Size: 0x1]
	bool bInterruptInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool bInterruptUsingItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	bool bHitReactionPreperformance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca, Size: 0x1]
	bool bHitReactionTowardsToDamageSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb, Size: 0x1]
	bool bHitReactionAdjustToDamageSourceForward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]
	float MaxHitReactionAdjustAngle;//[Offset: 0xd0, Size: 0x4]
	float BoneDamage;//[Offset: 0xd4, Size: 0x4]
	float DeathImpulseStump;//[Offset: 0xd8, Size: 0x4]
	float DeathImpulseBody;//[Offset: 0xdc, Size: 0x4]
	float SmashSwarmRate;//[Offset: 0xe0, Size: 0x4]
	float MeleeHitPushRadius;//[Offset: 0xe4, Size: 0x4]
	float MeleeHitPushAngle;//[Offset: 0xe8, Size: 0x4]
	float MeleeHitPushDelay;//[Offset: 0xec, Size: 0x4]
	enum ShieldDamageRateModifier;//[Offset: 0xf0, Size: 0x1]
	float ShieldDamageRateModifierValue;//[Offset: 0xf4, Size: 0x4]
	bool ClearShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	enum DamageKnockModifier;//[Offset: 0xf9, Size: 0x1]
	float DamageKnockModifierValue;//[Offset: 0xfc, Size: 0x4]
	CurveFloat* DistanceModifier;//[Offset: 0x100, Size: 0x8]

--------------------------------
Class: ArkImpactEffect.Object
	ArkImpactEffectConfig[] Effects;//[Offset: 0x28, Size: 0x10]
	ParticleSystem* DefaultFX;//[Offset: 0x38, Size: 0x28]
	ArkParticleModifier DefaultFxModifier;//[Offset: 0x60, Size: 0x68]
	ParticleSystem* DefaultFX_Critical;//[Offset: 0xc8, Size: 0x28]
	ArkParticleModifier DefaultCriticalFXModifier;//[Offset: 0xf0, Size: 0x68]
	ParticleSystem* BeamFX;//[Offset: 0x158, Size: 0x28]
	FName BeamEndParam;//[Offset: 0x180, Size: 0x8]
	CurveFloat* ImpactDistanceScaleMapping;//[Offset: 0x188, Size: 0x8]
	AkAudioEvent* ImpactSound;//[Offset: 0x190, Size: 0x28]
	AkAudioEvent* ImpactSound_Critical;//[Offset: 0x1b8, Size: 0x28]
	enum FxAttachmentRule;//[Offset: 0x1e0, Size: 0x1]
	float ParticleCullDist_OnCamera;//[Offset: 0x1e4, Size: 0x4]
	float ParticleCullDist_OffCamera;//[Offset: 0x1e8, Size: 0x4]
	float DecalCullDist_OnCamera;//[Offset: 0x1ec, Size: 0x4]
	float DecalCullDist_OffCamera;//[Offset: 0x1f0, Size: 0x4]

--------------------------------
Class: ArkImpactEffectConfig
	ParticleSystem* ImpactFx;//[Offset: 0x0, Size: 0x28]
	ParticleSystem* ImpactFXCritical;//[Offset: 0x28, Size: 0x28]
	DecalData Decal;//[Offset: 0x50, Size: 0x40]
	DecalData DecalCritical;//[Offset: 0x90, Size: 0x40]

--------------------------------
Class: DecalData
	MaterialInterface* DecalMaterial;//[Offset: 0x0, Size: 0x28]
	Vector2D DecalSizeRange;//[Offset: 0x28, Size: 0x8]
	float LifeSpan;//[Offset: 0x30, Size: 0x4]
	byte DrawClipMode;//[Offset: 0x34, Size: 0x1]
	float MaxOrientationDiffAngle;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: ArkApplyBuffWithProbability
	class ArkGameBuff* BuffClass;//[Offset: 0x0, Size: 0x8]
	int BuffID;//[Offset: 0x8, Size: 0x4]
	float Probability;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ArkAIHurtConfig.Object
	ArkAIHitReactionInfo[] HitReactionInfos;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: ArkAIHitReactionInfo
	AnimMontage* Montage;//[Offset: 0x0, Size: 0x8]
	enum ResponseDirectionType;//[Offset: 0x8, Size: 0x1]
	enum DamageTypeTag;//[Offset: 0x9, Size: 0x1]
	enum HitTypeTag;//[Offset: 0xa, Size: 0x1]
	class DamageType[] SpecifiedDamageTypes;//[Offset: 0x10, Size: 0x10]
	bool bResponseOnlyDynamicDamageTakenOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bResponseInStun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	bool bCauseCrowdPushBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 0x1]
	bool bNeedBrokeShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23, Size: 0x1]
	enum CriticalResponseType;//[Offset: 0x24, Size: 0x1]
	FName[] BoneNames;//[Offset: 0x28, Size: 0x10]
	float StartAngle;//[Offset: 0x38, Size: 0x4]
	float EndAngle;//[Offset: 0x3c, Size: 0x4]
	float MinSpeed;//[Offset: 0x40, Size: 0x4]
	float MaxSpeed;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: ArkAIMovementInfo.TableRowBase
	float SpeedModifierMin;//[Offset: 0x8, Size: 0x4]
	float SpeedModifierMax;//[Offset: 0xc, Size: 0x4]
	float RagdollFallingHeight;//[Offset: 0x10, Size: 0x4]
	AnimMontage* GetUpMontageForwardUp;//[Offset: 0x18, Size: 0x8]
	AnimMontage* GetUpMontageBackUp;//[Offset: 0x20, Size: 0x8]
	FName CorpseCenterBoneName;//[Offset: 0x28, Size: 0x8]
	FName[] CorpseKeyBoneNames;//[Offset: 0x30, Size: 0x10]
	float AnimRotateTime;//[Offset: 0x40, Size: 0x4]
	<enum,ArkAISpeedStageInfo> SpeedStages;//[Offset: 0x48, Size: 0x50]

--------------------------------
Class: ArkAISpeedStageInfo
	float MinSpeed;//[Offset: 0x0, Size: 0x4]
	float MaxSpeed;//[Offset: 0x4, Size: 0x4]
	float Acceleration;//[Offset: 0x8, Size: 0x4]
	float Deceleration;//[Offset: 0xc, Size: 0x4]
	float RotateRate;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ArkSwarmTriggerVolume.Volume.Brush.Actor.Object
	delegate OnSwarmEnterVolumeEvent;//[Offset: 0x320, Size: 0x10]
	delegate OnSwarmLeaveVolumeEvent;//[Offset: 0x330, Size: 0x10]
	bool bIsVolumeValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	ArkSwarmEntityCharacter*[] InVolumeSwarmCharacters;//[Offset: 0x348, Size: 0x10]
	void SetIsVolumeValid(bool IsValid);// 0x26623a0
	bool GetIsVolumeValid();// 0x2662090

--------------------------------
Class: ArkSwarmEntityCharacter.ArkNpc.ArkCharacterBase.Character.Pawn.Actor.Object
	float AvoidanceRadiusModifier;//[Offset: 0x2870, Size: 0x4]
	bool bCanSleepWhenIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2874, Size: 0x1]
	enum SleepingState;//[Offset: 0x2875, Size: 0x1]
	bool bIsSkipBornAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2949, Size: 0x1]
	bool bIsBornFadeInWithParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294a, Size: 0x1]
	bool bForceFadeInEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294b, Size: 0x1]
	float HAngleLimit;//[Offset: 0x294c, Size: 0x4]
	float VAngleLimit;//[Offset: 0x2950, Size: 0x4]
	float MaxDistLimit;//[Offset: 0x2954, Size: 0x4]
	float MinDistLimit;//[Offset: 0x2958, Size: 0x4]
	float BornParticleDuration;//[Offset: 0x295c, Size: 0x4]
	float BornAnimationLength;//[Offset: 0x2960, Size: 0x4]
	float FirstSleepPauseMinTime;//[Offset: 0x2964, Size: 0x4]
	float FirstSleepPauseMaxTime;//[Offset: 0x2968, Size: 0x4]
	float EnterSleepPauseMinTime;//[Offset: 0x296c, Size: 0x4]
	float EnterSleepPauseMaxTime;//[Offset: 0x2970, Size: 0x4]
	Vector CurrentLocalVelocity;//[Offset: 0x297c, Size: 0xc]
	Vector FutureLocalVelocity;//[Offset: 0x2988, Size: 0xc]
	Vector FarFutureLocalVelocity;//[Offset: 0x2994, Size: 0xc]
	float PreferMirroredAnimationRate;//[Offset: 0x29a0, Size: 0x4]
	float NearChaseAnimationDistance;//[Offset: 0x29a8, Size: 0x4]
	PrimitiveComponent* CorpseCollisionProxy;//[Offset: 0x29b0, Size: 0x8]
	float CollisionAvoidanceRadius;//[Offset: 0x29cc, Size: 0x4]
	float FallingSpeedModifier;//[Offset: 0x29d0, Size: 0x4]
	float GravitySpeedUseRate;//[Offset: 0x29d4, Size: 0x4]
	float StepUpHeight;//[Offset: 0x29d8, Size: 0x4]
	float ChaseTargetRepathDistanceFactor;//[Offset: 0x29dc, Size: 0x4]
	float MotionMatchingFutureTime;//[Offset: 0x29e0, Size: 0x4]
	float MotionMatchingPreviousTime;//[Offset: 0x29e4, Size: 0x4]
	float MotionMatchingPredictTimeStep;//[Offset: 0x29e8, Size: 0x4]
	FName[] AdditionalMotionMatchingTags;//[Offset: 0x2a28, Size: 0x10]
	int ReplicatedMovementPauseCount;//[Offset: 0x2a38, Size: 0x4]
	float InitAttackTicketRate;//[Offset: 0x2a78, Size: 0x4]
	int EntityID;//[Offset: 0x2a80, Size: 0x4]
	ArkSwarmMovement* Movement;//[Offset: 0x2a88, Size: 0x8]
	enum SwarmCharacterState;//[Offset: 0x2a90, Size: 0x1]
	Actor* chaseTarget;//[Offset: 0x2a98, Size: 0x8]
	ArkSwarmEntityLookAtInfo SwarmLookAtInfo;//[Offset: 0x2aa0, Size: 0x20]
	uint16 RecycleID;//[Offset: 0x2ac6, Size: 0x2]
	void SetMontageNextSection(AnimMontage* AnimMontage, bool forceNoBlending, out const FName NextSectionName, bool isInterrupt);// 0x297bd80
	void SetInstanceScale(out const Vector InScale);// 0x297bc60
	void SetInstanceOutline(bool bOutline);// 0x297bbd0
	void SetInstanceBeginSynin();// 0x297bbb0
	void SetInstanceBeginSyncout();// 0x297bb90
	void SetFlagInAnimNode(bool flag, enum flagType);// 0x297bad0
	void SetFadingEffect(float FadingAlpha, float InBlendSeconds);// 0x297ba00
	void SetCollisionRadius(float CollisionRadius);// 0x297b980
	void SetByteInAnimNode(byte byte, enum byteType);// 0x297b8c0
	void SetAvoidanceWeightModifier(float weightModifier);// 0x297b840
	void SetAvoidanceRadiusModifier(float radiusModifier);// 0x297b7c0
	void ServerSkipBornAnimation();// 0x297b7a0
	bool ServerRoar_BP();// 0x305c9c0
	bool ServerRoar();// 0x297b770
	void ServerForeFadeInEffect();// 0x297b750
	bool ServerAttackTarget_BP(ArkCharacterBase* Target);// 0x305c9c0
	bool ServerAttackTarget(ArkCharacterBase* Target);// 0x297b6b0
	bool ServerAttackShttle_BP(ArkShuttleBase* Shuttle);// 0x305c9c0
	bool ServerAttackShttle(ArkShuttleBase* Shuttle);// 0x297b610
	void ResetStealthEffect();// 0x297b5f0
	void Rep_OnSwarmMovementInfo();// 0xae2270
	void Rep_OnSwarmLookAtInfo();// 0x297b5d0
	void Rep_OnSwarmCharacterState();// 0x297b480
	void Rep_OnChaseTarget();// 0x297b5b0
	void Rep_EntityID();// 0x297b590
	void OnWakeUp_BP();// 0x305c9c0
	void OnRep_RecycleID();// 0x297b480
	void OnRep_MovementPauseCount(int previousPauseCount);// 0x297b400
	void OnRep_IsSkipBornAnimation();// 0x297b3e0
	void OnRep_ForceFadeInEffect();// 0x297b3c0
	void OnRep_bIsSleeping();// 0x297b4a0
	void OnRep_AvoidanceRadiusModifier();// 0x297b3a0
	void OnFallSleep_BP();// 0x305c9c0
	void OnCustomBornPerference_BP();// 0x305c9c0
	void OnClientPlayHitEffect_BP(out const HitResult HitInfo);// 0x305c9c0
	bool IsNotImportant(ArkPlayer* Player);// 0x297ad40
	bool IsMovementPaused();// 0x297ad10
	bool IsLookAtRotating();// 0x297ace0
	bool IsInStealthEffect();// 0x297acb0
	bool IsInMontageState();// 0x297ac80
	void Init_BP();// 0x305c9c0
	bool GetIsSmashed();// 0x297ac30
	bool GetIsSleeping();// 0x297ac00
	Transform GetInstancedSocketTransform(FName SocketName, out bool outIsSuccess);// 0x297aaf0
	int GetInstancedMeshIndex();// 0x297aac0
	InstancedSkeletalMeshActor* GetInstancedMeshActor();// 0x297aa90
	Transform GetInstancedBoneTransform(FName BoneName, out bool outIsSuccess);// 0x297a980
	int GetID();// 0x297a950
	bool GetFlagInAnimNode(enum flagType);// 0x297a8c0
	byte GetByteInAnimNode(enum byteType);// 0x297a830
	float GetAvoidancePenetrationRate();// 0x297a800
	void DisableCoreMeshTick();// 0x297a7e0
	void ClientVisualProgressUpdate_BP(float previousProgress, float CurrentProgress);// 0x305c9c0
	void ClientPlayCriticalDeathEffect_BP();// 0x305c9c0
	void ClientCombatVisualLostChange_BP(bool isLost);// 0x305c9c0

--------------------------------
Class: ArkSwarmMovement.Object
	float MaxSyncTolerance;//[Offset: 0x2c, Size: 0x4]
	NavVoxelMap* VoxelMap;//[Offset: 0xf8, Size: 0x8]
	ArkSwarmEntityCharacter* EntityCharacter;//[Offset: 0x130, Size: 0x8]
	CollisionVolumeCache* CollisionVolumeCache;//[Offset: 0x138, Size: 0x8]
	PhysicalMaterial* FloorPhysMaterial;//[Offset: 0x140, Size: 0x8]
	Actor* chaseTarget;//[Offset: 0x260, Size: 0x8]
	ArkSwarmPath FollowingPath;//[Offset: 0x290, Size: 0x48]
	Actor* LookingAtActor;//[Offset: 0x300, Size: 0x8]

--------------------------------
Class: CollisionVolumeCache.Object
	PrimitiveComponent*[] StaticCollisions;//[Offset: 0x60, Size: 0x10]
	PrimitiveComponent*[] CorpseCollisions;//[Offset: 0x70, Size: 0x10]
	PrimitiveComponent*[] MovingCollisions;//[Offset: 0x80, Size: 0x10]
	LandscapeHeightfieldCollisionComponent*[] HeightFieldCollisions;//[Offset: 0x90, Size: 0x10]
	PrimitiveComponent*[] CommonTriggerVolumes;//[Offset: 0xa0, Size: 0x10]
	ArkSwarmTriggerVolume*[] SwarmTriggerVolumes;//[Offset: 0xb0, Size: 0x10]
	Character* MyCharacter;//[Offset: 0xd0, Size: 0x8]

--------------------------------
Class: LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeLayerInfoObject*[] ComponentLayerInfos;//[Offset: 0x670, Size: 0x10]
	int SectionBaseX;//[Offset: 0x680, Size: 0x4]
	int SectionBaseY;//[Offset: 0x684, Size: 0x4]
	int CollisionSizeQuads;//[Offset: 0x688, Size: 0x4]
	float CollisionScale;//[Offset: 0x68c, Size: 0x4]
	int SimpleCollisionSizeQuads;//[Offset: 0x690, Size: 0x4]
	byte[] CollisionQuadFlags;//[Offset: 0x698, Size: 0x10]
	Guid HeightfieldGuid;//[Offset: 0x6a8, Size: 0x10]
	Box CachedLocalBox;//[Offset: 0x6b8, Size: 0x1c]
	LandscapeComponent* RenderComponent;//[Offset: 0x6d4, Size: 0x1c]
	PhysicalMaterial*[] CookedPhysicalMaterials;//[Offset: 0x700, Size: 0x10]
	LandscapeComponent* GetRenderComponent();// 0x3f795c0

--------------------------------
Class: LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int SectionBaseX;//[Offset: 0x670, Size: 0x4]
	int SectionBaseY;//[Offset: 0x674, Size: 0x4]
	int ComponentSizeQuads;//[Offset: 0x678, Size: 0x4]
	int SubsectionSizeQuads;//[Offset: 0x67c, Size: 0x4]
	int NumSubsections;//[Offset: 0x680, Size: 0x4]
	MaterialInterface* OverrideMaterial;//[Offset: 0x688, Size: 0x8]
	MaterialInterface* OverrideHoleMaterial;//[Offset: 0x690, Size: 0x8]
	LandscapeComponentMaterialOverride[] OverrideMaterials;//[Offset: 0x698, Size: 0x10]
	MaterialInstanceConstant*[] MaterialInstances;//[Offset: 0x6a8, Size: 0x10]
	MaterialInstanceDynamic*[] MaterialInstancesDynamic;//[Offset: 0x6b8, Size: 0x10]
	int8[] LODIndexToMaterialIndex;//[Offset: 0x6c8, Size: 0x10]
	int8[] MaterialIndexToDisabledTessellationMaterial;//[Offset: 0x6d8, Size: 0x10]
	Texture2D* XYOffsetmapTexture;//[Offset: 0x6e8, Size: 0x8]
	Vector4 WeightmapScaleBias;//[Offset: 0x6f0, Size: 0x10]
	float WeightmapSubsectionOffset;//[Offset: 0x700, Size: 0x4]
	Vector4 HeightmapScaleBias;//[Offset: 0x710, Size: 0x10]
	Box CachedLocalBox;//[Offset: 0x720, Size: 0x1c]
	LandscapeHeightfieldCollisionComponent* CollisionComponent;//[Offset: 0x73c, Size: 0x1c]
	Texture2D* HeightmapTexture;//[Offset: 0x758, Size: 0x8]
	WeightmapLayerAllocationInfo[] WeightmapLayerAllocations;//[Offset: 0x760, Size: 0x10]
	Texture2D*[] WeightmapTextures;//[Offset: 0x770, Size: 0x10]
	LandscapeLODStreamingProxy* LODStreamingProxy;//[Offset: 0x780, Size: 0x8]
	Guid MapBuildDataId;//[Offset: 0x788, Size: 0x10]
	Guid[] IrrelevantLights;//[Offset: 0x798, Size: 0x10]
	int CollisionMipLevel;//[Offset: 0x7a8, Size: 0x4]
	int SimpleCollisionMipLevel;//[Offset: 0x7ac, Size: 0x4]
	float NegativeZBoundsExtension;//[Offset: 0x7b0, Size: 0x4]
	float PositiveZBoundsExtension;//[Offset: 0x7b4, Size: 0x4]
	float StaticLightingResolution;//[Offset: 0x7b8, Size: 0x4]
	int ForcedLOD;//[Offset: 0x7bc, Size: 0x4]
	int LODBias;//[Offset: 0x7c0, Size: 0x4]
	Guid StateId;//[Offset: 0x7c4, Size: 0x10]
	Guid BakedTextureMaterialGuid;//[Offset: 0x7d4, Size: 0x10]
	Texture2D* GIBakedBaseColorTexture;//[Offset: 0x7e8, Size: 0x8]
	byte MobileBlendableLayerMask;//[Offset: 0x7f0, Size: 0x1]
	MaterialInterface* MobileMaterialInterface;//[Offset: 0x7f8, Size: 0x8]
	MaterialInterface*[] MobileMaterialInterfaces;//[Offset: 0x800, Size: 0x10]
	Texture2D*[] MobileWeightmapTextures;//[Offset: 0x810, Size: 0x10]
	Texture2D* TexIdMapTexture;//[Offset: 0x820, Size: 0x8]
	bool IsUsedForRenderInTessellationMeshGeneratorMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x828, Size: 0x1]
	bool IsMaterialUsingLandscapeTessellation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x829, Size: 0x1]
	IntPoint LandscapeTotalQuadSize;//[Offset: 0x82c, Size: 0x8]
	int LandscapeNumSqrt;//[Offset: 0x834, Size: 0x4]
	BoxSphereBounds WholeLandscapeBounds;//[Offset: 0x838, Size: 0x1c]
	Texture2D* GlobalHeightMapForHZB;//[Offset: 0x858, Size: 0x8]
	MaterialInstanceDynamic* GetMaterialInstanceDynamic(int InIndex);// 0x3f772d0
	float EditorGetPaintLayerWeightByNameAtLocation(out const Vector InLocation, const FName InPaintLayerName);// 0x3f77070
	float EditorGetPaintLayerWeightAtLocation(out const Vector InLocation, LandscapeLayerInfoObject* PaintLayer);// 0x3f77070

--------------------------------
Class: LandscapeLayerInfoObject.Object
	FName LayerName;//[Offset: 0x28, Size: 0x8]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x30, Size: 0x8]
	float Hardness;//[Offset: 0x38, Size: 0x4]
	LinearColor LayerUsageDebugColor;//[Offset: 0x3c, Size: 0x10]

--------------------------------
Class: LandscapeComponentMaterialOverride
	PerPlatformInt LODIndex;//[Offset: 0x0, Size: 0x4]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x478, Size: 0x8]
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x4c3a9e0
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x4c3a810
	float K2_GetScalarParameterValue(FName ParameterName);// 0x4c3a620

--------------------------------
Class: WeightmapLayerAllocationInfo
	LandscapeLayerInfoObject* LayerInfo;//[Offset: 0x0, Size: 0x8]
	byte WeightmapTextureIndex;//[Offset: 0x8, Size: 0x1]
	byte WeightmapTextureChannel;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: LandscapeLODStreamingProxy.StreamableRenderAsset.Object

--------------------------------
Class: ArkSwarmPath
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector[] PathPoints;//[Offset: 0x8, Size: 0x10]
	float[] ETAs;//[Offset: 0x18, Size: 0x10]
	float Tolerance;//[Offset: 0x28, Size: 0x4]
	bool bIsFallbackPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	byte CurrentSegmentIndex;//[Offset: 0x2d, Size: 0x1]
	UInt32Property EffectiveTime;//[Size: 0x4]
	bool bIsCompleteData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: ArkShuttleBase.Actor.Object
	class ArkShuttleAnimComponent* AnimComponentClass;//[Offset: 0x2e8, Size: 0x8]
	ArkShuttleAnimComponent* AnimComponent;//[Offset: 0x2f0, Size: 0x8]
	ArkShuttleShoutComponent* ShoutComponent;//[Offset: 0x2f8, Size: 0x8]
	class ArkShuttleParticleComponent* ParticleComponentClass;//[Offset: 0x300, Size: 0x8]
	ArkShuttleParticleComponent* ParticleComponent;//[Offset: 0x308, Size: 0x8]
	class ArkShuttleBlastComponent* BlastComponentClass;//[Offset: 0x310, Size: 0x8]
	ArkShuttleBlastComponent* BlastComponent;//[Offset: 0x318, Size: 0x8]
	class ArkShuttleNanoDrill* DrillClass;//[Offset: 0x320, Size: 0x8]
	ArkShuttleNanoDrill* Drill;//[Offset: 0x328, Size: 0x8]
	Actor* SpawnAwardPorint;//[Offset: 0x330, Size: 0x8]
	ArkDanoOccupiedPhaseData CurOccupiedPhaseData;//[Offset: 0x350, Size: 0x30]
	float DrillOffsetHeightZ;//[Offset: 0x380, Size: 0x4]
	float OccupiedAwardRadius;//[Offset: 0x384, Size: 0x4]
	float OccupiedAwardTraceExtent;//[Offset: 0x388, Size: 0x4]
	float RefreshOccupiedStatusIntervalTime;//[Offset: 0x38c, Size: 0x4]
	SceneComponent* ShuttleRootComponet;//[Offset: 0x390, Size: 0x8]
	ParticleSystem* OccupiedboomAwardParticleRef;//[Offset: 0x398, Size: 0x28]
	ArkSoftSkeletalMeshComponent* ShipSkeletalMesh;//[Offset: 0x3c0, Size: 0x8]
	ArkShuttleStateCurrentInfo StateCurrentInfo;//[Offset: 0x3c8, Size: 0xc]
	ArkShuttleStateCurrentInfo[] StateCatch;//[Offset: 0x3d8, Size: 0x10]
	int ShuttleID;//[Offset: 0x3e8, Size: 0x4]
	int ShuttleIndex;//[Offset: 0x3ec, Size: 0x4]
	FText ShuttleName;//[Offset: 0x3f0, Size: 0x18]
	int Round;//[Offset: 0x408, Size: 0x4]
	ArkShuttleCommonData* CommonData;//[Offset: 0x410, Size: 0x8]
	ArkShuttleReplicatedData* ReplicatedData;//[Offset: 0x418, Size: 0x8]
	FName LeaveStateLightBeamSocket;//[Offset: 0x420, Size: 0x8]
	ParticleSystemComponent* LeaveStateLightBeamComponent;//[Offset: 0x428, Size: 0x8]
	ArkSoftParticleSystemComponent* ControllerCoreComponent;//[Offset: 0x430, Size: 0x8]
	bool bPVEShip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 0x1]
	float Radius;//[Offset: 0x43c, Size: 0x4]
	float[] AddEnergyPerSec;//[Offset: 0x440, Size: 0x10]
	float EnergyMax;//[Offset: 0x450, Size: 0x4]
	float ScanFrequence;//[Offset: 0x454, Size: 0x4]
	float ScanDuration;//[Offset: 0x458, Size: 0x4]
	int Score;//[Offset: 0x45c, Size: 0x4]
	float DelayIncomingSequenceSeconds;//[Offset: 0x460, Size: 0x4]
	float EndNotificationExpireTime;//[Offset: 0x464, Size: 0x4]
	void UpdateShuttleState(enum NewState);// 0x2954ed0
	void StopClientCountDownTimer();// 0x2954eb0
	void StartClientCountDownTimer();// 0x2954e90
	void ShuttleGotoAnimState(enum NewState);// 0x2954e10
	void SetShuttleName(FText NewName);// 0x2954be0
	void SetShuttleIndex(int newIndex);// 0x2954b60
	void SetShuttleID(int NewID);// 0x2954ae0
	void SetRound(int NewRound);// 0x2954600
	void SetOccpuiedAwardData(out const ArkDanoOccupiedPhaseData InOccupiedData);// 0x29544d0
	void SetFixedDirectionOfPlayShow(bool bShouldFix, Rotator NewRotation);// 0x29543f0
	void RegisterShuttle(int TeamId);// 0x2835930
	void OnRep_StateCurrentInfo(ArkShuttleStateCurrentInfo LastInfo);// 0x2954160
	void OnClientCountDownEvent();// 0x2954080
	void MulticastClientOccupiedAwardPlayEffect();// 0x26314b0
	ArkShuttleStateCurrentInfo GetStateInfoFromCatch(enum Type);// 0x2953860
	ArkSoftSkeletalMeshComponent* GetShuttleSkeletalMesh();// 0x2953810
	ArkShuttleShoutComponent* GetShuttleShoutComponent();// 0x29537f0
	ArkShuttleParticleComponent* GetShuttleParticleComponent();// 0x29537d0
	FText GetShuttleName();// 0x29536d0
	int GetShuttleIndex();// 0x29536b0
	int GetShuttleID();// 0x2953690
	ArkShuttleBlastComponent* GetShuttleBlastComponent();// 0x2953670
	ArkShuttleAnimComponent* GetShuttleAnimComponent();// 0x282a640
	int GetRound();// 0x281ff00
	float GetRadius();// 0x2953160
	void GetCurrentCountDownInfo(out float TimeLeft, out float TotalDuration);// 0x2952a30
	void BroadcastGameModeWarningLevelEvent();// 0x2952990
	void BP_OnClientCountDownEvent(enum ShuttleStateType, int CountDownTimer);// 0x305c9c0
	void ActivateShuttleBlast();// 0x29528e0

--------------------------------
Class: ArkShuttleAnimComponent.ArkShuttleLiteComponent.LiteComponent.Object
	enum AnimState;//[Offset: 0xac, Size: 0x1]
	float AnimStartTime;//[Offset: 0xb0, Size: 0x4]
	float AnimRateScale;//[Offset: 0xb4, Size: 0x4]
	float ActionAnimDelaySeconds;//[Offset: 0xb8, Size: 0x4]
	<enum,ShuttleAnimContent> ShuttleAnimMap;//[Offset: 0xc0, Size: 0x50]
	bool ShouldPlayActionAnim();// 0x2954cc0
	void ReceiveAnimStateChanged(enum NewAnimState);// 0x305c9c0
	void PlayAnimByType(enum NewAnimState);// 0x2954370
	void OnShuttleStateChangeEvent(enum LastState, enum NewState, float StartTime, int OwnShuttleID);// 0x2954200
	void OnShuttlerRiseHiddenInGame();// 0x2954350
	void OnRep_AnimState(enum LastAnimState);// 0x29540a0
	void GotoAnimState(enum NewAnimState, float AnimRate);// 0x2953900
	SkeletalMeshComponent* GetSkeletalMesh();// 0x2953830

--------------------------------
Class: ArkShuttleLiteComponent.LiteComponent.Object
	bool IsOwnShuttle(int ShuttleID);// 0x295aa90
	int GetShuttleID();// 0x295a0b0
	ArkShuttleBase* GetOwnerAsShuttle();// 0x2959c40

--------------------------------
Class: ShuttleAnimContent
	ShuttleAnimInfo[] AnimList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ShuttleAnimInfo
	AnimationAsset* AnimAsset;//[Offset: 0x0, Size: 0x8]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: ArkShuttleShoutComponent.ArkShuttleLiteComponent.LiteComponent.Object
	void OnShuttleWasActivatedEvent(int ShuttleID, int TeamId);// 0x295ff80
	void OnShuttleStateChangeEvent(enum LastState, enum NewState, float StartTime, int OwnShuttleID);// 0x295fa60
	void OnActiveVolumeActivateStartEvent(int TeamId, float StartTime, int ShuttleID);// 0x295f220

--------------------------------
Class: ArkShuttleParticleComponent.ArkShuttleLiteComponent.LiteComponent.Object
	int MaterialIndex;//[Offset: 0xa8, Size: 0x4]
	FName LEDProgressName;//[Offset: 0xac, Size: 0x8]
	MaterialInstanceDynamic* LEDDynamicMI;//[Offset: 0xb8, Size: 0x8]
	<int,MaterialInstanceDynamic*> DynamicMaterialMap;//[Offset: 0xc0, Size: 0x50]
	<int,ArkSoftParticleSystemComponentWithPool*> DynamicParticleMap;//[Offset: 0x110, Size: 0x50]
	ArkShuttleDynamicMaterial[] MaterialTriggerList;//[Offset: 0x160, Size: 0x10]
	ArkShuttleDynamicParticle[] ParticleTriggerList;//[Offset: 0x170, Size: 0x10]
	<FName,ArkSoftParticleSystemComponentWithPool*> NotifyParticleMap;//[Offset: 0x180, Size: 0x50]
	void OnTriggerDynamicParticleBP(ArkShuttleDynamicParticle Trigger, ParticleSystemComponent* Particle);// 0x305c9c0
	void OnTriggerDynamicMaterialBP(ArkShuttleDynamicMaterial Trigger, MaterialInstanceDynamic* MI);// 0x305c9c0
	void OnShuttleStateChangeEvent(enum LastState, enum NewState, float StartTime, int OwnShuttleID);// 0x295af50
	SkeletalMeshComponent* GetSkeletalMesh();// 0x295a390

--------------------------------
Class: ArkShuttleDynamicParticle.ArkShuttleEffectBase
	ParticleSystem* TempFX;//[Offset: 0x10, Size: 0x28]
	bool bIsSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	FName SocketName;//[Offset: 0x3c, Size: 0x8]
	Transform Transform;//[Offset: 0x50, Size: 0x30]

--------------------------------
Class: ArkShuttleEffectBase
	enum TriggerState;//[Offset: 0x0, Size: 0x1]
	float TriggerRate;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ArkShuttleDynamicMaterial.ArkShuttleEffectBase
	int MaterialIndex;//[Offset: 0xc, Size: 0x4]
	FName ParameterName;//[Offset: 0x10, Size: 0x8]
	bool bIsScalar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	float ParameterScalar;//[Offset: 0x1c, Size: 0x4]
	LinearColor ParameterVector;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: ArkShuttleBlastComponent.ArkShuttleLiteComponent.LiteComponent.Object
	float PushRadius;//[Offset: 0xac, Size: 0x4]
	float AnimRadius;//[Offset: 0xb0, Size: 0x4]
	float AnimValidSeconds;//[Offset: 0xb4, Size: 0x4]
	bool bAnimAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	bool bStartedWave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool bStartedBlast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	FName KillNpcTag;//[Offset: 0xcc, Size: 0x8]
	float DelayToKillNpc;//[Offset: 0xd4, Size: 0x4]
	void OnRep_StartedWave();// 0x2954140
	void OnRep_StartedBlast();// 0x2954120
	void KillPlayerInShape(ShapeComponent* pShape);// 0x2954000
	void ActivateWave(bool bActive);// 0x2952900
	void ActivateBlast(bool bActive);// 0x2952850

--------------------------------
Class: ArkShuttleNanoDrill.ArkStaticActor.Actor.Object
	CapsuleComponent* DrillCollision;//[Offset: 0x330, Size: 0x8]
	ArkSoftSkeletalMeshComponent* DrillMesh;//[Offset: 0x338, Size: 0x8]
	AnimSequence* SpawnAnimation;//[Offset: 0x340, Size: 0x8]
	AnimSequence* LeaveAnimation;//[Offset: 0x348, Size: 0x8]
	enum CurrentDrillState;//[Offset: 0x350, Size: 0x1]
	ArkShuttleSpawner* LandingSpawner;//[Offset: 0x358, Size: 0x8]
	void SetDrillState(enum NewState);// 0x295b270
	void OnRep_DrillState();// 0x295af10
	void NotifyShuttleStateChange_BP(enum LastState, enum NewState);// 0x305c9c0
	void NotifyDrillStateChange_BP(enum NewState);// 0x305c9c0
	void NotifyDrillEroded();// 0x305c9c0
	ArkShuttleSpawner* GetShuttleSpawner();// 0x295a2e0
	ArkShuttleBase* GetShuttleOwner();// 0x295a2b0

--------------------------------
Class: ArkShuttleSpawner.NavigationObjectBase.Actor.Object
	class Actor* CubeGatherClass;//[Offset: 0x308, Size: 0x8]
	Vector SpawnLocationOffset;//[Offset: 0x310, Size: 0xc]
	float IncomingHeight;//[Offset: 0x31c, Size: 0x4]
	float SpawnedHeight;//[Offset: 0x320, Size: 0x4]
	LevelSequence*[] ShuttleVictorySequences;//[Offset: 0x328, Size: 0x10]
	LevelSequence*[] DrawSequences;//[Offset: 0x338, Size: 0x10]
	LevelSequence* ClientShow;//[Offset: 0x348, Size: 0x8]
	bool bIsSpawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x350, Size: 0x1]
	<int,float> LandingWeights;//[Offset: 0x358, Size: 0x50]
	void SetNavPassable(bool bPassable);// 0x305c9c0
	bool IsSpawned();// 0x295ef00

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8]
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x350, Size: 0x50]
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0x3a0, Size: 0xa0]
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x440, Size: 0x50]
	class Object* DirectorClass;//[Offset: 0x490, Size: 0x8]
	void RemoveMetaDataByClass(class Object InClass);// 0x42d40f0
	Object* FindOrAddMetaDataByClass(class Object InClass);// 0x42d3a60
	Object* FindMetaDataByClass(class Object InClass);// 0x42d3a60
	Object* CopyMetaData(Object* InMetaData);// 0x42d3a60

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 0x50]
	<Guid> AnimSequenceInstances;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 0x18]
	FString ObjectPath;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 0x1c]
	FString ComponentName;//[Offset: 0x20, Size: 0x10]
	Object* CachedComponent;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: ArkDanoOccupiedPhaseData
	int ShuttleRound;//[Offset: 0x0, Size: 0x4]
	float StartTime;//[Offset: 0x4, Size: 0x4]
	float EndTime;//[Offset: 0x8, Size: 0x4]
	float IntervalTime;//[Offset: 0xc, Size: 0x4]
	FName[] LootNameList;//[Offset: 0x10, Size: 0x10]
	FName[] ShareableLootNameList;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: ArkShuttleStateCurrentInfo
	enum State;//[Offset: 0x0, Size: 0x1]
	float StartTime;//[Offset: 0x4, Size: 0x4]
	float PauseSeconds;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ArkShuttleCommonData.ArkGameDataCollection.Object
	Vector ClientStartLocation;//[Offset: 0x7c, Size: 0xc]
	Rotator ClientStartRotation;//[Offset: 0x88, Size: 0xc]
	float ClientStartTime;//[Offset: 0x94, Size: 0x4]
	bool bIsNearPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	TimerHandle CustomTeamHandle;//[Offset: 0xa0, Size: 0x8]
	TimerHandle IncomingCircleHandle;//[Offset: 0xa8, Size: 0x8]
	float Speed;//[Offset: 0xb0, Size: 0x4]
	Vector Direction;//[Offset: 0xb4, Size: 0xc]
	Vector Velocity;//[Offset: 0xfc, Size: 0xc]
	Vector Acceleration;//[Offset: 0x108, Size: 0xc]
	float AccelerationMagnitude;//[Offset: 0x114, Size: 0x4]
	enum ClientMovementState;//[Offset: 0x11c, Size: 0x1]
	LevelSequenceActor* OutActor;//[Offset: 0x120, Size: 0x8]
	bool bShouldFixPlayShowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	Vector FixedDirectionOfPlayShow;//[Offset: 0x134, Size: 0xc]
	ArkAkComponent* AkComponent;//[Offset: 0x140, Size: 0x8]
	int FlyEventID;//[Offset: 0x148, Size: 0x4]
	MaterialInstanceDynamic* ShuttleIndexMaterial;//[Offset: 0x170, Size: 0x8]
	float Progress;//[Offset: 0x188, Size: 0x4]

--------------------------------
Class: LevelSequenceActor.Actor.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x2f8, Size: 0x14]
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x310, Size: 0x8]
	SoftObjectPath LevelSequence;//[Offset: 0x318, Size: 0x18]
	Actor*[] AdditionalEventReceivers;//[Offset: 0x330, Size: 0x10]
	LevelSequenceCameraSettings CameraSettings;//[Offset: 0x340, Size: 0x2]
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x348, Size: 0x8]
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x350, Size: 0x8]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x358, Size: 0x1]
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x358, Size: 0x1]
	bool bReplicatePlayback;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x358, Size: 0x1]
	Object* DefaultInstanceData;//[Offset: 0x360, Size: 0x8]
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x368, Size: 0x8]
	bool bShowBurnin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 0x1]
	void ShowBurnin();// 0x42d47f0
	void SetSequence(LevelSequence* InSequence);// 0x42d4770
	void SetReplicatePlayback(bool ReplicatePlayback);// 0x42d46e0
	void SetEventReceivers(Actor*[] AdditionalReceivers);// 0x42d45a0
	void SetBindingByTag(FName BindingTag, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x42d4380
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x42d4230
	void ResetBindings();// 0x42d4210
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0x42d4160
	void RemoveBindingByTag(FName Tag, Actor* Actor);// 0x42d4030
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0x42d3f40
	void OnLevelSequenceLoaded__DelegateSignature();// 0x305c9c0
	LevelSequence* LoadSequence();// 0x42d3ed0
	void HideBurnin();// 0x42d3eb0
	LevelSequencePlayer* GetSequencePlayer();// 0x42d3e60
	LevelSequence* GetSequence();// 0x42d3e30
	MovieSceneObjectBindingID[] FindNamedBindings(FName Tag);// 0x42d3d00
	MovieSceneObjectBindingID FindNamedBinding(FName Tag);// 0x42d3c50
	void AddBindingByTag(FName BindingTag, Actor* Actor, bool bAllowBindingsFromAsset);// 0x42d3950
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0x42d3810

--------------------------------
Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	delegate OnCameraCut;//[Offset: 0x928, Size: 0x10]
	CameraComponent* GetActiveCameraComponent();// 0x42d3df0
	static LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0x42d3ae0

--------------------------------
Class: MovieSceneSequencePlayer.Object
	delegate OnPlay;//[Offset: 0x410, Size: 0x10]
	delegate OnPlayReverse;//[Offset: 0x420, Size: 0x10]
	delegate OnStop;//[Offset: 0x430, Size: 0x10]
	delegate OnPause;//[Offset: 0x440, Size: 0x10]
	delegate OnFinished;//[Offset: 0x450, Size: 0x10]
	delegate OnCutsceneStarted;//[Offset: 0x4d8, Size: 0x10]
	delegate OnCutsceneFinished;//[Offset: 0x4e8, Size: 0x10]
	byte status;//[Offset: 0x4f9, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4fc, Size: 0x1]
	MovieSceneSequence* Sequence;//[Offset: 0x500, Size: 0x8]
	FrameNumber StartTime;//[Offset: 0x508, Size: 0x4]
	int DurationFrames;//[Offset: 0x50c, Size: 0x4]
	int CurrentNumLoops;//[Offset: 0x510, Size: 0x4]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x528, Size: 0x14]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x540, Size: 0x320]
	MovieSceneSequenceReplProperties NetSyncProps;//[Offset: 0x8c8, Size: 0x10]
	interface class None* PlaybackClient;//[Offset: 0x8d8, Size: 0x10]
	void StopAtCurrentTime();// 0x3fd20a0
	void Stop();// 0x3fd2080
	void SetTimeRange(float StartTime, float Duration);// 0x3fd1fc0
	void SetPlayRate(float PlayRate);// 0x3fd1d00
	void SetPlaybackRange(const float NewStartTime, const float NewEndTime);// 0x3fd1e80
	void SetPlaybackPosition(float NewPlaybackPosition);// 0x3fd1d80
	void SetFrameRate(FrameRate FrameRate);// 0x3fd1c70
	void SetFrameRange(int StartFrame, int Duration);// 0x3fd1bb0
	void SetDisableCameraCuts(bool bInDisableCameraCuts);// 0x3fd1b20
	void ScrubToSeconds(float TimeInSeconds);// 0x3fd14c0
	bool ScrubToMarkedFrame(FString InLabel);// 0x3fd1a70
	void ScrubToFrame(FrameTime NewPosition);// 0x3fd19e0
	void Scrub();// 0x3fd19c0
	void RPC_OnStopEvent(FrameTime StoppedTime);// 0x3fd1930
	void RPC_ExplicitServerUpdateEvent(enum Method, FrameTime RelevantTime);// 0x3fd1860
	void PlayToSeconds(float TimeInSeconds);// 0x3fd17e0
	bool PlayToMarkedFrame(FString InLabel);// 0x3fd1730
	void PlayToFrame(FrameTime NewPosition);// 0x3fd16a0
	void PlayReverse();// 0x3fd1680
	void PlayLooping(int NumLoops);// 0x3fd1600
	void Play();// 0x3fd15e0
	void Pause();// 0x3fd15c0
	void OnNextMovieSceneSequencePlayerEvent__DelegateSignature(MovieSceneSequencePlayer* Player);// 0x305c9c0
	void JumpToSeconds(float TimeInSeconds);// 0x3fd1540
	void JumpToPosition(float NewPlaybackPosition);// 0x3fd14c0
	bool JumpToMarkedFrame(FString InLabel);// 0x3fd1410
	void JumpToFrame(FrameTime NewPosition);// 0x3fd1380
	bool IsReversed();// 0x3fd1350
	bool IsPlaying();// 0x3fd1320
	bool IsPaused();// 0x3fd12f0
	void GoToEndAndStop();// 0x3fd12d0
	QualifiedFrameTime GetStartTime();// 0x3fd1280
	float GetPlayRate();// 0x3fd1020
	float GetPlaybackStart();// 0x3fd11d0
	float GetPlaybackPosition();// 0x3fd10e0
	float GetPlaybackEnd();// 0x3fd1050
	MovieSceneObjectBindingID[] GetObjectBindings(Object* InObject);// 0x3fd0f40
	float GetLength();// 0x3fd0f10
	FrameRate GetFrameRate();// 0x3fd0ef0
	int GetFrameDuration();// 0x3fd0ec0
	QualifiedFrameTime GetEndTime();// 0x3fd0e60
	QualifiedFrameTime GetDuration();// 0x3fd0e20
	bool GetDisableCameraCuts();// 0x3fd0df0
	QualifiedFrameTime GetCurrentTime();// 0x3fd0db0
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x3fd0cb0
	void ChangePlaybackDirection();// 0x3fd0c90

--------------------------------
Class: QualifiedFrameTime
	FrameTime Time;//[Offset: 0x0, Size: 0x8]
	FrameRate Rate;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: MovieSceneSequencePlaybackSettings
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	MovieSceneSequenceLoopCount LoopCount;//[Offset: 0x4, Size: 0x4]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float StartTime;//[Offset: 0xc, Size: 0x4]
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bDisableCameraCuts;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bPauseAtEnd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: MovieSceneSequenceLoopCount
	int Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneRootEvaluationTemplateInstance
	<MovieSceneSequenceID,Object*> DirectorInstances;//[Offset: 0x18, Size: 0x50]

--------------------------------
Class: MovieSceneSequenceReplProperties
	FrameTime LastKnownPosition;//[Offset: 0x0, Size: 0x8]
	byte LastKnownStatus;//[Offset: 0x8, Size: 0x1]
	int LastKnownNumLoops;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: LevelSequenceCameraSettings
	bool bOverrideAspectRatioAxisConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	byte AspectRatioAxisConstraint;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	SoftClassPath BurnInClass;//[Offset: 0x30, Size: 0x18]
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x48, Size: 0x8]
	void SetBurnIn(SoftClassPath InBurnInClass);// 0x42d44b0

--------------------------------
Class: LevelSequenceBurnInInitSettings.Object

--------------------------------
Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingID;//[Offset: 0x0, Size: 0x18]
	Object* Object;//[Offset: 0x18, Size: 0x8]
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x238, Size: 0xb8]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x2f0, Size: 0x8]
	void SetSettings(Object* InSettings);// 0x305c9c0
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0x42d3e90

--------------------------------
Class: LevelSequencePlayerSnapshot
	FString MasterName;//[Offset: 0x0, Size: 0x10]
	QualifiedFrameTime MasterTime;//[Offset: 0x10, Size: 0x10]
	QualifiedFrameTime SourceTime;//[Offset: 0x20, Size: 0x10]
	FString CurrentShotName;//[Offset: 0x30, Size: 0x10]
	QualifiedFrameTime CurrentShotLocalTime;//[Offset: 0x40, Size: 0x10]
	QualifiedFrameTime CurrentShotSourceTime;//[Offset: 0x50, Size: 0x10]
	FString SourceTimecode;//[Offset: 0x60, Size: 0x10]
	CameraComponent* CameraComponent;//[Offset: 0x70, Size: 0x28]
	LevelSequenceSnapshotSettings Settings;//[Offset: 0x98, Size: 0xc]
	LevelSequence* ActiveShot;//[Offset: 0xa8, Size: 0x8]
	MovieSceneSequenceID ShotID;//[Offset: 0xb0, Size: 0x4]

--------------------------------
Class: LevelSequenceSnapshotSettings
	byte ZeroPadAmount;//[Offset: 0x0, Size: 0x1]
	FrameRate FrameRate;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: ArkShuttleReplicatedData.ArkGameDataCollection.Object
	bool bPauseState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	bool bManualPauseState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 0x1]
	float MovementFrequency;//[Offset: 0x60, Size: 0x4]
	ArkShuttleMovementInfo TargetMovement;//[Offset: 0x78, Size: 0x2c]
	ArkShuttleMovementInfo LerpMovement;//[Offset: 0xa4, Size: 0x2c]
	ArkShuttleMovementState MovementState;//[Offset: 0xd0, Size: 0x18]
	ArkDamageArea* DamageArea;//[Offset: 0xe8, Size: 0x8]
	int ActivatedTeamID;//[Offset: 0xf0, Size: 0x4]
	float Energy;//[Offset: 0xf4, Size: 0x4]
	int[] TeamIDsInRadius;//[Offset: 0xf8, Size: 0x10]
	PlayerIDsInRadius(UInt64Property)[] PlayerIDsInRadius;//[Offset: 0x108, Size: 0x10]
	ActivePlayerIDsInRadius(UInt64Property)[] ActivePlayerIDsInRadius;//[Offset: 0x118, Size: 0x10]
	int LastTryActivateTeamID;//[Offset: 0x128, Size: 0x4]
	int CurrentSyncingTeamID;//[Offset: 0x12c, Size: 0x4]
	ArkShuttleInteractiveActor* InteractiveActor;//[Offset: 0x130, Size: 0x8]
	void OnRep_TeamIDsInRadius();// 0x295f8c0
	void OnRep_TargetMovement();// 0x295f8a0
	void OnRep_PlayerIDsInRadius();// 0x295f880
	void OnRep_MovementState();// 0x295f860
	void OnRep_LerpMovement();// 0x295f840
	void OnRep_LastTryActivateTeamID();// 0x295f820
	void OnRep_Energy();// 0x295f800
	void OnRep_CurrentSyncingTeamID();// 0x295f7e0
	void OnRep_ActivatedTeamID();// 0x295f7c0
	void OnRep_AcitvePlayerIDsInRadius();// 0x295f7a0

--------------------------------
Class: ArkShuttleMovementInfo
	Vector TargetLocation;//[Offset: 0x0, Size: 0xc]
	Rotator TargetRotation;//[Offset: 0xc, Size: 0xc]
	float Duration;//[Offset: 0x18, Size: 0x4]
	Vector Direction;//[Offset: 0x1c, Size: 0xc]
	float Speed;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: ArkShuttleMovementState
	enum State;//[Offset: 0x0, Size: 0x1]
	float Duration;//[Offset: 0x4, Size: 0x4]
	float StartTime;//[Offset: 0x8, Size: 0x4]
	Vector OriginLocation;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: ArkDamageArea.Actor.Object
	BillboardComponent* SpriteComponent;//[Offset: 0x2e8, Size: 0x8]
	ArkDamageAreaComponent* DamageAreaComp;//[Offset: 0x2f0, Size: 0x8]
	static ArkDamageArea* SpawnDamageArea(const Object* WorldContext, class ArkDamageArea InTemplate, out const HitResult Hit, Actor* InOwner, float FindFloorDistance, FName SpecialTag);// 0x26f3600

--------------------------------
Class: ArkDamageAreaComponent.ArkShapeAreaComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ArkAIDamageConfig DamageConfig;//[Offset: 0x830, Size: 0x40]
	bool bDisableMultiAreaDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x870, Size: 0x1]
	FName AreaTypeTag;//[Offset: 0x874, Size: 0x8]

--------------------------------
Class: ArkAIDamageConfig
	float Damage;//[Offset: 0x0, Size: 0x4]
	float PercentageDamage;//[Offset: 0x4, Size: 0x4]
	class ArkDamageType* DamageTypeClass;//[Offset: 0x8, Size: 0x8]
	float NpcDamageRate;//[Offset: 0x10, Size: 0x4]
	float SyncNpcDamageRate;//[Offset: 0x14, Size: 0x4]
	float InnerRadius;//[Offset: 0x18, Size: 0x4]
	float OuterRadius;//[Offset: 0x1c, Size: 0x4]
	float DamageFalloff;//[Offset: 0x20, Size: 0x4]
	ArkSplashDamageConfig SplashConfig;//[Offset: 0x28, Size: 0x18]

--------------------------------
Class: ArkSplashDamageConfig
	float Damage;//[Offset: 0x0, Size: 0x4]
	float Range;//[Offset: 0x4, Size: 0x4]
	int MaxVictims;//[Offset: 0x8, Size: 0x4]
	class ArkDamageType* DamageType;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ArkShuttleInteractiveActor.ArkInteractiveActor.ArkStaticActor.Actor.Object
	ArkPlayer* InteractedPlayer;//[Offset: 0x580, Size: 0x8]
	void NotifyShuttleInteracteStoppedBy(ArkCharacterBase* InteractedBy, enum InteractionType, float RemainingTime, bool bCancelled);// 0x295adb0
	void NotifyShuttleInteracteStartedBy(ArkCharacterBase* InteractedBy, enum InteractionType, float Duration);// 0x295acb0

--------------------------------
Class: ArkSwarmEntityLookAtInfo
	bool bIsLookingAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bIsLookingAtActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	Actor* LookAtActor;//[Offset: 0x8, Size: 0x8]
	Vector LookAtLocation;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: ArkAIPerceptionDataArray
	ArkAIPerceptionData[] PerceptionData;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ArkAIPerceptionData
	ArkAIPerceptionEvent LastPerceptionEvent;//[Offset: 0x0, Size: 0x28]
	float LastEventTimeStamp;//[Offset: 0x28, Size: 0x4]
	float LastValidEventTimeStamp;//[Offset: 0x2c, Size: 0x4]
	float AccumulatedMagnitude;//[Offset: 0x30, Size: 0x4]
	float StageLockTimer;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: ArkAIVisualDataForNoise
	Actor* Target;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ArkPatrolSpline.ArkSplineTemplate.Actor.Object
	BillboardComponent* IconSprite;//[Offset: 0x358, Size: 0x8]
	bool bShowSamplePoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 0x1]
	float SampleDisInterval;//[Offset: 0x374, Size: 0x4]
	int SampleNum;//[Offset: 0x378, Size: 0x4]
	class NavigationQueryFilter* NavFilter;//[Offset: 0x380, Size: 0x8]
	bool IsSplineClosedLoop();// 0x2879780
	Vector GetSampledPoint(ArkNpc* Requester, int PointIndex, int OffsetIndex);// 0x2879620
	int GetNumberOfSplinePoints();// 0x28795f0
	Vector GetLocationAtSplinePoint(int PointIndex);// 0x2879550

--------------------------------
Class: ArkSplineTemplate.Actor.Object
	SplineComponent* SplineComponent;//[Offset: 0x2e8, Size: 0x8]
	StaticMesh* splineMesh;//[Offset: 0x2f0, Size: 0x28]
	MaterialInterface* splineMeshMaterial;//[Offset: 0x318, Size: 0x28]
	ArkSoftSplineMeshComponent*[] meshList;//[Offset: 0x340, Size: 0x10]

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x670, Size: 0x70]
	InterpCurveVector SplineInfo;//[Offset: 0x6e0, Size: 0x18]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x6f8, Size: 0x18]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x710, Size: 0x18]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x728, Size: 0x18]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x740, Size: 0x1]
	int ReparamStepsPerSegment;//[Offset: 0x744, Size: 0x4]
	float Duration;//[Offset: 0x748, Size: 0x4]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74c, Size: 0x1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74d, Size: 0x1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74e, Size: 0x1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74f, Size: 0x1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x750, Size: 0x1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x751, Size: 0x1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x752, Size: 0x1]
	float LoopPosition;//[Offset: 0x754, Size: 0x4]
	Vector DefaultUpVector;//[Offset: 0x758, Size: 0xc]
	void UpdateSpline();// 0x4ca41f0
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x4ca4110
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x4ca3fb0
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x4ca3870
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x4ca3df0
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x4ca3c90
	void SetSplineWorldPoints(out const Vector[] Points);// 0x4ca3be0
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x4ca39b0
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x4ca3ab0
	void SetSplineLocalPoints(out const Vector[] Points);// 0x4ca3900
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x4ca3870
	void SetScaleAtSplinePoint(int PointIndex, out const Vector InScaleVector, bool bUpdateSpline);// 0x4ca3760
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x4ca3600
	void SetDrawDebug(bool bShow);// 0x4ca3570
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x4ca3490
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x4ca3380
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x4ca32b0
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x4ca31f0
	bool IsClosedLoop();// 0x4ca31c0
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x4ca3110
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x4ca3020
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x4ca2f70
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x4ca2e80
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x4ca2dd0
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x4ca2d20
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x4ca2c30
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x4ca2b80
	Vector GetVectorPropertyAtSplinePoint(int Index, FName PropertyName);// 0x4ca2ab0
	Vector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x4ca29d0
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4ca28b0
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4ca27e0
	Vector GetUpVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x4ca2700
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4ca2620
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x4ca2490
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x4ca2350
	Transform GetTransformAtSplineInputKey(float InKey, byte CoordinateSpace, bool bUseScale);// 0x4ca2200
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x4ca20b0
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4ca1f90
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4ca0800
	Vector GetTangentAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x4ca1eb0
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4ca1dd0
	byte GetSplinePointType(int PointIndex);// 0x4ca1d40
	float GetSplineLength();// 0x4ca1d10
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x4ca1c30
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x4ca1b90
	Vector GetScaleAtSplineInputKey(float InKey);// 0x4ca1af0
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x4ca1a50
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4ca1930
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4ca1860
	Rotator GetRotationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x4ca1780
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4ca16a0
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4ca1590
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4ca14d0
	float GetRollAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x4ca1400
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4ca1330
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4ca1210
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4ca1140
	Vector GetRightVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x4ca1060
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4ca0f80
	int GetNumberOfSplineSegments();// 0x4ca0f50
	int GetNumberOfSplinePoints();// 0x4ca0f20
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4ca0e00
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4ca0d30
	Vector GetLocationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x4ca0c50
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4ca0b70
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x4ca0a00
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x4ca08d0
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4ca0800
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x4ca0770
	float GetFloatPropertyAtSplinePoint(int Index, FName PropertyName);// 0x4ca06b0
	float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x4ca05e0
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x4ca0550
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4ca0430
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4ca0360
	Vector GetDirectionAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x4ca0280
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4ca01a0
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x4ca0100
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4ca0030
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4c9ff40
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x4c9fdf0
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4c9fd00
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x4c9fc50
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4c9fb60
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4c9fa80
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4c9f990
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4c9f8a0
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x4c9f800
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4c9f710
	void ClearSplinePoints(bool bUpdateSpline);// 0x4c9f680
	void AddSplineWorldPoint(out const Vector Position);// 0x4c9f5e0
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x4c9f480
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x4c9f370
	void AddSplineLocalPoint(out const Vector Position);// 0x4c9f2e0
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x4c9f1e0
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x4c9f0d0

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 0x18]
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 0x18]
	InterpCurveVector Scale;//[Offset: 0x30, Size: 0x18]
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 0x18]
	SplineMetadata* MetaData;//[Offset: 0x60, Size: 0x8]
	UInt32Property Version;//[Size: 0x4]

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 0x4]
	Quat OutVal;//[Offset: 0x10, Size: 0x10]
	Quat ArriveTangent;//[Offset: 0x20, Size: 0x10]
	Quat LeaveTangent;//[Offset: 0x30, Size: 0x10]
	byte InterpMode;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 0x4]
	float OutVal;//[Offset: 0x4, Size: 0x4]
	float ArriveTangent;//[Offset: 0x8, Size: 0x4]
	float LeaveTangent;//[Offset: 0xc, Size: 0x4]
	byte InterpMode;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: SplineMetadata.Object

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 0x4]
	Vector Position;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	Rotator Rotation;//[Offset: 0x28, Size: 0xc]
	Vector Scale;//[Offset: 0x34, Size: 0xc]
	byte Type;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: ArkSoftSplineMeshComponent.SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	StaticMesh* SoftStaticMesh;//[Offset: 0x890, Size: 0x28]
	delegate OnAsyncLoadFinishedDelegate;//[Offset: 0x8b8, Size: 0x10]
	BoxSphereBounds SoftBounds;//[Offset: 0x8ec, Size: 0x1c]
	<int,MaterialInterface*> RuntimeOverrideSoftMaterials;//[Offset: 0x908, Size: 0x50]
	<int,MaterialInterface*> RuntimeOverrideSoftMaterialsCache;//[Offset: 0x958, Size: 0x50]
	void SetRunTimeSoftMaterialsByArray(out const MaterialInterface*[] SkinMaterialConfig);// 0x2968380
	void SetRunTimeSoftMaterials(out const <int,MaterialInterface*> SkinMaterialConfig);// 0x2968090
	void SetRunTimeSoftMaterial(MaterialInterface* SkinMaterial);// 0x2967d80
	void RevertMaterials();// 0x2967730

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams splineParams;//[Offset: 0x7e8, Size: 0x58]
	Vector SplineUpDir;//[Offset: 0x840, Size: 0xc]
	float SplineBoundaryMin;//[Offset: 0x84c, Size: 0x4]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x850, Size: 0x10]
	BodySetup* BodySetup;//[Offset: 0x860, Size: 0x8]
	float SplineBoundaryMax;//[Offset: 0x868, Size: 0x4]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86c, Size: 0x1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x86c, Size: 0x1]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x86c, Size: 0x1]
	byte ForwardAxis;//[Offset: 0x86d, Size: 0x1]
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0x870, Size: 0x4]
	void UpdateMesh();// 0x4ca7bd0
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x4ca7af0
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x4ca7a30
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x4ca7960
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x4ca7880
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x4ca77c0
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x4ca7600
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x4ca7520
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x4ca7250
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x4ca7170
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x4ca70b0
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x4ca6fe0
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x4ca6f00
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x4ca6e40
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x4ca6d70
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x4ca6ca0
	Vector GetStartTangent();// 0x4ca6b30
	Vector2D GetStartScale();// 0x4ca6af0
	float GetStartRoll();// 0x4ca6ac0
	Vector GetStartPosition();// 0x4ca6a80
	Vector2D GetStartOffset();// 0x4ca6a40
	Vector GetSplineUpDir();// 0x4ca6a00
	byte GetForwardAxis();// 0x4ca65f0
	Vector GetEndTangent();// 0x4ca65b0
	Vector2D GetEndScale();// 0x4ca6570
	float GetEndRoll();// 0x4ca6540
	Vector GetEndPosition();// 0x4ca6500
	Vector2D GetEndOffset();// 0x4ca64c0
	float GetBoundaryMin();// 0x4ca63f0
	float GetBoundaryMax();// 0x4ca63c0

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 0xc]
	Vector StartTangent;//[Offset: 0xc, Size: 0xc]
	Vector2D StartScale;//[Offset: 0x18, Size: 0x8]
	float StartRoll;//[Offset: 0x20, Size: 0x4]
	Vector2D StartOffset;//[Offset: 0x24, Size: 0x8]
	Vector EndPos;//[Offset: 0x2c, Size: 0xc]
	Vector2D EndScale;//[Offset: 0x38, Size: 0x8]
	Vector EndTangent;//[Offset: 0x40, Size: 0xc]
	float EndRoll;//[Offset: 0x4c, Size: 0x4]
	Vector2D EndOffset;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: ArkAIReplicatedData.ArkGameDataCollection.Object
	ArkReplicatedTimer DyingTimer;//[Offset: 0xc8, Size: 0x40]
	ArkReplicatedTimer WeakStunTimer;//[Offset: 0x108, Size: 0x40]
	ArkReplicatedTimer LockTargetTimer;//[Offset: 0x148, Size: 0x40]
	ArkReplicatedTimer LifeTimer;//[Offset: 0x188, Size: 0x40]
	ArkAIFallingRagdollRepData FallingRagdollRepData;//[Offset: 0x1c8, Size: 0x18]
	ArkAITaskChangeNetEvent TaskChangeNetEvent;//[Offset: 0x1e0, Size: 0x18]
	ArkAICommandRepData CommandRepData;//[Offset: 0x218, Size: 0x28]
	FName[] OpenedDynamicDamageTakeInfos;//[Offset: 0x240, Size: 0x10]
	<FName,ArkAIDynamicWeakBoneRecord> DynamicWeakBoneRecordMap;//[Offset: 0x260, Size: 0x50]
	enum emotionType;//[Offset: 0x2b0, Size: 0x1]
	Vector PushVector;//[Offset: 0x2b4, Size: 0xc]
	bool bIsCombatTargetVisualLost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1]
	float VisualPerceptionProgress;//[Offset: 0x2c4, Size: 0x4]
	ArkAIControlledRepData ControlledRepData;//[Offset: 0x2c8, Size: 0x20]
	ArkNpc* mOwnerNpc;//[Offset: 0x2e8, Size: 0x8]
	void SetEmotionType(enum emotionType, bool isForceSet);// 0x2657ad0
	void OnRep_WeakStunTimer();// 0x26579b0
	void OnRep_VisualPerceptionProgress(float previousProgress);// 0x2657930
	void OnRep_TaskChangeEvent();// 0x2657910
	void OnRep_PushVector();// 0x26578f0
	void OnRep_OpenedDynamicDamageTakeInfos();// 0x26578d0
	void OnRep_LockTimer();// 0x26578b0
	void OnRep_LifeTimer();// 0x2657890
	void OnRep_FallingRagdollRepData();// 0x2657850
	void OnRep_EmotionType();// 0x2657830
	void OnRep_DyingTimer();// 0x2657810
	void OnRep_ControlledData();// 0x26577f0
	void OnRep_CombatTargetVisualLost();// 0x26577d0
	void OnRep_AICommandRepData();// 0x26577b0
	bool IsThisPlayerOwner(const ArkPlayer* Player);// 0x2657640
	float GetVisualPerceptionProgress();// 0x2657620
	enum GetSyncCommandTargetType();// 0x26575f0
	bool GetIsCombatVisualLost();// 0x26575a0
	enum GetEmotionType();// 0x2657570

--------------------------------
Class: ArkReplicatedTimer
	float RestTime;//[Offset: 0x0, Size: 0x4]
	float mTotalTime;//[Offset: 0x18, Size: 0x4]
	Object* mOwner;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ArkAIFallingRagdollRepData
	ArkCompressedMovement Movement;//[Offset: 0x0, Size: 0x18]

--------------------------------
Class: ArkCompressedMovement
	ArkCompressedTransform Transform;//[Offset: 0x0, Size: 0x10]
	ArkCompressedVelocity Velocity;//[Offset: 0x10, Size: 0x6]

--------------------------------
Class: ArkCompressedVelocity
	int16 Velocity;//[Offset: 0x0, Size: 0x2]

--------------------------------
Class: ArkAITaskChangeNetEvent
	ArkNpc* NpcCharacter;//[Offset: 0x0, Size: 0x8]
	Actor* TargetActor;//[Offset: 0x8, Size: 0x8]
	enum TaskType;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ArkAICommandRepData
	class ArkAICommand* CommandClass;//[Offset: 0x0, Size: 0x8]
	Actor* CommandTarget;//[Offset: 0x8, Size: 0x8]
	float CommandDuration;//[Offset: 0x10, Size: 0x4]
	float CommandRemainTime;//[Offset: 0x14, Size: 0x4]
	bool bInCommand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	int RepCounter;//[Offset: 0x1c, Size: 0x4]
	enum TargetType;//[Offset: 0x20, Size: 0x1]
	float CommandStartTime;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: ArkAIDynamicWeakBoneRecord
	FName UsingCategory;//[Offset: 0x0, Size: 0x8]
	<FName> Categories;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: ArkAIControlledRepData
	enum ControlledState;//[Offset: 0x0, Size: 0x1]
	enum desyncReason;//[Offset: 0x1, Size: 0x1]
	int OwnerTeamID;//[Offset: 0x4, Size: 0x4]
	UInt64Property OwnerPlayerID;//[Size: 0x8]
	byte ForceSyncBit;//[Offset: 0x10, Size: 0x1]
	ArkPlayer* OwnerPlayer;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: ArkNpcBoneInfo
	int[] RelevantMaterialIDs;//[Offset: 0x0, Size: 0x10]
	WeakpointWeakMaskInfo WeakMaskParamInfo;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: WeakpointWeakMaskInfo
	FName WeakMaskParam;//[Offset: 0x0, Size: 0x8]
	int[] MaterialIDs;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ArkNpcPartCollectionInfo
	FName CollectionName;//[Offset: 0x0, Size: 0x8]
	int[] ShowMaterialIDs;//[Offset: 0x8, Size: 0x10]
	int[] HideMaterialIDs;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: GenericTeamId
	byte TeamId;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ArkNpcMaterialDisplayComponent.ArkCharacterLiteComponent.LiteComponent.Object
	<enum,MaterialInstance*> OverridedMats;//[Offset: 0xa8, Size: 0x50]
	enum[] OverridedMatTypes;//[Offset: 0x148, Size: 0x10]
	MaterialInstance*[] CachedMatInstances;//[Offset: 0x158, Size: 0x10]
	<MeshComponent*> CachedMeshComponent;//[Offset: 0x168, Size: 0x50]
	void UnregisterMeshForMaterialOverride(MeshComponent* MeshComp);// 0x28635a0
	void SetVectorParameterValueOnMaterials(MeshComponent* MeshComp, FName ParameterName, out const Vector ParameterValue, out const int[] MaterialIDs, float ValueChangeSpeed);// 0x2863070
	void SetScalarParameterValueOnMaterials(MeshComponent* MeshComp, FName ParameterName, float ParameterValue, out const int[] MaterialIDs, float ValueChangeSpeed);// 0x2862e00
	void SetMaterialDirty();// 0x2862de0
	void RegisterMeshForMaterialOverride(MeshComponent* MeshComp);// 0x2862c50
	void RefreshCachedDefaultMaterial();// 0x2862c30
	void OverrideMaterial(enum OverrideType);// 0x2862b80
	void OnAsyncLoadFinished();// 0xcac2b0
	void ClearOverridenMaterial(enum OverrideType);// 0x2862350

--------------------------------
Class: ArkSimpleMeleeWeapon
	float ValidDistance;//[Offset: 0x0, Size: 0x4]
	float ValidAngle;//[Offset: 0x4, Size: 0x4]
	bool bIsAOE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: ArkShapeMeleeWeapon
	FName CosmeticComponent;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ArkSoftMeleeWeapon
	FName[] WeaponNodes;//[Offset: 0x0, Size: 0x10]
	float WeaponRadius;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ArkGameBuffComponent.ArkCharacterLiteComponent.LiteComponent.Object
	ArkGameBuffContainer BuffContainer;//[Offset: 0x178, Size: 0x120]
	<ArkGameBuff*,float> ClientPendingPurgeBuffs;//[Offset: 0x298, Size: 0x50]
	ArkGameBuff*[] BuffsToBeRemoved;//[Offset: 0x2f0, Size: 0x10]
	<enum,ArkDamageTypeContainer> BuffTypeToDamageType;//[Offset: 0x38e0, Size: 0x50]
	void RemoveBuffByTag(FName InTag);// 0x2748020
	void RemoveBuffByID(int ID);// 0x2747fa0
	void RemoveBuffByClass(class Object BuffClass);// 0x2747f20
	void RemoveBuff(const ArkGameBuff* inBuff);// 0x2747ea0
	void OnOwnerDead(ArkCharacterBase* OwnerCharacter);// 0x2747bf0
	void OnLeaveTargeting(bool bClientSimulation);// 0x2747b60
	void OnEnterTargeting(bool bClientSimulation);// 0x2747990
	ArkGameBuff*[] GetBuffsByTag(FName Tag, bool bValid);// 0x2747600
	ArkGameBuff*[] GetBuffsByEffectType(enum EffectType);// 0x2747530
	int GetBuffCountByID(int InBuffID);// 0x27474a0
	int GetBuffCount(class ArkGameBuff inBuffClass);// 0x2747410
	ArkGameBuff*[] GetAllBuffs();// 0x2747370
	ArkGameBuff* FindBuff(class ArkGameBuff inBuffClass);// 0x27472e0
	void ConsumeBuff(ArkGameBuff* inBuff, int ConsumeAmount);// 0x2747220
	void ClientPurgeBuff(ArkGameBuff* inBuff);// 0x27471a0
	void ClientDeactiveAllBuff();// 0x2747180
	void ClientActiveAllBuff();// 0x2747160
	float CalcValueByParamCache(enum EffectType, float BaseValue);// 0x2747090
	ArkGameBuff* AddBuffWithSpec(ArkBuffSpec BuffSpec);// 0x2746fe0
	ArkGameBuff*[] AddBuffByIDArray(int[] IDArray, ArkCharacterBase* Instigator, bool FromTrans, ArkItemSyncChip* Chip);// 0x2746e10
	ArkGameBuff* AddBuffByID(int ID, ArkCharacterBase* Instigator, bool FromTrans, ArkItemSyncChip* Chip);// 0x2746cb0
	ArkGameBuff* AddBuff(class ArkGameBuff inBuffClass, ArkCharacterBase* Instigator, bool FromTrans, ArkItemSyncChip* Chip);// 0x2746b50
	ArkGameBuff* ActiveDerivativeBuff(ArkGameBuff* OriginBuff);// 0x2746ac0

--------------------------------
Class: ArkGameBuffContainer.FastArraySerializer
	ArkBuffEntry[] Buffs;//[Offset: 0x108, Size: 0x10]
	ArkGameBuffComponent* BuffComponent;//[Offset: 0x118, Size: 0x8]

--------------------------------
Class: ArkBuffEntry.FastArraySerializerItem
	ArkGameBuff* Buff;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ArkDamageTypeContainer
	class ArkDamageType[] DamageClassArray;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ArkBuffSpec
	Object* Causer;//[Offset: 0x0, Size: 0x8]
	int Level;//[Offset: 0x8, Size: 0x4]
	class ArkGameBuff* BuffClass;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ArkBuffEffect
	enum EffectType;//[Offset: 0x0, Size: 0x1]
	enum DamageSubType;//[Offset: 0x1, Size: 0x1]
	enum CalculationMethod;//[Offset: 0x2, Size: 0x1]
	float EffectValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ArkAttrEffect.Object

--------------------------------
Class: ArkEffect.Object
	int Execute(ArkCharacterBase* CauserCharacter, ArkCharacterBase* TargetCharacter, const Object* inSpecialParam);// 0x2713b30

--------------------------------
Class: ArkBuffDamageEffect
	class ArkDamageType[] ApplicableDamageTypes;//[Offset: 0x0, Size: 0x10]
	enum[] ApplicableDamageTags;//[Offset: 0x10, Size: 0x10]
	enum[] ApplicableElementTypes;//[Offset: 0x20, Size: 0x10]
	GameplayTagContainer ApplicableTargets;//[Offset: 0x30, Size: 0x20]
	GameplayTagContainer ApplicableInstigators;//[Offset: 0x50, Size: 0x20]
	enum CalculationMethod;//[Offset: 0x70, Size: 0x1]
	int WeakPointPolicy;//[Offset: 0x74, Size: 0x4]
	int CriticalPolicy;//[Offset: 0x78, Size: 0x4]
	float EffectValue;//[Offset: 0x7c, Size: 0x4]

--------------------------------
Class: BuffConditionExpression
	enum TargetType;//[Offset: 0x0, Size: 0x1]
	enum Subject;//[Offset: 0x1, Size: 0x1]
	enum Op;//[Offset: 0x2, Size: 0x1]
	float Value;//[Offset: 0x4, Size: 0x4]
	FName[] Tags;//[Offset: 0x8, Size: 0x10]
	class Object[] Classes;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ArkGameBuffEffectCondition.Object
	BuffConditionExpression[] Conditions;//[Offset: 0x28, Size: 0x10]
	ArkGameBuff* OwnerBuff;//[Offset: 0x40, Size: 0x8]
	void OnTakeDamage(ArkCharacterBase* Character, out const TakeHitInfo HitInfo);// 0x274fae0
	void OnTagsChanged(ArkCharacterBase* ArkChar, bool bAddOrRemove, FName ModifiedTag);// 0x274f9e0
	void OnSyncedNanoStateChanged();// 0x274f9c0
	void OnSyncArmStateChange(ArkNpc* NPC, bool bInSyncArm);// 0x274f8f0
	void OnPlayerCombatStateChange(ArkPlayer* Player, bool bInCombat);// 0x274f820
	void OnItemCountChanged(int ItemUID, int ItemId, int OldCount, int NewCount);// 0x274f6e0
	void OnHealthChanged(ArkCharacterBase* Character, float OldHealth, float NewHealth);// 0x274f5e0
	void OnDyingRecoverStateChange(ArkNpc* NPC, bool bNewState);// 0x274f510
	void OnCharStateChanged(ArkCharacterBase* Character, enum OldCharacterState, enum CharacterState);// 0x274f410
	void OnBuffChanged();// 0x274f3f0
	void OnBuffAdded(ArkGameBuff* AddedBuff);// 0x274f370
	void OnBodyPartDestroyed(ArkNpc* NPC, out const ArkNpcDestroyableBodyPart BodyPart);// 0x274f230
	void OnAnySyncChipEquipped(bool bAnyChipEquipped);// 0x274f1a0
	void OnAITaskChange(ArkNpc* NPC, enum NewTask);// 0x274f0e0
	void OnAICommandChange(ArkNpc* NPC, out const ArkAICommandRepData CommandData);// 0x274f000
	void MarkConditionDirty();// 0x274efe0
	bool IsEffectEnable(const ArkGameBuff* Buff);// 0x26eb260
	bool IsBuffApplicable(out const class ArkGameBuff BuffClass);// 0x274ef40

--------------------------------
Class: ArkNpcDestroyableBodyPart
	FName[] BoneNames;//[Offset: 0x0, Size: 0x10]
	int MaxHealthPercent;//[Offset: 0x10, Size: 0x4]
	int BrokenDamagePercent;//[Offset: 0x14, Size: 0x4]
	int MaxHealthOwnerCanHaveAfterBroken;//[Offset: 0x18, Size: 0x4]
	class ArkDamageType* BrokenDamageType;//[Offset: 0x20, Size: 0x8]
	FName Tag;//[Offset: 0x28, Size: 0x8]
	bool bBreakCurrentAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	AnimMontage* BrokenMontage;//[Offset: 0x38, Size: 0x8]
	FName BrokenFX_OneShot;//[Offset: 0x40, Size: 0x8]
	FName BrokenFX_Loop;//[Offset: 0x48, Size: 0x8]
	AkAudioEvent* BrokenSound;//[Offset: 0x58, Size: 0x28]

--------------------------------
Class: DamageEvent
	class DamageType* DamageTypeClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ArkBuffClassOrID
	class ArkGameBuff* BuffClass;//[Offset: 0x0, Size: 0x8]
	int BuffID;//[Offset: 0x8, Size: 0x4]
	float Probability;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ArkAICommandConfig
	enum CommandType;//[Offset: 0x0, Size: 0x1]
	FText CommandName;//[Offset: 0x8, Size: 0x18]
	float Duration;//[Offset: 0x20, Size: 0x4]
	class ArkAICommand* CommandClass;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ArkAIExtraAbilityBuff
	enum AbilityBuffType;//[Offset: 0x0, Size: 0x1]
	ArkBuffClassOrID AbilityBuff;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0x220, Size: 0x4]
	float MaxSpeed;//[Offset: 0x224, Size: 0x4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1]
	bool bRotationRemainsVertical;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 0x1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 0x1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x228, Size: 0x1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x228, Size: 0x1]
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x228, Size: 0x1]
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x228, Size: 0x1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x228, Size: 0x1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x229, Size: 0x1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x229, Size: 0x1]
	bool bInterpMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x229, Size: 0x1]
	bool bInterpRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x229, Size: 0x1]
	float PreviousHitTime;//[Offset: 0x22c, Size: 0x4]
	Vector PreviousHitNormal;//[Offset: 0x230, Size: 0xc]
	float ProjectileGravityScale;//[Offset: 0x23c, Size: 0x4]
	float Buoyancy;//[Offset: 0x240, Size: 0x4]
	float Bounciness;//[Offset: 0x244, Size: 0x4]
	float Friction;//[Offset: 0x248, Size: 0x4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x24c, Size: 0x4]
	float MinFrictionFraction;//[Offset: 0x250, Size: 0x4]
	delegate OnProjectileBounce;//[Offset: 0x258, Size: 0x10]
	delegate OnProjectileStop;//[Offset: 0x268, Size: 0x10]
	float HomingAccelerationMagnitude;//[Offset: 0x278, Size: 0x4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x27c, Size: 0x8]
	float MaxSimulationTimeStep;//[Offset: 0x284, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x288, Size: 0x4]
	int BounceAdditionalIterations;//[Offset: 0x28c, Size: 0x4]
	float InterpLocationTime;//[Offset: 0x290, Size: 0x4]
	float InterpRotationTime;//[Offset: 0x294, Size: 0x4]
	float InterpLocationMaxLagDistance;//[Offset: 0x298, Size: 0x4]
	float InterpLocationSnapToTargetDistance;//[Offset: 0x29c, Size: 0x4]
	void StopSimulating(out const HitResult HitResult);// 0x4c7a750
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x4c7a6c0
	void SetInterpolatedComponent(SceneComponent* Component);// 0x4c7a4b0
	void ResetInterpolation();// 0x4b59130
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x305c9c0
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x305c9c0
	void MoveInterpolationTarget(out const Vector NewLocation, out const Rotator NewRotation);// 0x4c7a1c0
	Vector LimitVelocity(Vector NewVelocity);// 0x4c7a110
	bool IsVelocityUnderSimulationThreshold();// 0x4c7a0b0
	bool IsInterpolationComplete();// 0x4c7a080

--------------------------------
Class: RadialDamageParams
	float BaseDamage;//[Offset: 0x0, Size: 0x4]
	float MinimumDamage;//[Offset: 0x4, Size: 0x4]
	float InnerRadius;//[Offset: 0x8, Size: 0x4]
	float OuterRadius;//[Offset: 0xc, Size: 0x4]
	float DamageFalloff;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ArkProjectileAttachData
	PrimitiveComponent* AttachParent;//[Offset: 0x0, Size: 0x8]
	FName BoneName;//[Offset: 0x8, Size: 0x8]
	Vector HitNormal;//[Offset: 0x10, Size: 0xc]
	Vector RelativeLocation;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: ArkExplosionEffect.Actor.Object
	float ExplosionLightFadeOut;//[Offset: 0x308, Size: 0x4]
	AkAudioEvent* AkExplosionSound;//[Offset: 0x310, Size: 0x28]
	float ExplosionSoundDelay_Min;//[Offset: 0x338, Size: 0x4]
	AkAudioEvent* AkBlastWaveSound;//[Offset: 0x340, Size: 0x8]
	float BlastWaveRadius;//[Offset: 0x348, Size: 0x4]
	float BlastWaveDuration;//[Offset: 0x34c, Size: 0x4]
	ArkExploImpactConfig ImpactConfig;//[Offset: 0x350, Size: 0x68]
	ArkExplosionEffectConfig[] Effects;//[Offset: 0x3b8, Size: 0x10]
	PointLightComponent* ExplosionLight;//[Offset: 0x3d8, Size: 0x8]
	HitResult SurfaceHit;//[Offset: 0x3e0, Size: 0x88]
	ArkPhysicalMaterial* PhysicalMaterial;//[Offset: 0x470, Size: 0x8]
	bool bAffectedByCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x485, Size: 0x1]
	static ArkExplosionEffect* SpawnArkExplosionEffect(Actor* ExplodingActor, ArkCharacterBase* ExplosionInstigator, class ArkExplosionEffect EffectTemplate, out const HitResult HitResult, float TimeSinceFire);// 0x271e680

--------------------------------
Class: ArkExploImpactConfig
	AkAudioEvent* ImpactSound;//[Offset: 0x0, Size: 0x28]
	AkAudioEvent* ImpactExtraSound;//[Offset: 0x28, Size: 0x28]
	float MaxRadius;//[Offset: 0x50, Size: 0x4]
	float ShapeLength;//[Offset: 0x54, Size: 0x4]
	ArkExploImpactExtraSound[] ExtraSoundConfigs;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: ArkExploImpactExtraSound
	AkSwitchValue*[] MaterialSwitches;//[Offset: 0x0, Size: 0x10]
	Vector Offset;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: ArkExplosionEffectConfig
	ParticleSystem* ExplosionFX;//[Offset: 0x0, Size: 0x28]
	ArkParticleModifier ExplosionFXModifier;//[Offset: 0x28, Size: 0x68]
	float LightScale;//[Offset: 0x90, Size: 0x4]
	Color LightColor;//[Offset: 0x94, Size: 0x4]
	bool bUseLocalRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	DecalData Decal;//[Offset: 0xa0, Size: 0x40]

--------------------------------
Class: PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bFillLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 0x1]
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x52c, Size: 0x1]
	bool bFallbackToSpotLight;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x52c, Size: 0x1]
	int Direction;//[Offset: 0x530, Size: 0x4]
	float LightFalloffExponent;//[Offset: 0x534, Size: 0x4]
	float SourceRadius;//[Offset: 0x538, Size: 0x4]
	float SoftSourceRadius;//[Offset: 0x53c, Size: 0x4]
	float SourceLength;//[Offset: 0x540, Size: 0x4]
	Texture2D* PrecachedShadowMap;//[Offset: 0x548, Size: 0x28]
	void SetSourceRadius(float bNewValue);// 0x4c70770
	void SetSourceLength(float NewValue);// 0x4c706f0
	void SetSoftSourceRadius(float bNewValue);// 0x4c70670
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x4c704f0
	void SetFillLight(bool B);// 0x4c703e0

--------------------------------
Class: LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	enum IntensityUnits;//[Offset: 0x508, Size: 0x1]
	float Radius;//[Offset: 0x50c, Size: 0x4]
	float AttenuationRadius;//[Offset: 0x510, Size: 0x4]
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x514, Size: 0xc]
	bool bCacheFoliage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 0x1]
	void SetIntensityUnits(enum NewIntensityUnits);// 0x4c25b60
	void SetAttenuationRadius(float NewRadius);// 0x4c258a0
	static float GetUnitsConversionFactor(enum SrcUnits, enum TargetUnits, float CosHalfConeAngle);// 0x4c25650

--------------------------------
Class: LightmassPointLightSettings.LightmassLightSettings

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 0x4]
	float ShadowExponent;//[Offset: 0x4, Size: 0x4]
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: ArkPhysicalMaterial.PhysicalMaterial.Object
	AkSwitchValue* AkSwitchValue;//[Offset: 0x80, Size: 0x28]

--------------------------------
Class: ExplodeInfo
	bool bCanExplode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bExploded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bStopByWorldStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	HitResult HitResult;//[Offset: 0x4, Size: 0x88]

--------------------------------
Class: PhysicalSimulateInfo
	Vector Position;//[Offset: 0x0, Size: 0xc]
	Vector Velocity;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: ArkPlayerDeathDecalInfo
	float LifeSpan;//[Offset: 0x0, Size: 0x4]
	Vector DecalSize;//[Offset: 0x4, Size: 0xc]
	MaterialInterface* PlayerDeathDecalMaterial;//[Offset: 0x10, Size: 0x28]

--------------------------------
Class: WeaponExtraParticleInfo
	ParticleSystem* ParticleEffect;//[Offset: 0x0, Size: 0x28]
	Transform RelativeTrans;//[Offset: 0x30, Size: 0x30]
	FName AttachSocket;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: ArkItemWeaponPlugin.ArkItem.Object
	ArkWeaponPluginEffect[] PluginEffects;//[Offset: 0x98, Size: 0x10]
	enum PluginType;//[Offset: 0xa8, Size: 0x1]
	PluginMeshInfo MeshInfo;//[Offset: 0xb0, Size: 0x78]
	PluginMeshInfo FppMeshInfo;//[Offset: 0x128, Size: 0x78]
	SpecificPluginMeshInfo[] SpecificSkeletalMeshInfoList;//[Offset: 0x1a0, Size: 0x10]
	ArkWeaponPluginEffectSpecial[] SpPluginEffects;//[Offset: 0x1b0, Size: 0x10]
	<FName,ArkWeaponPluginHideBoneInfoSpecial> SpPluginHideBones;//[Offset: 0x260, Size: 0x50]
	PaperSprite* TipsIcon;//[Offset: 0x2b0, Size: 0x28]
	enum ScopeType;//[Offset: 0x2d8, Size: 0x1]
	ParticleSystem* AdsCautionFX;//[Offset: 0x2e0, Size: 0x28]
	FName AdsCautionSocket;//[Offset: 0x308, Size: 0x8]
	bool bOverrideAimAmmoDisplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	FName AimAmmoDisplayRefSocket;//[Offset: 0x314, Size: 0x8]
	Vector AimAmmoDisplayOffset_Aiming;//[Offset: 0x31c, Size: 0xc]
	float AdsNonBreathHoldingAdditiveAnimAhplaScale;//[Offset: 0x328, Size: 0x4]
	float AdsNonBreathHoldingAdditiveAnimSpeedScale;//[Offset: 0x32c, Size: 0x4]
	float AdsReloadingAnimScale;//[Offset: 0x330, Size: 0x4]
	float[] AdsReloadingAnimSpecialScaleList;//[Offset: 0x338, Size: 0x10]

--------------------------------
Class: ArkWeaponPluginEffect
	enum EffectType;//[Offset: 0x0, Size: 0x1]
	enum CalculationMethod;//[Offset: 0x1, Size: 0x1]
	float EffectValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PluginMeshInfo
	SkeletalMesh* PluginSkeletalMesh;//[Offset: 0x0, Size: 0x28]
	StaticMesh* PluginStaticMesh;//[Offset: 0x28, Size: 0x28]
	FName AttachSocket;//[Offset: 0x50, Size: 0x8]
	Vector AttachScale;//[Offset: 0x58, Size: 0xc]
	FName[] HiddenBoneName;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: SpecificPluginMeshInfo
	FName WeaponName;//[Offset: 0x0, Size: 0x8]
	PluginMeshInfo MeshInfo;//[Offset: 0x8, Size: 0x78]
	PluginMeshInfo FppMeshInfo;//[Offset: 0x80, Size: 0x78]

--------------------------------
Class: ArkWeaponPluginEffectSpecial
	FName WeaponName;//[Offset: 0x0, Size: 0x8]
	ArkWeaponPluginEffect[] SpPluginEffects;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ArkWeaponPluginHideBoneInfoSpecial
	FName[] HideBoneList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ArkSoftDecalComponentWithPool.ArkSoftDecalComponent.DecalComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: DecalSpecialInfo
	Transform DecalTrans;//[Offset: 0x0, Size: 0x30]
	Vector DecalSize;//[Offset: 0x30, Size: 0xc]

--------------------------------
Class: ArkWeaponPluginsInfo
	int WeaponId;//[Offset: 0x0, Size: 0x4]
	int Skin;//[Offset: 0x4, Size: 0x4]
	int SkinLevel;//[Offset: 0x8, Size: 0x4]
	int Pendant;//[Offset: 0xc, Size: 0x4]
	int Decal;//[Offset: 0x10, Size: 0x4]
	int GunTech;//[Offset: 0x14, Size: 0x4]
	int GunTechLevel;//[Offset: 0x18, Size: 0x4]
	int[] Accessories;//[Offset: 0x20, Size: 0x10]
	int NdmID;//[Offset: 0x30, Size: 0x4]
	int[] NdmIDArray;//[Offset: 0x38, Size: 0x10]
	float[] NdmEffectArray;//[Offset: 0x48, Size: 0x10]
	bool InHaven;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	int Durability;//[Offset: 0x5c, Size: 0x4]
	int[] GuntechBuffList;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: ArkNDMBuffEffectInfo
	ArkNDMBuffEffectTableRow row;//[Offset: 0x0, Size: 0xf0]
	float Value;//[Offset: 0xf0, Size: 0x4]
	ArkGameBuff*[] buffList;//[Offset: 0xf8, Size: 0x10]

--------------------------------
Class: ArkNDMBuffEffectTableRow.TableRowBase
	int NDMEffectID;//[Offset: 0x8, Size: 0x4]
	float MinEffectValue;//[Offset: 0xc, Size: 0x4]
	float MaxEffectValue;//[Offset: 0x10, Size: 0x4]
	enum NdmBuffCondition;//[Offset: 0x14, Size: 0x1]
	int[] NDMBuffID;//[Offset: 0x18, Size: 0x10]
	class ArkGameBuff[] NDMBuffList;//[Offset: 0x28, Size: 0x10]
	ArkWeaponPluginEffect[] NDMEffect;//[Offset: 0x38, Size: 0x10]
	enum[] WeaponTypeBlackList;//[Offset: 0x48, Size: 0x10]
	class Object[] WeaponClassBlackList;//[Offset: 0x58, Size: 0x10]
	enum[] WeaponTypeWhiteList;//[Offset: 0x68, Size: 0x10]
	class Object[] WeaponClassWhiteList;//[Offset: 0x78, Size: 0x10]
	enum PoolQuality;//[Offset: 0x88, Size: 0x1]
	FText NDMEffectName;//[Offset: 0x90, Size: 0x18]
	FText NDMEffectDes;//[Offset: 0xa8, Size: 0x18]
	PaperSprite* NDMEffectIcon;//[Offset: 0xc0, Size: 0x28]
	int NDMEffectWeight;//[Offset: 0xe8, Size: 0x4]
	bool FirstSocketAvaliable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 0x1]
	bool SecondSocketAvaliable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed, Size: 0x1]
	bool ThirdSocketAvaliable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee, Size: 0x1]
	enum NDMGameMode;//[Offset: 0xef, Size: 0x1]

--------------------------------
Class: ArkGunTechBase.ArkItemWeaponPlugin.ArkItem.Object
	bool bOverrideProjectile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 0x1]
	class ArkProjectileBulletBase* OverrideProjectile;//[Offset: 0x350, Size: 0x8]
	bool bOverrideBulletSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	float OverrideBulletSpeed;//[Offset: 0x35c, Size: 0x4]
	bool bOverrideShotGunFireCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	int OverrideShotGunFireCount;//[Offset: 0x364, Size: 0x4]
	bool bSpawnActorOnHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1]
	class Actor* SpawnActorOnHit;//[Offset: 0x370, Size: 0x8]
	bool bDistanceDmgReduce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 0x1]
	CurveFloat* DistanceDmgReduce;//[Offset: 0x380, Size: 0x8]
	bool bOverrideWeaponRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 0x1]
	float OverrideWeaponRange;//[Offset: 0x38c, Size: 0x4]
	bool bOverrideWeaponFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	enum OverrideWeaponFireMode;//[Offset: 0x391, Size: 0x1]
	bool bAllowLoopedSingleFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x392, Size: 0x1]
	bool bOverrideWeaponBurstShots;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x393, Size: 0x1]
	float OverrideWeaponBurstShots;//[Offset: 0x394, Size: 0x4]
	bool bOverrideWeaponBurstDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 0x1]
	float OverrideWeaponBurstDelay;//[Offset: 0x39c, Size: 0x4]
	bool bOverrideCrosshairWidgetClass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]
	class ArkCrosshairWidget* OverrideCrosshairWidgetClass;//[Offset: 0x3a8, Size: 0x8]
	bool bOverrideDamageType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 0x1]
	class DamageType* OverrideDamageType;//[Offset: 0x3b8, Size: 0x8]
	bool bWeaponSpreadModifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 0x1]
	float WeaponSpreadModifier;//[Offset: 0x3c4, Size: 0x4]
	bool bOverrideWeaponDamageKnockRatioModifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 0x1]
	float OverrideWeaponDamageKnockRatioModifier;//[Offset: 0x3cc, Size: 0x4]
	bool bOverrideBulletDamageType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 0x1]
	class DamageType* OverrideBulletDamageType;//[Offset: 0x3d8, Size: 0x8]
	bool bTickWeaponInInventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 0x1]
	bool bDisableFirstBulletSpread;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e1, Size: 0x1]
	bool bDisableReloadWhenFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e2, Size: 0x1]
	bool bSpawnHitImpactForAllBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e3, Size: 0x1]
	int[] BuffIDListOnEquip;//[Offset: 0x3e8, Size: 0x10]
	float tempFiringTime;//[Offset: 0x3f8, Size: 0x4]
	int GunTechID;//[Offset: 0x3fc, Size: 0x4]
	int[] BuffItemIDList;//[Offset: 0x400, Size: 0x10]
	Texture2D* GunTechIcon;//[Offset: 0x410, Size: 0x28]
	bool bOverrideFireSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 0x1]
	AkAudioEvent* AkFireSound;//[Offset: 0x440, Size: 0x8]
	AkAudioEvent* AkFireFinishSound;//[Offset: 0x448, Size: 0x8]
	AkAudioEvent* AkFireSound_3P;//[Offset: 0x450, Size: 0x8]
	AkAudioEvent* AkFireFinishSound_3P;//[Offset: 0x458, Size: 0x8]
	AkAudioEvent* AkFireSilencerSound;//[Offset: 0x460, Size: 0x8]
	AkAudioEvent* AkFireSilencerFinishSound;//[Offset: 0x468, Size: 0x8]
	AkAudioEvent* AkFireSilencerSound_3P;//[Offset: 0x470, Size: 0x8]
	AkAudioEvent* AkFireSilencerFinishSound_3P;//[Offset: 0x478, Size: 0x8]
	bool bOverrideImpactSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 0x1]
	bool bAppendImpactSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x481, Size: 0x1]
	AkAudioEvent* AkImpactSound;//[Offset: 0x488, Size: 0x28]
	AkAudioEvent* AkImpactSoundCritical;//[Offset: 0x4b0, Size: 0x28]
	AkAudioEvent* AkImpactSound1P;//[Offset: 0x4d8, Size: 0x28]
	AkAudioEvent* AkImpactSound1PCritical;//[Offset: 0x500, Size: 0x28]
	bool bOverrideMuzzleFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 0x1]
	ParticleSystem* MuzzleFXTpp;//[Offset: 0x530, Size: 0x28]
	ParticleSystem* MuzzleFXAds;//[Offset: 0x558, Size: 0x28]
	ParticleSystem* MuzzleBrakeFXTpp;//[Offset: 0x580, Size: 0x28]
	ParticleSystem* MuzzleBrakeFXAds;//[Offset: 0x5a8, Size: 0x28]
	ParticleSystem* MuzzleSilencerFXTpp;//[Offset: 0x5d0, Size: 0x28]
	ParticleSystem* MuzzleSilencerFXAds;//[Offset: 0x5f8, Size: 0x28]
	void ClientPreAllocateProjectiles();// 0x260b8d0

--------------------------------
Class: ArkProjectileBulletBase.ArkProjectileBase.Actor.Object
	bool bDeferredLaunching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x691, Size: 0x1]
	class Actor* DebugBulletHitActor;//[Offset: 0x698, Size: 0x28]
	void SetBulletSpeed(float Speed);// 0x2906930

--------------------------------
Class: ArkCrosshairWidget.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	CanvasPanel* RootPanel;//[Offset: 0x300, Size: 0x8]
	Border* CrosshairDefaultBorder;//[Offset: 0x308, Size: 0x8]
	CanvasPanel* CrosshairDefault;//[Offset: 0x310, Size: 0x8]
	Image* CrosshairDefaultC;//[Offset: 0x318, Size: 0x8]
	Image* CrosshairDefaultL;//[Offset: 0x320, Size: 0x8]
	Image* CrosshairDefaultR;//[Offset: 0x328, Size: 0x8]
	Image* CrosshairDefaultU;//[Offset: 0x330, Size: 0x8]
	Image* CrosshairDefaultD;//[Offset: 0x338, Size: 0x8]
	CanvasPanel* CrosshairKill;//[Offset: 0x340, Size: 0x8]
	Image* CrosshairKillL;//[Offset: 0x348, Size: 0x8]
	Image* CrosshairKillR;//[Offset: 0x350, Size: 0x8]
	Image* CrosshairKillU;//[Offset: 0x358, Size: 0x8]
	Image* CrosshairKillD;//[Offset: 0x360, Size: 0x8]
	CanvasPanel* CrosshairHit;//[Offset: 0x368, Size: 0x8]
	Image* CrosshairHitLU;//[Offset: 0x370, Size: 0x8]
	Image* CrosshairHitRU;//[Offset: 0x378, Size: 0x8]
	Image* CrosshairHitRD;//[Offset: 0x380, Size: 0x8]
	Image* CrosshairHitLD;//[Offset: 0x388, Size: 0x8]
	CanvasPanel* CrosshairHit_WP;//[Offset: 0x390, Size: 0x8]
	Image* CrosshairHitLU_WP;//[Offset: 0x398, Size: 0x8]
	Image* CrosshairHitRU_WP;//[Offset: 0x3a0, Size: 0x8]
	Image* CrosshairHitRD_WP;//[Offset: 0x3a8, Size: 0x8]
	Image* CrosshairHitLD_WP;//[Offset: 0x3b0, Size: 0x8]
	Image* CrosshairOpeningShot;//[Offset: 0x3b8, Size: 0x8]
	Image* CrosshairForbid;//[Offset: 0x3c0, Size: 0x8]
	Image* CrosshairForbidForDyingPlayer;//[Offset: 0x3c8, Size: 0x8]
	Image* CrosshairMuzzleHit;//[Offset: 0x3d0, Size: 0x8]
	CanvasPanel* ShieldBrokenPanel;//[Offset: 0x3d8, Size: 0x8]
	CanvasPanel* ShieldPanel;//[Offset: 0x3e0, Size: 0x8]
	Image* CrosshairStorageL;//[Offset: 0x3e8, Size: 0x8]
	Image* CrosshairStorageR;//[Offset: 0x3f0, Size: 0x8]
	Image* CrosshairStorageL_BG;//[Offset: 0x3f8, Size: 0x8]
	Image* CrosshairStorageR_BG;//[Offset: 0x400, Size: 0x8]
	float SmoothSpreadSpeed;//[Offset: 0x408, Size: 0x4]
	float SpreadBaseOffset;//[Offset: 0x40c, Size: 0x4]
	float CrosshairHitSpreadScale;//[Offset: 0x410, Size: 0x4]
	float CrosshairHitSpreadScale_Targeting;//[Offset: 0x414, Size: 0x4]
	float CrosshairHitSpreadScale_Ads;//[Offset: 0x418, Size: 0x4]
	float CrosshairHitRollAngleMin;//[Offset: 0x41c, Size: 0x4]
	float CrosshairHitRollAngleMax;//[Offset: 0x420, Size: 0x4]
	float CrosshairHitRollDuration;//[Offset: 0x424, Size: 0x4]
	float CrosshairHitSpreadOffsetMin;//[Offset: 0x428, Size: 0x4]
	float CrosshairHitFadeOutTime;//[Offset: 0x42c, Size: 0x4]
	float CrosshairKillFadeOutTime;//[Offset: 0x430, Size: 0x4]
	float CrosshairDefaultShowTime;//[Offset: 0x434, Size: 0x4]
	float CrosshairDefaultHideTime;//[Offset: 0x438, Size: 0x4]
	float ShieldBrokenTime;//[Offset: 0x43c, Size: 0x4]
	float ShieldHittedTime;//[Offset: 0x440, Size: 0x4]
	float CrosshairDefaultRollModifier;//[Offset: 0x444, Size: 0x4]
	float CrosshairHitRollModifier;//[Offset: 0x448, Size: 0x4]
	float CrosshairKillRollModifier;//[Offset: 0x44c, Size: 0x4]
	float CrosshairStorageOffset;//[Offset: 0x450, Size: 0x4]
	enum[] HideCrosshairActionStates;//[Offset: 0x458, Size: 0x10]
	bool bHideCrosshairWhenAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 0x1]
	bool bHideCrosshairWhenEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x469, Size: 0x1]
	bool bHideCrosshairForbidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46a, Size: 0x1]
	bool bUseRotatation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46b, Size: 0x1]
	<enum,LinearColor> CrosshairOverrideColorMap;//[Offset: 0x478, Size: 0x50]
	float fDelayUpdateAiCommandTypeTime;//[Offset: 0x4cc, Size: 0x4]
	bool bDisableUpDownSpread;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ed, Size: 0x1]
	bool bDisableLeftRightSpread;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ee, Size: 0x1]
	CurveFloat* StorageCurve;//[Offset: 0x4f0, Size: 0x8]
	void UpdatePlayerEnergyStorage();// 0x305c9c0
	void PlayStorageAnim_BP();// 0x305c9c0
	void PlayStorageAnim();// 0x26ee630
	void OnShowCrosshairDefault(bool bShow);// 0x305c9c0
	void OnPlayerKillOther(bool bWeakPoint);// 0x305c9c0
	void OnPlayerHitWeakPoint(bool bWeakPoint);// 0x305c9c0
	void OnPlayerHitOtherInfo(bool bHasShield, bool bShieldBroken, int ItemQuality);// 0x305c9c0
	void OnPlayerHitOtherEffect(bool bKilled);// 0x26ee430
	void OnPlayerHitOther_ADS(bool bKilled);// 0x305c9c0
	void OnPlayerHitOther(bool bKilled);// 0x305c9c0
	void OnPlayerEnergyStorage(bool bEnergyStorage, float InTime);// 0x305c9c0
	void OnOverrideCrosshairColor(enum InAICommandType);// 0x26ee3b0

--------------------------------
Class: ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	Object* WidgetData;//[Offset: 0x240, Size: 0x8]
	Actor* CurrentViewActor;//[Offset: 0x248, Size: 0x8]
	ArkPlayer* CurrentViewPlayer;//[Offset: 0x250, Size: 0x8]
	bool bAutoRegisterInputDeviceChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	bool IsCurrentlyGamePadInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x259, Size: 0x1]
	bool AutoRegWidgetGroupType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x259, Size: 0x1]
	int ArkWidgetType;//[Offset: 0x25c, Size: 0x4]
	enum eManagedVisibility;//[Offset: 0x260, Size: 0x1]
	enum eGameplayVisibility;//[Offset: 0x261, Size: 0x1]
	bool bEnableInternalTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x262, Size: 0x1]
	float InternalTickInterval;//[Offset: 0x264, Size: 0x4]
	class ArkWidgetPluginBase[] WidgetPluginsConfigs;//[Offset: 0x270, Size: 0x10]
	ArkWidgetPluginBase*[] WidgetPlugins;//[Offset: 0x280, Size: 0x10]
	class UserWidget[] AnimWBPs;//[Offset: 0x290, Size: 0x10]
	BindingSetting[] AnimBindingSettings;//[Offset: 0x2a0, Size: 0x10]
	<FString,WidgetAnimation*> AnimationsMap;//[Offset: 0x2b0, Size: 0x50]
	void ToggleInternalTick(bool StartTickFlag);// 0x29bc6e0
	void SetupGamepadAxisBinding(bool bUseLeftX, bool bUseLeftY, bool bUseRightX, bool bUseRightY);// 0x29bc570
	void SetManagedVisibility(enum InFlagVisibility);// 0x29bc4f0
	void RemoveGamepadBinding();// 0x29bc270
	void ReceiveOnSetViewTarget();// 0x305c9c0
	void ReceiveOnInputDeviceChange(bool bGamePad);// 0x305c9c0
	void ReceiveOnClearViewTarget();// 0x305c9c0
	void PlayAnimationTemplateByName(FString InAnimationName, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x29bbfc0
	void PlayAllAnimationTemplateAtStart();// 0x29bbfa0
	void OnViewTargetChanged(Actor* NewViewTarget);// 0x29bbf10
	void OnInputDeviceChange(bool bGamePad);// 0x29685f0
	void OnGamepadAxis_RightY(float Value);// 0x29bbdf0
	void OnGamepadAxis_RightX(float Value);// 0x29bbd70
	void OnGamepadAxis_LeftY(float Value);// 0x29bbcf0
	void OnGamepadAxis_LeftX(float Value);// 0x29bbc70
	bool InternalTick(float InDeltaTime);// 0x29bb8e0
	void InitOperateAnim(enum InInitStatus);// 0x29bb860
	enum GetManagedVisibility();// 0x29bb650
	enum GetGameplayVisibility();// 0x29bb630
	void FireOperateAnim(enum From, enum To);// 0x29bb390

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x4143aa0

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x38, Size: 0x28]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	int ZOrder;//[Offset: 0x64, Size: 0x4]
	void SetZOrder(int InZOrder);// 0x4145cb0
	void SetSize(Vector2D InSize);// 0x4145850
	void SetPosition(Vector2D InPosition);// 0x41456d0
	void SetOffsets(Margin InOffset);// 0x41452f0
	void SetMinimum(Vector2D InMinimumAnchors);// 0x41451f0
	void SetMaximum(Vector2D InMaximumAnchors);// 0x4145170
	void SetLayout(out const AnchorData InLayoutData);// 0x4144f50
	void SetAutoSize(bool InbAutoSize);// 0x4144330
	void SetAnchors(Anchors InAnchors);// 0x4144210
	void SetAlignment(Vector2D InAlignment);// 0x4144190
	int GetZOrder();// 0x41440d0
	Vector2D GetSize();// 0x4143e30
	Vector2D GetPosition();// 0x4143df0
	Margin GetOffsets();// 0x4143db0
	AnchorData GetLayout();// 0x4143d20
	bool GetAutoSize();// 0x4143c90
	Anchors GetAnchors();// 0x4143c50
	Vector2D GetAlignment();// 0x4143c10

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 0x10]
	Anchors Anchors;//[Offset: 0x10, Size: 0x10]
	Vector2D Alignment;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: Border.ContentWidget.PanelWidget.Widget.Visual.Object
	byte HorizontalAlignment;//[Offset: 0x138, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x139, Size: 0x1]
	bool bShowEffectWhenDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13a, Size: 0x1]
	LinearColor ContentColorAndOpacity;//[Offset: 0x13c, Size: 0x10]
	delegate ContentColorAndOpacityDelegate;//[Offset: 0x14c, Size: 0x10]
	Margin Padding;//[Offset: 0x15c, Size: 0x10]
	SlateBrush Background;//[Offset: 0x170, Size: 0x88]
	delegate BackgroundDelegate;//[Offset: 0x1f8, Size: 0x10]
	LinearColor BrushColor;//[Offset: 0x208, Size: 0x10]
	delegate BrushColorDelegate;//[Offset: 0x218, Size: 0x10]
	Vector2D DesiredSizeScale;//[Offset: 0x228, Size: 0x8]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x234, Size: 0x10]
	delegate OnMouseButtonUpEvent;//[Offset: 0x244, Size: 0x10]
	delegate OnMouseMoveEvent;//[Offset: 0x254, Size: 0x10]
	delegate OnMouseDoubleClickEvent;//[Offset: 0x264, Size: 0x10]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x4145b30
	void SetPadding(Margin InPadding);// 0x41454a0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x4144d40
	void SetDesiredSizeScale(Vector2D InScale);// 0x4144bc0
	void SetContentColorAndOpacity(LinearColor InContentColorAndOpacity);// 0x4144b40
	void SetBrushFromTexture(Texture2D* Texture);// 0x4144940
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x4144940
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x41448c0
	void SetBrushColor(LinearColor InBrushColor);// 0x4144840
	void SetBrush(out const SlateBrush InBrush);// 0x41446c0
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x4143cf0

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0x4148b50
	PanelSlot* GetContentSlot();// 0x4148490
	Widget* GetContent();// 0x4148460

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x110, Size: 0x88]
	delegate BrushDelegate;//[Offset: 0x198, Size: 0x10]
	LinearColor ColorAndOpacity;//[Offset: 0x1a8, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1b8, Size: 0x10]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x1cc, Size: 0x10]
	void SetOpacity(float InOpacity);// 0x414de80
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x414d7d0
	void SetBrushTintColor(SlateColor TintColor);// 0x414d650
	void SetBrushSize(Vector2D DesiredSize);// 0x414d5d0
	void SetBrushResourceObject(Object* ResourceObject);// 0x414d550
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x414d480
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x414d3b0
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x414d260
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x414d150
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x2928f70
	void SetBrushFromAtlasInterface(interface class AtlasRegion, bool bMatchSize);// 0x414d060
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x414cfd0
	void SetBrush(out const SlateBrush InBrush);// 0x414ce50
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x414c550

--------------------------------
Class: Texture2DDynamic.Texture.StreamableRenderAsset.Object
	byte Format;//[Offset: 0x180, Size: 0x1]

--------------------------------
Class: ArkWidgetPluginBase.Object
	ArkUserWidgetBase* OwnerWidget;//[Offset: 0x28, Size: 0x8]
	void OnDestruct_BP();// 0x305c9c0
	void OnConstruct_BP(ArkUserWidgetBase* WidgetOwner);// 0x305c9c0

--------------------------------
Class: BindingSetting
	FString AnimationName;//[Offset: 0x0, Size: 0x10]
	<FName,FName> Redirects;//[Offset: 0x10, Size: 0x50]

--------------------------------
Class: ArkProjectileThrowableBase.ArkProjectileBase.Actor.Object
	VelocityInfo StartThrowVelocityInfo;//[Offset: 0x678, Size: 0x20]
	ThrowableImpactInfo LastHitImpactInfo;//[Offset: 0x698, Size: 0x98]
	float showIconTime;//[Offset: 0x730, Size: 0x4]
	FName GameTargetName;//[Offset: 0x744, Size: 0x8]
	enum ProjectileThrowableState;//[Offset: 0x74c, Size: 0x1]
	FName AttachSocketName;//[Offset: 0x750, Size: 0x8]
	ArkSoftSkeletalMeshComponent* SkeletalMeshComp;//[Offset: 0x758, Size: 0x8]
	SceneComponent*[] ComponentsToHide;//[Offset: 0x760, Size: 0x10]
	FString[] PPsToHide;//[Offset: 0x770, Size: 0x10]
	void SetThrowableState(enum State);// 0x2906d20
	void OnRep_ReInitSpeed();// 0x2906630
	void OnRep_ProjectileThrowableStateChange();// 0x2906610
	void OnRep_LastHitImpactInfo();// 0x29065f0
	void OnExitCinematic(int CinematicParams);// 0x29064d0
	void OnEnterCinematic(int CinematicParams);// 0x2906450
	void InitThrowableParam(FString InParam);// 0x305c9c0
	enum GetprojectileThrowableState();// 0x2906300

--------------------------------
Class: VelocityInfo
	bool bShouldReInitSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Rotator ThrowRotation;//[Offset: 0x4, Size: 0xc]
	Vector ThrowLocation;//[Offset: 0x10, Size: 0xc]
	bool bUseZeroSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: ThrowableImpactInfo
	HitResult HitResult;//[Offset: 0x0, Size: 0x88]
	Vector_NetQuantize HitDirection;//[Offset: 0x88, Size: 0xc]
	bool bCriticalHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]

--------------------------------
Class: ArkSkeletalMeshMaterialCache
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x0, Size: 0x8]
	MaterialInterface*[] AllWeaponMeshMats;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ArkCurrentWeaponInfo
	ArkWeaponBase* CurrentWeapon;//[Offset: 0x0, Size: 0x8]
	enum Reason;//[Offset: 0x8, Size: 0x1]
	enum Slot;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: WeaponTacticalActionInfo
	enum TacticalAction;//[Offset: 0x0, Size: 0x1]
	bool bPlayAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: ArkUserWidgetBaseWithPool.ArkUserWidgetBase.UserWidget.Widget.Visual.Object

--------------------------------
Class: ArkPlayerCharacterData.ArkGameDataCollection.Object
	UInt64Property PlayerId;//[Size: 0x8]
	int TeamId;//[Offset: 0x60, Size: 0x4]
	ArkNpc*[] NeaybyAICharacters;//[Offset: 0x98, Size: 0x10]
	ArkNPC_EliteBase*[] CombatElites;//[Offset: 0xa8, Size: 0x10]
	float ServerNearInfluenceRadius;//[Offset: 0xc8, Size: 0x4]
	float ServerMediumInfluenceRadius;//[Offset: 0xd0, Size: 0x4]
	float ServerFarInfluenceRadius;//[Offset: 0xd8, Size: 0x4]
	CurveFloat* ServerInfluenceDecayCurve;//[Offset: 0xe0, Size: 0x8]
	ArkPlayerDataForAI* GetServerPlayerDataForAI();// 0x28a01c0
	Vector GetAverageVelocity(float pastTime);// 0x289fff0

--------------------------------
Class: ArkPlayerDataForAI.ArkGameDataCollection.Object
	ArkNpc*[] ServerCombatingAICharacters;//[Offset: 0x58, Size: 0x10]
	ArkAIAttackGroup[] ServerAIAttackGroups;//[Offset: 0x68, Size: 0x10]
	int ServerMaxCombatAINum;//[Offset: 0x78, Size: 0x4]
	float ServerMovementSampleInterval;//[Offset: 0xa8, Size: 0x4]
	ArkNpc* ServerQTEAI;//[Offset: 0x290, Size: 0x8]
	ArkNpc*[] ServerVisualCheckCandidates;//[Offset: 0x298, Size: 0x10]
	ArkItemSyncChip* CoreChip;//[Offset: 0x2e0, Size: 0x8]
	delegate OnArkPlayerNewSyncCommandDelegate;//[Offset: 0x2e8, Size: 0x10]
	enum CommandType;//[Offset: 0x2f8, Size: 0x1]
	enum CommandTargetType;//[Offset: 0x2f9, Size: 0x1]
	float CommandFireTime;//[Offset: 0x2fc, Size: 0x4]
	float CommandFinishTime;//[Offset: 0x300, Size: 0x4]
	float CommandDuration;//[Offset: 0x304, Size: 0x4]
	float CommandCD;//[Offset: 0x308, Size: 0x4]
	ArkCharacterBase*[] CommandTargets;//[Offset: 0x310, Size: 0x10]
	class ArkGameBuff* UsedBuffClass;//[Offset: 0x320, Size: 0x8]
	ArkEneryCover* DefenceArea;//[Offset: 0x328, Size: 0x8]
	bool bPendingUpdateDefenciveLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	bool bLastMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 0x1]
	bool bLastTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x332, Size: 0x1]
	float LastYaw;//[Offset: 0x334, Size: 0x4]
	float LastUpdateFollowTargetTime;//[Offset: 0x338, Size: 0x4]

--------------------------------
Class: ArkAIAttackGroup
	ArkNpc* GroupLeader;//[Offset: 0x0, Size: 0x8]
	ArkNpc*[] NpcCharacters;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ArkEneryCover.Actor.Object
	ArkCharacterBase* GuardedCharacter;//[Offset: 0x2e8, Size: 0x8]
	static ArkEneryCover* SpawnEnergyCover(const Object* WorldContext, class ArkEneryCover InTemplate, Vector Location, Rotator Rotation, ArkCharacterBase* InGuardedCharacter);// 0x271a010

--------------------------------
Class: ArkMetaStateMasks
	int MetaStateMask;//[Offset: 0x0, Size: 0x4]
	int BlockedMetaStateMask;//[Offset: 0x4, Size: 0x4]
	int IgnoreBlockedMetaStateMask;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ArkMeleeComponent.ActorComponent.Object
	ArkCharacterBase* CharacterOwner;//[Offset: 0x1e0, Size: 0x8]
	AkAudioEvent* ImpactSound;//[Offset: 0x1e8, Size: 0x28]
	bool bEnableHitStaticCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1]
	void ServerMeleeHit(const HitResult Impact, Vector_NetQuantizeNormal HitForward, Vector_NetQuantizeNormal HitDir, bool bMainCompHit);// 0x283bd40
	void NotifyEndMelee();// 0x283b040
	void NotifyBeginMelee();// 0x283b020

--------------------------------
Class: ArkCharacterInfoComponent.ArkCharacterLiteComponent.LiteComponent.Object
	enum GenderType;//[Offset: 0xac, Size: 0x1]
	enum VOType;//[Offset: 0xad, Size: 0x1]
	AkSwitchValue* AkSwitchValue;//[Offset: 0xb0, Size: 0x28]
	ArkHavenVOConfig[] VoConfig;//[Offset: 0xd8, Size: 0x10]
	int[] AnimEmoteSlotConfig;//[Offset: 0xe8, Size: 0x10]
	void OnRep_VOType();// 0x26cba30
	void OnRep_CurrentGender();// 0x26cba10
	void OnRep_AudioSwitch();// 0x26cb9f0

--------------------------------
Class: ArkHavenVOConfig
	enum gender;//[Offset: 0x0, Size: 0x1]
	enum SkinType;//[Offset: 0x1, Size: 0x1]
	enum[] VOTypes;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ArkCharacterMontageRepData
	UInt32Property PlaySequenceID;//[Size: 0x4]
	AnimMontage* MontagePtr;//[Offset: 0x8, Size: 0x28]
	FName SectionName;//[Offset: 0x30, Size: 0x8]
	float PlayRate;//[Offset: 0x38, Size: 0x4]
	enum RootMotionOption;//[Offset: 0x3c, Size: 0x1]

--------------------------------
Class: ArkBloodSplatter.Object
	ArkBloodSplatterConfig[] Configs;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: ArkBloodSplatterConfig
	BloodSplatterDecalData Decal;//[Offset: 0x0, Size: 0x20]
	Vector2D DamageRange;//[Offset: 0x20, Size: 0x8]
	float MaxAngleFromNormal;//[Offset: 0x28, Size: 0x4]
	ArkMinorBloodSplatterConfig[] MinorConfigs;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: BloodSplatterDecalData
	MaterialInterface* DecalMaterial;//[Offset: 0x0, Size: 0x8]
	Vector2D DecalIndexRange;//[Offset: 0x8, Size: 0x8]
	Vector2D DecalSizeRange;//[Offset: 0x10, Size: 0x8]
	float LifeSpan;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ArkMinorBloodSplatterConfig
	BloodSplatterDecalData Decal;//[Offset: 0x0, Size: 0x20]
	Vector2D SpreadPhiRange;//[Offset: 0x20, Size: 0x8]
	Vector2D SpreadThetaRange;//[Offset: 0x28, Size: 0x8]
	Vector2D DelayRange;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: ArkShakeBonesData.Object
	PhysicsAsset* TargetPhysicsAsset;//[Offset: 0x28, Size: 0x8]
	FString TargetPhysicsAssetName;//[Offset: 0x30, Size: 0x10]
	Skeleton* TargetSkeleton;//[Offset: 0x40, Size: 0x8]
	FString TargetSkeletonName;//[Offset: 0x48, Size: 0x10]
	ArkShakeBoneChildData ShakeBoneChildData;//[Offset: 0x58, Size: 0xa0]

--------------------------------
Class: ArkShakeBoneChildData
	<FName,ArkShakeBonesBoneInfo> BoneChildMap;//[Offset: 0x0, Size: 0x50]
	<FName,FName> BonePairList;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: ArkShakeBonesBoneInfo
	FName[] Childs;//[Offset: 0x0, Size: 0x10]
	float ShakeLengthScale;//[Offset: 0x10, Size: 0x4]
	bool OnlyWeakPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: ArkHitReactionAnimData
	class ArkDamageType* DamageTypeClass;//[Offset: 0x0, Size: 0x8]
	AnimMontage* ForwardHitReaction;//[Offset: 0x8, Size: 0x8]
	AnimMontage* BackwardHitReaction;//[Offset: 0x10, Size: 0x8]
	AnimMontage* LeftHitReaction;//[Offset: 0x18, Size: 0x8]
	AnimMontage* RightHitReaction;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: ArkCDComponent.ArkCharacterLiteComponent.LiteComponent.Object
	ArkCD*[] CDArray;//[Offset: 0xb0, Size: 0x10]
	ArkCD*[] OldCDArray;//[Offset: 0x110, Size: 0x10]
	ArkEnergy*[] EnergyArray;//[Offset: 0x138, Size: 0x10]
	ArkEnergy*[] OldEnergyArray;//[Offset: 0x198, Size: 0x10]
	void ServerStart(FName Tag);// 0x26b5c40
	void OnRep_EnergyArray();// 0x26b4dd0
	void OnRep_CDArray();// 0x26b4c70

--------------------------------
Class: ArkCD.Object
	Actor* OwnerPrivate;//[Offset: 0xa8, Size: 0x8]
	FName Tag;//[Offset: 0xb0, Size: 0x8]
	float Duration;//[Offset: 0xb8, Size: 0x4]
	int64 CDTimeout;//[Offset: 0xc0, Size: 0x8]
	Buff_ValueModify DurationModify;//[Offset: 0xc8, Size: 0x8]
	Buff_ValueModify DurationAttrModify;//[Offset: 0xd0, Size: 0x8]
	Buff_ValueModify CDSpeedAttrModify;//[Offset: 0xd8, Size: 0x8]
	float Rate;//[Offset: 0xf0, Size: 0x4]
	Buff_ValueModify RateModify;//[Offset: 0xf4, Size: 0x8]
	CDEnvInfo EnvInfo;//[Offset: 0x10c, Size: 0x14]
	void OnRep_Tag();// 0xae2270
	void OnRep_RateModify();// 0x26b4c90
	void OnRep_Rate();// 0x26b4c90
	void OnRep_Env();// 0x26b4df0
	void OnRep_DurationModify();// 0x26b4c90
	void OnRep_Duration();// 0x26b4c90
	void OnRep_CDTimeout();// 0xae2270
	void OnRep_CDSpeedAttrModify();// 0x26b4c90
	void OnCDTimeUp__DelegateSignature();// 0x305c9c0
	void ClientStop();// 0x188cea0
	void ClientStart();// 0x188dba0
	void ClientAdjustTimer(float CurrentCD);// 0x26b1780

--------------------------------
Class: Buff_ValueModify
	float Percentage;//[Offset: 0x0, Size: 0x4]
	float Absolute;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: CDEnvInfo
	int ChipID;//[Offset: 0x0, Size: 0x4]
	int ChipUID;//[Offset: 0x4, Size: 0x4]
	bool IsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	int DirtyNumber;//[Offset: 0xc, Size: 0x4]
	int DirtyChipUID;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ArkEnergy.Object
	Actor* OwnerPrivate;//[Offset: 0x98, Size: 0x8]
	FName Tag;//[Offset: 0xa0, Size: 0x8]
	float Max;//[Offset: 0xa8, Size: 0x4]
	Buff_ValueModify MaxModify;//[Offset: 0xac, Size: 0x8]
	float Current;//[Offset: 0xb4, Size: 0x4]
	float Rate;//[Offset: 0xb8, Size: 0x4]
	Buff_ValueModify RateModify;//[Offset: 0xbc, Size: 0x8]
	void OnRep_Tag();// 0xae2270
	void OnRep_RateModify();// 0xae2270
	void OnRep_Rate();// 0xae2270
	void OnRep_MaxModify();// 0xae2270
	void OnRep_Max();// 0x2719c20
	void OnRep_Current();// 0xae2270

--------------------------------
Class: ArkParticleOrSoundInfoContainer.FastArraySerializer
	ArkPlayParticleOrSoundInfoEntry[] ResourceInfo;//[Offset: 0x108, Size: 0x10]
	ArkCharacterBase* OwnerCharacter;//[Offset: 0x118, Size: 0x8]

--------------------------------
Class: ArkPlayParticleOrSoundInfoEntry.FastArraySerializerItem
	bool bParticleOrSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	int Idx;//[Offset: 0x10, Size: 0x4]
	int UID;//[Offset: 0x14, Size: 0x4]
	FName PlaySocket;//[Offset: 0x18, Size: 0x8]
	int BodyOrWeaponOrHitLocation;//[Offset: 0x20, Size: 0x4]
	Transform HitTrans;//[Offset: 0x30, Size: 0x30]

--------------------------------
Class: AutoDetachComponentCache
	Transform RelativeTrans;//[Offset: 0x0, Size: 0x30]
	FName SocketName;//[Offset: 0x30, Size: 0x8]
	SceneComponent* ParentComp;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: InteractiveFieldProxyMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum ProxyType;//[Offset: 0x758, Size: 0x1]
	MaterialInterface* OverridedMat;//[Offset: 0x760, Size: 0x8]
	bool bSoftWind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x768, Size: 0x1]
	float SphereRadius;//[Offset: 0x76c, Size: 0x4]
	float CylindHeight;//[Offset: 0x770, Size: 0x4]
	float CylindRadius;//[Offset: 0x774, Size: 0x4]
	Vector BoxExtent;//[Offset: 0x778, Size: 0xc]
	bool bLowLifeTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x784, Size: 0x1]

--------------------------------
Class: ArkItemCartridgebelt.ArkItem.Object
	AmmoInfo[] AmmoInfoList;//[Offset: 0x98, Size: 0x10]
	int CurrentAmmoCount;//[Offset: 0xa8, Size: 0x4]
	int GetMaxAmmoBoxCountByType(enum inAmmoType);// 0x280d1e0

--------------------------------
Class: AmmoInfo
	enum AmmoType;//[Offset: 0x0, Size: 0x1]
	int AmmoCount;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ArkItemThrowable.ArkItem.Object
	SkeletalMesh* ThrowalbeAttachMesh;//[Offset: 0x98, Size: 0x8]
	class ArkProjectileBase* ThrowableClass;//[Offset: 0xa0, Size: 0x8]
	bool ShowPredictionLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	bool bThrowUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 0x1]

--------------------------------
Class: ArkDeathCrate.ArkInteractiveActor.ArkStaticActor.Actor.Object
	DeathCrateItem[] DeathCrateItems;//[Offset: 0x588, Size: 0x10]
	DeathCratePlayerInfo DeadPlayerInfo;//[Offset: 0x598, Size: 0x20]
	ArkPlayer* LootingPlayer;//[Offset: 0x5b8, Size: 0x8]
	int LastLootItemUID;//[Offset: 0x5c0, Size: 0x4]
	ArkSoftSkeletalMeshComponent* PlayerBagMeshComponent;//[Offset: 0x5c8, Size: 0x8]
	int BestItemQualityIndex;//[Offset: 0x5e0, Size: 0x4]
	int[] AmmoUID;//[Offset: 0x5e8, Size: 0x10]
	FName DeathCreateEmissiveParamName;//[Offset: 0x5f8, Size: 0x8]
	FName DeathCreateTargetParamName;//[Offset: 0x600, Size: 0x8]
	Vector[] DeathCreateEmissiveColor;//[Offset: 0x608, Size: 0x10]
	Vector[] DeathCreateTargetColor;//[Offset: 0x618, Size: 0x10]
	class ArkInteractionIndicator* IndicatorClass;//[Offset: 0x630, Size: 0x8]
	bool bShouldPlayIndicatorEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 0x1]
	ArkInteractionIndicator* Indicator;//[Offset: 0x640, Size: 0x8]
	bool bCanLootSupply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x648, Size: 0x1]
	void ServerSetInteractionInfo(ArkPlayer* InPlayer);// 0x26f89a0
	void OnRep_LootingPlayer(ArkPlayer* OldLootPlayer);// 0x26f87a0
	void OnRep_LastLootItemID();// 0x26f8780
	void OnRep_DeathCrateItems();// 0x26f8760
	void OnRep_DeadPlayerInfo();// 0x26f8740
	void OnRep_BestItemQualityIndex();// 0x26f8720
	int GetQualityIndex();// 0x26f7e40
	void BP_SetLootMeshTargetColorByQuality(int QualityIndex);// 0x305c9c0
	void BP_SetLootMeshEmmisiveColorByQuality(int QualityIndex);// 0x305c9c0
	void BP_SetCrateActive(bool bActive);// 0x305c9c0
	void BP_HideCrateMesh(bool bHide);// 0x305c9c0

--------------------------------
Class: DeathCrateItem
	int ItemUID;//[Offset: 0x0, Size: 0x4]
	int ItemId;//[Offset: 0x4, Size: 0x4]
	int ItemBaseID;//[Offset: 0x8, Size: 0x4]
	int ItemCount;//[Offset: 0xc, Size: 0x4]
	int ItemMaxCount;//[Offset: 0x10, Size: 0x4]
	int ItemSlot;//[Offset: 0x14, Size: 0x4]
	FString ItemAttributes;//[Offset: 0x18, Size: 0x10]
	int Durability;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: DeathCratePlayerInfo
	ArkPlayer* OwnerPlayerRef;//[Offset: 0x0, Size: 0x8]
	FString OwnerPlayerName;//[Offset: 0x8, Size: 0x10]
	bool PlayerWin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: ArkWeaponAimAssistComponent.ArkCharacterLiteComponent.LiteComponent.Object
	CurveFloat* AllowFollowDistance_Curve;//[Offset: 0xa8, Size: 0x8]
	ArkPlayer* OwnerPlayer;//[Offset: 0xb0, Size: 0x8]
	ArkPlayerControllerBattle* OwnerPC;//[Offset: 0xb8, Size: 0x8]
	ArkPlayerCameraManager* OwnerCamera;//[Offset: 0xc0, Size: 0x8]
	ArkRangeWeapon* OwnerWeapon;//[Offset: 0xc8, Size: 0x8]
	ArkNpc*[] ArkNPCArray;//[Offset: 0xd0, Size: 0x10]
	ArkSoftParticleSystemComponentWithPool* AimLaser;//[Offset: 0x2e0, Size: 0x8]
	ArkSoftParticleSystemComponentWithPool* AimHit;//[Offset: 0x2e8, Size: 0x8]
	bool bIsDrawLaser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	FName AimLaserName;//[Offset: 0x2f4, Size: 0x8]
	float LaserDistance;//[Offset: 0x2fc, Size: 0x4]
	Vector LaserBias;//[Offset: 0x300, Size: 0xc]
	float AimHitScale;//[Offset: 0x30c, Size: 0x4]
	float AimHitBias;//[Offset: 0x310, Size: 0x4]
	ParticleSystem* LaserParticle;//[Offset: 0x318, Size: 0x28]
	ParticleSystem* hitParticle;//[Offset: 0x340, Size: 0x28]
	byte ReplicateHitFrequency;//[Offset: 0x368, Size: 0x1]
	CurveVector* HitSwayDistanceCurve;//[Offset: 0x370, Size: 0x8]
	CurveFloat* LaserHitDistanceScaleMapping;//[Offset: 0x378, Size: 0x8]
	float LaserTraceDistance;//[Offset: 0x380, Size: 0x4]
	bool bUseAimAssistFastCheckOcc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x432, Size: 0x1]
	float CheckOcclusionOptTime;//[Offset: 0x434, Size: 0x4]
	int CheckOcclusionMax;//[Offset: 0x438, Size: 0x4]

--------------------------------
Class: ArkPlayerControllerBattle.ArkPlayerControllerBattleBase.ArkPlayerControllerBase.PlayerController.Controller.Actor.Object
	delegate OnQuitMatch;//[Offset: 0x6a8, Size: 0x10]
	delegate OnQuitMatchRsp;//[Offset: 0x6b8, Size: 0x10]
	delegate OnPossessPawn;//[Offset: 0x6c8, Size: 0x10]
	delegate OnPlayerStateChanged;//[Offset: 0x6d8, Size: 0x10]
	bool bRecoilRecoverDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x748, Size: 0x1]
	float GamePadTurnRate;//[Offset: 0x74c, Size: 0x4]
	float GamePadLookUpRate;//[Offset: 0x750, Size: 0x4]
	float MouseTurnRate;//[Offset: 0x754, Size: 0x4]
	float MouseLookUpRate;//[Offset: 0x758, Size: 0x4]
	float TurnCurvePitchFactor;//[Offset: 0x75c, Size: 0x4]
	CurveFloat* DefaultTurnCurve;//[Offset: 0x760, Size: 0x8]
	CurveFloat* HipTurnCurve;//[Offset: 0x768, Size: 0x8]
	CurveFloat* TargetingTurnCurve;//[Offset: 0x770, Size: 0x8]
	CurveFloat* ADSTurnCurve;//[Offset: 0x778, Size: 0x8]
	byte ToggleViewTargetIntervalSeconds;//[Offset: 0x780, Size: 0x1]
	float CoverStuckAngle;//[Offset: 0x784, Size: 0x4]
	float ExitCoverAngle;//[Offset: 0x788, Size: 0x4]
	float FallHitForceFeedBackDelay;//[Offset: 0x78c, Size: 0x4]
	bool IsForceWalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x790, Size: 0x1]
	float CanSprintFactor;//[Offset: 0x794, Size: 0x4]
	bool bIsShowDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x798, Size: 0x1]
	ArkCharacterBase* LastInjurerPawn;//[Offset: 0x7a8, Size: 0x8]
	bool bUseInjurerIndicator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b0, Size: 0x1]
	float GamePadVerticalSensitivity;//[Offset: 0x7e8, Size: 0x4]
	float GamePadHorizontalSensitivity;//[Offset: 0x7ec, Size: 0x4]
	float MouseVerticalSensitivity;//[Offset: 0x7f0, Size: 0x4]
	float MouseHorizontalSensitivity;//[Offset: 0x7f4, Size: 0x4]
	bool IsGamePadVerticalReversal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f8, Size: 0x1]
	bool IsMouseVerticalReversal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f9, Size: 0x1]
	bool IsMouseHorizontalReversal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7fa, Size: 0x1]
	float HoldDesyncButtonSeconds;//[Offset: 0x80c, Size: 0x4]
	float SuperJumpSenseCoverTraceDistanceOffset;//[Offset: 0x810, Size: 0x4]
	float SuperJumpSenseCoverTraceBoxHeightOffset;//[Offset: 0x814, Size: 0x4]
	delegate OnEnterCinematicDelegate;//[Offset: 0x820, Size: 0x10]
	delegate OnJudgeLocalTeamConditionsSyncFinished;//[Offset: 0x830, Size: 0x10]
	delegate OnPlayerSetMarkerDelegate;//[Offset: 0x840, Size: 0x10]
	delegate OnExitCinematicDelegate;//[Offset: 0x858, Size: 0x10]
	ArkPlayer* PlayerPawn;//[Offset: 0x870, Size: 0x8]
	class ArkWidgetInteractionComponent* WidgetInteractionComponentClass;//[Offset: 0x878, Size: 0x8]
	ArkWidgetInteractionComponent* WidgetInteractionComp;//[Offset: 0x880, Size: 0x8]
	WidgetComponent* InteractWidgetComponent;//[Offset: 0x888, Size: 0x8]
	float SpottingMarkerMaxDistance;//[Offset: 0x890, Size: 0x4]
	float SetMarkerMaxDistance;//[Offset: 0x894, Size: 0x4]
	float AutoRemoveWayPointMarkerDistance;//[Offset: 0x898, Size: 0x4]
	<class Actor,enum> MapMarkerClass;//[Offset: 0x8a0, Size: 0x50]
	<enum,enum> MirrorTypeMap;//[Offset: 0x8f0, Size: 0x50]
	<FName,enum> EliteBossMarkerTypeMap;//[Offset: 0x940, Size: 0x50]
	class ArkMarkerActor* MarkerClass;//[Offset: 0x990, Size: 0x8]
	class Object[] ExclusiveInteractiveActorClass;//[Offset: 0x998, Size: 0x10]
	<enum,ArkMapMarkerConfig> MapMarkerConfigs;//[Offset: 0x9a8, Size: 0x50]
	<int,ArkMapMarkerControlConfig> MapMarkerControlConfigs;//[Offset: 0x9f8, Size: 0x50]
	float CollisionRadius;//[Offset: 0xa48, Size: 0x4]
	<enum,enum> HandleResponseIndicatorTypes;//[Offset: 0xa50, Size: 0x50]
	float BroardcastMapMarkerRange;//[Offset: 0xaa0, Size: 0x4]
	<int,ArkMapMarkerDict> MapMarkers;//[Offset: 0xaa8, Size: 0x50]
	ArkIndicatorWidget*[] ToCheckFocusedIndicators;//[Offset: 0xb10, Size: 0x10]
	int SortIndicatorsFrameInterval;//[Offset: 0xb20, Size: 0x4]
	enum TestPingMarkerType;//[Offset: 0xb24, Size: 0x1]
	Actor* FocusOnTargetActor;//[Offset: 0xbc8, Size: 0x8]
	Rotator FocusOnRotation;//[Offset: 0xbd0, Size: 0xc]
	delegate OnGameHasEndedDelegate;//[Offset: 0xbf0, Size: 0x10]
	delegate DeathMatchOnGameHasEndedDelegate;//[Offset: 0xc00, Size: 0x10]
	delegate OnContinueNextGameDelegate;//[Offset: 0xc10, Size: 0x10]
	delegate OnTutorialNextInstructionDelegate;//[Offset: 0xc28, Size: 0x10]
	delegate OnTutorialPrevInstructionDelegate;//[Offset: 0xc38, Size: 0x10]
	CurveVector* SwayCameraCurve;//[Offset: 0xc50, Size: 0x8]
	float HorizontalCameraInterpSpeed;//[Offset: 0xc58, Size: 0x4]
	ArkGameResultData GameResultDataRPCSync;//[Offset: 0xc60, Size: 0x18]
	ArkPlayer* ReconnectPawn;//[Offset: 0xd18, Size: 0x8]
	int MatchResultWidgetMenuID;//[Offset: 0xd50, Size: 0x4]
	FName MatchResultWidgetMenuName;//[Offset: 0xd54, Size: 0x8]
	FName MatchResultWidgetHUDStateName;//[Offset: 0xd5c, Size: 0x8]
	int ActionStateDebugWidgetMenuID;//[Offset: 0xd64, Size: 0x4]
	FName ActionStateDebugWidgetMenuName;//[Offset: 0xd68, Size: 0x8]
	FName ActionStateDebugWidgetHUDStateName;//[Offset: 0xd70, Size: 0x8]
	int MarkerTipsWidgetMenuID;//[Offset: 0xd78, Size: 0x4]
	FName MarkerTipsWidgetMenuName;//[Offset: 0xd7c, Size: 0x8]
	FName MarkerTipsWidgetHUDStateName;//[Offset: 0xd84, Size: 0x8]
	int HoldMapMarkerWidgetMenuID;//[Offset: 0xd8c, Size: 0x4]
	FName HoldMapMarkerWidgetMenuName;//[Offset: 0xd90, Size: 0x8]
	FName HoldMapMarkerWidgetHUDStateName;//[Offset: 0xd98, Size: 0x8]
	int KeyMapWidgetMenuID;//[Offset: 0xda0, Size: 0x4]
	FName KeyMapWidgetMenuName;//[Offset: 0xda4, Size: 0x8]
	FName KeyMapWidgetHUDStateName;//[Offset: 0xdac, Size: 0x8]
	int PerkWidgetMenuID;//[Offset: 0xdb4, Size: 0x4]
	FName PerkWidgetMenuName;//[Offset: 0xdb8, Size: 0x8]
	FName PerkWidgetHUDStateName;//[Offset: 0xdc0, Size: 0x8]
	int ProductWidgetMenuID;//[Offset: 0xdc8, Size: 0x4]
	FName ProductWidgetMenuName;//[Offset: 0xdcc, Size: 0x8]
	FName ProductWidgetHUDStateName;//[Offset: 0xdd4, Size: 0x8]
	int WorldMapWidgetMenuID;//[Offset: 0xddc, Size: 0x4]
	FName WorldMapWidgetMenuName;//[Offset: 0xde0, Size: 0x8]
	FName WorldMapWidgetHUDStateName;//[Offset: 0xde8, Size: 0x8]
	int PerkDisplayWidgetMenuID;//[Offset: 0xdf0, Size: 0x4]
	FName PerkDisplayWidgetMenuName;//[Offset: 0xdf4, Size: 0x8]
	FName PerkDisplayWidgetHUDStateName;//[Offset: 0xdfc, Size: 0x8]
	int SpectatingWidgeMenuID;//[Offset: 0xe04, Size: 0x4]
	FName SpectatingWidgetMenuName;//[Offset: 0xe08, Size: 0x8]
	FName SpectatingWidgetHUDStateName;//[Offset: 0xe10, Size: 0x8]
	int CountDownWidgetMenuID;//[Offset: 0xe18, Size: 0x4]
	FName CountDownWidgetMenuName;//[Offset: 0xe1c, Size: 0x8]
	FName CountDownWidgetHUDStateName;//[Offset: 0xe24, Size: 0x8]
	int WaitingTillMatchStartMenuID;//[Offset: 0xe2c, Size: 0x4]
	FName WaitingTillMatchStartMenuName;//[Offset: 0xe30, Size: 0x8]
	FName WaitingTillMatchStartHUDStateName;//[Offset: 0xe38, Size: 0x8]
	int LootBagWidgetMenuID;//[Offset: 0xe40, Size: 0x4]
	FName LootBagWidgetMenuName;//[Offset: 0xe44, Size: 0x8]
	FName LootBagWidgetStateName;//[Offset: 0xe4c, Size: 0x8]
	int SyncSelectorWidgetMenuID;//[Offset: 0xe54, Size: 0x4]
	FName SyncSelectorWidgetMenuName;//[Offset: 0xe58, Size: 0x8]
	FName SyncSelectorWidgetHUDStateName;//[Offset: 0xe60, Size: 0x8]
	int ReplayMainMenuID;//[Offset: 0xe68, Size: 0x4]
	FName ReplayMainMenuName;//[Offset: 0xe6c, Size: 0x8]
	FName ReplayMainMenuStateName;//[Offset: 0xe74, Size: 0x8]
	float ControlAICD;//[Offset: 0xe7c, Size: 0x4]
	int ControlAIAlliesNum;//[Offset: 0xe80, Size: 0x4]
	class ArkDeadCameraModifier* DeadCameraModifierClass;//[Offset: 0xe88, Size: 0x8]
	ArkRobotController* DebugRobot;//[Offset: 0xe90, Size: 0x8]
	ArkPlayer* DebugRobotPlayer;//[Offset: 0xe98, Size: 0x8]
	FString DebugRobotString;//[Offset: 0xeb8, Size: 0x10]
	FString DebugRobotTeamString;//[Offset: 0xec8, Size: 0x10]
	class ArkProjectileGuideSpline* guideSplineClass;//[Offset: 0xef0, Size: 0x8]
	ArkProjectileGuideSpline* guideSplineActor;//[Offset: 0xef8, Size: 0x8]
	bool bIsArkSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf01, Size: 0x1]
	void VRTrainingChangeHeroTo(int HeroID, int SuitID);// 0x28aaf50
	void ToggleCinematicDebug();// 0xae2270
	void SyncServerVersion(FString Version);// 0x28aae50
	void SwitchGamePlayInputEvent(bool bEnable);// 0x28aadc0
	float StartMatchEndCamera(int ShuttleID, bool bWin, bool bDraw, int WinTeamID);// 0x28aac50
	void ShowSyncSelector(bool bShow);// 0x28aabc0
	void ShowInteractionCountDown(enum InteractionType, bool bShow, float CDSeconds);// 0x28aaab0
	void ShowHUDStateDebugMenu(bool bShow);// 0x1075060
	void ShowCountDown(Object* CountDownOwnerPtr, bool bShow, float CDSeconds, enum InCountDownType);// 0x28aa960
	void SetSpawnDefaultItems(bool Value);// 0x28aa8e0
	void SetMoviePlayerEnable(bool bEnable);// 0x28aa850
	bool SetMapMarker(enum EInputType, out const Vector TargetLocation, Actor* TargetActor);// 0x28aa730
	void SetGamePadStickMode(enum InStickMode);// 0x28aa6b0
	void SetEnemyPlayerMarker(Vector HitLoc, Actor* hitActor);// 0x28aa5e0
	void SetCanResetIgnoreInputFlags(bool bNewCan);// 0x28aa560
	void SetAimToTargetSameKeyBoard(bool bSameKeyBoard);// 0x28aa4e0
	void ServeSetWayPointMarker(Vector TargetLocation);// 0x28a9090
	void ServeSetMarker(enum EInputType, enum MarkerType, Actor* TargetActor);// 0x28a8f60
	void ServeSetLocationMarker(enum EInputType, enum MarkerType, Vector TargetLocation, Actor* TargetActor);// 0x28a8dc0
	void ServerVotedSequenceSkipped(FString InSequenceTypeName);// 0x28aa350
	void ServerToggleViewTarget();// 0x28aa300
	void ServerStartSpectating();// 0x28aa2b0
	void ServerShowDebugInfo(bool bShow);// 0x28aa220
	void ServerSetMapMarkerByType(const ArkMapMarkerParams InParams);// 0x28aa140
	void ServerSetInterestSightRatio(float InRatio);// 0x28aa090
	void ServerSendECSNetEvent(FString EventName, const byte[] Data, const Object*[] ObjData);// 0x28a9f50
	void ServerResponseMapMarker(enum EInputType, enum EType, int ToRemoveSerialID);// 0x28a9e20
	void ServerResponseIndicator(enum EInputType, enum EType, enum TargetType, Actor* IndicatorRefTarget, Actor* LastIndicatorRefTarget);// 0x28a9c50
	void ServerRequestItemToTeammate(int Type, int ItemId);// 0x28a9b50
	void ServerReportInGame(ArkReportSystemConfig Info);// 0x28a9740
	void ServerQuitMatch();// 0x28a96f0
	void ServerCheat(FString CheatCommand);// 0x28a9160
	void Server_SyncShieldFly(Vector Dir);// 0x28aa410
	void ServeCancelWayPoint(ArkMarkerActor* TargetActor, bool bIsCancelByArrive);// 0x28a8cc0
	void ReportDebugRobotTeamString(FString DebugStr);// 0x28a8c20
	void ReportDebugRobotString(ArkRobotDebugInfo DedbugInfo);// 0x28a8a90
	void ReportDebugRobotPath(const Vector[] Path);// 0x28a89f0
	void QuitMatchRsp();// 0x28a89d0
	void QuitMatch();// 0x28a89b0
	void PlayWheelMarkerVO();// 0x305c9c0
	void PlayWayPointVO();// 0x305c9c0
	void PlayMatchEndEffect(int ShuttleID, bool bWin);// 0x28a88f0
	void PlayMarkerEventVO();// 0x305c9c0
	void OpenServicingStore();// 0x28a88d0
	void OnTryQuitMatchRsp();// 0x28a88b0
	void OnToggleRecordLocalFileReplay();// 0x28a8890
	void OnToggleRecordInMemoryReplay();// 0x28a8870
	void OnTimerToggleViewTargetBlackScreen();// 0x28a8850
	void OnRep_ControlAIAlliesNum();// 0xae2270
	void OnEnableProductMenuTitleButton(bool bEnable);// 0x28a8780
	void LootItemSupplyFunc(out const Key InKey, enum HoldEvent, float InDuration, float inElapsedTime);// 0x28a8510
	bool IsRecordingReplay();// 0x28a84e0
	bool IsReconnect();// 0x28a84b0
	bool IsPlayingKillCamera();// 0x28a8480
	bool[] GetWinTeamSurvivorList();// 0x28a8290
	FString[] GetWinTeamPlayerName();// 0x28a81b0
	int GetTeamID();// 0x28a8180
	ArkPlayerStateBattle* GetPlayerState();// 0x28a80a0
	ReturnValue(UInt64Property) GetPlayerId();// 0x28a8070
	float GetControlAILastTimePercent();// 0x28a7ff0
	void GameOpenerChangeHeroTo(int HeroID, int SuitID);// 0x28a7f00
	void EndControllerFocus();// 0x28a7d50
	void EnableInputEvent(FName EventName, bool bEnable);// 0x28a7bf0
	void DisplayDebugLog(FString CheatCommand);// 0x28a6b40
	void DeathMatchClientGameEnded(bool bIsWinner);// 0x28a7ae0
	void CloseProductMenu();// 0x28a7ac0
	void ClientToggleSpectating(bool bStart);// 0x28a7a30
	void ClientSyncGameResult(const ArkGameResultData ResultData);// 0x28a7990
	void ClientShowMarkerMenuTips(bool bResponed, enum MarkerType, enum InputType, Actor* ActorRef, int CurTeamID, int CurPlayerIndex, bool bCancel, Vector PingLocation);// 0x28a7730
	void ClientSetMapMarkerByType(OwnerPlayerID(UInt64Property) OwnerPlayerID, TeamIndex(UInt32Property) TeamIndex, int SerialID, const ArkMapMarkerParams InParams);// 0x28a75d0
	void ClientSetInputMode_UIOnly();// 0x28a75b0
	void ClientSetInputMode_GameOnly();// 0x28a7590
	void ClientSetInputMode_GameAndUI();// 0x28a7570
	void ClientSendECSNetRequest(FString EventName, const byte[] Data, const Object*[] ObjData);// 0x28a7400
	void ClientResponseMapMarker(enum EInputType, PlayerId(UInt64Property) PlayerId, enum EType, int TeamIndex, int ToRemoveSerialID);// 0x28a7280
	void ClientResponseIndicator(enum EInputType, PlayerId(UInt64Property) PlayerId, enum EType, enum TargetType, int TeamIndex, Actor* IndicatorRefTarget, Actor* LastIndicatorRefTarget, int MaxTeamMemberCount);// 0x28a7040
	void ClientRequestItemToTeammate(int Type, int ItemId, int TeamIndex);// 0x28a6f50
	void ClientQuitMatch();// 0x28a6f30
	void ClientPersonalSettlement(FString Name, FString PlayerId, const int[] PlayerStatistics);// 0x28a6ca0
	void ClientNotifyTutorialFinished();// 0x28a6c80
	void ClientEnableInput();// 0x26b4660
	void ClientDisableInput();// 0x26b4640
	void ClientBackLobby();// 0x28a6c60
	void Cheat(FString CheatCommand);// 0x28a6b40
	bool CanControlAI();// 0x28a6b10
	void CallLua_ShowSettlement();// 0x305c9c0
	void CallLua_QuitMatch();// 0x305c9c0
	void CallLua_OnPersonalSettlement(FString Name, FString PlayerId, out const int[] PlayerStatistics);// 0x305c9c0
	void CallLua_OnDisconnect();// 0x305c9c0
	void CallLua_LikePlayer(const ArkPlayerStateBattle* TargetPlayerState);// 0x305c9c0
	void BeginControllerFollowPlayerPawn();// 0x28a6900
	void BeginControllerFocusOn(Actor* TargetActor, Vector TargetLocation, float InterpSpeed);// 0x28a67e0
	void BeginControllerFocusHorizontally();// 0x28a67c0
	void ArkSetCinematicMode(bool bInCinematicMode, int CinematicParams);// 0x28a6660

--------------------------------
Class: ArkPlayerControllerBattleBase.ArkPlayerControllerBase.PlayerController.Controller.Actor.Object
	ArkPlayerFastReplicateDataHolder* PlayerFastReplicateDataHolder;//[Offset: 0x678, Size: 0x8]

--------------------------------
Class: ArkPlayerControllerBase.PlayerController.Controller.Actor.Object
	bool EnableMouseMoveBackground;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x668, Size: 0x1]
	class ArkPlayerInputBase* ArkPlayerInputClass;//[Offset: 0x670, Size: 0x8]
	void ServerPrePlayMontage(int ClientKey, ArkNpc* NPC, AnimMontage* Montage, float InPlayRate, FName SectionName, int Flags);// 0x28a9530
	void ServerPrePlayHitReaction(int ClientKey, ArkNpc* NPC, int ResponseInfoIndex, FName SectionName, const Rotator AdjustedRotation, ArkCharacterBase* Causer, class DamageType DamageTypeClass, float HitPauseTime);// 0x28a92f0
	void ServerDebugActorDetails(Actor* TargetActor, bool bOn);// 0x28a9220
	bool IsInCinematicMode();// 0x28a8450
	bool IsCurrentGamepadInput();// 0x28a8420
	void IgnoreControllerInput(bool bIgnore, bool MoveInput, bool LookInput);// 0x28a8310
	void GSCheatGroupByFileName(FString Filename, FString GroupName);// 0x28a7e10
	void GSCheatGroup(FString GroupName);// 0x28a7d70
	void GSCheat(FString CheatCommand);// 0x28a6720
	enum GetPlayerCursorState();// 0x28a8040
	void EnableUIInputComponent(bool bEnable);// 0x28a7cc0
	void EnableCursorState(enum NewState);// 0x28a7b70
	void ClientPreMontageAck(int ClientKey, ArkNpc* NPC, bool bSuccess, int SequenceID);// 0x28a6de0
	void ClearCursorState(enum ClearState);// 0x28a6be0
	void CallLua_GSCheatGroup(FString Filename, FString GroupName);// 0x305c9c0
	void CallLua_GSCheat(FString CheatCommand);// 0x305c9c0
	float CallLua_GetSettlementConfig(FString Key);// 0x305c9c0
	void BP_GSCheat(FString CheatCommand);// 0x28a6720

--------------------------------
Class: ArkPlayerFastReplicateDataHolder.Actor.Object
	ArkSwarmPosInfo* RelatedSwarmInfo;//[Offset: 0x2f0, Size: 0x8]
	ArkPlayerPosInfo* RelatedPlayerInfo;//[Offset: 0x2f8, Size: 0x8]

--------------------------------
Class: ArkSwarmPosInfo.Object
	ArkSwarmInfoHolder TheSwarmInfo;//[Offset: 0x30, Size: 0x138]

--------------------------------
Class: ArkSwarmInfoHolder.PropertyCustomCompare

--------------------------------
Class: PropertyCustomCompare

--------------------------------
Class: ArkPlayerPosInfo.Object
	ArkPlayerPosInfoHolder ThePlayerInfo;//[Offset: 0x30, Size: 0x148]

--------------------------------
Class: ArkPlayerPosInfoHolder.PropertyCustomCompare

--------------------------------
Class: ArkPlayerInputBase.PlayerInput.Object
	float DoubleClickTime;//[Offset: 0x3a8, Size: 0x4]
	float CombineTime;//[Offset: 0x3ac, Size: 0x4]
	float ClickTime;//[Offset: 0x3b0, Size: 0x4]
	float PressTime;//[Offset: 0x3b4, Size: 0x4]
	float PressExpireTime;//[Offset: 0x3b8, Size: 0x4]
	delegate OnGamepadChangedDelegate;//[Offset: 0x1008, Size: 0x10]
	delegate OnCursorStateChangedDelegate;//[Offset: 0x1018, Size: 0x10]
	delegate OnKeyInputDelegate;//[Offset: 0x1028, Size: 0x10]
	delegate OnHideMouseDelegate;//[Offset: 0x1038, Size: 0x10]
	SoftObjectPath ActionPlayerInputConfig;//[Offset: 0x1048, Size: 0x18]
	SoftObjectPath AxisPlayerInputConfig;//[Offset: 0x1060, Size: 0x18]
	ArkForbidInputInfo[] CurForbidInputArray;//[Offset: 0x10b8, Size: 0x10]
	InputComponent* CurForbidInputComponent;//[Offset: 0x10c8, Size: 0x8]
	void UnbindInputEvent(out const FName EventName, Object* InBindObject, out const delegate Callback);// 0x28bb870
	void RemoveForbidInputInfo(out const ArkForbidInputInfo InForBidInfo);// 0x28bb010
	ArkInputConfig GetInputConfigChecked(out const FName EventName);// 0x28ba9c0
	void ConsumeCurrentInput();// 0x28ba500
	void BindInputEvent(out const FName EventName, Object* InBindObject, out const delegate Callback);// 0x28ba2d0
	void AddForbidInputInfo(out const ArkForbidInputInfo InForBidInfo);// 0x28ba160

--------------------------------
Class: ArkForbidInputInfo
	Object* ForbidObject;//[Offset: 0x0, Size: 0x8]
	FName[] Names;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ArkInputConfig.ArkInputConfigBase.TableRowBase
	FName EventName;//[Offset: 0x28, Size: 0x8]
	bool bImmediate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	FName ActionName;//[Offset: 0x34, Size: 0x8]
	enum EventType_Keyboard;//[Offset: 0x3c, Size: 0x1]
	enum EventType_Gamepad;//[Offset: 0x3d, Size: 0x1]
	FName CombineAction;//[Offset: 0x40, Size: 0x8]
	int Priority;//[Offset: 0x48, Size: 0x4]
	float HoldTime_Keyboard;//[Offset: 0x4c, Size: 0x4]
	float HoldTime_Gamepad;//[Offset: 0x50, Size: 0x4]
	FString KeysDesc;//[Offset: 0x58, Size: 0x10]
	ArkBindEventInfo[] BindEventInfoArray;//[Offset: 0xf0, Size: 0x10]

--------------------------------
Class: ArkInputConfigBase.TableRowBase
	bool bInUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bInputTag_PlayerMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bInputTag_PlayerAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool bInputTag_ExchangeDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]
	bool bInputTag_SpectatingDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bInputTag_ProductUIDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	bool bInputTag_MapUIDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1]
	bool bInputTag_InteractionDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 0x1]
	bool bInputTag_ControlAIDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bInputTag_SystemMenuDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	bool bInputTag_EquipWeaponDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]
	bool bInputTag_PerkMenuDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 0x1]
	bool bInputTag_HavenDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	bool bInputTag_HordeBuildModeDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]
	bool bInputTag_FacilityInteractionDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 0x1]

--------------------------------
Class: ArkBindEventInfo

--------------------------------
Class: ArkWidgetInteractionComponent.LiteComponent.Object
	byte TraceChannel;//[Offset: 0xa8, Size: 0x1]
	float InteractionDistance;//[Offset: 0xac, Size: 0x4]
	int PointerIndex;//[Offset: 0xb0, Size: 0x4]
	WidgetComponent* CurrentHitWidgetComponent;//[Offset: 0x1c8, Size: 0x8]

--------------------------------
Class: ArkMapMarkerConfig
	bool bAttachToActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float Duration;//[Offset: 0x4, Size: 0x4]
	bool bAdmitTeamMateMarker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	float DisplayDistance;//[Offset: 0xc, Size: 0x4]
	int ControlCfgID;//[Offset: 0x10, Size: 0x4]
	class ArkMapMarker* MapMarkerClass;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: ArkMapMarker.Actor.Object
	enum InputType;//[Offset: 0x2e8, Size: 0x1]
	enum MarkerType;//[Offset: 0x2e9, Size: 0x1]
	int ControlConfigID;//[Offset: 0x2ec, Size: 0x4]
	UInt64Property PlayerId;//[Size: 0x8]
	int PlayerIndexInTeam;//[Offset: 0x2f8, Size: 0x4]
	int SerialID;//[Offset: 0x2fc, Size: 0x4]
	int OptionalItemID;//[Offset: 0x300, Size: 0x4]
	int QualityIndex;//[Offset: 0x304, Size: 0x4]
	float CollisionCapsuleRadius;//[Offset: 0x308, Size: 0x4]
	float CollisionCapsuleBodyHeight;//[Offset: 0x30c, Size: 0x4]
	float CollisionRadiusFactorDefault;//[Offset: 0x310, Size: 0x4]
	CurveFloat* CollisionRadiusFactorCurve;//[Offset: 0x318, Size: 0x8]
	float CollisionHeightFactorDefault;//[Offset: 0x320, Size: 0x4]
	CurveFloat* CollisionHeightFactorCurve;//[Offset: 0x328, Size: 0x8]
	bool InitedWithActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 0x1]
	Actor* ActorWeakRef;//[Offset: 0x334, Size: 0x8]
	void InitMarker(enum InInputType, enum InMarkerType);// 0x305c9c0
	Vector GetActorRefLocation();// 0x2835e70
	Actor* GetActorRef();// 0x2835e40

--------------------------------
Class: ArkMapMarkerControlConfig
	int MaxCount;//[Offset: 0x0, Size: 0x4]
	int MaxDistance;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ArkMapMarkerDict
	<PlayerMarkerDictionary_Key(UInt64Property),ArkMapMarkers> PlayerMarkerDictionary;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: ArkMapMarkers
	ArkMapMarker*[] MarkerWeakPtrs;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ArkIndicatorWidget.ArkUserWidgetBaseWithPool.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	Actor* TargetWeakPtr;//[Offset: 0x330, Size: 0x8]
	enum TargetScreenState;//[Offset: 0x338, Size: 0x1]
	enum LastScreenState;//[Offset: 0x339, Size: 0x1]
	Vector2D TargetScreenPos;//[Offset: 0x33c, Size: 0x8]
	bool TargetBehindCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 0x1]
	enum IndicatorLifeCycleState;//[Offset: 0x345, Size: 0x1]
	float CurrentLifespan;//[Offset: 0x348, Size: 0x4]
	Vector2D CenterFocusRangePercentage;//[Offset: 0x34c, Size: 0x8]
	float MinDistanceToShow;//[Offset: 0x354, Size: 0x4]
	bool bUseDistance2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x358, Size: 0x1]
	float UseHeightZ;//[Offset: 0x35c, Size: 0x4]
	bool bDisplayOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	bool bDisplayForwardScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x361, Size: 0x1]
	bool bTilingOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x362, Size: 0x1]
	float TilingSpace;//[Offset: 0x364, Size: 0x4]
	float DrawIndicatorEdgePercentX;//[Offset: 0x368, Size: 0x4]
	float DrawIndicatorEdgePercentY;//[Offset: 0x36c, Size: 0x4]
	Vector2D TargetIndicatorScreenOffset;//[Offset: 0x370, Size: 0x8]
	Vector TargetIndicatorWorldOffset;//[Offset: 0x378, Size: 0xc]
	CurveFloat* TargetIndicatorWorldOffsetLerp;//[Offset: 0x388, Size: 0x8]
	bool bSupportFocusedByPingSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	ArkIndicatorParam_Legacy IndicatorParam;//[Offset: 0x398, Size: 0x38]
	void SetTargetReference(Actor* Ref);// 0x27f2c40
	void SetShuttleMode(bool bSingleShuttleMode);// 0x305c9c0
	void SetLegacyParam(out const ArkIndicatorParam_Legacy TargetParamToSet);// 0x27f2b80
	void SetIndicatorTranslation(Vector2D Loc);// 0x27f2860
	void SetIndicatorRotationDegreeCPP(float AngleDegree);// 0x27f27e0
	void SetIndicatorRotationDegree(float AngleDegree);// 0x305c9c0
	void SetIndicatorLifeCycleState(enum TargetState);// 0x27f2760
	void OnTargetChange(Actor* TargetActor);// 0x305c9c0
	void OnIndicatorLifeCycleStateChange(enum NewState, enum OldState);// 0x27f24d0
	void OnEndLifespan();// 0x305c9c0
	void OnChangeBehindCameraState();// 0x305c9c0
	void NotifyChangeScreenDisplayState(enum CurState);// 0x27f2290
	bool IsTargetOnScreen();// 0x27f2260
	Actor* GetTargetReference();// 0x27f1eb0
	Vector GetTargetLocation();// 0x27f1e70
	float GetTargetDistance();// 0x27f1e30
	enum GetScreenState();// 0x27f1d60
	Vector2D GetScreenPos();// 0x27f1d20
	Vector2D GetIndicatorWidgetBounds();// 0x27f1940

--------------------------------
Class: ArkIndicatorParam_Legacy
	enum IndicatorType;//[Offset: 0x0, Size: 0x1]
	int TeamId;//[Offset: 0x4, Size: 0x4]
	int TeamIndex;//[Offset: 0x8, Size: 0x4]
	int ActorIndex;//[Offset: 0xc, Size: 0x4]
	float LifeSpan;//[Offset: 0x10, Size: 0x4]
	bool bDetailMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	ArkPlayerStateBattle* PlayerState;//[Offset: 0x18, Size: 0x8]
	Vector RelativeOffset;//[Offset: 0x20, Size: 0xc]
	Object* OptionalObject;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: ArkMapMarkerParams
	enum InputType;//[Offset: 0x0, Size: 0x1]
	enum MarkerType;//[Offset: 0x1, Size: 0x1]
	Vector MarkerLoc;//[Offset: 0x4, Size: 0xc]
	Actor* MarkerActor;//[Offset: 0x10, Size: 0x8]
	int OptionalItemID;//[Offset: 0x18, Size: 0x4]
	int QualityIndex;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ArkReportSystemConfig
	FString PlayerUID;//[Offset: 0x0, Size: 0x10]
	FString ReportPlayerUID;//[Offset: 0x10, Size: 0x10]
	FString PlayerName;//[Offset: 0x20, Size: 0x10]
	FString ReportPlayerName;//[Offset: 0x30, Size: 0x10]
	enum ReportScene;//[Offset: 0x40, Size: 0x1]
	FString SceneParam;//[Offset: 0x48, Size: 0x10]
	enum ReportReason;//[Offset: 0x58, Size: 0x1]
	FString ReportDescription;//[Offset: 0x60, Size: 0x10]
	int ClientTimestamp;//[Offset: 0x70, Size: 0x4]
	FString ReportReasonPage;//[Offset: 0x78, Size: 0x10]
	int ReportCategory;//[Offset: 0x88, Size: 0x4]
	int[] ReportReasonArray;//[Offset: 0x90, Size: 0x10]
	FString ReportGroupID;//[Offset: 0xa0, Size: 0x10]
	FString ReportGropuName;//[Offset: 0xb0, Size: 0x10]

--------------------------------
Class: ArkRobotDebugInfo
	FString RobotName;//[Offset: 0x0, Size: 0x10]
	FString ClassName;//[Offset: 0x10, Size: 0x10]
	FName CurStrategyName;//[Offset: 0x20, Size: 0x8]
	FName HostileName;//[Offset: 0x28, Size: 0x8]
	bool UseStrategyMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool ShouldAttackNpc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	bool ReachedStrategyTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	float ReachedStrategyTargetTime;//[Offset: 0x34, Size: 0x4]
	FString CurMoveTargetActor;//[Offset: 0x38, Size: 0x10]
	FName CurAction;//[Offset: 0x48, Size: 0x8]
	bool IsFlee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	float Hp;//[Offset: 0x54, Size: 0x4]
	float MaxHp;//[Offset: 0x58, Size: 0x4]
	FString CurTargetActor;//[Offset: 0x60, Size: 0x10]
	Vector TargetLoc;//[Offset: 0x70, Size: 0xc]
	Vector MuzzleLoc;//[Offset: 0x7c, Size: 0xc]
	Vector AimLoc;//[Offset: 0x88, Size: 0xc]
	Vector[] Points;//[Offset: 0x98, Size: 0x10]
	Vector TeamCenter;//[Offset: 0xa8, Size: 0xc]
	bool IsPathBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	bool UseRandMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 0x1]
	bool UseNavLink;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6, Size: 0x1]
	bool AvoidTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7, Size: 0x1]
	bool CanCross;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	bool IsReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1]
	bool MoveToCover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba, Size: 0x1]
	FString SyncChipStr;//[Offset: 0xc0, Size: 0x10]
	float SycnScore;//[Offset: 0xd0, Size: 0x4]
	ArkRobotDebugSycnInfo[] SyncAis;//[Offset: 0xd8, Size: 0x10]
	bool WantSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	bool WantSyncScore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1]
	Vector CurLoc;//[Offset: 0xec, Size: 0xc]
	FString DiffConfig;//[Offset: 0xf8, Size: 0x10]
	float CurTargetDurationTime;//[Offset: 0x108, Size: 0x4]
	bool HasSetShuttle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1]
	int ShuttleLandLevel;//[Offset: 0x110, Size: 0x4]
	bool AimFail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 0x1]

--------------------------------
Class: ArkRobotDebugSycnInfo
	FString Name;//[Offset: 0x0, Size: 0x10]
	float Health;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ArkGameResultData
	float TotalGameTime;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ArkDeadCameraModifier.CameraModifier.Object
	ArkPlayerControllerBattle* MyController;//[Offset: 0x48, Size: 0x8]
	ArkCharacterBase* LastInjurerPawn;//[Offset: 0x50, Size: 0x8]
	float CameraRotationPitch;//[Offset: 0x73c, Size: 0x4]
	float CameraSpringLength;//[Offset: 0x740, Size: 0x4]
	float LocationInterpSpeed;//[Offset: 0x754, Size: 0x4]
	float RotationInterpSpeed;//[Offset: 0x758, Size: 0x4]
	float CameraModifierLifespan;//[Offset: 0x75c, Size: 0x4]
	float FocusInjurerCameraBegin;//[Offset: 0x760, Size: 0x4]
	float FocusInjurerCameraEnd;//[Offset: 0x764, Size: 0x4]
	class ArkFocusInjurerCameraModifier* FocusInjurerCameraModifierClass;//[Offset: 0x770, Size: 0x8]
	ArkFocusInjurerCameraModifier* FocusInjurerCameraModifier;//[Offset: 0x778, Size: 0x8]
	float CameraObstacleDetectRadius;//[Offset: 0x780, Size: 0x4]
	float CameraDitheredFadingNearClipDistance;//[Offset: 0x784, Size: 0x4]
	float CameraDitheredFadingFarClipDistance;//[Offset: 0x788, Size: 0x4]
	PrimitiveComponent*[] CachedFadeOutComponents;//[Offset: 0x7a0, Size: 0x10]

--------------------------------
Class: ArkFocusInjurerCameraModifier.CameraModifier.Object
	float FocusOnInterpSpeed;//[Offset: 0x740, Size: 0x4]
	FName FocusOnCenterSocketName;//[Offset: 0x744, Size: 0x8]
	float FOVFocusOnInterpSpeed;//[Offset: 0x74c, Size: 0x4]
	CurveFloat* FocusOnFOVCurve;//[Offset: 0x750, Size: 0x8]
	float FocusOnZoomInTime;//[Offset: 0x758, Size: 0x4]
	float FocusOnFreezeTime;//[Offset: 0x760, Size: 0x4]
	float CameraObstacleDetectRadius;//[Offset: 0x778, Size: 0x4]
	PrimitiveComponent*[] CachedFadeOutComponents;//[Offset: 0x780, Size: 0x10]

--------------------------------
Class: ArkRobotController.ArkAIControllerBase.AIController.Controller.Actor.Object
	class ArkPickUp* CoreCubeClass;//[Offset: 0x478, Size: 0x8]
	Vector AimLocation;//[Offset: 0x480, Size: 0xc]
	float LastStandAimFailTime;//[Offset: 0x48c, Size: 0x4]
	Vector StandAimFailLoc;//[Offset: 0x490, Size: 0xc]
	float AimSimRand;//[Offset: 0x4a0, Size: 0x4]
	bool IsReadyAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a4, Size: 0x1]
	bool bInCombatVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a5, Size: 0x1]
	float CloseTeamPlayerCheckRange;//[Offset: 0x4a8, Size: 0x4]
	float FindPickUpRange;//[Offset: 0x4ac, Size: 0x4]
	float TryPickUpRange;//[Offset: 0x4b0, Size: 0x4]
	float DeadLockCheckInteval;//[Offset: 0x4b4, Size: 0x4]
	float DeadLockCheckSpeed;//[Offset: 0x4b8, Size: 0x4]
	float CrouchCheckRange;//[Offset: 0x4bc, Size: 0x4]
	float CrouchFix;//[Offset: 0x4c0, Size: 0x4]
	float KeeyTeamRange;//[Offset: 0x4c4, Size: 0x4]
	float TeamRange;//[Offset: 0x4c8, Size: 0x4]
	float SpotRange;//[Offset: 0x4cc, Size: 0x4]
	float MeleeRange;//[Offset: 0x4d0, Size: 0x4]
	bool bUseAimDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d4, Size: 0x1]
	BehaviorTree* RobotBT;//[Offset: 0x4d8, Size: 0x8]
	float FleeHpScale;//[Offset: 0x4e0, Size: 0x4]
	float FleeHpIn;//[Offset: 0x4e4, Size: 0x4]
	float FleeHpOut;//[Offset: 0x4e8, Size: 0x4]
	float FleeDis;//[Offset: 0x4ec, Size: 0x4]
	float FleeRadius;//[Offset: 0x4f0, Size: 0x4]
	float FleeNearRange;//[Offset: 0x4f4, Size: 0x4]
	float FleeTime;//[Offset: 0x4f8, Size: 0x4]
	float FleeCD;//[Offset: 0x4fc, Size: 0x4]
	float LantenDamageTargetFound;//[Offset: 0x500, Size: 0x4]
	float MinThrowDist;//[Offset: 0x504, Size: 0x4]
	int PeferThrowEnemyNum;//[Offset: 0x508, Size: 0x4]
	float MaxThrowDist;//[Offset: 0x50c, Size: 0x4]
	float ThrowInteval;//[Offset: 0x510, Size: 0x4]
	CurveVector* AimCurveV;//[Offset: 0x518, Size: 0x8]
	float AimRandRange;//[Offset: 0x520, Size: 0x4]
	float NpcAimScale;//[Offset: 0x524, Size: 0x4]
	float MoveAimScale;//[Offset: 0x528, Size: 0x4]
	float CloseShootRange;//[Offset: 0x52c, Size: 0x4]
	float WeakPlayerTargetAimScale;//[Offset: 0x530, Size: 0x4]
	float WeakPlayerHealth;//[Offset: 0x534, Size: 0x4]
	float ChangeTargetCD;//[Offset: 0x538, Size: 0x4]
	float ResyncHpRate;//[Offset: 0x53c, Size: 0x4]
	float ForwardAvoidAngle;//[Offset: 0x540, Size: 0x4]
	float BackAvoidAngle;//[Offset: 0x544, Size: 0x4]
	float CloseAvoidRadius;//[Offset: 0x548, Size: 0x4]
	float NormalFollowRadius;//[Offset: 0x54c, Size: 0x4]
	float CautionFollowRadius;//[Offset: 0x550, Size: 0x4]
	float CombatFollowRadius;//[Offset: 0x554, Size: 0x4]
	float SearchCoverRange;//[Offset: 0x55c, Size: 0x4]
	float SearchCoverSample;//[Offset: 0x560, Size: 0x4]
	float AttackSearchRange;//[Offset: 0x564, Size: 0x4]
	float MaxDistClamp;//[Offset: 0x568, Size: 0x4]
	float SpecialMoveInteval;//[Offset: 0x56c, Size: 0x4]
	float LocHitCacheTime;//[Offset: 0x570, Size: 0x4]
	CurveFloat* DistScoreCurvePlayer;//[Offset: 0x578, Size: 0x8]
	CurveFloat* DistScoreCurveNpcRange;//[Offset: 0x580, Size: 0x8]
	CurveFloat* DistScoreCurveNpcMelee;//[Offset: 0x588, Size: 0x8]
	CurveFloat* DistScoreCurveGuard;//[Offset: 0x590, Size: 0x8]
	float TargetMoveFarDist;//[Offset: 0x598, Size: 0x4]
	float TargetMoveRandRadius;//[Offset: 0x59c, Size: 0x4]
	float TargetMoveMinRadius;//[Offset: 0x5a0, Size: 0x4]
	float TargetMoveRoundRadius;//[Offset: 0x5a4, Size: 0x4]
	int PoiMaxDiffTeamNum;//[Offset: 0x5a8, Size: 0x4]
	class ArkRobotDiffcultyConfig* DefaultDiffConfig;//[Offset: 0x5b0, Size: 0x8]
	float ResetPlayerTargetDurationTime;//[Offset: 0x5b8, Size: 0x4]
	bool bUseRvo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bc, Size: 0x1]
	FName CurHostileName;//[Offset: 0x5c0, Size: 0x8]
	ArkRobotAttackPlayerOption[] AttackPlayerActions;//[Offset: 0x5c8, Size: 0x10]
	class ArkGameBuff[] LowPerformceBuffs;//[Offset: 0x5d8, Size: 0x10]
	<FName,ArkRobotActionOperator> ReloadActionModifier;//[Offset: 0x5e8, Size: 0x50]
	ArkPickUp* TargetPickUp;//[Offset: 0x6b8, Size: 0x8]
	ArkPickUp* WantPickUp;//[Offset: 0x6c0, Size: 0x8]
	DataTable* ActionScoreTable;//[Offset: 0x6c8, Size: 0x8]
	DataTable* StrategyTable;//[Offset: 0x6d0, Size: 0x8]
	DataTable* ShootOptionTable;//[Offset: 0x6d8, Size: 0x8]
	DataTable* RoleOptionTable;//[Offset: 0x6e0, Size: 0x8]
	DataTable* WeaponRoleTable;//[Offset: 0x6e8, Size: 0x8]
	DataTable* HostileTable;//[Offset: 0x6f0, Size: 0x8]
	class ArkRobotDiffcultyConfig* CurDiffCofig;//[Offset: 0x6f8, Size: 0x8]
	bool HasNearNpc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e5, Size: 0x1]
	Actor* Cover;//[Offset: 0x8e8, Size: 0x8]
	ArkPlayer* GuardTarget;//[Offset: 0x940, Size: 0x8]
	ArkShuttleBase* CurShuttle;//[Offset: 0x958, Size: 0x8]
	ArkShuttleBase* DefShuttle;//[Offset: 0x960, Size: 0x8]
	ArkPlayer* ResistDeathTeamMate;//[Offset: 0x968, Size: 0x8]
	ArkNpc* SyncNpcTarget;//[Offset: 0x9b8, Size: 0x8]
	ArkRobotBTBPBase* BTBP;//[Offset: 0x9c8, Size: 0x8]
	FName CurStrategyName;//[Offset: 0x9d8, Size: 0x8]
	FName SpecialStrategyName;//[Offset: 0x9e0, Size: 0x8]
	bool bReachedCurTargetLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa30, Size: 0x1]
	Actor* CurTarget;//[Offset: 0xa98, Size: 0x8]
	ArkRoomVolumeComponent* CurTargetInRoom;//[Offset: 0xaa0, Size: 0x8]
	Actor* StrategyActor;//[Offset: 0xaa8, Size: 0x8]
	Volume* CombatVolume;//[Offset: 0xab8, Size: 0x8]
	ArkPlayer* NearestPlayerEnemy;//[Offset: 0xac0, Size: 0x8]
	ArkPlayer* CautionPlayerEnemy;//[Offset: 0xac8, Size: 0x8]
	ArkPlayer* MyPlayer;//[Offset: 0xad0, Size: 0x8]
	FName RoleName;//[Offset: 0xad8, Size: 0x8]
	bool bStartBT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc30, Size: 0x1]
	bool bPossessStartBT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc31, Size: 0x1]
	Actor* CurFindPlayerTarget;//[Offset: 0xc38, Size: 0x8]
	Actor* CurMoveTargetActor;//[Offset: 0xc40, Size: 0x8]
	float OnPossessTime;//[Offset: 0xc98, Size: 0x4]
	ArkShuttleBase* WantActiveShuttle;//[Offset: 0xca0, Size: 0x8]
	Actor* CurInteractiveActor;//[Offset: 0xca8, Size: 0x8]
	Actor*[] PerceptionActors;//[Offset: 0xda0, Size: 0x10]
	RobotHostileInfo[] HostileList;//[Offset: 0xdb0, Size: 0x10]
	Actor*[] DamageTargetList;//[Offset: 0xe00, Size: 0x10]
	<Actor*,Vector> ActorLocMap;//[Offset: 0xe58, Size: 0x50]
	<Actor*> BadTargetActors;//[Offset: 0xec0, Size: 0x50]
	CameraShake* WeaponShake;//[Offset: 0xf98, Size: 0x8]
	Actor* SyncTarget;//[Offset: 0x1018, Size: 0x8]
	Actor* CurrentInteractingTarget;//[Offset: 0x1028, Size: 0x8]
	void TryPickUp(ArkPickUp* PickupTarget);// 0x2929a20
	bool TryEnterCover();// 0x29299f0
	void TakeAnyDamage(Actor* DamagedActor, float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x2929860
	void StopBT();// 0x2929840
	void StartBT();// 0x2929820
	void SetStrategyActor(Actor* InActor);// 0x29297a0
	void SetSpecialStrategy(FName StrategyName);// 0x2929720
	void SetHostileName(FName NewHostileName);// 0x29296a0
	void SetCurDiffConfig(class ArkRobotDiffcultyConfig DiffCofig);// 0x2929620
	void SetCombatVolume(Volume* Volume);// 0x29295a0
	void SelectStrategy(FName StrategyName);// 0x2929300
	bool RobotDummyCheck();// 0x28922b0
	void RandHero(ArkPlayerStateBattle* MyPlayerState, int HeroID);// 0x2928bb0
	void PathBlockCheck(float DeltaTime);// 0x2928b30
	void OnTargetPerceptionUpdated(Actor* Actor, AIStimulus Stimulus);// 0x29289b0
	void OnSyncFinish(Object* TargetObjRef, enum InteractionType, bool bCancelled, float RemainingTime);// 0x2928860
	void OnSaveFinish(Object* TargetObjRef, enum InteractionType, bool bCancelled, float RemainingTime);// 0x2928710
	void OnPlayerChangeWeapon(const ArkWeaponBase* Weapon, enum Slot);// 0x2928650
	void OnGuardFire();// 0x2928590
	void OnEndInteraction(Object* TargetObjRef, enum InteractionType, bool bCancelled, float RemainingTime);// 0x2928440
	void OnBeignInteraction(Object* TargetPtr, enum TypeDef, float RemainingTime);// 0x2928330
	bool IsPathBlocked();// 0x29280a0
	bool IsFriend(Actor* OtherPlayer);// 0x2928010
	void GiveUpPickUp();// 0x2927ff0
	byte GetTeamID();// 0x2927fc0
	bool GetNextStuckMovePoint(out Vector OutVector);// 0x2927f20
	float GetDist2DFromTeamCenter();// 0x2927ef0
	float GetCurTargetDurationTime();// 0x2927ec0
	void ForwardJump();// 0x2927ea0
	void FindNpc(out ArkNpc*[] OutNpcs);// 0x2927df0
	void FindCover();// 0x2927dd0
	void FakeSyncAI();// 0x2927db0
	void ExitCover();// 0x2927d90
	bool DoAttack();// 0x2927d60
	enum DecideCmd();// 0x2927d30
	void ChooseTargettingMode(enum TargettingMode);// 0x2927cb0
	void ChooseMoveType(enum MoveType);// 0x2927ab0
	void CheckDeadLock();// 0xae2270
	void CheatSyncAI();// 0x2927a90

--------------------------------
Class: ArkRobotDiffcultyConfig.Actor.Object
	DataTable* ActionScoreTable;//[Offset: 0x2e8, Size: 0x8]
	CurveVector* AimCurveV;//[Offset: 0x2f0, Size: 0x8]
	DataTable* ShootOptionTable;//[Offset: 0x2f8, Size: 0x8]

--------------------------------
Class: ArkRobotAttackPlayerOption
	FName ActionName;//[Offset: 0x0, Size: 0x8]
	float Duration;//[Offset: 0x8, Size: 0x4]
	<FName,float> ScoreOverrideMap;//[Offset: 0x10, Size: 0x50]

--------------------------------
Class: ArkRobotActionOperator
	float Value;//[Offset: 0x0, Size: 0x4]
	enum OpType;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: ArkRobotBTBPBase.Object
	float BeginTime;//[Offset: 0x28, Size: 0x4]
	enum NeedShttleStartMinState;//[Offset: 0x2c, Size: 0x1]
	enum NeedShttleStartMaxState;//[Offset: 0x2d, Size: 0x1]
	enum NeedGotoShttleStartState;//[Offset: 0x2e, Size: 0x1]
	int NeedGotoShttleLandLevel;//[Offset: 0x30, Size: 0x4]
	int PoiMaxRobotPlayerNum;//[Offset: 0x34, Size: 0x4]
	float FindPlayerDist;//[Offset: 0x38, Size: 0x4]
	float FindPlayerIntensity;//[Offset: 0x3c, Size: 0x4]
	int[] MaxRoundGotoShuttleCounts;//[Offset: 0x40, Size: 0x10]
	int[] MaxRoundGotoShuttlePerShuttleCounts;//[Offset: 0x50, Size: 0x10]
	float[] MinGoToShuttleRange;//[Offset: 0x60, Size: 0x10]
	FName[] RoundHostileName;//[Offset: 0x70, Size: 0x10]
	float[] LessRobotHostileRangePerRound;//[Offset: 0x80, Size: 0x10]
	ArkShuttleBase* FirstShuttle;//[Offset: 0x98, Size: 0x8]
	ArkShuttleBase* LastShuttle;//[Offset: 0xa0, Size: 0x8]
	ArkShuttleBase*[] CurRoundShuttles;//[Offset: 0xa8, Size: 0x10]
	bool SelectTeamAssembleStrategyBP(ArkRobotController* Robot, out bool Overrider);// 0x29294c0
	bool SelectTeamAssembleStrategy(ArkRobotController* Robot);// 0x2929420
	bool SelectStrategyBP(ArkRobotController* Robot);// 0x2929380
	void SelectStrategy(ArkRobotController* Robot);// 0x28dbce0
	bool SelectShuttleStrategyBP(ArkRobotController* Robot, out bool Overrider);// 0x2929220
	bool SelectShuttleStrategy(ArkRobotController* Robot);// 0x2929180
	bool SelectPoiStrategyBP(ArkRobotController* Robot, out bool Overrider);// 0x29290a0
	bool SelectPoiStrategy(ArkRobotController* Robot);// 0x2929000
	bool SelectHostileBP(ArkRobotController* Robot);// 0x26eb260
	void SelectHostile(ArkRobotController* Robot);// 0x2928f70
	bool SelectFindPlayerStrategyBP(ArkRobotController* Robot, out bool Overrider);// 0x2928e90
	bool SelectFindPlayerStrategy(ArkRobotController* Robot);// 0x2928df0
	bool SelectBeginStrategyBP(ArkRobotController* Robot, out bool Overrider);// 0x2928d10
	bool SelectBeginStrategy(ArkRobotController* Robot);// 0x2928c70
	bool NeedShuttleBP(ArkShuttleBase* Shuttle, out bool Overrider);// 0x2928250
	bool NeedShuttle(ArkShuttleBase* Shuttle);// 0x29281b0
	bool NeedGotoShuttleBP(ArkShuttleBase* Shuttle, out bool Overrider);// 0x29280d0
	bool NeedGotoShuttle(ArkShuttleBase* Shuttle);// 0x26b3540
	ArkShuttleBase* ChooseShuttleBP(ArkRobotController* Robot, out bool Overrider);// 0x2927bd0
	ArkShuttleBase* ChooseShuttle(ArkRobotController* Robot);// 0x2927b30

--------------------------------
Class: RobotHostileInfo
	ArkCharacterBase* Character;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ArkProjectileGuideSpline.ArkSplineTemplate.Actor.Object
	ArkPlayer* OwnerPlayer;//[Offset: 0x350, Size: 0x8]
	ArkItemThrowable* throwableItem;//[Offset: 0x358, Size: 0x8]
	class DecalActor* decalTemplate;//[Offset: 0x360, Size: 0x8]
	ParticleSystem* ParticleTemplate;//[Offset: 0x368, Size: 0x28]
	int MaxSplinePointCount;//[Offset: 0x390, Size: 0x4]
	float sectionTickTime;//[Offset: 0x394, Size: 0x4]
	<enum,ArkProjectileSplineParam> splineParams;//[Offset: 0x398, Size: 0x50]
	DecalActor* Decal;//[Offset: 0x3e8, Size: 0x8]
	ArkSoftParticleSystemComponentWithPool* hitParticle;//[Offset: 0x3f0, Size: 0x8]

--------------------------------
Class: DecalActor.Actor.Object
	DecalComponent* Decal;//[Offset: 0x2e8, Size: 0x8]
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x4b837f0
	MaterialInterface* GetDecalMaterial();// 0x4b832f0
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x27c6e10

--------------------------------
Class: ArkProjectileSplineParam
	FName bindSlotName;//[Offset: 0x0, Size: 0x8]
	float throwPitch;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ArkPlayerCameraManager.ArkPlayerCameraManagerBase.PlayerCameraManager.Actor.Object
	bool bUseToggleLeftRightMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e21, Size: 0x1]
	float BlendTime;//[Offset: 0x2e44, Size: 0x4]
	CameraConfig CurrentCameraConfig;//[Offset: 0x2e48, Size: 0x50]
	bool bUseCustomCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e98, Size: 0x1]
	CameraConfig CustomCameraConfig;//[Offset: 0x2ea0, Size: 0x50]
	DataTable* StateCameraConfig;//[Offset: 0x2ef8, Size: 0x8]
	float DebugMoveSpeed;//[Offset: 0x2f00, Size: 0x4]
	float DebugRotateSpeed;//[Offset: 0x2f04, Size: 0x4]
	float DebugSpeedFactor;//[Offset: 0x2f08, Size: 0x4]
	bool bIsAutoFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0c, Size: 0x1]
	float ShootLeftRightBlendTime;//[Offset: 0x2f10, Size: 0x4]
	float InCoverLeftRightBlendTime;//[Offset: 0x2f14, Size: 0x4]
	Vector LargeShieldSocketOffset;//[Offset: 0x2f18, Size: 0xc]
	Vector ScanEnhancementSocketOffset;//[Offset: 0x2f24, Size: 0xc]
	float PlayerHideDistance;//[Offset: 0x2f30, Size: 0x4]
	float CameraCalibrateFactor;//[Offset: 0x2f34, Size: 0x4]
	ArkCurveCamera* DefaultCameraPitch_Curve;//[Offset: 0x2f38, Size: 0x8]
	ArkCurveCamera* ShoulderCameraPitch_Curve;//[Offset: 0x2f40, Size: 0x8]
	ArkCurveCamera* LowCoverTargetingPitch_Curve;//[Offset: 0x2f48, Size: 0x8]
	ArkCurveCamera* LowCoverAimingPitch_Curve;//[Offset: 0x2f50, Size: 0x8]
	float FadeInGameLockActionsTime;//[Offset: 0x2f68, Size: 0x4]
	CameraConfig FadeInGameCameraConfig;//[Offset: 0x2f70, Size: 0x50]
	float FadeInInitArmCamLength;//[Offset: 0x2fc0, Size: 0x4]
	CameraPresets* CameraPresets;//[Offset: 0x2fc8, Size: 0x8]
	<FString,ArkPlayerCameraPostProcessInfo> PostProcessTypeMap;//[Offset: 0x2fd8, Size: 0x50]
	ArkCameraSpringArmComponent* CameraBoom;//[Offset: 0x3068, Size: 0x8]
	ArkPlayer* ViewPlayer;//[Offset: 0x3090, Size: 0x8]
	CameraComponent* PlayerCamera;//[Offset: 0x3098, Size: 0x8]
	float TranslationSpeed;//[Offset: 0x30a4, Size: 0x4]
	float RotationSpeed;//[Offset: 0x30a8, Size: 0x4]
	float TranslationRevise;//[Offset: 0x30ac, Size: 0x4]
	float RotationRevise;//[Offset: 0x30b0, Size: 0x4]
	float Slomo;//[Offset: 0x30b4, Size: 0x4]
	class CineCameraActor* MarketingActorClass;//[Offset: 0x30c0, Size: 0x8]
	CineCameraActor* MarketingActor;//[Offset: 0x30c8, Size: 0x8]
	void SetDepthOfFieldParameters(PostProcessSettings NewSettings);// 0x28a0ae0
	void SetCheckCameraModifierCollisionState(bool bInIsCheck);// 0x28a09d0
	void PlayEnterSprintEffect();// 0x305c9c0
	void PlayBlindingEffect(float Duration);// 0x305c9c0
	bool IsCurrentStateInclude(enum MatchState);// 0x28a0330
	FString GetCurrentViewTargetName();// 0x28a0110
	FString GetCurrentCameraStateString();// 0x28a0090
	void EnableCustomCameraConfig(bool bEanble, CameraConfig ConfigInfo);// 0x289fd60

--------------------------------
Class: ArkPlayerCameraManagerBase.PlayerCameraManager.Actor.Object

--------------------------------
Class: CameraConfig.TableRowBase
	ArkTransitionParams BlendParams;//[Offset: 0x8, Size: 0x14]
	float TargetArmLength;//[Offset: 0x1c, Size: 0x4]
	Vector SocketOffset;//[Offset: 0x20, Size: 0xc]
	Vector TargetOffset;//[Offset: 0x2c, Size: 0xc]
	bool bUseCameraSocketAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float FOV;//[Offset: 0x3c, Size: 0x4]
	SpecificBlending[] SpecificBlendings;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: ArkTransitionParams
	float BlendInTime;//[Offset: 0x0, Size: 0x4]
	float BlendOutTime;//[Offset: 0x4, Size: 0x4]
	byte BlendFunction;//[Offset: 0x8, Size: 0x1]
	float BlendExp;//[Offset: 0xc, Size: 0x4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: SpecificBlending
	int TargetState;//[Offset: 0x0, Size: 0x4]
	float SpecificBlendTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ArkCurveCamera.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	float GetTargetArmLengthValue(float InTime);// 0x26f2ee0
	Vector GetSocketOffsetValue(float InTime);// 0x26f31e0
	float GetFOVValue(float InTime);// 0x26f2f70

--------------------------------
Class: CameraPresets.Object
	<int,CameraConfig> CameraStateConfigMap;//[Offset: 0x28, Size: 0x50]
	<int,FName> CameraStateNameMap;//[Offset: 0x78, Size: 0x50]
	<int,ArmBandOffsetInfo> CameraStateArmBandOffsetInfoMap;//[Offset: 0xc8, Size: 0x50]

--------------------------------
Class: ArmBandOffsetInfo
	Vector LeftOffset;//[Offset: 0x0, Size: 0xc]
	Vector RightOffset;//[Offset: 0xc, Size: 0xc]
	float Scale;//[Offset: 0x18, Size: 0x4]
	bool bDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: ArkPlayerCameraPostProcessInfo
	MaterialInstance* MaterialClass;//[Offset: 0x0, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ArkCameraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	Vector CameraBoneOriginOffset;//[Offset: 0x440, Size: 0xc]
	float ImpactDistance;//[Offset: 0x44c, Size: 0x4]
	float CameraCollisionBlendTime;//[Offset: 0x450, Size: 0x4]
	float CameraCollisionBlendExp;//[Offset: 0x454, Size: 0x4]
	float CameraLocationLagLerpSpeedXY;//[Offset: 0x458, Size: 0x4]
	float LerpSpeedAddXY;//[Offset: 0x45c, Size: 0x4]
	float CameraLocationLagLerpSpeedZ;//[Offset: 0x460, Size: 0x4]
	float LerpSpeedAddZ;//[Offset: 0x464, Size: 0x4]
	bool UseCameraSocketAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 0x1]
	float UseCameraSocketAnimationInterpValue;//[Offset: 0x46c, Size: 0x4]
	float CeilHitTestReduce;//[Offset: 0x470, Size: 0x4]
	float CeilHitHeadDownDistance;//[Offset: 0x474, Size: 0x4]
	void SimulateCameraCollision(out MinimalViewInfo InOutFOV, const ArkPlayer* PlayerOwner);// 0x26a8680
	Vector GetHorizontalCameraLocation();// 0x26a77b0
	FString GetCurrentCameraHitName();// 0x26a7730

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x3a8, Size: 0x4]
	Vector SocketOffset;//[Offset: 0x3ac, Size: 0xc]
	Vector TargetOffset;//[Offset: 0x3b8, Size: 0xc]
	float ProbeSize;//[Offset: 0x3c4, Size: 0x4]
	byte ProbeChannel;//[Offset: 0x3c8, Size: 0x1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3cc, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3cc, Size: 0x1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3cc, Size: 0x1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3cc, Size: 0x1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3cc, Size: 0x1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3cc, Size: 0x1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3cc, Size: 0x1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3cc, Size: 0x1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3cd, Size: 0x1]
	float CameraLagSpeed;//[Offset: 0x3d0, Size: 0x4]
	float CameraRotationLagSpeed;//[Offset: 0x3d4, Size: 0x4]
	bool bLerpArmLength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 0x1]
	float CameraLagMaxTimeStep;//[Offset: 0x3dc, Size: 0x4]
	float CameraLagMaxDistance;//[Offset: 0x3e0, Size: 0x4]
	bool IsCollisionFixApplied();// 0x4ca6bf0
	Vector GetUnfixedCameraPosition();// 0x4ca6bb0
	Rotator GetTargetRotation();// 0x4ca6b70

--------------------------------
Class: ArkRangeWeapon.ArkWeaponBase.Actor.Object
	enum WeaponReloadState;//[Offset: 0x818, Size: 0x4]
	int MaxAmmo;//[Offset: 0x820, Size: 0x4]
	bool bShouldHoldOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x824, Size: 0x1]
	AkAudioEvent* ExpectedStopSound;//[Offset: 0x838, Size: 0x8]
	ArkSoftParticleSystemComponentWithPool* MuzzleFxFppComp;//[Offset: 0x840, Size: 0x8]
	ArkSoftParticleSystemComponentWithPool* MuzzleFxTppComp;//[Offset: 0x848, Size: 0x8]
	ArkSoftParticleSystemComponentWithPool* AdsCautionFxComp;//[Offset: 0x850, Size: 0x8]
	ArkSoftParticleSystemComponentWithPool* BulletShellFxFppComp;//[Offset: 0x858, Size: 0x8]
	ArkSoftParticleSystemComponentWithPool* BulletShellFxTppComp;//[Offset: 0x860, Size: 0x8]
	ParticleSystem* MuzzleFXTpp;//[Offset: 0x868, Size: 0x28]
	ParticleSystem* MuzzleFXAds;//[Offset: 0x890, Size: 0x28]
	ParticleSystem* MuzzleBrakeFXTpp;//[Offset: 0x8b8, Size: 0x28]
	ParticleSystem* MuzzleBrakeFXAds;//[Offset: 0x8e0, Size: 0x28]
	ParticleSystem* MuzzleSilencerFXTpp;//[Offset: 0x908, Size: 0x28]
	ParticleSystem* MuzzleSilencerFXAds;//[Offset: 0x930, Size: 0x28]
	ParticleSystem* BulletShellFxTpp;//[Offset: 0x958, Size: 0x28]
	ParticleSystem* BulletShellFxAds;//[Offset: 0x980, Size: 0x28]
	MaterialInterface* BulletInteractiveFieldMat;//[Offset: 0x9a8, Size: 0x8]
	Vector BulletInteractiveFieldRange;//[Offset: 0x9b0, Size: 0xc]
	float BulletInteractiveFieldDuring;//[Offset: 0x9bc, Size: 0x4]
	bool bDropBulletShellImmediately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c0, Size: 0x1]
	class CameraShake* FireCameraShake;//[Offset: 0x9c8, Size: 0x8]
	ForceFeedbackEffect* FireForceFeedback;//[Offset: 0x9d0, Size: 0x28]
	FName MuzzleAttachPoint;//[Offset: 0x9f8, Size: 0x8]
	FName PluginMuzzleAttachPoint;//[Offset: 0xa00, Size: 0x8]
	FName ClipAttachPoint;//[Offset: 0xa08, Size: 0x8]
	AnimMontage* ReloadAnim;//[Offset: 0xa10, Size: 0x8]
	AnimMontage* TacticsReloadAnim;//[Offset: 0xa18, Size: 0x8]
	AnimMontage* ReloadAnim_FPP;//[Offset: 0xa20, Size: 0x8]
	AnimMontage* TacticsReloadAnim_FPP;//[Offset: 0xa28, Size: 0x8]
	AnimMontage* FireAnim;//[Offset: 0xa30, Size: 0x8]
	AnimMontage* TargetingFireAnim;//[Offset: 0xa38, Size: 0x8]
	AnimMontage* RechamberAnim;//[Offset: 0xa40, Size: 0x8]
	AnimMontage* RechamberAnim_Fpp;//[Offset: 0xa48, Size: 0x8]
	float FireRecoilAnimArmAlpha;//[Offset: 0xa50, Size: 0x4]
	float FireRecoilAnimSpineAlpha;//[Offset: 0xa54, Size: 0x4]
	float FireAnimAlpha;//[Offset: 0xa58, Size: 0x4]
	float AnimFireInterval;//[Offset: 0xa5c, Size: 0x4]
	AnimMontage* FppToIdleAnimMontage;//[Offset: 0xa60, Size: 0x8]
	AnimSequence* FPPIdleAnimPoseReference;//[Offset: 0xa68, Size: 0x8]
	AnimSequence* WeaponIdleAnim;//[Offset: 0xa70, Size: 0x8]
	AnimSequence* WeaponRechamberAnim;//[Offset: 0xa78, Size: 0x8]
	AnimSequence* WeaponFireAnim;//[Offset: 0xa80, Size: 0x8]
	AnimSequence* WeaponHoldOpenAdditiveAnim;//[Offset: 0xa88, Size: 0x8]
	AnimSequenceBase* WeaponReloadAnim;//[Offset: 0xa90, Size: 0x8]
	AnimSequenceBase* WeaponTacticsReloadAnim;//[Offset: 0xa98, Size: 0x8]
	AnimSequence* WeaponAutoModeAdditiveAnim;//[Offset: 0xaa0, Size: 0x8]
	AnimSequence* WeaponBurstModeAdditiveAnim;//[Offset: 0xaa8, Size: 0x8]
	AnimSequence* WeaponSingleModeAdditiveAnim;//[Offset: 0xab0, Size: 0x8]
	AnimSequence* HipHandGripPoseAnim;//[Offset: 0xab8, Size: 0x8]
	AnimSequence* TargetingHandGripPoseAnim;//[Offset: 0xac0, Size: 0x8]
	StaticMesh* ClipMesh;//[Offset: 0xac8, Size: 0x28]
	float ClipDestroyDuration;//[Offset: 0xaf0, Size: 0x4]
	int DefaultBaseGunTechID;//[Offset: 0xaf4, Size: 0x4]
	bool bUseFireAnimStateMachine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf8, Size: 0x1]
	bool bOneShotReloadWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba8, Size: 0x1]
	AnimMontage* CachedReloadAnim;//[Offset: 0xbb0, Size: 0x8]
	AnimMontage* CachedReloadAnim_FPP;//[Offset: 0xbb8, Size: 0x8]
	AnimSequenceBase* CachedWeaponReloadAnim;//[Offset: 0xbc0, Size: 0x8]
	int PackedReloadInfo;//[Offset: 0xbcc, Size: 0x4]
	bool CanAutoReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe1, Size: 0x1]
	bool bIsSimulatingRechamber;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe2, Size: 0x1]
	bool bRechamberWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe5, Size: 0x1]
	float MuzzleSpecialCheckDist;//[Offset: 0xbf0, Size: 0x4]
	float MuzzleHitToCameraHitDistThreshold;//[Offset: 0xbf4, Size: 0x4]
	float AmmoIconsCount;//[Offset: 0xc80, Size: 0x4]
	int PrimaryClipIconOffset;//[Offset: 0xc84, Size: 0x4]
	class ArkDamageType* DamageType;//[Offset: 0xc88, Size: 0x8]
	enum AmmoType;//[Offset: 0xc90, Size: 0x1]
	enum BulletAudioDataID;//[Offset: 0xc91, Size: 0x1]
	Rotator RecoilSpine01AdditiveRotation;//[Offset: 0xc94, Size: 0xc]
	Rotator RecoilSpine02AdditiveRotation;//[Offset: 0xca0, Size: 0xc]
	Rotator RecoilSpine03AdditiveRotation;//[Offset: 0xcac, Size: 0xc]
	Rotator RecoilClavicleAdditiveRotation;//[Offset: 0xcb8, Size: 0xc]
	Rotator RecoilNeckAdditiveRotation;//[Offset: 0xcc4, Size: 0xc]
	Rotator RecoilHeadAdditiveRotation;//[Offset: 0xcd0, Size: 0xc]
	Vector RecoilHandIKOffset;//[Offset: 0xcdc, Size: 0xc]
	Rotator RecoilHandIKRot;//[Offset: 0xce8, Size: 0xc]
	Vector HandRecoilIKOffsetFPS;//[Offset: 0xcf4, Size: 0xc]
	Rotator HandRecoilIKRotFPS;//[Offset: 0xd00, Size: 0xc]
	ArkCurveRecoilAdvanced* RecoilHandModifierCurveAdvanced;//[Offset: 0xd10, Size: 0x8]
	CurveVector* RecoilHandModifierCurve;//[Offset: 0xd18, Size: 0x8]
	CurveVector* RecoilClavicleModifierCurve;//[Offset: 0xd20, Size: 0x8]
	CurveVector* RecoilSpineModifierCurve;//[Offset: 0xd28, Size: 0x8]
	bool FullBlendRefireRecoil;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd30, Size: 0x1]
	float ShootHoldingTime;//[Offset: 0xd34, Size: 0x4]
	float CoverShootHoldingTime;//[Offset: 0xd38, Size: 0x4]
	FName RangeWeaponName;//[Offset: 0xd40, Size: 0x8]
	FName OverrideAudioDataID;//[Offset: 0xd48, Size: 0x8]
	FName MuzzleOverride;//[Offset: 0xd50, Size: 0x8]
	bool bFirstBulletCanNoSpread;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd58, Size: 0x1]
	int PackedFireCounterInfo;//[Offset: 0xd5c, Size: 0x4]
	Vector_NetQuantize[] FireHitLocationArray;//[Offset: 0xd68, Size: 0x10]
	int PackedFireAmmoInfo;//[Offset: 0xd78, Size: 0x4]
	int FireID;//[Offset: 0xd7c, Size: 0x4]
	int LastFireID;//[Offset: 0xd80, Size: 0x4]
	Vector[] ShotDirForOneFireID;//[Offset: 0xd88, Size: 0x10]
	bool ExtraAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd98, Size: 0x1]
	ArkSoftSkeletalMeshComponent* FppMeshComp;//[Offset: 0xdc8, Size: 0x8]
	float CurrentFiringSpread;//[Offset: 0xdd0, Size: 0x4]
	Vector MirrorRelativeLocation;//[Offset: 0xde0, Size: 0xc]
	FName CrossOverrideSocket;//[Offset: 0xdec, Size: 0x8]
	FName MirrorAttachSocket;//[Offset: 0xdf4, Size: 0x8]
	FName MirrorWeaponSocket;//[Offset: 0xdfc, Size: 0x8]
	FName TurnCenterPoint;//[Offset: 0xe04, Size: 0x8]
	Transform relativeTransForWeaponAttach;//[Offset: 0xe10, Size: 0x30]
	Vector relativeLocForFps;//[Offset: 0xe40, Size: 0xc]
	bool bIsclosedbolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4c, Size: 0x1]
	ArkStopFiringInfo StopFireEffectInfo;//[Offset: 0xe50, Size: 0x40]
	int ClickContinueFireRemain;//[Offset: 0xea0, Size: 0x4]
	class ArkWeaponInfoWidget* AimAmmoDisplayWidgetClass;//[Offset: 0xfc0, Size: 0x8]
	WidgetComponent* AimAmmoDisplayWidgetComp;//[Offset: 0xfc8, Size: 0x8]
	FName AimAmmoDisplayRefSocket;//[Offset: 0xfd0, Size: 0x8]
	Vector AimAmmoDisplayOffset_Aiming;//[Offset: 0xfd8, Size: 0xc]
	Vector AimAmmoDisplayOffset_Targeting;//[Offset: 0xfe4, Size: 0xc]
	Vector AimAmmoDisplayOffset_LeftTargeting;//[Offset: 0xff0, Size: 0xc]
	class ArkCrosshairWidget* CrosshairWidgetClass;//[Offset: 0x1000, Size: 0x8]
	CurveFloat* FireIncreasementCurve;//[Offset: 0x1018, Size: 0x8]
	float[] FireIncreasementHistory;//[Offset: 0x1020, Size: 0x10]
	int CurrentFireIncreaseCount;//[Offset: 0x1034, Size: 0x4]
	float CurrentFovScale;//[Offset: 0x1040, Size: 0x4]
	float LastFovScale;//[Offset: 0x1044, Size: 0x4]
	float FinalScopeToMirrorSize2D;//[Offset: 0x1050, Size: 0x4]
	ArkWidgetComponentWithPool* ScopeUIComponent;//[Offset: 0x1078, Size: 0x8]
	ArkCacheLastAnimInfo LastAnimInfo;//[Offset: 0x1088, Size: 0x10]
	int[] PlusFireIDArray;//[Offset: 0x10c8, Size: 0x10]
	float DefaultFppOffset;//[Offset: 0x10d8, Size: 0x4]
	float DefaultHorizontalOffset;//[Offset: 0x10dc, Size: 0x4]
	float DefaultVerticalOffset;//[Offset: 0x10e0, Size: 0x4]
	bool bIgnoreScopeFovWhenReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e4, Size: 0x1]
	bool bIgnoreScopeFovWhenTacReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e5, Size: 0x1]
	ArkWeaponPluginSkinDataInfo WeaponPlugins;//[Offset: 0x10e8, Size: 0x798]
	int AdsCautionEmitterCount;//[Offset: 0x188c, Size: 0x4]
	Transform WeaponRTrans;//[Offset: 0x1890, Size: 0x30]
	Transform WeaponR2CamTrans;//[Offset: 0x18c0, Size: 0x30]
	bool bIsDuringFPPReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18f2, Size: 0x1]
	float FppReloadBlendInTime;//[Offset: 0x18f4, Size: 0x4]
	float FppReloadBlendOutTime;//[Offset: 0x18f8, Size: 0x4]
	bool bIsWeaponVisibleToLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1908, Size: 0x1]
	float WeaponFireRatePercent;//[Offset: 0x190c, Size: 0x4]
	float ADSCautionVOCooldown;//[Offset: 0x1910, Size: 0x4]
	bool bPendingShowAdsCaution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1914, Size: 0x1]
	int ChildBulletCount;//[Offset: 0x1924, Size: 0x4]
	int BloodSplatterDivider;//[Offset: 0x1928, Size: 0x4]
	bool bIsShotGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1944, Size: 0x1]
	Object*[] ExtraAssetsToLoad;//[Offset: 0x1948, Size: 0x10]
	Object*[] AssetsToLoad;//[Offset: 0x1958, Size: 0x10]
	Object*[] AsyncAssetsRefs;//[Offset: 0x1968, Size: 0x10]
	bool UseAdvancedRecoilModifierCurve();// 0x291dd80
	void ToggleFireSpeed();// 0x291dd50
	void TirggerSimulatedReload();// 0x291dd30
	void SetTimeBetweenShot(float inTimeBetweenShot);// 0x291dc90
	void SetSpeedUpValue(float Value, enum Method);// 0x291dbc0
	void SetAutoExitTacReload(bool InValue);// 0x291db40
	void SetAutoExitReload(bool InValue);// 0x291dac0
	void ServerStopReload();// 0x291da70
	void ServerStopRechamber();// 0x291da20
	void ServerStartReload(float StartServerTime, float Delay);// 0x291d920
	void ServerStartRechamber(float StartServerTime, float Delay);// 0x291d820
	void ServerStartHoldingWeapon();// 0x291d7d0
	void ServerSetIgnoreRechamberCheck(bool bIgnoreCheck);// 0x291d710
	void ServerSetFireIDArray(FString InValue);// 0x291d650
	void ServerResetWeaponReloadState();// 0x291d600
	void ServerReloadSingleBullet();// 0x291d5b0
	void ServerHandleFiring(int InFireID, const Vector_NetQuantize[] InFireHitLocationArray);// 0x291d4b0
	void ServerAckFireRepLock();// 0x291d460
	void OverrideRadialDamageParams(out const RadialDamageParams NewRadialDamageParams, bool bOverride);// 0x291d320
	void OnShowHUDChanged(bool InHudShownFlag);// 0x291d1d0
	void OnRep_PackedReloadInfo();// 0x291d1b0
	void OnRep_PackedFireCounterInfo(int OldPackedFireCounterInfo);// 0x291d130
	void OnRep_PackedFireAmmoInfo(int PrevPackedFireAmmoInfo);// 0x291d0b0
	void OnRep_IsSimulatingRechamber();// 0x291d090
	void OnRep_FireHitLocationArray();// 0x291d070
	void OnRep_ExtraAmmo();// 0x12f5c30
	void OnRep_CanAutoReloading();// 0xae2270
	void OnParticleAsyncLoadFinished();// 0x291cc10
	void OnOneShotReloadMontageSectionChanged(bool bStart);// 0x291cb80
	void OnFireAnimationSectionChanged(AnimMontage* Montage, FName PrevSection, FName CurSection);// 0x291ca80
	bool IsDuringFPPReload();// 0x291ca60
	SkeletalMeshComponent* GetWeaponFppMesh();// 0x291c970
	float GetSpeedUpValue();// 0x291c950
	Rotator GetMuzzleRotation();// 0x291c910
	Vector GetMuzzleLocation(bool bIsFpp);// 0x291c860
	Vector GetMuzzleDirection();// 0x291c820
	float GetMuzzleBlockedDistanceRatio();// 0x291c7f0
	bool GetIgnoreScopeFovWhenTacReloading();// 0x291c7d0
	bool GetIgnoreScopeFovWhenReloading();// 0x291c7b0
	AnimSequence* GetCustomTargetingHandGripPoseAnim();// 0x291c780
	AnimSequence* GetCustomHipHandGripPoseAnim();// 0x291c750
	SkeletalMeshComponent* GetCurrentWeaponMesh();// 0x291c720
	float GetCurrentSpread();// 0x291c6f0
	Vector GetCurrentRecoilSpineModifier();// 0x291c6b0
	Rotator GetCurrentRecoilHandModifierRotationOffset();// 0x291c670
	float GetCurrentRecoilHandModifierRot();// 0x291c630
	float GetCurrentRecoilHandModifierOffset();// 0x291c5f0
	Vector GetCurrentRecoilHandModifierLocationOffset();// 0x291c5b0
	Vector GetCurrentRecoilClavicleModifier();// 0x291c570
	void ForceStopReload();// 0x291c550
	void ForceStopRechamber();// 0x291c530
	void FireSpeedUpReset();// 0x291c510
	void DebugDrawLine(Vector inStart, Vector inEnd);// 0x291c430
	void ClientSyncFireRepLock();// 0x291c410
	void ClientRechamberWeapon();// 0x291c3f0
	void BPToggleAiming(bool bAiming);// 0x305c9c0

--------------------------------
Class: ArkCurveRecoilAdvanced.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	AdvancedRecoilCurve GetValue(float InTime);// 0x26f3310

--------------------------------
Class: AdvancedRecoilCurve

--------------------------------
Class: ArkStopFiringInfo
	float TriggerDuration;//[Offset: 0x0, Size: 0x4]
	int TriggerCount;//[Offset: 0x4, Size: 0x4]
	float DisplayDelay;//[Offset: 0x8, Size: 0x4]
	ParticleSystem* FireDelayFx;//[Offset: 0x10, Size: 0x28]
	FName AttachSocket;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: ArkWeaponInfoWidget.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	bool bSupportAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	float CurrentAmmo;//[Offset: 0x304, Size: 0x4]
	float MaxAmmo;//[Offset: 0x308, Size: 0x4]
	bool IsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 0x1]
	ArkWeaponBase* Weapon;//[Offset: 0x310, Size: 0x8]
	Image* WeaponAmmo;//[Offset: 0x318, Size: 0x8]
	bool SetWeapon(ArkWeaponBase* InWeapon);// 0x29ce090
	void OnWeaponPluginChangedBP();// 0x305c9c0
	void OnWeaponPluginChanged();// 0x29cd8d0
	void OnWeaponIndexUpdate(enum WeaponSlot);// 0x305c9c0
	void OnWeaponAmmoChangedBP();// 0x305c9c0
	void OnWeaponAmmoChanged();// 0x29cd7d0
	void OnSelected(bool bSelected);// 0x305c9c0
	void InitFovScaleUI(CanvasPanel* inPanel, Image* InImage, TextBlock* InText);// 0x29cd2c0
	PaperSprite*[] GetPluginIcons();// 0x29ccdf0
	void GetFovScaleInfo(Image* inCurrentImage, Image* InitImage, CanvasPanel* inPanel, float InValue);// 0x29ccbe0
	void ChangeCurrentScopeValue(float InValue);// 0x305c9c0

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x130, Size: 0x18]
	bool bUpperCase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	delegate TextDelegate;//[Offset: 0x14c, Size: 0x10]
	bool bCurrentTextScrollable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 0x1]
	ScrollBoxStyle WidgetStyle;//[Offset: 0x160, Size: 0x228]
	float PeriodTime_ShowFirstPart;//[Offset: 0x388, Size: 0x4]
	float ScrollSpeedFactor;//[Offset: 0x38c, Size: 0x4]
	float IntervalEachIteration;//[Offset: 0x390, Size: 0x4]
	float FadeInEffectSeconds;//[Offset: 0x394, Size: 0x4]
	enum AutoScrollingOrientation;//[Offset: 0x398, Size: 0x1]
	SlateColor ColorAndOpacity;//[Offset: 0x3a0, Size: 0x28]
	delegate ColorAndOpacityDelegate;//[Offset: 0x3c8, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x3d8, Size: 0x50]
	SlateBrush StrikeBrush;//[Offset: 0x428, Size: 0x88]
	Vector2D ShadowOffset;//[Offset: 0x4b0, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x4b8, Size: 0x10]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x4c8, Size: 0x10]
	float MinDesiredWidth;//[Offset: 0x4d8, Size: 0x4]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dc, Size: 0x1]
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dd, Size: 0x1]
	bool bSimpleTextMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4de, Size: 0x1]
	void SetText(FText InText);// 0x415be80
	void SetStrikeBrush(SlateBrush InStrikeBrush);// 0x415bc50
	void SetShadowOffset(Vector2D InShadowOffset);// 0x415b950
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x415b8d0
	void SetOpacity(float InOpacity);// 0x415b850
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x415b550
	void SetFont(SlateFontInfo InFontInfo);// 0x415af90
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x415ae20
	void SetAutoWrapText(bool InAutoTextWrap);// 0x415ad90
	void SetAutoWrapAt(float InValue);// 0x415ad10
	FText GetText();// 0x415a930
	int GetLineCount();// 0x415a730
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0x415a700
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0x415a6d0

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x110, Size: 0x3]
	byte Justification;//[Offset: 0x113, Size: 0x1]
	enum WrappingPolicy;//[Offset: 0x114, Size: 0x1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x115, Size: 0x1]
	float WrapTextAt;//[Offset: 0x118, Size: 0x4]
	Margin Margin;//[Offset: 0x11c, Size: 0x10]
	float LineHeightPercentage;//[Offset: 0x12c, Size: 0x4]
	void SetJustification(byte InJustification);// 0x415b240

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 0x8]
	Object* FontMaterial;//[Offset: 0x8, Size: 0x8]
	FontOutlineSettings OutlineSettings;//[Offset: 0x10, Size: 0x20]
	FName TypefaceFontName;//[Offset: 0x40, Size: 0x8]
	int Size;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 0x4]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bApplyOutlineToDropShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	Object* OutlineMaterial;//[Offset: 0x8, Size: 0x8]
	LinearColor OutlineColor;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	enum TextShapingMethod;//[Offset: 0x1, Size: 0x1]
	enum TextFlowDirection;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: ScrollBoxStyle.SlateWidgetStyle
	SlateBrush TopShadowBrush;//[Offset: 0x8, Size: 0x88]
	SlateBrush BottomShadowBrush;//[Offset: 0x90, Size: 0x88]
	SlateBrush LeftShadowBrush;//[Offset: 0x118, Size: 0x88]
	SlateBrush RightShadowBrush;//[Offset: 0x1a0, Size: 0x88]

--------------------------------
Class: SlateWidgetStyle

--------------------------------
Class: ArkCacheLastAnimInfo
	AnimSequenceBase* CacheLastWeaponAnimation;//[Offset: 0x0, Size: 0x8]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float StartTime;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ArkTeamStart.PlayerStart.NavigationObjectBase.Actor.Object
	bool bNotForPlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x310, Size: 0x1]
	bool bNotForBots;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x310, Size: 0x1]
	LevelSequence* StartSequenceClass;//[Offset: 0x318, Size: 0x8]
	LevelSequenceActor* StartSequence;//[Offset: 0x320, Size: 0x8]
	ArkTeamStartSubSocket*[] TeamSpawnSocket;//[Offset: 0x328, Size: 0x10]
	int Difficulty;//[Offset: 0x338, Size: 0x4]
	int MapIndex;//[Offset: 0x33c, Size: 0x4]
	FText StartPointName;//[Offset: 0x340, Size: 0x18]

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x300, Size: 0x8]

--------------------------------
Class: ArkTeamStartSubSocket.NavigationObjectBase.Actor.Object

--------------------------------
Class: ArkPlayerShieldComponent.ArkCharacterLiteComponent.LiteComponent.Object
	void OnDamageEvent(const ArkGameplayEventWrapper* InEvent);// 0x28cd370
	void ClientNotifyShieldRecover();// 0xcac2b0

--------------------------------
Class: ArkSensorComponent.ArkCharacterLiteComponent.LiteComponent.Object
	CurveFloat* CrossTraceDistanceSpeed_Curve;//[Offset: 0xb0, Size: 0x8]
	float CrossOverDownExtraDepth;//[Offset: 0xb8, Size: 0x4]
	float[] CrossHeightArray;//[Offset: 0xc0, Size: 0x10]
	float[] CrossThicknessArray;//[Offset: 0xd0, Size: 0x10]
	float[] CrossThicknessCutArray;//[Offset: 0xe0, Size: 0x10]
	float CrossOverAngleThreshold;//[Offset: 0xf0, Size: 0x4]
	float MoveCrossSpeed;//[Offset: 0xf4, Size: 0x4]
	float SprintCrossSpeed;//[Offset: 0xf8, Size: 0x4]
	float SprintCrossAnimRateScale;//[Offset: 0xfc, Size: 0x4]
	float FarCrossDistance;//[Offset: 0x100, Size: 0x4]
	float CrossBackBlendOutTime;//[Offset: 0x104, Size: 0x4]
	float SlipMaxHeight;//[Offset: 0x108, Size: 0x4]
	float SlipMinHeight;//[Offset: 0x10c, Size: 0x4]
	float SlipCutHeight;//[Offset: 0x110, Size: 0x4]
	float SlipHighAnimUpDistance;//[Offset: 0x114, Size: 0x4]
	float SlipLowAnimUpDistance;//[Offset: 0x118, Size: 0x4]
	float SlipHighCrossOverDownHeight;//[Offset: 0x11c, Size: 0x4]
	float SlipLowCrossOverDownHeight;//[Offset: 0x120, Size: 0x4]
	float CrossSlopeLeanAngle;//[Offset: 0x124, Size: 0x4]
	float SlipCrossSpeedZ;//[Offset: 0x128, Size: 0x4]
	float CrossOverBlockedSideDistance;//[Offset: 0x12c, Size: 0x4]
	float CrossOverBlockedBoxDistance;//[Offset: 0x130, Size: 0x4]
	float CrossUpPlatformWidth;//[Offset: 0x134, Size: 0x4]
	float CrossUpCeilingWidth;//[Offset: 0x138, Size: 0x4]
	float FarCrossAnimDistance;//[Offset: 0x13c, Size: 0x4]
	float NearCrossAnimDistance;//[Offset: 0x140, Size: 0x4]
	float SlipCrossAnimDistance;//[Offset: 0x144, Size: 0x4]
	float BackCrossCoolDownTime;//[Offset: 0x148, Size: 0x4]
	float RollCoolDownTime;//[Offset: 0x14c, Size: 0x4]
	bool bIsEnterCoverCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	float EnterCoverAngleCamera;//[Offset: 0x154, Size: 0x4]
	bool bIsEnterCoverPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	float EnterCoverAnglePlayer;//[Offset: 0x15c, Size: 0x4]
	float CoverTraceDistance;//[Offset: 0x160, Size: 0x4]
	float MinCoverHeight;//[Offset: 0x164, Size: 0x4]
	float HighCoverThreshold;//[Offset: 0x168, Size: 0x4]
	float CoverEdgeDistance;//[Offset: 0x16c, Size: 0x4]
	float CoverEdgeRange;//[Offset: 0x170, Size: 0x4]
	float CoverEdgeHalfDepth;//[Offset: 0x174, Size: 0x4]
	float InCoverSideDistance;//[Offset: 0x178, Size: 0x4]
	float InCoverSensorTraceDistance;//[Offset: 0x17c, Size: 0x4]
	float CoverSlopeLeanAngle;//[Offset: 0x180, Size: 0x4]
	int CoverAvgDirYawSize;//[Offset: 0x184, Size: 0x4]
	float MinCoverWidth;//[Offset: 0x188, Size: 0x4]
	float MaxEnterCoverInputDeltaYaw;//[Offset: 0x18c, Size: 0x4]
	float CoverCameraLeftRightAngle;//[Offset: 0x190, Size: 0x4]
	float ReEnterCoverAngle;//[Offset: 0x194, Size: 0x4]
	float CoverHeightTraceRadius;//[Offset: 0x198, Size: 0x4]
	float BackCoverAngle;//[Offset: 0x19c, Size: 0x4]
	float EdgeShootAngle;//[Offset: 0x1a0, Size: 0x4]
	float ApproachToEdgeSpeed;//[Offset: 0x1a4, Size: 0x4]
	float ApproachToCoverSpeed;//[Offset: 0x1a8, Size: 0x4]
	float LowCoverShootingHeight;//[Offset: 0x1ac, Size: 0x4]
	int CrossHeightType;//[Offset: 0x1d8, Size: 0x4]
	bool bIsMirrorCross;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dc, Size: 0x1]
	bool bIsFarCross;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dd, Size: 0x1]
	bool bIsMoveCross;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1de, Size: 0x1]
	bool bIsSprintCross;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1df, Size: 0x1]
	bool bIsSlipCross;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	bool bIsSlipHighCross;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e1, Size: 0x1]
	Vector CrossDestination;//[Offset: 0x1e4, Size: 0xc]
	bool bIsPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1]
	int RollType;//[Offset: 0x1f4, Size: 0x4]
	int CrossThicknessType;//[Offset: 0x1f8, Size: 0x4]
	float CrossDirPlayerAngle;//[Offset: 0x1fc, Size: 0x4]
	float CrossUpCorrection;//[Offset: 0x200, Size: 0x4]
	float CrossDownCorrection;//[Offset: 0x204, Size: 0x4]
	float CrossForwardCorrection;//[Offset: 0x208, Size: 0x4]
	float CrossRightCorrection;//[Offset: 0x20c, Size: 0x4]
	float CrossOverCorrection;//[Offset: 0x210, Size: 0x4]
	float CrossTurnCorrection;//[Offset: 0x214, Size: 0x4]
	AnimMontage* CrossAnim;//[Offset: 0x218, Size: 0x8]
	byte CrossType;//[Offset: 0x220, Size: 0x1]
	delegate OnEnterCoverDelegate;//[Offset: 0x228, Size: 0x10]
	delegate OnExitCoverDelegate;//[Offset: 0x238, Size: 0x10]
	byte CoverType;//[Offset: 0x260, Size: 0x1]
	float CoverHeight;//[Offset: 0x264, Size: 0x4]
	float CoverDirYaw;//[Offset: 0x268, Size: 0x4]
	byte EnterCoverType;//[Offset: 0x26c, Size: 0x1]
	AnimMontage* RollAnim;//[Offset: 0x270, Size: 0x8]
	RepCrossInfo CrossInfo;//[Offset: 0x278, Size: 0x38]
	RepRollInfo RollInfo;//[Offset: 0x2b0, Size: 0x20]
	Actor*[] toignore;//[Offset: 0x358, Size: 0x10]
	ArkPlayer* PlayerOwner;//[Offset: 0x368, Size: 0x8]
	ArkAnimInstanceMain* MasterAnimInst;//[Offset: 0x370, Size: 0x8]
	void StopCrossMontage(float InBlendOutTime, bool bPause);// 0x2943c40
	void SetTurnToCross();// 0x2943830
	void SetIsTakeBackWeapon(bool bIsTakeBackWeapon);// 0x2943720
	void ServerStopRoll(RepRollInfo InRepRollInfo);// 0x2943610
	void ServerStopCross(RepCrossInfo InRepCrossInfo);// 0x29434e0
	void ServerStartRoll(RepRollInfo InRepRollInfo);// 0x29433d0
	void ServerStartCross(RepCrossInfo InRepCrossInfo);// 0x29432a0
	void ServerSetRightEdgeLocation(Vector pRightEdgeLocation);// 0x29431d0
	void ServerSetLeftEdgeLocation(Vector pLeftEdgeLocation);// 0x2943100
	void ServerSetCoverType(byte ECoverType);// 0x2943050
	void ServerSetCoverHeight(float fCoverHeight);// 0x2942fa0
	void ServerSetCoverDirYaw(float fCoverDirYaw);// 0x2942ef0
	void ServerEnterCover(byte InCoverType, float InCoverDirYaw, float InCoverHeight, byte InEnterCoverType);// 0x2942d60
	void ServerCrossBack(RepCrossInfo InRepCrossInfo);// 0x2942c30
	bool SelectRollMontage();// 0x305c9c0
	bool SelectCrossMontage();// 0x305c9c0
	void OnRollMontageBlendingOut(AnimMontage* Montage, bool bInterrupted);// 0x2942b40
	void OnRep_RollInfo();// 0x2942b20
	void OnRep_CrossInfo();// 0x2942ac0
	void OnCrossMontageBlendingOut(AnimMontage* Montage, bool bInterrupted);// 0x29429f0
	bool IsTurnToCross();// 0x29429c0
	bool IsStuckOnEdge();// 0x2942990
	bool IsStandOverlapOnEndRoll();// 0x2942960
	bool IsStandOverlapOnEndCross();// 0x2942930
	bool IsSprintEnterCover();// 0x2942900
	bool IsRightEdge();// 0x29428d0
	bool IsOnEdge();// 0x29428a0
	bool IsLowCoverShootingHeight();// 0x2942870
	bool IsLowCoverShooting();// 0x2942840
	bool IsLeftEnterCover();// 0x29427e0
	bool IsLeftEdge();// 0x29427b0
	bool IsHighCover();// 0x2942780
	bool IsDefaultShooting();// 0x2942750
	bool IsCrouchEnterCover();// 0x2942720
	bool IsCrossingTakeBackWeapon();// 0x29426f0
	bool IsCrossingPit();// 0x29426c0
	bool IsCrossingBack();// 0x2942690
	bool IsCovering();// 0x2942660
	bool IsBackCover();// 0x2942630
	Vector GetCoverDir();// 0x2942490
	void ExitCover();// 0x29423f0
	void EnterCover();// 0x29423d0
	bool CheckCrossMontage();// 0x305c9c0

--------------------------------
Class: RepRollInfo
	AnimMontage* RepRollAnim;//[Offset: 0x0, Size: 0x8]
	int RepRollType;//[Offset: 0x8, Size: 0x4]
	bool RepIsStandOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	Vector_NetQuantize100 RepPlayerLocation;//[Offset: 0x10, Size: 0xc]
	byte RepPlayerRotationYaw;//[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: RepCrossInfo
	AnimMontage* RepCrossAnim;//[Offset: 0x0, Size: 0x8]
	byte RepCrossType;//[Offset: 0x8, Size: 0x1]
	float RepCrossUpCorrection;//[Offset: 0xc, Size: 0x4]
	float RepCrossDownCorrection;//[Offset: 0x10, Size: 0x4]
	float RepCrossForwardCorrection;//[Offset: 0x14, Size: 0x4]
	float RepCrossRightCorrection;//[Offset: 0x18, Size: 0x4]
	float RepCrossOverCorrection;//[Offset: 0x1c, Size: 0x4]
	float RepCrossDirYaw;//[Offset: 0x20, Size: 0x4]
	bool RepIsStandOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	Vector_NetQuantize100 RepPlayerLocation;//[Offset: 0x28, Size: 0xc]
	byte RepPlayerRotationYaw;//[Offset: 0x34, Size: 0x1]

--------------------------------
Class: ArkAnimInstanceMain.ArkTppBase.ArkPlayerAnimInstance.ArkCharacterAnimInstance.ArkAnimInstanceBase.AnimInstance.Object
	float AnimApproachingToIdleAlpha;//[Offset: 0x3a8, Size: 0x4]
	float AnimStopSpeedX;//[Offset: 0x3ac, Size: 0x4]
	float AnimStopSpeedY;//[Offset: 0x3b0, Size: 0x4]
	float AnimBackAndForthDuration;//[Offset: 0x3b4, Size: 0x4]
	float AnimBackAndForthBlendInTime;//[Offset: 0x3b8, Size: 0x4]
	float AnimBackAndForthBlendOutTime;//[Offset: 0x3bc, Size: 0x4]
	AnimMontage* AM_BackAndForth;//[Offset: 0x3c0, Size: 0x8]
	float AnimSpeedFactor;//[Offset: 0x3cc, Size: 0x4]
	bool AnimIsIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 0x1]
	bool AnimIsWalking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d1, Size: 0x1]
	bool AnimIsRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d2, Size: 0x1]
	bool AnimIsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d3, Size: 0x1]
	CurveFloat* SlopeAOAlphaSpeed_Curve;//[Offset: 0x3d8, Size: 0x8]
	float AnimSlopeAOAlpha;//[Offset: 0x3e0, Size: 0x4]
	float AnimSlopeX;//[Offset: 0x3e4, Size: 0x4]
	float AnimSlopeY;//[Offset: 0x3e8, Size: 0x4]
	float SmoothAccYaw;//[Offset: 0x3ec, Size: 0x4]
	float SmoothAccYawBlendSpeed;//[Offset: 0x3f0, Size: 0x4]
	float AnimSpeedDirX;//[Offset: 0x3f4, Size: 0x4]
	float AnimSpeedDirY;//[Offset: 0x3f8, Size: 0x4]
	float AnimFacingRotationYaw;//[Offset: 0x400, Size: 0x4]
	float AnimCurrentRotationRateYaw;//[Offset: 0x404, Size: 0x4]
	float AnimPlayerAccYaw;//[Offset: 0x408, Size: 0x4]
	int AnimDirType;//[Offset: 0x40c, Size: 0x4]
	bool AnimIsForward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 0x1]
	float AnimTiltX;//[Offset: 0x414, Size: 0x4]
	float AnimTiltY;//[Offset: 0x418, Size: 0x4]
	float AnimMovingDirection;//[Offset: 0x41c, Size: 0x4]
	float AnimMovingDirectionBack;//[Offset: 0x420, Size: 0x4]
	CurveFloat* TiltAlphaSpeed_Curve;//[Offset: 0x428, Size: 0x8]
	float TiltInSpeed;//[Offset: 0x430, Size: 0x4]
	float TiltOutSpeed;//[Offset: 0x434, Size: 0x4]
	float AnimTiltAlpha;//[Offset: 0x438, Size: 0x4]
	float DeltaControlInSpeed;//[Offset: 0x43c, Size: 0x4]
	float DeltaControlOutSpeed;//[Offset: 0x440, Size: 0x4]
	float AnimDeltaControlYaw;//[Offset: 0x444, Size: 0x4]
	float AnimYaw;//[Offset: 0x454, Size: 0x4]
	float AnimPitch;//[Offset: 0x458, Size: 0x4]
	bool AnimIsViewLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45c, Size: 0x1]
	bool AnimIsViewRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45d, Size: 0x1]
	float ControlYawRotationRate;//[Offset: 0x460, Size: 0x4]
	float AnimControlYawFX;//[Offset: 0x464, Size: 0x4]
	float AnimControlYawFY;//[Offset: 0x468, Size: 0x4]
	float AnimControlYawBX;//[Offset: 0x46c, Size: 0x4]
	float AnimControlYawBY;//[Offset: 0x470, Size: 0x4]
	float AnimControlYawLX;//[Offset: 0x474, Size: 0x4]
	float AnimControlYawLY;//[Offset: 0x478, Size: 0x4]
	float AnimControlYawRX;//[Offset: 0x47c, Size: 0x4]
	float AnimControlYawRY;//[Offset: 0x480, Size: 0x4]
	bool AnimIsSyncing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x484, Size: 0x1]
	bool AnimIsThrowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x485, Size: 0x1]
	int AnimAimIdx;//[Offset: 0x488, Size: 0x4]
	bool AnimAimIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 0x1]
	bool AnimIsBackCover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48d, Size: 0x1]
	float AOAlphaSpeed;//[Offset: 0x490, Size: 0x4]
	float AnimAOAlpha;//[Offset: 0x494, Size: 0x4]
	float AnimAOAfterMontageAlpha;//[Offset: 0x498, Size: 0x4]
	float CrouchAOCAlphaModifier;//[Offset: 0x49c, Size: 0x4]
	float AnimAOCAlpha;//[Offset: 0x4a0, Size: 0x4]
	bool AnimIsLookAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a4, Size: 0x1]
	Vector LookAtLocation;//[Offset: 0x4a8, Size: 0xc]
	Actor* CurrentLookAtActor;//[Offset: 0x4b8, Size: 0x8]
	AnimMontage* AM_Aim_TurnStop;//[Offset: 0x4d0, Size: 0x8]
	float TurnStopSpeedThreshold;//[Offset: 0x4d8, Size: 0x4]
	float MinTurnInPlaceSpeed;//[Offset: 0x4dc, Size: 0x4]
	float AnimTurnInPlaceAlpha;//[Offset: 0x4e0, Size: 0x4]
	float AnimControlYawSpeed;//[Offset: 0x4e4, Size: 0x4]
	float AnimViewPitchSpeed;//[Offset: 0x4e8, Size: 0x4]
	float FallLoopHeight;//[Offset: 0x4f4, Size: 0x4]
	float FallVOEventHeight;//[Offset: 0x4f8, Size: 0x4]
	int AnimFallingVOEventCursor;//[Offset: 0x4fc, Size: 0x4]
	float FallingOutOfControlSpeed;//[Offset: 0x500, Size: 0x4]
	float StaggerHeight;//[Offset: 0x504, Size: 0x4]
	float SprintJumpSpeed;//[Offset: 0x508, Size: 0x4]
	int AnimFallingSpeedCursor;//[Offset: 0x50c, Size: 0x4]
	bool AnimIsFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 0x1]
	bool AnimIsInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x511, Size: 0x1]
	bool AnimIsStagger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x512, Size: 0x1]
	int AnimJumpEndDirType;//[Offset: 0x514, Size: 0x4]
	int AnimJumpEndCursor;//[Offset: 0x518, Size: 0x4]
	int AnimJumpEndIsForward;//[Offset: 0x51c, Size: 0x4]
	AnimMontage* AM_JumpStart;//[Offset: 0x528, Size: 0x8]
	AnimMontage* AM_JumpEnd;//[Offset: 0x530, Size: 0x8]
	AnimMontage* AM_Sprint_OpenDoor;//[Offset: 0x538, Size: 0x8]
	AnimMontage* AM_Run_OpenDoor;//[Offset: 0x540, Size: 0x8]
	AnimMontage* AM_Walk_OpenDoor;//[Offset: 0x548, Size: 0x8]
	AnimMontage* AM_InCover_Run_OpenDoor;//[Offset: 0x550, Size: 0x8]
	AnimMontage* AM_InCover_Walk_OpenDoor;//[Offset: 0x558, Size: 0x8]
	float OpenDoorMaxAngleDeviation;//[Offset: 0x560, Size: 0x4]
	float SprintSlopeAngleA;//[Offset: 0x564, Size: 0x4]
	float SprintSlopeAngleB;//[Offset: 0x568, Size: 0x4]
	float SprintSlopeAngleC;//[Offset: 0x56c, Size: 0x4]
	int SprintSlopeType;//[Offset: 0x570, Size: 0x4]
	float AnimEnterTargetingTime;//[Offset: 0x574, Size: 0x4]
	float AnimEnterHipTime;//[Offset: 0x578, Size: 0x4]
	AnimMontage* AM_Cover_0TO1;//[Offset: 0x580, Size: 0x8]
	AnimMontage* AM_Cover_1TO0;//[Offset: 0x588, Size: 0x8]
	bool AnimIsFullBody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 0x1]
	float AnimLeftArmAlpha;//[Offset: 0x594, Size: 0x4]
	float AnimLeftArmOffset;//[Offset: 0x598, Size: 0x4]
	float AnimRightArmAlpha;//[Offset: 0x59c, Size: 0x4]
	float AnimRightArmOffset;//[Offset: 0x5a0, Size: 0x4]
	float AnimRealLeftArmAlpha;//[Offset: 0x5a4, Size: 0x4]
	float AnimRealRightArmAlpha;//[Offset: 0x5a8, Size: 0x4]
	float ArmAlphaInterpInSpeed;//[Offset: 0x5ac, Size: 0x4]
	float ArmAlphaInterpOutSpeed;//[Offset: 0x5b0, Size: 0x4]
	CurveFloat* ArmOffsetAlphaSpeed_Curve;//[Offset: 0x5b8, Size: 0x8]
	bool AnimIsUpdateMotionSlotSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 0x1]
	bool AnimIsStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c1, Size: 0x1]
	bool AnimIsPivot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c2, Size: 0x1]
	bool AnimIsStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c3, Size: 0x1]
	bool AnimIsStandToCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c4, Size: 0x1]
	bool AnimIsCrouchToStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c5, Size: 0x1]
	bool AnimIsEnterBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c6, Size: 0x1]
	bool AnimIsLeaveBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c7, Size: 0x1]
	bool AnimIsBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 0x1]
	bool AnimIsExitStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c9, Size: 0x1]
	bool AnimIsExitPivot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ca, Size: 0x1]
	bool AnimIsExitStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cb, Size: 0x1]
	bool AnimIsReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cf, Size: 0x1]
	bool AnimWeaponUseSingleMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 0x1]
	float AnimWeaponSlotNeckWeight;//[Offset: 0x5d4, Size: 0x4]
	float AnimWeaponFireRecoilArmAlpha;//[Offset: 0x5d8, Size: 0x4]
	float AnimWeaponFireRecoilSpineAlpha;//[Offset: 0x5dc, Size: 0x4]
	bool AnimSimulatingWeaponFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 0x1]
	bool AnimSimulatingWeaponFireFlipBit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e1, Size: 0x1]
	float AnimWeaponFireRate;//[Offset: 0x5e4, Size: 0x4]
	bool AnimIsChargingWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e8, Size: 0x1]
	bool AnimWeaponIsCharging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e9, Size: 0x1]
	float AnimWeaponChargingProgress;//[Offset: 0x5ec, Size: 0x4]
	float AnimWeaponChargingScope;//[Offset: 0x5f0, Size: 0x4]
	float AnimWeaponAddSlotBodyWeight;//[Offset: 0x5f4, Size: 0x4]
	AnimMontage* AM_GL_Equip;//[Offset: 0x5f8, Size: 0x8]
	AnimMontage* AM_GS_Equip;//[Offset: 0x600, Size: 0x8]
	float AnimWeaponHoldingAdditiveAlpha;//[Offset: 0x608, Size: 0x4]
	float DefaultWeaponHoldingBlendTime;//[Offset: 0x60c, Size: 0x4]
	float MirrorCoverHeightOffset;//[Offset: 0x618, Size: 0x4]
	bool AnimIsEnterCover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61c, Size: 0x1]
	bool AnimIsExitEnterCover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61d, Size: 0x1]
	bool AnimIsOnEdge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61e, Size: 0x1]
	bool AnimIsLowCoverShootingHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61f, Size: 0x1]
	bool AnimIsDefaultShooting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x620, Size: 0x1]
	bool AnimIsCoverMovingLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x621, Size: 0x1]
	float AnimCoverHeight;//[Offset: 0x624, Size: 0x4]
	bool AnimIsDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x628, Size: 0x1]
	float DtoUAngle;//[Offset: 0x62c, Size: 0x4]
	float UtoDAngle;//[Offset: 0x630, Size: 0x4]
	bool AnimIsDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x634, Size: 0x1]
	bool AnimIsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x635, Size: 0x1]
	float PlayHitCoolDown;//[Offset: 0x638, Size: 0x4]
	bool AnimIsUsingCameraAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63c, Size: 0x1]
	bool AnimIsInCinematicTalking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63d, Size: 0x1]
	float AnimPitchingAlpha;//[Offset: 0x640, Size: 0x4]
	float AnimPitchingHighAlpha;//[Offset: 0x644, Size: 0x4]
	float AnimPitchingLowAlpha;//[Offset: 0x648, Size: 0x4]
	bool AnimIsLookingUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64c, Size: 0x1]
	AnimMontage* LastAliveToDyingMontage;//[Offset: 0x650, Size: 0x8]
	bool AnimIsSyncMod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x672, Size: 0x1]
	AnimMontage* AM_EnterSyncMod;//[Offset: 0x678, Size: 0x8]
	bool AnimIsBothArmsAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x680, Size: 0x1]
	bool AnimIsLeftArmAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x681, Size: 0x1]
	bool AnimIsRightArmAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x682, Size: 0x1]
	float AnimAdditiveActionAlpha;//[Offset: 0x684, Size: 0x4]
	AnimSequenceBase* Anim_ToDBNO_F;//[Offset: 0x688, Size: 0x8]
	AnimSequenceBase* Anim_ToDBNO_B;//[Offset: 0x690, Size: 0x8]
	AnimSequenceBase* Anim_ToDBNO_L;//[Offset: 0x698, Size: 0x8]
	AnimSequenceBase* Anim_ToDBNO_R;//[Offset: 0x6a0, Size: 0x8]
	AnimSequenceBase* Anim_ToDeath_F;//[Offset: 0x6a8, Size: 0x8]
	AnimSequenceBase* Anim_ToDeath_B;//[Offset: 0x6b0, Size: 0x8]
	AnimSequenceBase* Anim_ToDeath_L;//[Offset: 0x6b8, Size: 0x8]
	AnimSequenceBase* Anim_ToDeath_R;//[Offset: 0x6c0, Size: 0x8]
	AnimSequenceBase* Anim_TakeDown_F;//[Offset: 0x6c8, Size: 0x8]
	AnimSequenceBase* Anim_TakeDown_B;//[Offset: 0x6d0, Size: 0x8]
	AnimSequenceBase* Anim_Revive_D;//[Offset: 0x6d8, Size: 0x8]
	AnimSequenceBase* Anim_Revive_U;//[Offset: 0x6e0, Size: 0x8]
	AnimSequenceBase* Anim_Revive_Eliminate;//[Offset: 0x6e8, Size: 0x8]
	AnimSequenceBase* Anim_Hit_F;//[Offset: 0x6f0, Size: 0x8]
	AnimSequenceBase* Anim_Hit_B;//[Offset: 0x6f8, Size: 0x8]
	AnimSequenceBase* Anim_Hit_L;//[Offset: 0x700, Size: 0x8]
	AnimSequenceBase* Anim_Hit_R;//[Offset: 0x708, Size: 0x8]
	AnimSequenceBase* Anim_HeavyHit_F;//[Offset: 0x710, Size: 0x8]
	AnimSequenceBase* Anim_HeavyHit_B;//[Offset: 0x718, Size: 0x8]
	AnimSequenceBase* Anim_HeavyHit_L;//[Offset: 0x720, Size: 0x8]
	AnimSequenceBase* Anim_HeavyHit_R;//[Offset: 0x728, Size: 0x8]
	float Hit_BlendInTime;//[Offset: 0x730, Size: 0x4]
	float Hit_BlendOutTime;//[Offset: 0x734, Size: 0x4]
	float HeavyHit_BlendInTime;//[Offset: 0x738, Size: 0x4]
	float HeavyHit_BlendOutTime;//[Offset: 0x73c, Size: 0x4]
	float MinHeavyHitTriggerDamage;//[Offset: 0x740, Size: 0x4]
	AnimMontage*[] MovingAdditiveActions;//[Offset: 0x748, Size: 0x10]
	float MovingAdditiveActionBlendOutTime;//[Offset: 0x758, Size: 0x4]
	float MaxMovingAdditiveActionInterval;//[Offset: 0x75c, Size: 0x4]
	float MinMovingAdditiveActionInterval;//[Offset: 0x760, Size: 0x4]
	AnimMontage* CurrentMovingAdditiveAction;//[Offset: 0x780, Size: 0x8]
	AnimMontage* Hit_F_Montage;//[Offset: 0x788, Size: 0x8]
	AnimMontage* Hit_B_Montage;//[Offset: 0x790, Size: 0x8]
	AnimMontage* Hit_L_Montage;//[Offset: 0x798, Size: 0x8]
	AnimMontage* Hit_R_Montage;//[Offset: 0x7a0, Size: 0x8]
	AnimSequenceTable StandIdleSequenceTable;//[Offset: 0x7a8, Size: 0x10]
	AnimSequenceTable CrouchIdleSequenceTable;//[Offset: 0x7b8, Size: 0x10]
	AnimSequenceTable CoverStandIdleSequenceTable;//[Offset: 0x7c8, Size: 0x10]
	AnimSequenceTable CoverCrouchIdleSequenceTable;//[Offset: 0x7d8, Size: 0x10]
	AnimSequenceTable BattleIdleSequenceTable;//[Offset: 0x7e8, Size: 0x10]
	AnimSequenceTable CinematicTalkIdleSequenceTable;//[Offset: 0x7f8, Size: 0x10]
	AnimSequenceBase* Anim_Idle_Stand;//[Offset: 0x808, Size: 0x8]
	AnimSequenceBase* Anim_Idle_Crouch;//[Offset: 0x810, Size: 0x8]
	AnimSequenceBase* Anim_Idle_InCover_Stand;//[Offset: 0x818, Size: 0x8]
	AnimSequenceBase* Anim_Idle_InCover_Crouch;//[Offset: 0x820, Size: 0x8]
	AnimSequenceBase* Anim_Idle_Battle;//[Offset: 0x828, Size: 0x8]
	AnimSequenceBase* Anim_Idle_Hip;//[Offset: 0x830, Size: 0x8]
	AnimSequenceBase* Anim_Idle_ADS;//[Offset: 0x838, Size: 0x8]
	AnimSequenceBase* Anim_Idle_Crouch_Hip;//[Offset: 0x840, Size: 0x8]
	AnimSequenceBase* Anim_Idle_Crouch_ADS;//[Offset: 0x848, Size: 0x8]
	AnimSequenceBase* Anim_Battle_Walking_F;//[Offset: 0x850, Size: 0x8]
	AnimSequenceBase* Anim_Battle_Walking_B;//[Offset: 0x858, Size: 0x8]
	AnimSequenceBase* Anim_Battle_Walking_L;//[Offset: 0x860, Size: 0x8]
	AnimSequenceBase* Anim_Battle_Walking_R;//[Offset: 0x868, Size: 0x8]
	AnimSequenceBase* Anim_Battle_Running_F;//[Offset: 0x870, Size: 0x8]
	AnimSequenceBase* Anim_Battle_Running_B;//[Offset: 0x878, Size: 0x8]
	AnimSequenceBase* Anim_Battle_Running_L;//[Offset: 0x880, Size: 0x8]
	AnimSequenceBase* Anim_Battle_Running_R;//[Offset: 0x888, Size: 0x8]
	AnimSequenceBase* Anim_IdleStand_To_Battle;//[Offset: 0x890, Size: 0x8]
	AnimSequenceBase* Anim_Battle_To_IdleStand;//[Offset: 0x898, Size: 0x8]
	AnimSequenceBase* Anim_Battle_Stand_To_Crouch;//[Offset: 0x8a0, Size: 0x8]
	AnimSequenceBase* Anim_Battle_Crouch_To_Stand;//[Offset: 0x8a8, Size: 0x8]
	AnimSequenceBase* Anim_Stand_To_Crouch;//[Offset: 0x8b0, Size: 0x8]
	AnimSequenceBase* Anim_Crouch_To_Stand;//[Offset: 0x8b8, Size: 0x8]
	BlendSpaceBase* Anim_BS_Walking_F;//[Offset: 0x8c0, Size: 0x8]
	BlendSpaceBase* Anim_BS_Walking_B;//[Offset: 0x8c8, Size: 0x8]
	BlendSpaceBase* Anim_BS_Running_F;//[Offset: 0x8d0, Size: 0x8]
	BlendSpaceBase* Anim_BS_Running_B;//[Offset: 0x8d8, Size: 0x8]
	BlendSpaceBase* Anim_BS_Sprint;//[Offset: 0x8e0, Size: 0x8]
	AnimSequenceBase* Anim_SprintSlopeA;//[Offset: 0x8e8, Size: 0x8]
	AnimSequenceBase* Anim_SprintSlopeB;//[Offset: 0x8f0, Size: 0x8]
	AnimSequenceBase* Anim_SprintSlopeC;//[Offset: 0x8f8, Size: 0x8]
	BlendSpaceBase* Anim_BS_Crouch_Running;//[Offset: 0x900, Size: 0x8]
	BlendSpaceBase* Anim_BS_Crouch_Walking;//[Offset: 0x908, Size: 0x8]
	AnimSequenceBase* Anim_Hip_Falling;//[Offset: 0x910, Size: 0x8]
	BlendSpaceBase* Anim_BS_Hip_Crouch_Running;//[Offset: 0x918, Size: 0x8]
	BlendSpaceBase* Anim_BS_ADS_Crouch_Walking;//[Offset: 0x920, Size: 0x8]
	BlendSpaceBase* Anim_BS_ADS_Walking;//[Offset: 0x928, Size: 0x8]
	BlendSpaceBase* Anim_BS_Hip_Walking;//[Offset: 0x930, Size: 0x8]
	BlendSpaceBase* Anim_BS_Hip_Running;//[Offset: 0x938, Size: 0x8]
	AnimSequenceBase* Anim_ADS_CrouchToStand;//[Offset: 0x940, Size: 0x8]
	AnimSequenceBase* Anim_ADS_StandToCrouch;//[Offset: 0x948, Size: 0x8]
	AnimSequenceBase* Anim_Hip_CrouchToStand;//[Offset: 0x950, Size: 0x8]
	AnimSequenceBase* Anim_Hip_StandToCrouch;//[Offset: 0x958, Size: 0x8]
	BlendSpaceBase* Anim_AO_ADS_TurnInPlace;//[Offset: 0x960, Size: 0x8]
	BlendSpaceBase* Anim_AO_ADS_Crouch_TurnInPlace;//[Offset: 0x968, Size: 0x8]
	BlendSpaceBase* Anim_AO_Hip_TurnInPlace;//[Offset: 0x970, Size: 0x8]
	BlendSpaceBase* Anim_AO_Hip_Crouch_TurnInPlace;//[Offset: 0x978, Size: 0x8]
	BlendSpaceBase* Anim_BS_FireLoop_Start;//[Offset: 0x980, Size: 0x8]
	BlendSpaceBase* Anim_BS_FireLoop_Loop;//[Offset: 0x988, Size: 0x8]
	BlendSpaceBase* Anim_BS_FireLoop_End;//[Offset: 0x990, Size: 0x8]
	BlendSpaceBase* Anim_BS_FireSingle_Start;//[Offset: 0x998, Size: 0x8]
	BlendSpaceBase* Anim_BS_FireSingle_End;//[Offset: 0x9a0, Size: 0x8]
	BlendSpaceBase* Anim_BS_FireCharging;//[Offset: 0x9a8, Size: 0x8]
	BlendSpaceBase* Anim_AO_CoverEdgeCrouchShoot;//[Offset: 0x9b0, Size: 0x8]
	BlendSpaceBase* Anim_AO_CoverEdgeStandShoot;//[Offset: 0x9b8, Size: 0x8]
	AnimSequenceBase* Anim_CoverEdgeStandShootBase;//[Offset: 0x9c0, Size: 0x8]
	AnimSequenceBase* Anim_CoverEdgeCrouchShootBase;//[Offset: 0x9c8, Size: 0x8]
	AnimSequenceBase* Anim_Cover_Running;//[Offset: 0x9d0, Size: 0x8]
	AnimSequenceBase* Anim_Cover_Walking;//[Offset: 0x9d8, Size: 0x8]
	AnimSequenceBase* Anim_Cover_CrouchRunning;//[Offset: 0x9e0, Size: 0x8]
	AnimSequenceBase* Anim_Cover_CrouchWalking;//[Offset: 0x9e8, Size: 0x8]
	AnimSequenceBase* Anim_Cover_Crouch_Idle_ADS;//[Offset: 0x9f0, Size: 0x8]
	AnimSequenceBase* Anim_Stand_Edge_0TO1;//[Offset: 0x9f8, Size: 0x8]
	AnimSequenceBase* Anim_Crouch_Edge_0TO1;//[Offset: 0xa00, Size: 0x8]
	AnimSequenceBase* Anim_Stand_Edge_1TO0;//[Offset: 0xa08, Size: 0x8]
	AnimSequenceBase* Anim_Crouch_Edge_1TO0;//[Offset: 0xa10, Size: 0x8]
	AnimSequenceBase* Anim_LowCover_0TO1;//[Offset: 0xa18, Size: 0x8]
	AnimSequenceBase* Anim_LowCover_1TO0;//[Offset: 0xa20, Size: 0x8]
	AnimSequenceBase* Anim_LowCover_Walk_Shoot_L;//[Offset: 0xa28, Size: 0x8]
	AnimSequenceBase* Anim_LowCover_Walk_Shoot_R;//[Offset: 0xa30, Size: 0x8]
	AnimSequenceBase* Anim_LowCover_Run_Shoot_L;//[Offset: 0xa38, Size: 0x8]
	AnimSequenceBase* Anim_LowCover_Run_Shoot_R;//[Offset: 0xa40, Size: 0x8]
	BlendSpaceBase* Anim_AO_CoverHeight;//[Offset: 0xa48, Size: 0x8]
	AnimSequenceBase* Anim_Cover_Stand_To_Crouch;//[Offset: 0xa50, Size: 0x8]
	AnimSequenceBase* Anim_Cover_Crouch_To_Stand;//[Offset: 0xa58, Size: 0x8]
	BlendSpaceBase* Anim_AO_LowCoverShoot;//[Offset: 0xa60, Size: 0x8]
	ArkThrowAnimSet* ThrowAnimSet;//[Offset: 0xa68, Size: 0x8]
	AnimSequenceBase* Anim_Idle_Throw;//[Offset: 0xa70, Size: 0x8]
	BlendSpaceBase* Anim_BS_Throwing;//[Offset: 0xa78, Size: 0x8]
	BlendSpaceBase* Anim_BS_Throw_Start;//[Offset: 0xa80, Size: 0x8]
	AnimSequenceBase* Anim_Idle_Crouch_Throw;//[Offset: 0xa88, Size: 0x8]
	BlendSpaceBase* Anim_BS_Crouch_Throwing;//[Offset: 0xa90, Size: 0x8]
	BlendSpaceBase* Anim_BS_Crouch_Throw_Start;//[Offset: 0xa98, Size: 0x8]
	BlendSpaceBase* Anim_AO_Throw_TurnInPlace;//[Offset: 0xaa0, Size: 0x8]
	BlendSpaceBase* Anim_AO_Throw_Crouch_TurnInPlace;//[Offset: 0xaa8, Size: 0x8]
	AnimSequenceBase* Anim_Throw_CrouchToStand;//[Offset: 0xab0, Size: 0x8]
	AnimSequenceBase* Anim_Throw_StandToCrouch;//[Offset: 0xab8, Size: 0x8]
	AnimSequenceBase* Anim_Throw_Falling;//[Offset: 0xac0, Size: 0x8]
	bool AnimResetPlayTimeOnSwitchAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac8, Size: 0x1]
	BlendSpaceBase* Anim_Start;//[Offset: 0xad0, Size: 0x8]
	BlendSpaceBase* Anim_Stop;//[Offset: 0xad8, Size: 0x8]
	AnimSequenceBase* Anim_Pivot;//[Offset: 0xae0, Size: 0x8]
	AnimSequenceBase* Anim_WeaponHoldingAdditive;//[Offset: 0xae8, Size: 0x8]
	AnimSequenceBase* Anim_SyncMod;//[Offset: 0xaf0, Size: 0x8]
	AnimSequenceBase* Anim_EnterCover;//[Offset: 0xaf8, Size: 0x8]
	bool bIsInNanoBandAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb20, Size: 0x1]
	bool bIsInNanoBandIdleState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb21, Size: 0x1]
	int NanoBandAnimStateIndex;//[Offset: 0xb24, Size: 0x4]
	bool NanoBandAnimTurnInPlace0Enable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb28, Size: 0x1]
	bool NanoBandAnimTurnInPlace1Enable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb29, Size: 0x1]
	float NanoBandAnimTargetYaw;//[Offset: 0xb30, Size: 0x4]
	float SuperJumpFlyingRotationX;//[Offset: 0xb34, Size: 0x4]
	bool bSuperJumpCanFlyingRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb38, Size: 0x1]
	float SuperJumpFlyingRotationInSpeed;//[Offset: 0xb3c, Size: 0x4]
	float SuperJumpFlyingRotationOutSpeed;//[Offset: 0xb40, Size: 0x4]
	BlendSpaceBase* FlyingRotateAdditiveBS;//[Offset: 0xb48, Size: 0x8]
	void StopLookAt();// 0x2664230
	void StartLookAtPosition(Vector LookAtPos);// 0x26641a0
	void StartLookAt(Actor* LookAtActor);// 0x2664120

--------------------------------
Class: ArkTppBase.ArkPlayerAnimInstance.ArkCharacterAnimInstance.ArkAnimInstanceBase.AnimInstance.Object
	bool AnimIsCrouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1]
	bool AnimIsLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x369, Size: 0x1]
	bool AnimIsFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36a, Size: 0x1]
	bool AnimIsTargeting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36b, Size: 0x1]
	bool AnimIsCovering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c, Size: 0x1]
	bool AnimIsMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36d, Size: 0x1]
	bool AnimIsTurnLeftInCover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36e, Size: 0x1]
	bool AnimIsTurnRightInCover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36f, Size: 0x1]
	float AnimTurnLeftPlayPosition;//[Offset: 0x370, Size: 0x4]
	float AnimTurnRightPlayPosition;//[Offset: 0x374, Size: 0x4]
	float AnimTurnLeftBlendInAlpha;//[Offset: 0x378, Size: 0x4]
	float AnimTurnRightBlendInAlpha;//[Offset: 0x37c, Size: 0x4]
	float TurnInCoverBlendInTime;//[Offset: 0x380, Size: 0x4]
	float TurnInCoverBlendOutTime;//[Offset: 0x384, Size: 0x4]
	bool AnimIsExitTurnInCover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 0x1]
	bool AnimIsBlendOutTurnInCover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x389, Size: 0x1]
	AnimSequenceBase* Anim_TurnLeftInCover;//[Offset: 0x390, Size: 0x8]
	AnimSequenceBase* Anim_TurnRightInCover;//[Offset: 0x398, Size: 0x8]

--------------------------------
Class: ArkPlayerAnimInstance.ArkCharacterAnimInstance.ArkAnimInstanceBase.AnimInstance.Object
	ArkPlayer* PlayerOwner;//[Offset: 0x360, Size: 0x8]

--------------------------------
Class: ArkThrowAnimSet.DataAsset.Object
	AnimationAsset* ThrowAnimAssets;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: ArkPlayerSuperJumpComponent.ArkCharacterLiteComponent.LiteComponent.Object
	float FlyingTraceHeightOffset;//[Offset: 0xac, Size: 0x4]
	CurveFloat* FlyingZVelocityCurveDefault;//[Offset: 0xb0, Size: 0x8]
	float FlyingNormalDotLimit;//[Offset: 0xb8, Size: 0x4]
	ArkPlayer* PlayerOwner;//[Offset: 0xe0, Size: 0x8]
	AbilitySystemComponent* AbilityComponentRef;//[Offset: 0xf0, Size: 0x8]
	ArkPlayerMovementComponent* MovementComponentRef;//[Offset: 0xf8, Size: 0x8]
	ArkPlayerSyncAIComponent* SyncAIComponentRef;//[Offset: 0x100, Size: 0x8]
	int CurrentSuperJumpItemId;//[Offset: 0x108, Size: 0x4]
	CurveFloat* FlyingZVelocityCurve;//[Offset: 0x118, Size: 0x8]
	int[] CoolDownSecondsItemIdList;//[Offset: 0x128, Size: 0x10]
	float[] CoolDownSecondsList;//[Offset: 0x138, Size: 0x10]
	float VelocityZNearlyZero_Limited;//[Offset: 0x160, Size: 0x4]
	float VelocityZNearlyZero_CheckTime;//[Offset: 0x164, Size: 0x4]
	bool bEnableExtraActionTotal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]
	int CurSupportExtraActionType;//[Offset: 0x1b0, Size: 0x4]
	float ServerCanSupeJumpDelay;//[Offset: 0x1b4, Size: 0x4]
	float CheckWallSeconds;//[Offset: 0x200, Size: 0x4]
	<enum,FText> TipsMap;//[Offset: 0x238, Size: 0x50]
	void WaitForVelocityZNearlyZero();// 0x28de2b0
	bool SuperJumpCanFlyingRotate();// 0x28ddf90
	bool StopByCross();// 0x28ddf70
	void StartSuperJumpExtraAction(enum InExtraActionType);// 0x28ddef0
	void SetupSuperJumpItemData();// 0x28dded0
	void SetSuperJumpFlyingState(enum NewState);// 0x28dddc0
	void SetSuperJumpControlRot(bool bNewCan);// 0x28ddd30
	void SetSuperJumpCanToCross(bool NewCan, bool bForce);// 0x28ddc60
	void SetSuperJumpCanFlyingRotate(bool bNewCan);// 0x28ddbd0
	void SetCurSupportExtraActionType(int InExtraAction);// 0x28ddad0
	void SetCurrentAnimCanToEnd(bool bNewCan);// 0x28ddb50
	void SetCanSlideAlongSurfaceUp(bool bNewCan);// 0x28dda40
	void SetCanDoExtraAction(bool NewCan);// 0x28dd9b0
	void ServerSyncRot(ArkPlayerSuperJumpInfo SuperJumpInfo);// 0x28dd850
	void ServerStartSuperJumpExtraAction(enum InExtraActionType, float InYaw);// 0x28dd690
	void ServerStartSuperJump(float StartYaw);// 0x28dd610
	void OnRep_CurSupportExtraActionType();// 0xae2270
	void OnRep_CurrentSuperJumpItemId();// 0x28dcca0
	void MutiCastSuperJumpAnimToEnd(ArkPlayerSuperJumpInfo SuperJumpInfo);// 0x28dc940
	void MutiCastStartSuperJumpExtraAction(ArkPlayerSuperJumpExtraActionInfo SuperJumpInfo);// 0x28dc8a0
	void ClearCurSupportExtraActionType();// 0x28db970
	bool CanToCross();// 0x28db950
	bool CanStartSuperJumpExtraAction(enum InExtraActionType);// 0x28db8c0
	bool CanSlideAlongSurfaceUp();// 0x28db880
	void AnimNotifyApplyCapsuleDefaultHalfHeight();// 0x28db860
	void AnimNotifyApplyCapsuleCrouchedHalfHeight();// 0x28db840

--------------------------------
Class: ArkPlayerMovementComponent.ArkCharacterMovementBase.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	AnimMontage* PlayingMotionAnim;//[Offset: 0xa38, Size: 0x8]
	bool bUseCollisionAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf8, Size: 0x1]
	float CARadiusModofier;//[Offset: 0xafc, Size: 0x4]
	float CATimeHorizon;//[Offset: 0xb00, Size: 0x4]
	int CAMaxNeighbors;//[Offset: 0xb04, Size: 0x4]
	float CANeighborDist;//[Offset: 0xb08, Size: 0x4]
	float CAWeight;//[Offset: 0xb0c, Size: 0x4]
	float CAAggression;//[Offset: 0xb10, Size: 0x4]
	ArkPlayerControllerBattle* ArkPC;//[Offset: 0xb28, Size: 0x8]
	float SprintSpeed;//[Offset: 0xb30, Size: 0x4]
	float TargetingSpeed;//[Offset: 0xb34, Size: 0x4]
	float CrouchTargetingSpeed;//[Offset: 0xb38, Size: 0x4]
	float ThrowingSpeed;//[Offset: 0xb3c, Size: 0x4]
	float CrouchThrowingSpeed;//[Offset: 0xb40, Size: 0x4]
	float ForceWalkingSpeed;//[Offset: 0xb44, Size: 0x4]
	float CrouchForceWalkingSpeed;//[Offset: 0xb48, Size: 0x4]
	float UsingItemSpeed;//[Offset: 0xb4c, Size: 0x4]
	float CrouchUsingItemSpeed;//[Offset: 0xb50, Size: 0x4]
	float LargeShieldSpeed;//[Offset: 0xb54, Size: 0x4]
	float CrouchLargeShieldSpeed;//[Offset: 0xb58, Size: 0x4]
	CurveFloat* RotationRateAngle_Curve;//[Offset: 0xb60, Size: 0x8]
	CurveFloat* RotationRateSpeed_Curve;//[Offset: 0xb68, Size: 0x8]
	float[] RotationRateYawAddSpeed;//[Offset: 0xb70, Size: 0x10]
	float DefaultRadius;//[Offset: 0xb84, Size: 0x4]
	float DefaultHalfHeight;//[Offset: 0xb88, Size: 0x4]
	float LocomotionPivotAngle;//[Offset: 0xb8c, Size: 0x4]
	CurveFloat* WalkStartRotationTimeCurve;//[Offset: 0xb90, Size: 0x8]
	CurveFloat* WalkStartTimeAngleCurve;//[Offset: 0xb98, Size: 0x8]
	CurveFloat* RunStartRotationTimeCurve;//[Offset: 0xba0, Size: 0x8]
	CurveFloat* RunStartTimeAngleCurve;//[Offset: 0xba8, Size: 0x8]
	CurveFloat* SprintStartRotationTimeCurve;//[Offset: 0xbb0, Size: 0x8]
	CurveFloat* SprintStartTimeAngleCurve;//[Offset: 0xbb8, Size: 0x8]
	CurveFloat* CrouchRotationTimeCurve;//[Offset: 0xbc0, Size: 0x8]
	CurveFloat* CrouchTimeAngleCurve;//[Offset: 0xbc8, Size: 0x8]
	CurveFloat* CombatWalkStartRotationTimeCurve;//[Offset: 0xbd0, Size: 0x8]
	CurveFloat* CombatWalkStartTimeAngleCurve;//[Offset: 0xbd8, Size: 0x8]
	CurveFloat* CombatRunStartRotationTimeCurve;//[Offset: 0xbe0, Size: 0x8]
	CurveFloat* CombatRunStartTimeAngleCurve;//[Offset: 0xbe8, Size: 0x8]
	CurveFloat* PivotRotationTimeCurve;//[Offset: 0xbf0, Size: 0x8]
	CurveFloat* PivotTimeAngleCurve;//[Offset: 0xbf8, Size: 0x8]
	CurveFloat* StopRotationTimeCurve;//[Offset: 0xc00, Size: 0x8]
	CurveFloat* StopTimeAngleCurve;//[Offset: 0xc08, Size: 0x8]
	CurveFloat* WalkBackAndForthRotationTimeCurve;//[Offset: 0xc10, Size: 0x8]
	CurveFloat* WalkBackAndForthTimeAngleCurve;//[Offset: 0xc18, Size: 0x8]
	CurveFloat* RunBackAndForthRotationTimeCurve;//[Offset: 0xc20, Size: 0x8]
	CurveFloat* RunBackAndForthTimeAngleCurve;//[Offset: 0xc28, Size: 0x8]
	CurveFloat* VelocityRotationRateAngleCurve;//[Offset: 0xc30, Size: 0x8]
	CurveFloat* VelocityRotationRateSpeedCurve;//[Offset: 0xc38, Size: 0x8]
	float ForwardMoveAngle;//[Offset: 0xc40, Size: 0x4]
	CurveVector* FallHitHeight_Curve;//[Offset: 0xc48, Size: 0x8]
	float LeftRightSpeedModifier;//[Offset: 0xc50, Size: 0x4]
	float BackwardSpeedModifier;//[Offset: 0xc54, Size: 0x4]
	float Run_F2B_Delay;//[Offset: 0xc58, Size: 0x4]
	float SprintToRunSlope;//[Offset: 0xc5c, Size: 0x4]
	float SprintToWalkSlope;//[Offset: 0xc60, Size: 0x4]
	float CrouchToWalkSlope;//[Offset: 0xc64, Size: 0x4]
	float WallFriction;//[Offset: 0xc68, Size: 0x4]
	float SlideDownDistance;//[Offset: 0xc6c, Size: 0x4]
	float SlideDownSpeed;//[Offset: 0xc70, Size: 0x4]
	float WalkToIdleFactor;//[Offset: 0xc74, Size: 0x4]
	float WalkToRunFactor;//[Offset: 0xc78, Size: 0x4]
	float MinApproachingToIdleAlpha;//[Offset: 0xc7c, Size: 0x4]
	float MaxApproachingToIdleAlpha;//[Offset: 0xc80, Size: 0x4]
	float ApproachingToIdleRecoverSpeed;//[Offset: 0xc84, Size: 0x4]
	float JumpRecoverCoolDown;//[Offset: 0xcc4, Size: 0x4]
	float SprintRecoverDelay;//[Offset: 0xcc8, Size: 0x4]
	float BackAndForthAngle;//[Offset: 0xccc, Size: 0x4]
	float InstantBackRunAngle;//[Offset: 0xcd0, Size: 0x4]
	float CommonForwardLeftAngle;//[Offset: 0xcd4, Size: 0x4]
	float CommonForwardRightAngle;//[Offset: 0xcd8, Size: 0x4]
	float CommonBackwardLeftAngle;//[Offset: 0xcdc, Size: 0x4]
	float CommonBackwardRightAngle;//[Offset: 0xce0, Size: 0x4]
	float FireForwardLeftAngle;//[Offset: 0xce4, Size: 0x4]
	float FireForwardRightAngle;//[Offset: 0xce8, Size: 0x4]
	float FireBackwardLeftAngle;//[Offset: 0xcec, Size: 0x4]
	float FireBackwardRightAngle;//[Offset: 0xcf0, Size: 0x4]
	float DyingSpeed;//[Offset: 0xcf4, Size: 0x4]
	float DyingSpeedModifier;//[Offset: 0xcf8, Size: 0x4]
	float CoveringSpeedModifier;//[Offset: 0xcfc, Size: 0x4]
	float ShootRotationModifier;//[Offset: 0xd50, Size: 0x4]
	float DyingRotationModifier;//[Offset: 0xd54, Size: 0x4]
	float CoveringRotationModifier;//[Offset: 0xd58, Size: 0x4]
	float CrouchingRotationModifier;//[Offset: 0xd5c, Size: 0x4]
	float BattleRotationModifier;//[Offset: 0xd60, Size: 0x4]
	float FollowingRotationRate;//[Offset: 0xd64, Size: 0x4]
	bool bIsHavenGhost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7c, Size: 0x1]
	float MaxMeleeChargingSpeed;//[Offset: 0xd80, Size: 0x4]
	float SlideAlongSurfaceXYDotLimit;//[Offset: 0xd84, Size: 0x4]
	ArkPlayer* PlayerOwner;//[Offset: 0xd88, Size: 0x8]
	void SetWantsToWalk(bool bWalk);// 0x28bed70
	void SetWantsToSprint(bool bSprint);// 0x28bece0
	void SetWantsToCrouch(bool bCrouch);// 0x28bec50
	void RegisterFollowPathVelocity(PathFollowingComponent* Comp, out Vector NewVelocity);// 0x28beab0
	void OnStartRoll(bool bClientSimulation);// 0x28be8b0
	void OnStartCross();// 0x28be890
	void OnEndRoll(bool bClientSimulation);// 0x28be1e0
	void OnEndCross();// 0x28be1c0
	bool IsOrientationWarping();// 0x28bdeb0
	void ForceSyncClientAdjustPosition();// 0x28bdd10

--------------------------------
Class: ArkPlayerSyncAIComponent.ArkCharacterLiteComponent.LiteComponent.Object
	delegate OnAISyncStateChange;//[Offset: 0xb0, Size: 0x10]
	bool bIsSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	delegate OnIsSyncedChange;//[Offset: 0xc8, Size: 0x10]
	delegate OnSyncedNPCChangedEvent;//[Offset: 0xd8, Size: 0x10]
	<FName,ArkSyncExtraChipInfo> ExtraChipInfo;//[Offset: 0xe8, Size: 0x50]
	ArkSyncExtraChipInfo[] ExtraChipInfoArray;//[Offset: 0x138, Size: 0x10]
	ArkSyncEquipChipInfo EquipChipInfo;//[Offset: 0x148, Size: 0x40]
	ArkCoreChipDataContainer EquipedCoreChipArray;//[Offset: 0x188, Size: 0x130]
	int[] UnequipedModChipList;//[Offset: 0x2f0, Size: 0x10]
	float OutOfControlRadius;//[Offset: 0x300, Size: 0x4]
	<enum,int> ScoreCost_Interaction;//[Offset: 0x308, Size: 0x50]
	bool bHideSyncedAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	enum AISyncState;//[Offset: 0x359, Size: 0x1]
	FString CurrentCommandName;//[Offset: 0x360, Size: 0x10]
	enum CurrentCommandTargetType;//[Offset: 0x370, Size: 0x1]
	float CommandStartTime;//[Offset: 0x374, Size: 0x4]
	float CommandDuration;//[Offset: 0x378, Size: 0x4]
	float CommandFinishTime;//[Offset: 0x37c, Size: 0x4]
	float CommandCD;//[Offset: 0x380, Size: 0x4]
	<enum,FText> SyncCommandFailedTips;//[Offset: 0x388, Size: 0x50]
	delegate OnAIAssistStarted;//[Offset: 0x3d8, Size: 0x10]
	delegate OnAIAssistEnded;//[Offset: 0x3e8, Size: 0x10]
	delegate OnAIAssistStateChanged;//[Offset: 0x3f8, Size: 0x10]
	delegate OnAIHadDetectedEvent;//[Offset: 0x408, Size: 0x10]
	ArkNpc* SyncedAI;//[Offset: 0x418, Size: 0x8]
	ArkSyncAIAssistInfo AIAssistInfo;//[Offset: 0x430, Size: 0x10]
	ArkNpc*[] AssistedNpcs;//[Offset: 0x440, Size: 0x10]
	ArkPlayer* MarkedPlayer;//[Offset: 0x450, Size: 0x8]
	float MarkedPreparingDisplayTime;//[Offset: 0x458, Size: 0x4]
	<FName,ParticleSystem*> MarkedPreparingParticles;//[Offset: 0x460, Size: 0x50]
	ArkAIEnemyMarkData[] ServerMarkedEnemyData;//[Offset: 0x4b0, Size: 0x10]
	ArkAIEnemyMarkData[] ClientMarkedEnemyData;//[Offset: 0x4c0, Size: 0x10]
	ArkCharacterBase*[] ClientTargetedEnemyData;//[Offset: 0x4d8, Size: 0x10]
	ParticleSystemComponent*[] ClientTargetedEffects;//[Offset: 0x4e8, Size: 0x10]
	ArkBuildingActorBase* CurrentSearchingTarget;//[Offset: 0x4f8, Size: 0x8]
	float SyncCommandTargetTraceInterval;//[Offset: 0x500, Size: 0x4]
	float SyncCommandControlMaxRange;//[Offset: 0x504, Size: 0x4]
	float SyncCommandControlMinRange;//[Offset: 0x508, Size: 0x4]
	float SyncCommandControlFarAngle;//[Offset: 0x50c, Size: 0x4]
	float SyncCommandControlNearAngle;//[Offset: 0x510, Size: 0x4]
	float SyncCommandTargetSelectRange;//[Offset: 0x514, Size: 0x4]
	float SyncCommandHoldingTime;//[Offset: 0x518, Size: 0x4]
	float SyncCommandPointMaxHeight;//[Offset: 0x51c, Size: 0x4]
	ArkControlCommandTargetInfo CurrentAimingTarget;//[Offset: 0x520, Size: 0x48]
	ArkControlCommandTargetInfo LastAimingTarget;//[Offset: 0x568, Size: 0x48]
	Actor* LastTracingActor;//[Offset: 0x5b0, Size: 0x8]
	ArkSyncAIHitPlayerInfo[] SyncAIHitPlayers;//[Offset: 0x5b8, Size: 0x10]
	float CurrentHoldingTime;//[Offset: 0x5c8, Size: 0x4]
	ArkControlCommandTargetInfo CurrentHoldingTarget;//[Offset: 0x5d0, Size: 0x48]
	float SyncDefaultHoldSeconds;//[Offset: 0x620, Size: 0x4]
	float DesyncDefaultHoldSeconds;//[Offset: 0x624, Size: 0x4]
	delegate OnSyncAISuccessed;//[Offset: 0x628, Size: 0x10]
	delegate OnSyncAIFailed;//[Offset: 0x638, Size: 0x10]
	delegate OnDesyncAISuccessed;//[Offset: 0x648, Size: 0x10]
	delegate OnSyncCDTimeUp;//[Offset: 0x658, Size: 0x10]
	delegate OnSyncAIsOutOfRangeStart;//[Offset: 0x668, Size: 0x10]
	delegate OnSyncAIsOutOfRangeEnd;//[Offset: 0x678, Size: 0x10]
	delegate OnSyncSkillNotReady;//[Offset: 0x688, Size: 0x10]
	delegate OnAnySyncChipEquipped;//[Offset: 0x698, Size: 0x10]
	delegate OnSyncNewChipEquipped;//[Offset: 0x6a8, Size: 0x10]
	delegate OnSyncButtonDown;//[Offset: 0x6b8, Size: 0x10]
	delegate OnWayPointButtonDown;//[Offset: 0x6c8, Size: 0x10]
	delegate OnSyncedAIControlled;//[Offset: 0x6d8, Size: 0x10]
	delegate OnSyncedNanoStateChanged;//[Offset: 0x6e8, Size: 0x10]
	float StartTime2;//[Offset: 0x6f8, Size: 0x4]
	float EndTime2;//[Offset: 0x6fc, Size: 0x4]
	float EndHoldSeconds;//[Offset: 0x700, Size: 0x4]
	ArkNpc*[] PendingAIs;//[Offset: 0x708, Size: 0x10]
	ArkNpc* PendingSyncAI;//[Offset: 0x728, Size: 0x8]
	StaticMesh* ArmBandMesh;//[Offset: 0x760, Size: 0x28]
	float SyncedArmorArmBlendTime;//[Offset: 0x790, Size: 0x4]
	byte CurrentOwnerSyncedNanoState;//[Offset: 0x794, Size: 0x1]
	ArkSoftParticleSystemComponentWithPool* SyncStartComponent;//[Offset: 0x798, Size: 0x8]
	class ArkNanoCommandMarker* NanoCommandMarkerClass;//[Offset: 0x7a0, Size: 0x8]
	ArkNanoCommandMarker* NanoCommandMaker;//[Offset: 0x7a8, Size: 0x8]
	Actor* CommandTargetActorRef;//[Offset: 0x7b0, Size: 0x8]
	FText CommandText;//[Offset: 0x7b8, Size: 0x18]
	AnimMontage* AM_GL_SyncCome;//[Offset: 0x7d0, Size: 0x8]
	AnimMontage* AM_GS_SyncCome;//[Offset: 0x7d8, Size: 0x8]
	AnimMontage* AM_GL_SyncGo_B;//[Offset: 0x7e0, Size: 0x8]
	AnimMontage* AM_GL_SyncGo_F;//[Offset: 0x7e8, Size: 0x8]
	AnimMontage* AM_GL_SyncGo_FL;//[Offset: 0x7f0, Size: 0x8]
	AnimMontage* AM_GL_SyncGo_FR;//[Offset: 0x7f8, Size: 0x8]
	AnimMontage* AM_GL_SyncGo_InCombat;//[Offset: 0x800, Size: 0x8]
	AnimMontage* AM_GL_SyncGo_InCover;//[Offset: 0x808, Size: 0x8]
	AnimMontage* AM_GL_SyncGo_InCover_B;//[Offset: 0x810, Size: 0x8]
	AnimMontage* AM_GL_SyncGo_L;//[Offset: 0x818, Size: 0x8]
	AnimMontage* AM_GL_SyncGo_LB;//[Offset: 0x820, Size: 0x8]
	AnimMontage* AM_GL_SyncGo_R;//[Offset: 0x828, Size: 0x8]
	AnimMontage* AM_GL_SyncGo_RB;//[Offset: 0x830, Size: 0x8]
	delegate OnLittleSupermanDelegate;//[Offset: 0x838, Size: 0x10]
	bool bInLittleSupermanModifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 0x1]
	bool bShowModChipEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x881, Size: 0x1]
	int CurEnergy;//[Offset: 0x884, Size: 0x4]
	bool bPlayingBackDormantAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a1, Size: 0x1]
	int InitialEnergy;//[Offset: 0x8a4, Size: 0x4]
	int MaxEnergy;//[Offset: 0x8a8, Size: 0x4]
	float CostEneryTime;//[Offset: 0x8ac, Size: 0x4]
	int CostEnery;//[Offset: 0x8b0, Size: 0x4]
	int ShowIconBuffID;//[Offset: 0x8b4, Size: 0x4]
	int[] BuffIDs;//[Offset: 0x8b8, Size: 0x10]
	class ArkGameBuff[] BuffClasses;//[Offset: 0x8c8, Size: 0x10]
	int KillSwarmEnergy;//[Offset: 0x8d8, Size: 0x4]
	int KillEliteEnergy;//[Offset: 0x8dc, Size: 0x4]
	int KillBossEnergy;//[Offset: 0x8e0, Size: 0x4]
	float TeleportDistance;//[Offset: 0x8e4, Size: 0x4]
	float ShowLineTime;//[Offset: 0x8e8, Size: 0x4]
	bool TryUnequipChip(int ChipUID);// 0x28de220
	bool TrySwapModChip(int ChipUID, int TargetChipUID);// 0x28de160
	bool TryForceSelectACoreChip(int SelectedUID);// 0x28de0d0
	bool TryEquipChip(int ChipUID, int CoreChipUID, bool bUpgrade);// 0x28ddfd0
	void TraceTargetForControlCommand();// 0x28ddfb0
	void ShowLineEffect(bool bShow);// 0x305c9c0
	void SetSyncedNanoPossessing(bool bPossessing);// 0x28dde40
	void ServerUnequipChip(int ChipUID);// 0x28dd8f0
	void ServerSwapModChip(int ChipUID, int TargetChipUID);// 0x28dd750
	void ServerSelectCoreChip(int ChipUID);// 0x28dd550
	void ServerOrderAIAlliesToLocation(ArkControlCommandTargetInfo TargetInfo);// 0x28dd2e0
	void ServerEquipChip(int ChipUID, int ChipIdx);// 0x28dd1e0
	void OnWayPointButtonDown__DelegateSignature();// 0x305c9c0
	void OnSyncSuccessed();// 0x28dbeb0
	void OnSyncSkillNotReady__DelegateSignature();// 0x305c9c0
	void OnSyncNewChipEquipped__DelegateSignature(int ChipID);// 0x305c9c0
	void OnSyncFailed();// 0x28dbe90
	void OnSyncedNanoStateChanged__DelegateSignature();// 0x305c9c0
	void OnSyncedAIDyingRecoverStateChanged(ArkNpc* InSyncedAI, bool bNewState);// 0x28dd110
	void OnSyncedAIControlled__DelegateSignature(enum Type);// 0x305c9c0
	void OnSyncCDTimeUp__DelegateSignature();// 0x305c9c0
	void OnSyncButtonDown__DelegateSignature();// 0x305c9c0
	void OnSyncAISuccessed__DelegateSignature();// 0x305c9c0
	void OnSyncAIsOutOfRangeStart__DelegateSignature();// 0x305c9c0
	void OnSyncAIsOutOfRangeEnd__DelegateSignature();// 0x305c9c0
	void OnSyncAIFailed__DelegateSignature();// 0x305c9c0
	void OnSubmersibleBubbleStateChanged(int Bubble, enum NewState);// 0x28dd050
	void OnRep_SyncedAI(ArkNpc* LastSyncedAI);// 0x28dcf00
	void OnRep_OwnerSyncedNanoState(byte LastState);// 0x28dce80
	void OnRep_ExtraChipInfoArray();// 0x28dce60
	void OnRep_EquipChipInfo(ArkSyncEquipChipInfo LastInfo);// 0x28dccc0
	void OnRep_CurrentCommandName();// 0x28dcc80
	void OnRep_bShowModChipEffect();// 0x28dd030
	void OnRep_bIsSynced(bool bLastSycted);// 0x28dcfa0
	void OnRep_bInLittleSupermanModifier();// 0x28dcf80
	void OnRep_AssistedNpcs();// 0x28dcc60
	void OnRep_AISyncState();// 0x28dcc40
	void OnRep_AIAssistInfo();// 0x28dcc20
	void OnRefreshModChipEffect(int ItemId);// 0x28dcba0
	void OnPlayerKillOther(out const TakeHitInfo HitInfo);// 0x28dcae0
	void OnLittleSupermanModifierSignature__DelegateSignature(bool bin);// 0x305c9c0
	void OnIsSyncedChange__DelegateSignature(bool bSynced);// 0x305c9c0
	void OnInModifierShowLineEffect(bool bShow);// 0x305c9c0
	void OnGameFlowChange(enum LastMode, enum NewMode, float StartTime);// 0x28dc9e0
	void OnDesyncAISuccessed__DelegateSignature();// 0x305c9c0
	void OnAnySyncChipEquipped__DelegateSignature(bool bAnySyncChipEquipped);// 0x305c9c0
	void OnAISyncStateChange__DelegateSignature(enum PlayerAISyncState);// 0x305c9c0
	void OnAIHadDetectedEvent__DelegateSignature();// 0x305c9c0
	void OnAIAssistChanged__DelegateSignature();// 0x305c9c0
	void MarkSearchTargetForSyncedAI(ArkBuildingActorBase* BuildingRef);// 0x28dc820
	void MarkPointForSyncedAI(const Vector Point);// 0x28dc7a0
	void MarkEnemyForSyncedAI(out const ArkAIEnemyMarkData[] enemyData);// 0x28dc6c0
	void MarkAreaForSyncedAI(const Vector Center, float Radius);// 0x28dc600
	bool IsVaidAimingTarget();// 0x28dc5d0
	bool IsInLittleSuperman();// 0x28dc5a0
	bool IsEquipSyncChip();// 0x28dc570
	bool HaveNpcAssist();// 0x28dc540
	int[] GetUnequipedSyncModChipUIDs();// 0x28dc500
	int GetSyncEnergy();// 0x28dc4a0
	ArkNpc* GetSyncedAI();// 0x28dc4d0
	bool GetScoreCostInteraction(enum InteractionType, out int ScoreCost);// 0x28dc3d0
	float GetOutOfControlRadius();// 0x28dc3a0
	int GetMaxSyncEnergy();// 0x28dc380
	int[] GetEquipedSyncModChipUIDs(int CoreChipUID);// 0x28dc2e0
	int[] GetEquipedSyncCoreChipUIDs();// 0x28dc2a0
	ArkControlCommandTargetInfo GetCurrentHoldingTarget(bool bForceRefresh);// 0x28dc200
	int GetCoreChipUIDByModChip(int ModChipUID);// 0x28dc170
	float GetControlRadius();// 0x28dc140
	int GetAlternativeSyncCoreChipUID();// 0x28dc110
	int GetActiveSyncCoreChipUID();// 0x28dc060
	int GetActiveSyncCoreChipID();// 0x28dc030
	int[] GetActivedSyncChipUIDs();// 0x28dc0d0
	int[] GetActivedSyncChipIDs();// 0x28dc090
	void ForceSendCommandEvent(class ArkAICommand CommandClass);// 0x28dbfb0
	void FinishSyncedPossessed();// 0x28dbf90
	void DispatchWayPointButtonDown();// 0x28dbf70
	void DispatchSyncSkillNotReadyEvent();// 0x28dbf50
	void DispatchSyncCDTimeUpEvent();// 0x28dbf30
	void DispatchSyncButtonDown();// 0x28dbf10
	void DispatchSyncAISuccessedEvent();// 0x28dbeb0
	void DispatchSyncAIsOutOfRangeStartEvent();// 0x28dbef0
	void DispatchSyncAIsOutOfRangeEndEvent();// 0x28dbed0
	void DispatchSyncAIFailedEvent();// 0x28dbe90
	void DispatchOnSyncedAIControlled(enum Type);// 0x28dbe10
	void DispatchDesyncAISuccessedEvent();// 0x28dbdf0
	void ClientSyncCommandFailded(enum FailedReason);// 0x28dbd70
	void ClientStopMarkEnemyForSyncedAI(ArkCharacterBase* enemy);// 0x2870660
	void ClientStopBeMarkedByEnemy(ArkCharacterBase* enemy);// 0x28dbce0
	void ClientStartNewCommand(class ArkAICommand CommandClass, enum TargetType, const ArkCharacterBase*[] TargetActors, const Vector InTargetLocation, float Duration, float CD);// 0x28dbb10
	void ClientStartMarkEnemyForSyncedAI(ArkCharacterBase* enemy);// 0x28dba80
	void ClientStartBeMarkedByEnemy(ArkCharacterBase* enemy, FName SyncedAIType);// 0x28db9b0
	ParticleSystemComponent*[] ClientSpawnOneShotMarkParticle_BP(ArkCharacterBase* enemy);// 0x305c9c0
	ParticleSystemComponent*[] ClientSpawnMarkedPreparingParticle_BP(ArkCharacterBase* enemy, FName SyncedAIType);// 0x305c9c0
	ParticleSystemComponent*[] ClientSpawnMarkedEnemyParticle_BP(ArkCharacterBase* enemy);// 0x305c9c0
	ParticleSystemComponent*[] ClientSpawnBeMarkedPreparingParticle_BP(FName SyncedAIType);// 0x305c9c0
	ParticleSystemComponent*[] ClientSpawnBeMarkedEnemyParticle_BP();// 0x305c9c0
	void ClientMarkSearchTargetForSyncedAI(ArkBuildingActorBase* Building);// 0x26b5c40
	void ClientMarkPointForSyncedAI_BP(out const Vector Point);// 0x305c9c0
	void ClientMarkBuildingForSyncedAI_BP(const ArkBuildingActorBase* Building, bool bCancel);// 0x305c9c0
	void ClientMarkAreaForSyncedAI_BP(out const Vector Center, float Radius);// 0x305c9c0
	void ClientFinishCommand();// 0x28b2f90
	void ClearEnemyForSyncedAI();// 0x28db990

--------------------------------
Class: ArkControlCommandTargetInfo
	Actor*[] TargetActorRefs;//[Offset: 0x0, Size: 0x10]
	SceneComponent*[] TargetComponentRefs;//[Offset: 0x10, Size: 0x10]
	enum TargetType;//[Offset: 0x20, Size: 0x1]
	Vector TargetLocation;//[Offset: 0x24, Size: 0xc]
	Vector CameraLocation;//[Offset: 0x30, Size: 0xc]
	Vector_NetQuantizeNormal HitNormal;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: ArkSyncEquipChipInfo
	int[] ActiveChipUIDs;//[Offset: 0x0, Size: 0x10]
	int ActiveChipSlotIndex;//[Offset: 0x10, Size: 0x4]
	int[] EquipedCoreChipUIDs;//[Offset: 0x18, Size: 0x10]
	int[] EquipedModChipUIDs;//[Offset: 0x28, Size: 0x10]
	bool bUpgrade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: ArkAIEnemyMarkData
	ArkCharacterBase* enemy;//[Offset: 0x0, Size: 0x8]
	FName EnemySyncAIType;//[Offset: 0x8, Size: 0x8]
	ArkNpc*[] NpcCharacters;//[Offset: 0x10, Size: 0x10]
	ParticleSystemComponent*[] Particles;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: ArkSyncExtraChipInfo
	FName SyncAITypeName;//[Offset: 0x0, Size: 0x8]
	int[] SkillChipUIDs;//[Offset: 0x8, Size: 0x10]
	int[] SkinChipUIDs;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ArkCoreChipDataContainer.FastArraySerializer
	ArkCoreChipDataEntry[] CoreChipArray;//[Offset: 0x108, Size: 0x10]
	ArkPlayerSyncAIComponent* OwnerComponent;//[Offset: 0x118, Size: 0x8]
	int[] CoreChipUIDArray;//[Offset: 0x120, Size: 0x10]

--------------------------------
Class: ArkCoreChipDataEntry.FastArraySerializerItem
	int SlotIndex;//[Offset: 0xc, Size: 0x4]
	int CoreChipUID;//[Offset: 0x10, Size: 0x4]
	int[] ModChipUIDArray;//[Offset: 0x18, Size: 0x10]
	enum ActionType;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: ArkSyncAIAssistInfo
	float AssistDuration;//[Offset: 0x0, Size: 0x4]
	enum AssistCommandType;//[Offset: 0x4, Size: 0x1]
	int RepCounter;//[Offset: 0x8, Size: 0x4]
	float AssistStartTime;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ArkSyncAIHitPlayerInfo
	ArkPlayer* Player;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ArkPlayerSuperJumpInfo
	Vector_NetQuantize100 StartRotator;//[Offset: 0x0, Size: 0xc]
	Vector_NetQuantize100 StartPosition;//[Offset: 0xc, Size: 0xc]
	int SuperJumpItemId;//[Offset: 0x18, Size: 0x4]
	float TotalCoolDown;//[Offset: 0x1c, Size: 0x4]
	float Cooldown;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: ArkPlayerSuperJumpExtraActionInfo
	Vector_NetQuantize100 StartRotator;//[Offset: 0x0, Size: 0xc]
	Vector_NetQuantize100 StartPosition;//[Offset: 0xc, Size: 0xc]
	enum ExtraActionType;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: ArkPlayerStealthComponent.ArkCharacterLiteComponent.LiteComponent.Object
	void OnStealthDeactive_BP();// 0x305c9c0
	void OnStealthActive_BP();// 0x305c9c0
	bool IsStealthActive();// 0x28d4610

--------------------------------
Class: ArkPlayerSightComponent.ArkCharacterLiteComponent.LiteComponent.Object
	float sightRange;//[Offset: 0xa8, Size: 0x4]
	float sightRangeInPoi;//[Offset: 0xac, Size: 0x4]
	bool bShowAlert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1]
	float alertRange;//[Offset: 0xb4, Size: 0x4]
	float alertRingOffset;//[Offset: 0xb8, Size: 0x4]
	float segmentNum;//[Offset: 0xbc, Size: 0x4]
	FName AttachPointName;//[Offset: 0xc0, Size: 0x8]
	bool bUseAttachPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	Vector Scale;//[Offset: 0xcc, Size: 0xc]
	float rotateOffset;//[Offset: 0xd8, Size: 0x4]
	float DefaultRadarAlertSegmentNum;//[Offset: 0xdc, Size: 0x4]
	bool[] bShowAlertArray;//[Offset: 0xe0, Size: 0x10]
	bool[] bShowRadarAlertArray;//[Offset: 0xf0, Size: 0x10]
	ArkSpottingRuleConfig[] SpottingRuleConfigs;//[Offset: 0x100, Size: 0x10]
	ArkSpottingRule*[] SpottingRules;//[Offset: 0x110, Size: 0x10]
	ArkSpottingRule_Elite* Elite_SpottingRule;//[Offset: 0x120, Size: 0x8]
	ArkPlayer*[] LocalCombatingEnemyCaches;//[Offset: 0x128, Size: 0x10]
	ArkPickUp*[] LocalDetectedPickupCaches;//[Offset: 0x138, Size: 0x10]
	<ArkNPC_EliteBase*,float> StillWithinTimeElites;//[Offset: 0x148, Size: 0x50]
	ArkTeamInfo* TeamInfo;//[Offset: 0x198, Size: 0x8]
	ArkPlayer* SyncMarkedPlayer;//[Offset: 0x1a0, Size: 0x8]
	Actor*[] DiscoveryActors;//[Offset: 0x1b8, Size: 0x10]
	void OnTriggerGameplayEventDeath(ArkGameplayEventWrapper* DeathGameplayEvent);// 0x28cdc00
	void OnTriggerGameplayEventDamage(ArkGameplayEventWrapper* DamageGameplayEvent);// 0x28cdaf0
	void NotifyAllPlayersHittedMonster(ArkCharacterBase*[] TargetCharacters);// 0x28cd290
	void CollectSignificantActorOnMap();// 0x28c9100
	void AddDiscoveryActor(Actor* DiscoveryActor);// 0x28c78e0

--------------------------------
Class: ArkSpottingRuleConfig
	class ArkSpottingRule* SpottingRuleClass;//[Offset: 0x0, Size: 0x8]
	float SpotDuration;//[Offset: 0x8, Size: 0x4]
	float SpotRadius;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ArkSpottingRule.Object
	enum IndicatorType;//[Offset: 0x28, Size: 0x1]
	enum SpottingEventType;//[Offset: 0x29, Size: 0x1]
	float SpotDuration;//[Offset: 0x2c, Size: 0x4]
	float SpotRadius;//[Offset: 0x30, Size: 0x4]
	<Actor*,float> SpottingEndTimes;//[Offset: 0x38, Size: 0x50]
	bool IsSpotTarget(Actor* Target, ArkPlayer* MyPlayer);// 0x28ccbb0
	void GetAllSpotTargets(ArkPlayer* MyPlayer, out ArkCharacterBase*[] OutSpotTargets);// 0x28c9160

--------------------------------
Class: ArkSpottingRule_Elite.ArkSpottingRule.Object

--------------------------------
Class: ArkTeamInfo.Object
	Actor*[] ObjectiveFoundList;//[Offset: 0x30, Size: 0x10]
	UInt32Property TeamId;//[Size: 0x4]
	PlayerIds(UInt64Property)[] PlayerIds;//[Offset: 0x48, Size: 0x10]
	class ArkTeamPrivateInfo* TeamPrivateInfoClass;//[Offset: 0x58, Size: 0x8]
	ArkTeamPrivateInfo* PrivateInfo;//[Offset: 0x60, Size: 0x8]
	ArkMarkerActor*[] AllTeamMarker;//[Offset: 0x68, Size: 0x10]
	bool bHasRelifePickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1]
	Vector TeamStartLocation;//[Offset: 0x84, Size: 0xc]
	UInt32Property KilledTeamID;//[Size: 0x4]
	int CachedGameStateTeamFilterFlags;//[Offset: 0x134, Size: 0x4]
	void OnRep_TeamID();// 0x298a250
	void OnRep_PlayerIDs();// 0x298a210
	void OnRep_ObjectiveFoundList();// 0x298a1f0
	void InitialSetProbePoint(Vector PointLoc);// 0x2989f50
	void InitialDetectedTargets(out const ArkScanTargetInfo[] ScanTargets);// 0x2989e80

--------------------------------
Class: ArkTeamPrivateInfo.ArkTeamReplicationActor.Actor.Object
	ArkCharacterBase*[] EnemyTargets;//[Offset: 0x308, Size: 0x10]
	<ArkCharacterBase*,int> PlayerTargetCounterMap;//[Offset: 0x318, Size: 0x50]
	ArkPlayer*[] AIDetectedEnemyPlayerList;//[Offset: 0x368, Size: 0x10]
	ArkScoreNode*[] DetectedScoreNodeList;//[Offset: 0x378, Size: 0x10]
	ArkSafeHouseVolume*[] DetectedSafeHouseList;//[Offset: 0x388, Size: 0x10]
	DecalComponent* CommandDecalComp;//[Offset: 0x398, Size: 0x8]
	void ClientRequestShowAroundPickup(ArkCharacterBase* InTarget, float Radius, int Quality, float Duration, float Angle, ArkPlayer* Viewer);// 0x2989a40
	void ClientRequestPlaySearchCommandEffect(ArkCharacterBase* InTarget, ArkPlayer* Viewer);// 0x2989970
	void ClientRequestPlayParticleAtLocation(Vector PSLocation, ParticleSystem* PS, ArkPlayer* Viewer);// 0x2989850

--------------------------------
Class: ArkTeamReplicationActor.Actor.Object

--------------------------------
Class: ArkScanTargetInfo
	float UV_X;//[Offset: 0x0, Size: 0x4]
	float UV_Y;//[Offset: 0x4, Size: 0x4]
	int UID;//[Offset: 0x8, Size: 0x4]
	FString ClassName;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ArkPlayerOutLineComponent.ArkCharacterLiteComponent.LiteComponent.Object
	bool bShouldShowMultiTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1]
	TimerHandle ShuttleScanDelayHandle;//[Offset: 0xc0, Size: 0x8]
	void UpdateTeamMateOutline();// 0x28bf090
	void OnShowHUDChanged(bool bIsVisible);// 0x28be800

--------------------------------
Class: ArkPlayerNanoArmComponent.ArkCharacterLiteComponent.LiteComponent.Object
	float WPOEffectFadeInTime;//[Offset: 0xc8, Size: 0x4]
	float WPOEffectFadeOutTime;//[Offset: 0xcc, Size: 0x4]
	FName WPOEffectParameterName;//[Offset: 0xd0, Size: 0x8]
	FName IntensityScalarParameterName;//[Offset: 0xd8, Size: 0x8]
	FName IntensityVectorParameterName;//[Offset: 0xe0, Size: 0x8]
	CurveFloat* IntensityValueCurve;//[Offset: 0xe8, Size: 0x8]
	float ActivateBlendTime;//[Offset: 0xf0, Size: 0x4]
	float DeactivateBlendTime;//[Offset: 0xf4, Size: 0x4]
	FName ActivationParameterName;//[Offset: 0xf8, Size: 0x8]
	FName SkinParticleSpawnParameterName;//[Offset: 0x100, Size: 0x8]
	FName SkinParticleAlphaParameterName;//[Offset: 0x108, Size: 0x8]
	ParticleSystemComponent*[] SkinParticleComponents;//[Offset: 0x110, Size: 0x10]
	ParticleSystemComponent*[] SkinWeaponParticleComponents;//[Offset: 0x120, Size: 0x10]
	ArkSoftParticleAttachment SwitchStartFX;//[Offset: 0x130, Size: 0x30]
	ArkSoftParticleAttachment SwitchSparkingFX;//[Offset: 0x160, Size: 0x30]
	ArkSoftParticleAttachment SwitchStopFX;//[Offset: 0x190, Size: 0x30]
	float SwitchDissolveBlendTime;//[Offset: 0x1c0, Size: 0x4]
	float SwitchReformBlendTime;//[Offset: 0x1c4, Size: 0x4]
	CurveFloat* SwitchIntensityValueCurve;//[Offset: 0x1c8, Size: 0x8]
	void SyncedAIHealthUpdate(ArkCharacterBase* AIChar, float InOldHealth, float InCurHealth);// 0x28bef10
	void ShowNanoArm(bool bShow, float BlendTime, CurveFloat* UsedCurve);// 0x28bee00
	void ParticleSystemPoolStateChanged(ParticleSystemComponent* InComponent, bool InPool);// 0x28be9e0
	void OnSyncedAIChanged();// 0x28be940
	void OnPlayerStealthChanged(bool bInStealth);// 0x28be730
	void OnPlayerLeaveReloading(bool bClientSimulation);// 0x28be6a0
	void OnPlayerEnterReloading(bool bClientSimulation);// 0x28be610
	void OnPlayerCurrentWeaponChanged(const ArkWeaponBase* Weapon, enum Slot);// 0x28be550
	void OnNanoArmAvatarPartChanged(enum PartType, SkeletalMeshComponent* PartMesh, bool bFPPPart);// 0x28be270

--------------------------------
Class: ArkSoftParticleAttachment
	FName AttachPointName;//[Offset: 0x0, Size: 0x8]
	ParticleSystem* ParticleSystemTemplate;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: ArkPlayerLinkToShuttleComponent.ArkCharacterLiteComponent.LiteComponent.Object
	ParticleSystem* ValidLinkParticleTemp;//[Offset: 0xa8, Size: 0x28]
	ParticleSystem* InvalidLinkParticleTemp;//[Offset: 0xd0, Size: 0x28]
	<int,ArkSoftParticleSystemComponentWithPool*> LinkParticleComponents;//[Offset: 0xf8, Size: 0x50]

--------------------------------
Class: ArkPlayerGardebrasComponent.ArkCharacterLiteComponent.LiteComponent.Object
	ArkAvatarComponent* AvatarComponent;//[Offset: 0xb0, Size: 0x8]
	ArkItemAvatarGardebras* CurrentGardebrasItem;//[Offset: 0xb8, Size: 0x8]
	SkeletalMeshComponent* AvatarGardebrasMeshComponent;//[Offset: 0xc0, Size: 0x8]
	SkeletalMeshComponent* FPSAvatarGardebrasMeshComponent;//[Offset: 0xc8, Size: 0x8]
	ArkItemAvatar* LastHandledAvatarItem;//[Offset: 0xe0, Size: 0x8]
	World* MainWorld;//[Offset: 0x240, Size: 0x8]
	World* LocalWorld;//[Offset: 0x248, Size: 0x8]
	void ShowGardebras(bool bShow);// 0x28b7700
	void OnPlayerAvatarPartChanged(const ArkItemAvatar* AvatarItem, enum PartType, SkeletalMeshComponent* PartMesh, bool bIgnoreFPPParts);// 0x28b6a20
	SkeletalMesh* GetDroneSkeletalMesh();// 0x28b6200
	<int,MaterialInterface*> GetDroneOverrideMaterials();// 0x28b6130

--------------------------------
Class: ArkItemAvatarGardebras.ArkItemAvatarSuit.ArkItemAvatar.ArkItem.Object
	SkeletalMesh* DroneSkeletalMesh;//[Offset: 0x190, Size: 0x28]
	<int,MaterialInterface*> DroneMeshOverrideMaterials;//[Offset: 0x1b8, Size: 0x50]

--------------------------------
Class: ArkItemAvatarSuit.ArkItemAvatar.ArkItem.Object

--------------------------------
Class: ArkPlayerExplodeAnimComponent.ArkCharacterLiteComponent.LiteComponent.Object
	Vector PivotPosition;//[Offset: 0xac, Size: 0xc]
	float AnimIntervalSeconds;//[Offset: 0xbc, Size: 0x4]
	bool bIsExploding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	void StartExplode();// 0x2807a90
	void ServerPlayExplodeAnim(Vector Location);// 0x28b3110
	bool GetIsExploding();// 0x189d8d0
	void EndExplode();// 0x2807a70
	void DelayToEnableAnim();// 0x28b26a0

--------------------------------
Class: ArkPlayerAttributeComponent.ArkCharacterLiteComponent.LiteComponent.Object
	int PlayerClass;//[Offset: 0xac, Size: 0x4]
	int PlayerEnergy;//[Offset: 0xb0, Size: 0x4]
	int ArmBandID;//[Offset: 0xb4, Size: 0x4]
	ArkPerkTree PlayerPerkTree;//[Offset: 0xb8, Size: 0x30]
	FName[] EnhancedPerkTags;//[Offset: 0xe8, Size: 0x10]
	void SetPerkTree(out const ArkPerkTree PerkTree);// 0x28a0bc0
	void SetClass(int NewClass);// 0x28a0a60
	void SetArmBandID(int ArmBandID);// 0x28a0950
	void OnRep_PlayerEnergy();// 0x28a0770
	void OnRep_PlayerClass();// 0x28a0750
	void OnRep_ArmBandID();// 0x28a0730
	int GetEnergy();// 0x28a0190

--------------------------------
Class: ArkPlayerArmBandComponent.ArkCharacterLiteComponent.LiteComponent.Object
	float MeleeWeaponDurabilityWarningValue;//[Offset: 0xa8, Size: 0x4]
	bool bReplaceInteractionBoard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 0x1]
	FName ArmBandSocketMale;//[Offset: 0xb0, Size: 0x8]
	FName ArmBandSocketFemale;//[Offset: 0xb8, Size: 0x8]
	float playerRotateBlendSpeed;//[Offset: 0xc0, Size: 0x4]
	float ShowAlertTeamMateChipActivatedDuration;//[Offset: 0xf8, Size: 0x4]
	<enum,Vector> InfoWidgetOffsets;//[Offset: 0x100, Size: 0x50]
	Vector defaultInfoWidgetOffset;//[Offset: 0x150, Size: 0xc]
	float defaultInfoWidgetScale;//[Offset: 0x15c, Size: 0x4]
	<enum,float> InfoWidgetScales;//[Offset: 0x160, Size: 0x50]
	Rotator InfoWidgetRotator;//[Offset: 0x1b0, Size: 0xc]
	float angleThreshold;//[Offset: 0x1bc, Size: 0x4]
	float pitchThreshold;//[Offset: 0x1c0, Size: 0x4]
	float blendFrequence;//[Offset: 0x1c4, Size: 0x4]
	float MoveSpeed;//[Offset: 0x1c8, Size: 0x4]
	bool bUseLerp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 0x1]
	FName AttachSocketName;//[Offset: 0x1d0, Size: 0x8]
	FName WeaponSocketName;//[Offset: 0x1d8, Size: 0x8]
	FName noiseBoneName;//[Offset: 0x1e0, Size: 0x8]
	float noiseCoefficient;//[Offset: 0x1e8, Size: 0x4]
	CurveFloat* TurbulenceInCurve;//[Offset: 0x1f0, Size: 0x8]
	CurveFloat* TurbulenceOutCurve;//[Offset: 0x1f8, Size: 0x8]
	CurveFloat* FadeInCurve;//[Offset: 0x200, Size: 0x8]
	CurveFloat* FadeOutCurve;//[Offset: 0x208, Size: 0x8]
	float DeltaTime;//[Offset: 0x214, Size: 0x4]
	float switchSpeed;//[Offset: 0x218, Size: 0x4]
	float appearSpeed;//[Offset: 0x21c, Size: 0x4]
	float appearSpeedCinimatic;//[Offset: 0x220, Size: 0x4]
	float LastTime;//[Offset: 0x224, Size: 0x4]
	float normalSpeedScale;//[Offset: 0x228, Size: 0x4]
	float crouchSpeedScale;//[Offset: 0x22c, Size: 0x4]
	Vector StandAimingPositionCompemsation;//[Offset: 0x230, Size: 0xc]
	Vector CrouchAimingPositionCompemsation;//[Offset: 0x23c, Size: 0xc]
	float fovScaleCompemsation;//[Offset: 0x248, Size: 0x4]
	CurveFloat* RootMuzzleScaleCompemsation;//[Offset: 0x250, Size: 0x8]
	bool bShowMoveDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	<int,enum> specialOffsetMap;//[Offset: 0x2a0, Size: 0x50]
	float crossHairHideTimeCount;//[Offset: 0x354, Size: 0x4]
	class ArkInteractionWidget* SummonWidgetClass;//[Offset: 0x378, Size: 0x8]
	class WidgetComponent* ContainerComponentClass;//[Offset: 0x388, Size: 0x8]
	WidgetComponent* ContainerComponent;//[Offset: 0x390, Size: 0x8]
	ArkArmBandContainerWidget* ContainerWidget;//[Offset: 0x398, Size: 0x8]
	<enum,UserWidget*> WidgetsMap;//[Offset: 0x3a0, Size: 0x50]
	class UserWidget* AlertWidgetClass;//[Offset: 0x3f0, Size: 0x8]
	delegate EnterAimingStateEvent;//[Offset: 0x3f8, Size: 0x10]
	delegate LeaveAimingStateEvent;//[Offset: 0x408, Size: 0x10]
	ArkSoftParticleSystemComponentWithPool* PickSucEffectParticleComponent;//[Offset: 0x418, Size: 0x8]
	ParticleSystem* ArmBandPS;//[Offset: 0x420, Size: 0x28]
	ArkSoftParticleSystemComponentWithPool* ArmBandPSC;//[Offset: 0x448, Size: 0x8]
	class UserWidget* ModWidgetClass;//[Offset: 0x450, Size: 0x8]
	void ToggleChangeWidget(enum WidgetType);// 0x305c9c0
	void TickSwitchAnimFadeOut();// 0x28a0ee0
	void TickSwitchAnimFadeIn();// 0x28a0ec0
	void TickPlayerInfoWidgetDisappear();// 0x28a0ea0
	void TickPlayerInfoWidgetAppear();// 0x28a0e80
	void TickLastTime();// 0x28a0e60
	void TickInteractWidgetDisappear();// 0x28a0e40
	void TickInteractWidgetAppear();// 0x28a0e20
	void TickBackAnimFadeOut();// 0x28a0e00
	void TickBackAnimFadeIn();// 0x28a0de0
	void ShowSummonWidget(bool ToggleAppearSound);// 0x28a0d50
	void ShowArmband(bool bCinimatic);// 0x28a0cc0
	void RemoveWidget(enum Type);// 0x28a08d0
	void OnTeamMateChipActivated(enum ChipType, int ChipID);// 0x28a0790
	void OnShuttleInteract(bool bInteracted);// 0x305c9c0
	void OnPlayerTeamInfoChange();// 0x28a0710
	void OnLeaveAimingActionState(bool bClientSimulated);// 0x28a0530
	void OnEnterAimingActionState(bool bClientSimulated);// 0x28a04a0
	bool IsNeedHideCrossHair();// 0x28a03c0
	void HideSummonWidget(bool ToggleAppearSound);// 0x28a02a0
	void HideArmBand();// 0x28a0280
	UserWidget* GetWidget(enum Type);// 0x28a01f0
	Rotator GetArmbandRotation();// 0x289ffb0
	Vector GetArmbandLocation();// 0x289ff70
	FName GetArmBandAttachPointName();// 0x289ff30
	void ChangeOffset(enum offsetType);// 0x289fce0
	UserWidget* AddWidget(enum Type, class UserWidget WidgetClass);// 0x289fc20

--------------------------------
Class: ArkInteractionWidget.ArkUserWidgetBaseWithPool.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	float VerticalOffset;//[Offset: 0x320, Size: 0x4]
	float HorizontalOffset;//[Offset: 0x324, Size: 0x4]
	Vector2D PivotForWidget;//[Offset: 0x328, Size: 0x8]
	float ScaleFor3DWidget;//[Offset: 0x330, Size: 0x4]
	float CloseDelay;//[Offset: 0x334, Size: 0x4]
	bool bAutoUpdateRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]
	bool bIgnoreAutoWrappingSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339, Size: 0x1]
	float DescriptionAutoWrappingWidth;//[Offset: 0x33c, Size: 0x4]
	float FadeInDelayTime;//[Offset: 0x340, Size: 0x4]
	float FadeOutDelayTime;//[Offset: 0x344, Size: 0x4]
	WidgetComponent* WidgetComponent;//[Offset: 0x358, Size: 0x8]
	Object* InteractionObj;//[Offset: 0x360, Size: 0x8]
	ArkPlayer* Player;//[Offset: 0x368, Size: 0x8]
	class ArkInteractionExtraWidget* WeaponExtraWidgetClass;//[Offset: 0x370, Size: 0x8]
	class ArkInteractionExtraWidget* AmmoExtraWidgetClass;//[Offset: 0x378, Size: 0x8]
	class ArkInteractionExtraWidget* ShieldExtraWidgetClass;//[Offset: 0x380, Size: 0x8]
	class ArkInteractionExtraWidget* ChestExtraWidgetClass;//[Offset: 0x388, Size: 0x8]
	class ArkInteractionExtraWidget* MeleeWeaponExtraWidgetClass;//[Offset: 0x390, Size: 0x8]
	<class ArkInteractionExtraWidget,ArkInteractionExtraWidget*> ExtraWidgetMap;//[Offset: 0x398, Size: 0x50]
	FText ReplaceText;//[Offset: 0x3f0, Size: 0x18]
	ArkInteractionWidgetFrame* WBP_InteractionWidgetFrame;//[Offset: 0x418, Size: 0x8]
	TextBlock* TxtTitle;//[Offset: 0x420, Size: 0x8]
	RichTextBlock* TxtDesc;//[Offset: 0x428, Size: 0x8]
	ArkInteractionKeyTipsWidget* PrimaryKeyTips;//[Offset: 0x430, Size: 0x8]
	ArkInteractionKeyTipsWidget* SecondaryKeyTips;//[Offset: 0x438, Size: 0x8]
	WidgetAnimation* Anim_FadeIn;//[Offset: 0x440, Size: 0x8]
	bool bListenForInteractionCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 0x1]
	AkAudioEvent* AkEventOnOpenWidget;//[Offset: 0x450, Size: 0x28]
	AkAudioEvent* AkEventOnCloseWidget;//[Offset: 0x478, Size: 0x28]
	FName ActionNameTag;//[Offset: 0x4a0, Size: 0x8]
	FName ActionNameCancel;//[Offset: 0x4a8, Size: 0x8]
	FName ActionNameResponse;//[Offset: 0x4b0, Size: 0x8]
	FString ActionTextKeyTag;//[Offset: 0x4b8, Size: 0x10]
	FString ActionTextKeyCancel;//[Offset: 0x4c8, Size: 0x10]
	FString ActionTextKeyResponse;//[Offset: 0x4d8, Size: 0x10]
	Image* VendorIcon;//[Offset: 0x4e8, Size: 0x8]
	FName VendorName;//[Offset: 0x4f0, Size: 0x8]
	MRedPointWidget* SecondaryKeyTipsRedDot_R;//[Offset: 0x4f8, Size: 0x8]
	void UpdatePingTips();// 0x2804dc0
	void ShowHoldBar(bool bShow);// 0x305c9c0
	void SetInteractionInfoBP(out const InteractableState[] ShowTypes, const ArkCharacterBase* InteractedBy, out const interface class CurrentInteraction, out const Vector Loc);// 0x305c9c0
	void SetHoldBarProgress(float Percent);// 0x305c9c0
	void OpenWidget();// 0x278cfe0
	void OnShowHUDChanged(bool InHudShownFlag);// 0x2804c40
	void OnShowHoldProgress(bool bShow, float CDSeconds);// 0x2804cd0
	void OnInteractionStopped(Object* TargetObjRef, enum InteractionType, bool bCancelled, float RemainingTime);// 0x2804af0
	void OnInteractionStarted(Object* TargetObjRef, enum InteractionType, float Duration);// 0x28049e0
	void OnCurrentWeaponChanged();// 0x28049c0
	void NotifyInteractionStopped(Object* TargetObjRef, enum InteractionType, bool bCancelled, float RemainingTime);// 0x305c9c0
	void NotifyInteractionStarted(Object* TargetObjRef, enum InteractionType, float Duration);// 0x305c9c0
	bool IsRedPointTarget(int64 UserData1, int64 UserData2, Object* Widget, FString UserData3, int ModuleID);// 0x28047f0
	bool IsPingAvailable();// 0x28047c0
	void InitWidget();// 0x278d060
	ArkInteractionKeyTipsWidget* GetSecondaryKeyTipsWidget();// 0x2804790
	ArkInteractionKeyTipsWidget* GetPrimaryKeyTipsWidget();// 0x2804760
	void GetPingButtonPrompts(out FName OutActionName, out FText OutActionDescription);// 0x2804630
	FText GetInteractionTypeText(enum InteractionType);// 0x28045a0
	void DestroyWidgetComponent();// 0x2804580
	void CloseWidget();// 0x10a00b0
	void BP_SetInteractionIcon(PaperSprite* icon);// 0x305c9c0
	void AddExtraWidget(ArkInteractionExtraWidget* Widget);// 0x305c9c0

--------------------------------
Class: ArkInteractionExtraWidget.UserWidget.Widget.Visual.Object
	Vector2D ExtraWidgetAlignment;//[Offset: 0x238, Size: 0x8]
	Vector2D ExtraWidgetPosition;//[Offset: 0x240, Size: 0x8]
	Anchors ExtraWidgetAnchors;//[Offset: 0x248, Size: 0x10]
	bool ExtraWidgetAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	void AdjustWidgetPos(CanvasPanelSlot* CanvasPanelSlot);// 0x27ffe40

--------------------------------
Class: ArkInteractionWidgetFrame.ArkCommonWidgetBase.UserWidget.Widget.Visual.Object
	ArkInteractionKeyTipsWidget* KeyTipsWidget_Ping;//[Offset: 0x240, Size: 0x8]
	ArkInteractionKeyTipsWidget* KeyTipsWidget_Primary;//[Offset: 0x248, Size: 0x8]
	ArkInteractionKeyTipsWidget* KeyTipsWidget_Secondary;//[Offset: 0x250, Size: 0x8]
	Spacer* BottomLeftSpacer;//[Offset: 0x258, Size: 0x8]
	Border* Border_Quality;//[Offset: 0x260, Size: 0x8]
	Vector2D FrameOffset;//[Offset: 0x268, Size: 0x8]
	void SetKeyTipsVisibleKeyTipsWidgetPing(bool bVisibility);// 0x28085a0
	void SetKeyTipsTextColorKeyTipsWidget(out const SlateColor InTextColor);// 0x28084d0
	void SetKeyTipsInfoKeyTipsWidgetPing(out const FText InteractionText, out const FName ActionName, bool bShowHoldProgressFlag);// 0x2808360
	void SetKeyTipsFillProgressKeyTipsWidget(float FillProgress);// 0x28082e0

--------------------------------
Class: ArkCommonWidgetBase.UserWidget.Widget.Visual.Object
	bool HideInCommonCategory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x238, Size: 0x1]
	void ApplyStyle(bool InIsDesignTime);// 0x26e59f0

--------------------------------
Class: ArkInteractionKeyTipsWidget.ArkCommonWidgetBase.UserWidget.Widget.Visual.Object
	void UnenableButton();// 0x305c9c0
	void SetTextColor(out const SlateColor InTextColor);// 0x305c9c0
	void SetKeyTipsInfo(enum CheckRes, enum InteractionType, out const FText KeyTipsText, out const FName KeyTipsEventName, bool bHoldingInput);// 0x305c9c0
	void SetInputEnabled(bool InEnableFlag);// 0x305c9c0
	void SetHoldProgress(float InProgress);// 0x305c9c0
	void SetActionText(out const FText InActionText);// 0x305c9c0
	void SetActionName(out const FName InActionName);// 0x305c9c0
	void EnableButton();// 0x305c9c0

--------------------------------
Class: Spacer.Widget.Visual.Object
	Vector2D Size;//[Offset: 0x110, Size: 0x8]
	void SetSize(Vector2D InSize);// 0x415b9d0

--------------------------------
Class: RichTextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x130, Size: 0x18]
	DataTable* TextStyleSet;//[Offset: 0x148, Size: 0x8]
	class RichTextBlockDecorator[] DecoratorClasses;//[Offset: 0x150, Size: 0x10]
	bool UseDefaultDecoratorSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]
	Vector2D DefaultDecoratorSize;//[Offset: 0x164, Size: 0x8]
	bool bOverrideDefaultStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 0x1]
	TextBlockStyle DefaultTextStyleOverride;//[Offset: 0x170, Size: 0x268]
	float MinDesiredWidth;//[Offset: 0x3d8, Size: 0x4]
	RichTextBlockDecorator*[] InstanceDecorators;//[Offset: 0x648, Size: 0x10]
	void SetTextStyleSet(DataTable* NewTextStyleSet);// 0x4157ee0
	void SetText(out const FText InText);// 0x4157e10
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x4157580
	void SetDefaultTextStyle(out const TextBlockStyle InDefaultTextStyle);// 0x4157040
	void SetDefaultStrikeBrush(out SlateBrush InStrikeBrush);// 0x4156ec0
	void SetDefaultShadowOffset(Vector2D InShadowOffset);// 0x4156e40
	void SetDefaultShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x4156dc0
	void SetDefaultFont(SlateFontInfo InFontInfo);// 0x4156c90
	void SetDefaultColorAndOpacity(SlateColor InColorAndOpacity);// 0x4156ba0
	void SetAutoWrapText(bool InAutoTextWrap);// 0x4156a90
	void SetAutoWrapAt(float InValue);// 0x4156a10
	FText GetText();// 0x4155dd0
	RichTextBlockDecorator* GetDecoratorByClass(class RichTextBlockDecorator DecoratorClass);// 0x4155b60
	void ClearAllDefaultStyleOverrides();// 0x41556b0

--------------------------------
Class: RichTextBlockDecorator.Object
	bool UseDefaultDecoratorSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	Vector2D DefaultDecoratorSize;//[Offset: 0x2c, Size: 0x8]

--------------------------------
Class: TextBlockStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 0x50]
	SlateColor ColorAndOpacity;//[Offset: 0x58, Size: 0x28]
	Vector2D ShadowOffset;//[Offset: 0x80, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x88, Size: 0x10]
	SlateColor SelectedBackgroundColor;//[Offset: 0x98, Size: 0x28]
	LinearColor HighlightColor;//[Offset: 0xc0, Size: 0x10]
	SlateBrush HighlightShape;//[Offset: 0xd0, Size: 0x88]
	SlateBrush StrikeBrush;//[Offset: 0x158, Size: 0x88]
	SlateBrush UnderlineBrush;//[Offset: 0x1e0, Size: 0x88]

--------------------------------
Class: MRedPointWidget.UserWidget.Widget.Visual.Object
	enum RedPointWidgetType;//[Offset: 0x238, Size: 0x1]
	FString[] AutoRegisterModules;//[Offset: 0x240, Size: 0x10]
	void BP_ShowRedPointWidget(enum RedPointType, int Count);// 0x305c9c0
	void BP_HideRedPointWidget();// 0x305c9c0

--------------------------------
Class: InteractableState
	enum InteractionType;//[Offset: 0x0, Size: 0x1]
	enum InputType;//[Offset: 0x1, Size: 0x1]
	enum EnableState;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: ArkArmBandContainerWidget.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	CanvasPanel* Container;//[Offset: 0x300, Size: 0x8]
	VerticalBox* VerticalBox;//[Offset: 0x308, Size: 0x8]

--------------------------------
Class: VerticalBox.PanelWidget.Widget.Visual.Object
	VerticalBoxSlot* AddChildToVerticalBox(Widget* Content);// 0x4164a60

--------------------------------
Class: VerticalBoxSlot.PanelSlot.Visual.Object
	SlateChildSize Size;//[Offset: 0x38, Size: 0x8]
	Margin Padding;//[Offset: 0x40, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x4166290
	void SetSize(SlateChildSize InSize);// 0x4166030
	void SetPadding(Margin InPadding);// 0x4165bc0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x4165640

--------------------------------
Class: SlateChildSize
	float Value;//[Offset: 0x0, Size: 0x4]
	byte SizeRule;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: ArkPlayerAnimCameraModiferComponent.ArkCharacterLiteComponent.LiteComponent.Object
	float FOVOffset;//[Offset: 0xac, Size: 0x4]
	Vector LocationOffset;//[Offset: 0xb0, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0xbc, Size: 0xc]
	void NotifyStateEnd(const AnimNotifyState* InNotify);// 0x289d910
	void NotifyStateBegin(const AnimNotifyState* InNotify, CurveFloat* BlendCurve, float InBlendInTime, float InBlendOutTime, float InFOVOffset, Vector InLocationOffset, Rotator InRotationOffset);// 0x289d6f0
	bool IsModifyActive();// 0x289d6d0
	bool IsHasModify();// 0x289d6a0
	void ClearModify();// 0x289d4b0

--------------------------------
Class: ArkPlayerNanoSeedComponent.ArkCharacterLiteComponent.LiteComponent.Object
	float SeedEnergy;//[Offset: 0xac, Size: 0x4]
	enum EnergyType;//[Offset: 0xb0, Size: 0x1]
	float ServerActiveTime;//[Offset: 0xb4, Size: 0x4]
	void OnRep_ServerActiveTime();// 0x28be7c0
	void OnRep_SeedEnergy();// 0x28be7c0
	void OnRep_EnergyType();// 0x28be7c0
	void OnOwnerCharacterStateChanged(ArkCharacterBase* Character, enum OldCharacterState, enum CharacterState);// 0x28be380
	float GetRemainEnergy();// 0x28bde80
	enum GetEnergyType();// 0x28bdd30
	void AddSeedEnergy(enum InEnergyType, float InValue);// 0x28bdc50

--------------------------------
Class: ArkItemInventoryComponent.ArkCharacterLiteComponent.LiteComponent.Object
	ArkItem* ItemShortcut;//[Offset: 0xb0, Size: 0x8]
	int CurrentSelectedShortcutIndex;//[Offset: 0xc0, Size: 0x4]
	int CurrentSelectedShortcutItemID;//[Offset: 0xc8, Size: 0x4]
	UsingItemInfo CurrentUsingItemInfo;//[Offset: 0xcc, Size: 0xc]
	ArkItemContainer ItemContainerOwnerOnly;//[Offset: 0xe0, Size: 0x120]
	ArkItemContainer ItemContainerAll;//[Offset: 0x200, Size: 0x120]
	delegate OnItemCountChangedDelegate;//[Offset: 0x320, Size: 0x10]
	delegate OnSyncModChangeDelagate;//[Offset: 0x330, Size: 0x10]
	delegate OnAddItemDelegate;//[Offset: 0x340, Size: 0x10]
	ArkItem*[] ItemObjects;//[Offset: 0x350, Size: 0x10]
	ArkItem* CacheAmmoItems;//[Offset: 0x460, Size: 0x8]
	int[] SyncChipUIDs;//[Offset: 0x4e8, Size: 0x10]
	int[] CoreSyncChipUIDs;//[Offset: 0x4f8, Size: 0x10]
	void UpgradeSuperChipItem(int ItemId, int ItemCount, FString ItemAttributes);// 0x2814790
	void UpgradeItem(int ItemId, int ItemCount, FString ItemAttributes);// 0x2814640
	void RemoveItemByUID(int ItemUID, int ItemCount);// 0x2814430
	void RemoveItemByID(int ItemId, int ItemCount);// 0x2814370
	void RemoveItemByClass(class ArkItem ItemClass, int ItemCount);// 0x28142b0
	bool HasItemByUID(int ItemUID);// 0x2813ee0
	bool GetSyncSlotAllEmpty();// 0x2813d90
	int[] GetSyncChipUIDs();// 0x2813d60
	int GetSyncChipUID(int Index);// 0x2813cd0
	ArkItem*[] GetItemsByType(enum ItemType);// 0x2813540
	ArkItem*[] GetItemsByID(int ItemId);// 0x2813470
	ArkItem*[] GetItemsByClass(out const class ArkItem ItemClass);// 0x2813390
	ArkItem* GetItemByUID(int ItemUID, bool bIgnore);// 0x2812a00
	bool GetHasEmptySyncSlot(enum InType);// 0x2812880
	int GetCurrentUsingItemID();// 0x10c4aa0
	int[] GetCoreSyncChipUIDs();// 0x2812790
	int GetCoreSyncChipUID(int Index);// 0x2812700
	ArkItem*[] GetAllItems();// 0x2812630
	int[] GetAllItemIDsWithoutObject();// 0x28125f0
	int AddItemByClass(class ArkItem ItemClass, int ItemCount, FString ItemAttributes);// 0x2812410
	int AddItem(int ItemId, int ItemCount, FString ItemAttributes, enum Reason);// 0x2812280

--------------------------------
Class: UsingItemInfo
	int ItemId;//[Offset: 0x0, Size: 0x4]
	int ItemUID;//[Offset: 0x4, Size: 0x4]
	bool bCancelled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: ArkItemContainer.FastArraySerializer
	ArkItemEntry[] Items;//[Offset: 0x108, Size: 0x10]
	ArkItemInventoryComponent* ItemInventory;//[Offset: 0x118, Size: 0x8]

--------------------------------
Class: ArkItemEntry.FastArraySerializerItem
	int ItemId;//[Offset: 0xc, Size: 0x4]
	int ItemUID;//[Offset: 0x10, Size: 0x4]
	int ItemCount;//[Offset: 0x14, Size: 0x4]
	FString ItemAttributes;//[Offset: 0x18, Size: 0x10]
	enum Reason;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: ArkDmgInfoComponent.ArkCharacterLiteComponent.LiteComponent.Object
	ArkDmgInfoContainer DmgInfoContainerOwnerOnly;//[Offset: 0xb0, Size: 0x120]
	ParticleSystem* NumberEffect;//[Offset: 0x1d0, Size: 0x8]
	ParticleSystem* NumberEffect_Critical;//[Offset: 0x1d8, Size: 0x8]
	ParticleSystem* NumberEffect_WeakPoint;//[Offset: 0x1e0, Size: 0x8]
	ParticleSystem* NumberEffect_CriticalWeakPoint;//[Offset: 0x1e8, Size: 0x8]
	FName SpawnSocket;//[Offset: 0x1f0, Size: 0x8]
	ArkDmgInfoEntry[] DmgInfo;//[Offset: 0x1f8, Size: 0x10]
	void AddInfo_OnShieldGeneratorBeHitted(TakeHitInfo[] inHitinfoArray, Vector ActorLocation);// 0x270d0c0
	void AddInfo(TakeHitInfo[] inHitinfoArray);// 0x270cfe0

--------------------------------
Class: ArkDmgInfoContainer.FastArraySerializer
	ArkDmgInfoEntry[] DmgInfo;//[Offset: 0x108, Size: 0x10]
	ArkDmgInfoComponent* OwnerComponent;//[Offset: 0x118, Size: 0x8]

--------------------------------
Class: ArkDmgInfoEntry.FastArraySerializerItem
	int DmgNumber;//[Offset: 0xc, Size: 0x4]
	float Duration;//[Offset: 0x10, Size: 0x4]
	bool bWeakPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	bool bCritical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]
	Actor* VictimPawn;//[Offset: 0x18, Size: 0x8]
	bool bKilled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	int Index;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: ArkPlayerMeleeWeapon.ArkMeleeWeapon.ArkWeaponBase.Actor.Object
	int CurrentMeleeIndex;//[Offset: 0x8a0, Size: 0x4]
	DataTable* MaleComboConfigTable;//[Offset: 0x920, Size: 0x8]
	DataTable* FemaleComboConfigTable;//[Offset: 0x928, Size: 0x8]
	float SneakAttackCheckDistance;//[Offset: 0x930, Size: 0x4]
	class DamageType* SneakAttackDamageType;//[Offset: 0x938, Size: 0x8]
	FName[] HardStuffTags;//[Offset: 0x940, Size: 0x10]
	float ImpactDistanceCheckTolerance;//[Offset: 0x950, Size: 0x4]
	<int,MeleeConfigTable> MeleeComboConfig;//[Offset: 0x958, Size: 0x50]
	int TriggerMeleeCombo(int TriggerType);// 0x28bb7b0
	void SetSneakAttackTarget(ArkNpc* TargetRef);// 0x28bb580
	void ServerStartMeleeCombo(int Cmd);// 0x28bb2c0
	void ServerDoSneakAttack();// 0x28bb160
	void OnRep_CurrentMeleeIndex();// 0x28bafd0
	void MeleeAnimComplete();// 0x28bad30
	ArkPlayer* GetWeaponOwnerAsPlayer();// 0x28baca0
	ArkNpc* GetValidSneakAttackTarget();// 0x28bac40
	ArkNpc* GetCurrentSneakAttackTarget();// 0x28ba930
	int GetCurrentComboTrigger();// 0x28ba7d0

--------------------------------
Class: ArkMeleeWeapon.ArkWeaponBase.Actor.Object
	CapsuleComponent* MeleeRangeComp;//[Offset: 0x818, Size: 0x8]
	class CameraShake* HitCameraShake;//[Offset: 0x880, Size: 0x8]
	ForceFeedbackEffect* HitForceFeedback;//[Offset: 0x888, Size: 0x8]
	FName MeleeWeaponName;//[Offset: 0x890, Size: 0x8]
	void OnToggleWeaponDamage(bool bMainOrSub, bool bToogleOn);// 0x305c9c0
	ShapeComponent* GetSubMeleeRangeComponent();// 0x283ae20
	ShapeComponent* GetMeleeRangeComponent();// 0x283adf0

--------------------------------
Class: MeleeConfigTable.TableRowBase
	int MeleeIndex;//[Offset: 0x8, Size: 0x4]
	AnimMontage* MeleeAnim;//[Offset: 0x10, Size: 0x8]
	AnimMontage* MoveMeleeAnim;//[Offset: 0x18, Size: 0x8]
	ComboMeleeConfig[] ComboList;//[Offset: 0x20, Size: 0x10]
	bool bStartCombo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	int PlayerStateBitmask;//[Offset: 0x34, Size: 0x4]
	float PerfectCommandInvalidInterval;//[Offset: 0x38, Size: 0x4]
	float PerfectCommandDetectInterval;//[Offset: 0x3c, Size: 0x4]
	float MinSnapDistance;//[Offset: 0x40, Size: 0x4]
	float MaxSnapDistance;//[Offset: 0x44, Size: 0x4]
	float DamageInterval;//[Offset: 0x48, Size: 0x4]
	float DamagePerHit;//[Offset: 0x4c, Size: 0x4]
	float DamagePerHitToNPC;//[Offset: 0x50, Size: 0x4]
	float DamagePerHitToSync;//[Offset: 0x54, Size: 0x4]
	class ArkDamageType* DamageTypeClass;//[Offset: 0x58, Size: 0x8]
	class ArkImpactEffect* ImpactTemplate;//[Offset: 0x60, Size: 0x8]
	float HitImpulseModifier;//[Offset: 0x68, Size: 0x4]
	float HitPauseDuration;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: ComboMeleeConfig
	int TriggerType;//[Offset: 0x0, Size: 0x4]
	int MeleeIndex;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ArkCombatStateComponent.ArkCharacterLiteComponent.LiteComponent.Object
	delegate OnCombatStateChangeDelegate;//[Offset: 0xb0, Size: 0x10]
	bool bIsInCombat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool bIsInTension;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	bool bIsInHideArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1]
	float ClearPlayerCombatDelay;//[Offset: 0xd0, Size: 0x4]
	float ClearInTensionDelay;//[Offset: 0xd4, Size: 0x4]
	float EnemyDistance;//[Offset: 0xd8, Size: 0x4]
	void ServerUpdateInHideArea(bool bInArea);// 0x26dbf70
	void OnRep_IsInHideArea();// 0x26dbcd0
	void OnRep_IsInCombat();// 0x26dbcb0
	void OnCombatStateChange__DelegateSignature(ArkPlayer* Player, bool bInCombat);// 0x305c9c0
	void CombatTick();// 0x26dadb0
	void ClearIsInTension();// 0x26dad70
	void ClearIsInCombat_Player();// 0x26dad50
	void CheckInFoliageHideArea();// 0x26dad30

--------------------------------
Class: ArkPlayerChipComponent.ArkCharacterLiteComponent.LiteComponent.Object
	delegate OnActiveChipCDTimeUp;//[Offset: 0xb0, Size: 0x10]
	delegate OnChipActivated;//[Offset: 0xc0, Size: 0x10]
	delegate OnUseActiveSkill;//[Offset: 0xd0, Size: 0x10]
	ArkChip*[] ChipArray;//[Offset: 0xe0, Size: 0x10]
	ArkChip* ActiveChip;//[Offset: 0xf0, Size: 0x8]
	ArkChip*[] ClientChipArrayCache;//[Offset: 0xf8, Size: 0x10]
	float ReplicatedCooldownTimer;//[Offset: 0x108, Size: 0x4]
	float CooldownTimerReplicateFrequency;//[Offset: 0x10c, Size: 0x4]
	ArkChip* SyncChip;//[Offset: 0x120, Size: 0x8]
	ArkChip* DesyncChip;//[Offset: 0x128, Size: 0x8]
	void TryActivateSyncChip();// 0x28aaf30
	void TryActivateDesyncChip();// 0x28aaf10
	void TryActivateActiveChip();// 0x28aaef0
	void OnUseActiveSkill__DelegateSignature(enum ChipType, int ChipID);// 0x305c9c0
	void OnRep_ReplicatedCooldownTimer();// 0x28a8830
	void OnRep_ChipArray();// 0x28a8810
	void OnChipActivatedEvent__DelegateSignature(enum ChipType, int ChipID);// 0x305c9c0
	void OnActiveChipCDTimeUp__DelegateSignature(enum ChipType);// 0x305c9c0
	void MulticastOnChipActivated(enum ChipType, int ChipID);// 0x28a86b0
	ArkChip* GetTargetChip(int ChipID);// 0x28a80f0
	ArkChip* GetSyncChip();// 0x28a80d0
	ArkChip* GetDesyncChip();// 0x28a8020
	ArkChip* GetActiveChip();// 0x28a7fc0
	bool CanActivateSyncChip(bool bResync);// 0x28a6a80
	bool CanActivateDesyncChip();// 0x28a6a50
	bool CanActivateActiveChip();// 0x28a6a20
	void BoostSkillCDbyDamage(const ArkGameplayEventWrapper* InGameplayEvent);// 0x28a69a0
	void BoostSkillCD(float InDuration);// 0x28a6920

--------------------------------
Class: ArkChip.Object
	int ChipID;//[Offset: 0x2c, Size: 0x4]
	ArkCD* CDHandler;//[Offset: 0x40, Size: 0x8]
	void TryActivateCD(float CD);// 0x26d3940
	void ReduceCDRemain(float DecreaseCD);// 0x26d2b10
	void OnRep_ChipID();// 0x26d2950
	void OnAttributeChanged(enum AttributeType, enum DamageSubType);// 0x26d2690
	bool IsInCD();// 0x26d2630
	FName GetCDTag();// 0x26d1d30
	float GetCDRemain();// 0x26d1d00
	float GetCDPct();// 0x26d1cd0
	float GetCDCfg();// 0x26d1ca0
	float GetCD();// 0x26d1c70
	void CDTimeUp();// 0x26d19a0

--------------------------------
Class: ArkBuildComponent.ArkCharacterLiteComponent.LiteComponent.Object
	ArkFacilityBase* CurrentFacility;//[Offset: 0xb0, Size: 0x8]
	interface class * RotateFacility;//[Offset: 0xb8, Size: 0x10]
	void StartBuildMode(ArkFacilityBase* Facility);// 0x26a40c0
	void SetServerRotation(Rotator Rotation);// 0x26a3e70
	void ServerPutFacility();// 0xb04ed0
	void SaveRotateFacilityInfo(out const interface class Facility);// 0x26a3960
	void PutCurrentBuild();// 0x26a3940
	void OnRep_CurrentFacility();// 0x26a37c0
	bool IsBuildModeOn();// 0x26a3640
	float GetPlacingFacilitySpeedFactor();// 0x26a3610
	ArkFacilityBase* GetCurrentFacility();// 0x26a35a0

--------------------------------
Class: ArkPlayerAudioComponent.ArkCharacterLiteComponent.LiteComponent.Object
	<enum,AkAudioEvent*> PlayerSoundMap;//[Offset: 0xa8, Size: 0x50]
	AkRtpc* RTPC_BeingHitDamage;//[Offset: 0xf8, Size: 0x28]
	ArkFoliageRubSoundConfig[] FoliageRubSoundConfigs;//[Offset: 0x120, Size: 0x10]
	GPUDrivenFoliageManager* mFoliageManager;//[Offset: 0x158, Size: 0x8]
	void PlaySound(enum Sound);// 0x28a0850

--------------------------------
Class: ArkFoliageRubSoundConfig
	AkAudioEvent* RubSound;//[Offset: 0x0, Size: 0x8]
	AkAudioEvent* RubSound_Stop;//[Offset: 0x8, Size: 0x8]
	StaticMesh*[] ApplicableMeshes;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: GPUDrivenFoliageManager.Actor.Object
	int SingleSpriteSize;//[Offset: 0x2f0, Size: 0x4]
	int MaxMipNum;//[Offset: 0x2f4, Size: 0x4]
	int BaseTexSizeRatio;//[Offset: 0x2f8, Size: 0x4]
	int NormalTexSizeRatio;//[Offset: 0x2fc, Size: 0x4]
	int MaxSinglePageTexSize;//[Offset: 0x300, Size: 0x4]
	int MinSinglePageTexSize;//[Offset: 0x304, Size: 0x4]
	int SpriteNumPerImposterDim;//[Offset: 0x308, Size: 0x4]
	int MipNum;//[Offset: 0x30c, Size: 0x4]
	int SinglePageTexSize;//[Offset: 0x310, Size: 0x4]
	int BaseColorSpriteSize;//[Offset: 0x314, Size: 0x4]
	int NormalSpriteSize;//[Offset: 0x318, Size: 0x4]
	int BaseColorPageTexSize;//[Offset: 0x31c, Size: 0x4]
	int NormalPageTexSize;//[Offset: 0x320, Size: 0x4]
	MaterialInterface* FoliageBillboardMaterial;//[Offset: 0x328, Size: 0x8]
	StaticMesh* DefaultStaticMesh;//[Offset: 0x330, Size: 0x8]
	GPUDrivenFoliageComponent* GPUDrivenFoliageComp;//[Offset: 0x338, Size: 0x8]
	Texture2DArray* BaseColorTextureArray;//[Offset: 0x390, Size: 0x8]
	Texture2DArray* NormalTextureArray;//[Offset: 0x398, Size: 0x8]
	SoftObjectPath GeneratedTextureArrayPathForBaseColor;//[Offset: 0x3a0, Size: 0x18]
	SoftObjectPath GeneratedTextureArrayPathForNormal;//[Offset: 0x3b8, Size: 0x18]
	Texture2D*[] GeneratedBaseColorPageTextures;//[Offset: 0x3d0, Size: 0x10]
	Texture2D*[] GeneratedNormalPageTextures;//[Offset: 0x3e0, Size: 0x10]
	bool SphereQueryCloestInstances(out const Vector SphereCenter, float SphereRange, out StaticMesh*[] OutFoliageMeshes, out Transform[] OutFoliageTransforms, float MinSpHW);// 0x3f77530
	bool PointQueryFoliageInfo(out const Vector QueryPoint, out StaticMesh* OutFoliageMesh, out Transform OutFoliageTransform, float IgnoreSpHW);// 0x3f77360
	static GPUDrivenFoliageManager* Get(const Object* WorldContext);// 0x3f77150
	bool BoxQueryCloestInstances(out const Box QueryBox, out StaticMesh*[] OutFoliageMeshes, out Transform[] OutFoliageTransforms, float MinSpHW);// 0x3f76ea0

--------------------------------
Class: GPUDrivenFoliageComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BVHClustSize;//[Offset: 0x670, Size: 0xc]
	InstancedFoliageData[] AllInstanceData;//[Offset: 0x680, Size: 0x10]
	float[] InstanceCustomData;//[Offset: 0x690, Size: 0x10]
	UInt32Property NumCustomDataFloats;//[Size: 0x4]
	int InstanceNum;//[Offset: 0x6a4, Size: 0x4]
	StaticMesh*[] AllSrcMeshes;//[Offset: 0x6a8, Size: 0x10]
	InstancedFoliageBVHTree BVHTree;//[Offset: 0x6b8, Size: 0x68]
	MaterialInterface* FoliageBillboardMaterial;//[Offset: 0x720, Size: 0x8]
	SoftObjectPath GeneratedTextureArrayPathForBaseColor;//[Offset: 0x728, Size: 0x18]
	SoftObjectPath GeneratedTextureArrayPathForNormal;//[Offset: 0x740, Size: 0x18]
	Texture2DArray* BaseColorTextureArray;//[Offset: 0x758, Size: 0x8]
	Texture2DArray* NormalTextureArray;//[Offset: 0x760, Size: 0x8]
	int TotalTriangleDraw;//[Offset: 0x768, Size: 0x4]
	MaterialInstanceDynamic* FoliageBillboardMaterialMID;//[Offset: 0x770, Size: 0x8]
	int PerPatchMaxNum;//[Offset: 0x778, Size: 0x4]
	InstanceMeshType[] FoliageTypes;//[Offset: 0x780, Size: 0x10]
	bool bHasPhysicsState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x790, Size: 0x1]
	int SpriteNumPerImposterDim;//[Offset: 0x794, Size: 0x4]
	MaterialInterface*[] AllUsedMats;//[Offset: 0x818, Size: 0x10]
	InstancedFoliageMeshPatchInfo[] AllPatches;//[Offset: 0x828, Size: 0x10]
	GPUDrivenFoliageMeshVertex[] CombinedVertexBufferData;//[Offset: 0x838, Size: 0x10]
	CombinedIndiceBufferData(UInt32Property)[] CombinedIndiceBufferData;//[Offset: 0x848, Size: 0x10]
	int[] FoliageBillboardIDMap;//[Offset: 0x858, Size: 0x10]
	bool SphereQueryCloestInstances(out const Vector SphereCenter, float SphereRange, out StaticMesh*[] OutFoliageMeshes, out Transform[] OutFoliageTransforms, float MinSpHW);// 0x4bae360
	void SetAllInstance(out const HierarchicalInstancedStaticMeshComponent*[] InHISMComponents, const StaticMesh*[] InAllFoliageMeshes, MaterialInterface* InFoliageBillboardMaterial, out const int[] InAllFoliageBillboardIDMap);// 0x4badee0
	bool PointQueryFoliageInfo(out const Vector QueryPoint, out StaticMesh* OutFoliageMesh, out Transform OutFoliageTransform, float IgnoreSpHW);// 0x4badab0
	bool BoxQueryCloestInstances(out const Box QueryBox, out StaticMesh*[] OutFoliageMeshes, out Transform[] OutFoliageTransforms, float MinSpHW);// 0x4babe80

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int[] SortedInstances;//[Offset: 0x8b0, Size: 0x10]
	int NumBuiltInstances;//[Offset: 0x8c0, Size: 0x4]
	Box BuiltInstanceBounds;//[Offset: 0x8c8, Size: 0x1c]
	Box UnbuiltInstanceBounds;//[Offset: 0x8e4, Size: 0x1c]
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0x900, Size: 0x10]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x910, Size: 0x1]
	int OcclusionLayerNumNodes;//[Offset: 0x918, Size: 0x4]
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0x91c, Size: 0x1c]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x938, Size: 0x1]
	bool bAlwaysNeedsToRender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x939, Size: 0x1]
	int InstanceCountToRender;//[Offset: 0x93c, Size: 0x4]
	int RayTracingWorldPositionOffsetPriority;//[Offset: 0x970, Size: 0x4]
	bool RemoveInstances(out const int[] InstancesToRemove);// 0x4bade20

--------------------------------
Class: InstancedFoliageData
	Transform InstanceTransform;//[Offset: 0x0, Size: 0x30]
	int MeshIndex;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: InstancedFoliageBVHTree
	int RootNodeIndex;//[Offset: 0x0, Size: 0x4]
	int MaxLayers;//[Offset: 0x4, Size: 0x4]
	InstancedFoliageBVHNode[] AllNodes;//[Offset: 0x8, Size: 0x10]
	BoxSphereBounds[] CachedInstanceBounds;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: InstancedFoliageBVHNode
	int NodeIndex;//[Offset: 0x0, Size: 0x4]
	int ParentNodeIndex;//[Offset: 0x4, Size: 0x4]
	int LayerIndex;//[Offset: 0x8, Size: 0x4]
	BoxSphereBounds BuildBVHBound;//[Offset: 0xc, Size: 0x1c]
	BoxSphereBounds TraverseBVHBound;//[Offset: 0x28, Size: 0x1c]
	int BuildInstanceNum;//[Offset: 0x44, Size: 0x4]
	int[] ChildNodeIndices;//[Offset: 0x48, Size: 0x10]
	int[] ContainedInstanceIndices;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: Texture2DArray.Texture.StreamableRenderAsset.Object
	byte AddressX;//[Offset: 0x1d0, Size: 0x1]
	byte AddressY;//[Offset: 0x1d1, Size: 0x1]
	byte AddressZ;//[Offset: 0x1d2, Size: 0x1]
	float[] TilingFactors;//[Offset: 0x1d8, Size: 0x10]
	SourceTexture[] SourceTexturesWrapper;//[Offset: 0x1e8, Size: 0x10]

--------------------------------
Class: SourceTexture
	ColorAdjustmentParametersSlice ColorAdjustments;//[Offset: 0x0, Size: 0x1]
	bool bFlipGreenChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: ColorAdjustmentParametersSlice

--------------------------------
Class: InstanceMeshType
	StaticMesh* InstanceStaticMesh;//[Offset: 0x0, Size: 0x8]
	MaterialInterface*[] Materials;//[Offset: 0x8, Size: 0x10]
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bEvaluateWPO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	int RayTracingWPOPriority;//[Offset: 0x1c, Size: 0x4]
	BodyInstance BodyInstance;//[Offset: 0x20, Size: 0x148]
	int Number;//[Offset: 0x168, Size: 0x4]

--------------------------------
Class: InstancedFoliageMeshPatchInfo
	FString MeshName;//[Offset: 0x0, Size: 0x10]
	UInt32Property MeshIndex;//[Size: 0x4]
	UInt32Property LODIndex;//[Size: 0x4]
	UInt32Property SectionIndex;//[Size: 0x4]
	UInt32Property FirstVertexOffset;//[Size: 0x4]
	UInt32Property FirstIndexOffset;//[Size: 0x4]
	UInt32Property IndexCount;//[Size: 0x4]
	UInt32Property BatchOffset;//[Size: 0x4]
	UInt32Property PatchId;//[Size: 0x4]
	UInt32Property PassIndex;//[Size: 0x4]
	UInt32Property VertexCount;//[Size: 0x4]
	UInt32Property MaterialIndex;//[Size: 0x4]
	float ScreenSizeMin;//[Offset: 0x3c, Size: 0x4]
	float ScreenSizeMax;//[Offset: 0x40, Size: 0x4]
	bool bForceNoImposter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	bool bForceNoShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]

--------------------------------
Class: GPUDrivenFoliageMeshVertex
	Vector Position;//[Offset: 0x0, Size: 0xc]
	PackedNormal TangentX;//[Offset: 0xc, Size: 0x4]
	PackedNormal TangentZ;//[Offset: 0x10, Size: 0x4]
	Color Color;//[Offset: 0x14, Size: 0x4]
	Vector2D TextureFirstCoordinate;//[Offset: 0x18, Size: 0x8]
	Vector2D TextureSecondCoordinate;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: PackedNormal
	byte X;//[Offset: 0x0, Size: 0x1]
	byte Y;//[Offset: 0x1, Size: 0x1]
	byte Z;//[Offset: 0x2, Size: 0x1]
	byte W;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: ArkActionComponent.ArkCharacterLiteComponent.LiteComponent.Object
	ArkPlayerAnimSet* PlayerAnimSet;//[Offset: 0xa8, Size: 0x8]
	AnimMontage* AM_Trampoline;//[Offset: 0xb0, Size: 0x8]
	AnimMontage* AM_TrampolineRecover;//[Offset: 0xb8, Size: 0x8]
	bool bIsTrampoline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	AnimMontage* AM_Knockup;//[Offset: 0xc8, Size: 0x8]
	AnimMontage* AM_KnockupFall;//[Offset: 0xd0, Size: 0x8]
	AnimMontage* AM_KnockupRecover;//[Offset: 0xd8, Size: 0x8]
	AnimMontage* AM_JumpRecover_Medium;//[Offset: 0xe0, Size: 0x8]
	AnimMontage* AM_JumpRecover_High;//[Offset: 0xe8, Size: 0x8]
	AnimMontage* AM_JumpRecover_D;//[Offset: 0xf0, Size: 0x8]
	AnimMontage* AM_JumpRecover_U;//[Offset: 0xf8, Size: 0x8]
	float JumpRecoverHeightMedium;//[Offset: 0x100, Size: 0x4]
	float JumpRecoverHeightHigh;//[Offset: 0x104, Size: 0x4]
	ArkPlayer* PlayerOwner;//[Offset: 0x110, Size: 0x8]
	ArkWeaponBase* CurrentWeapon;//[Offset: 0x118, Size: 0x8]
	ArkWeaponAnimSet* CurrentWeaponAnimSet;//[Offset: 0x120, Size: 0x8]

--------------------------------
Class: ArkPlayerAnimSet.DataAsset.Object
	ArkWeaponAnimSet* WeaponAnimAssetArray;//[Offset: 0x30, Size: 0x8]
	byte DefaultWeaponTypeIdx;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ArkAIDetecttionConfig
	float DetectPeriod;//[Offset: 0x0, Size: 0x4]
	float DetectDuration;//[Offset: 0x4, Size: 0x4]
	float DetectRadius;//[Offset: 0x8, Size: 0x4]
	float DetectAngle;//[Offset: 0xc, Size: 0x4]
	float PickupRadius;//[Offset: 0x10, Size: 0x4]
	int PickupQuality;//[Offset: 0x14, Size: 0x4]
	FString PPTypeName;//[Offset: 0x18, Size: 0x10]
	enum ArmBandWidget;//[Offset: 0x28, Size: 0x1]
	ArkBuffClassOrID[] BuffsForTarget;//[Offset: 0x30, Size: 0x10]
	ArkAIDetectionDamage[] Damages;//[Offset: 0x40, Size: 0x10]
	<enum> ApplyBuffEffects;//[Offset: 0x50, Size: 0x50]
	MaterialInterface* DecalMat;//[Offset: 0xa0, Size: 0x28]
	bool bShowHighLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1]
	bool bShowInRadar;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc8, Size: 0x1]
	bool bShowRadarWavyLine;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc8, Size: 0x1]
	bool bShowSearchDecal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc8, Size: 0x1]
	bool bDetectPickup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc8, Size: 0x1]
	bool bShareInTeam;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc8, Size: 0x1]
	bool bDecalTeammateVisiable;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc8, Size: 0x1]
	bool bDecalEnemyVisiable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc8, Size: 0x1]
	ParticleSystem* DecalEffect;//[Offset: 0xd0, Size: 0x28]
	class ArkAIGABuff_DetectionEX* ExEffect;//[Offset: 0xf8, Size: 0x8]

--------------------------------
Class: ArkAIDetectionDamage
	ArkAIDamageConfig DamageConfig;//[Offset: 0x0, Size: 0x40]
	bool DamagePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool DamageNano;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool DamageSyncNano;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]

--------------------------------
Class: ArkAIGABuff_DetectionEX.Object

--------------------------------
Class: ArkPlayerActionStateLog
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	enum ActionState;//[Offset: 0x4, Size: 0x1]
	bool bEnterLeave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	FString Comment;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ArkRadialCameraShakeInfo
	int ShakeCount;//[Offset: 0x0, Size: 0x4]
	float ShakeScale;//[Offset: 0x4, Size: 0x4]
	class DamageType* dmgTypeClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ArkCameraReplicateViewInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	float FOV;//[Offset: 0x18, Size: 0x4]
	bool UseCameraSocketAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: ArkInteractionComponent.ArkCharacterLiteComponent.LiteComponent.Object
	delegate OnShowInteractionUI;//[Offset: 0xb0, Size: 0x10]
	float PlayerQueryInteractRadius;//[Offset: 0xc0, Size: 0x4]
	float PlayerInteractTickInterval;//[Offset: 0xc4, Size: 0x4]
	Vector InteractWidgetScale;//[Offset: 0xc8, Size: 0xc]
	enum InteractWidgetSpace;//[Offset: 0xd4, Size: 0x1]
	MaterialInterface* DefaultInteractWidgetMaterial;//[Offset: 0xd8, Size: 0x8]
	ValidInteractiveObjectInfo CurrentFocusedInteractiveItemInfo;//[Offset: 0xe0, Size: 0x60]
	interface class[] SpecialInteractList;//[Offset: 0x140, Size: 0x10]
	bool bEnableAutoInteract;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 0x1]
	interface class * CurrentInteractingItem;//[Offset: 0x170, Size: 0x10]
	interface class * CurrentAnimationPlayingItem;//[Offset: 0x180, Size: 0x10]
	interface class * LastFocusedInteractiveItem;//[Offset: 0x1d8, Size: 0x10]
	<enum,enum> LastFocusedInteractionTypeMap;//[Offset: 0x1e8, Size: 0x50]
	InteractionRepAnimationInfo InteractionRepAnimInfo;//[Offset: 0x240, Size: 0xb0]
	void SetNeedUpdateInteraction(bool bNeed);// 0x2801b20
	void SetForceUpdateCurrentItem(bool bForce);// 0x2801800
	void OnShowInteractionUI__DelegateSignature(bool bShowUI);// 0x305c9c0
	void OnRep_InteractionRepAnimInfo(out const InteractionRepAnimationInfo LastAnimInfo);// 0x2801500
	Object* GetInteractingItem();// 0x2800cd0
	Object* GetInteractableItem();// 0x2800ca0
	void ForceRefreshInteractionWidgetByID(int ItemId);// 0x2800940
	void ForceRefreshInteractionWidget();// 0x2800920

--------------------------------
Class: InteractionRepAnimationInfo
	enum InteractionType;//[Offset: 0x0, Size: 0x1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 0x8]
	float PlayRate;//[Offset: 0x10, Size: 0x4]
	FName StartSectionName;//[Offset: 0x14, Size: 0x8]
	bool bStopAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool ForcePlayBit;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]
	Vector_NetQuantize10 AnimExpectedStartLocation;//[Offset: 0x20, Size: 0xc]
	ArkInteractionTargetAnimData TargetAnimData;//[Offset: 0x30, Size: 0x80]

--------------------------------
Class: ArkInteractionTargetAnimData
	Object* TargetObject;//[Offset: 0x0, Size: 0x8]
	AnimSequenceBase* TargetAnim;//[Offset: 0x8, Size: 0x8]
	Transform DesiredTransform;//[Offset: 0x10, Size: 0x30]
	Transform TargetTransform;//[Offset: 0x40, Size: 0x30]
	enum MoveType;//[Offset: 0x70, Size: 0x1]
	enum PositionType;//[Offset: 0x71, Size: 0x1]

--------------------------------
Class: ValidInteractiveObjectInfo
	interface class * ObjectRef;//[Offset: 0x0, Size: 0x10]
	<enum,ValidInteractiveTypeInfo> InteractionTypeMap;//[Offset: 0x10, Size: 0x50]

--------------------------------
Class: ValidInteractiveTypeInfo
	enum InteractionType;//[Offset: 0x0, Size: 0x1]
	enum DirectionType;//[Offset: 0x1, Size: 0x1]
	Transform InteractionTrans;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: ArkPlayerSoundTable.DataAsset.Object
	AkAudioEvent* EnterCombatSound;//[Offset: 0x30, Size: 0x8]
	AkAudioEvent* CrouchSound;//[Offset: 0x38, Size: 0x28]
	AkAudioEvent* StandUpSound;//[Offset: 0x60, Size: 0x28]
	AkAudioEvent* UseScanEffectSound;//[Offset: 0x88, Size: 0x28]
	AkAudioEvent* EnterTargeting;//[Offset: 0xb0, Size: 0x28]
	AkAudioEvent* LeaveTargeting;//[Offset: 0xd8, Size: 0x28]
	AkAudioEvent* BeAimedSound;//[Offset: 0x100, Size: 0x28]
	AkAudioEvent* LowHealthSound;//[Offset: 0x128, Size: 0x28]
	AkAudioEvent* LowHealthSound_Stop;//[Offset: 0x150, Size: 0x28]
	AkAudioEvent* BeginUseHealthPack;//[Offset: 0x178, Size: 0x28]
	AkAudioEvent* EndUseHealthPack;//[Offset: 0x1a0, Size: 0x28]
	AkAudioEvent* UseHealthPackFailed;//[Offset: 0x1c8, Size: 0x28]
	AkAudioEvent* ShieldFail;//[Offset: 0x1f0, Size: 0x28]
	AkAudioEvent* ShieldRefill;//[Offset: 0x218, Size: 0x28]
	AkAudioEvent* RescueParnterActive;//[Offset: 0x240, Size: 0x28]
	AkAudioEvent* ExecutePlayerSound;//[Offset: 0x268, Size: 0x28]
	AkAudioEvent* UploadPlayerChipStart;//[Offset: 0x290, Size: 0x28]
	AkAudioEvent* UploadPlayerChipEnd;//[Offset: 0x2b8, Size: 0x28]
	AkAudioEvent* DownloadPlayerChipStart;//[Offset: 0x2e0, Size: 0x28]
	AkAudioEvent* DownloadPlayerChipEnd;//[Offset: 0x308, Size: 0x28]
	AkAudioEvent* DownloadPlayerChipSucceed;//[Offset: 0x330, Size: 0x28]
	AkAudioEvent* InvalidCrouchStand;//[Offset: 0x358, Size: 0x28]
	AkAudioEvent* InvalidSwitchWeapon;//[Offset: 0x380, Size: 0x28]
	AkAudioEvent* InvalidReloadWeapon;//[Offset: 0x3a8, Size: 0x28]
	AkAudioEvent* InvalidSwitchItem;//[Offset: 0x3d0, Size: 0x28]
	AkAudioEvent* InvalidInteraction;//[Offset: 0x3f8, Size: 0x28]
	AkAudioEvent* BreakShieldSound;//[Offset: 0x420, Size: 0x28]
	AkAudioEvent* KnockDownPlayerSound;//[Offset: 0x448, Size: 0x28]
	AkAudioEvent* KillPlayerSound;//[Offset: 0x470, Size: 0x28]
	AkAudioEvent* InteractionCancelled;//[Offset: 0x498, Size: 0x28]
	AkAudioEvent* SyncSwitchCancelled;//[Offset: 0x4c0, Size: 0x28]
	float LowHealthSound_RTPCTransitionTime;//[Offset: 0x4e8, Size: 0x4]
	float[] GearWeightStages;//[Offset: 0x4f0, Size: 0x10]

--------------------------------
Class: ArkPlayerMeleeComponent.ArkMeleeComponent.ActorComponent.Object
	class ArkDamageType* MeleeTargetingPreDamageClass;//[Offset: 0x2c0, Size: 0x8]
	ArkPlayer* PlayerOwner;//[Offset: 0x2c8, Size: 0x8]
	AbilitySystemComponent* AbilityComponentRef;//[Offset: 0x2d0, Size: 0x8]
	<enum,class GameplayAbility> MeleeAbilityConfig;//[Offset: 0x2e0, Size: 0x50]
	class GameplayAbility* MeleeAbilityClass;//[Offset: 0x330, Size: 0x8]
	class GameplayAbility* SneakAttackAbilityClass;//[Offset: 0x338, Size: 0x8]
	class GameplayAbility* MeleeDeflectAbilityClass;//[Offset: 0x340, Size: 0x8]
	<enum,MeleeConfigTable> MeleeActionConfig;//[Offset: 0x380, Size: 0x50]
	int CurrentMeleeIndex;//[Offset: 0x448, Size: 0x4]
	enum CurrentMeleeActionType;//[Offset: 0x44c, Size: 0x1]
	float AcceptableMeleeDirectionInputThreshold;//[Offset: 0x454, Size: 0x4]
	<Actor*,int> CurrentMeleeHitCounterMap;//[Offset: 0x470, Size: 0x50]
	<Actor*,int> CurrentMeleeHitCounterSubMap;//[Offset: 0x4c0, Size: 0x50]
	ForceFeedbackEffect* OverriedHitForceFeedback;//[Offset: 0x548, Size: 0x8]
	ForceFeedbackEffect* OverriedLightlyHitForceFeedback;//[Offset: 0x550, Size: 0x8]
	float SneakAttackCheckDistance;//[Offset: 0x558, Size: 0x4]
	class ArkDamageType* SneakAttackDamageType;//[Offset: 0x570, Size: 0x8]
	ShapeComponent* TrickComp;//[Offset: 0x578, Size: 0x8]
	ShapeComponent* RollInteractComp;//[Offset: 0x580, Size: 0x8]
	ShapeComponent* SlideInteractComp;//[Offset: 0x588, Size: 0x8]
	float MaxMeleeImpulseForce;//[Offset: 0x590, Size: 0x4]
	float ImpactScale;//[Offset: 0x594, Size: 0x4]
	bool bEnableTargetingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 0x1]
	float TargetingTickInterval;//[Offset: 0x59c, Size: 0x4]
	bool bShowTargetingDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a4, Size: 0x1]
	bool bUseCameraForwardTargeting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a5, Size: 0x1]
	bool bUseInputDirectionTargeting_Keyboard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a6, Size: 0x1]
	bool bEnableDesiredDirectionTargeting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a7, Size: 0x1]
	float TargetingTraceRadius;//[Offset: 0x5a8, Size: 0x4]
	float TargetingDetectRange;//[Offset: 0x5ac, Size: 0x4]
	float MaxKeepTargetingRange;//[Offset: 0x5b0, Size: 0x4]
	float TagertAngleThreshold;//[Offset: 0x5b4, Size: 0x4]
	float TargetHeightThreshold;//[Offset: 0x5b8, Size: 0x4]
	float TargetDistanceRatio;//[Offset: 0x5bc, Size: 0x4]
	float TargetAngleRatio;//[Offset: 0x5c0, Size: 0x4]
	float TargetKeepingRatio;//[Offset: 0x5c4, Size: 0x4]
	float TargetPlayerRatio;//[Offset: 0x5c8, Size: 0x4]
	float TargetEliteRatio;//[Offset: 0x5cc, Size: 0x4]
	float TargetSwarmRatio;//[Offset: 0x5d0, Size: 0x4]
	float TargetDestructableRatio;//[Offset: 0x5d4, Size: 0x4]
	float TargetingMoveThreshold;//[Offset: 0x5e0, Size: 0x4]
	float TargetingChangeCD;//[Offset: 0x5e4, Size: 0x4]
	class Actor[] HitPauseTargetClasses;//[Offset: 0x5f8, Size: 0x10]
	bool bHitForwardUseCameraDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608, Size: 0x1]
	bool bDisableRootMotionAnimtionAfterHitSomething;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61d, Size: 0x1]
	bool bDisableRootMotionAnimationAfterCharging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61e, Size: 0x1]
	bool TriggerMeleeCombo();// 0x28bb840
	void StopPerfectCombo(bool bForceFailed);// 0x28bb720
	void StartPerfectCombo(float Duration);// 0x28bb6a0
	void SnapAnimPose();// 0x28bb680
	void SetSneakAttackTarget(ArkCharacterBase* TargetRef);// 0x28bb600
	void SetMeleeIndex(int MeleeIndex);// 0x28bb500
	void SetMeleeAnimComplete();// 0x2768d30
	void ServerSyncMeleeTargetingActor(Actor* TargetActorRef);// 0x28bb440
	void ServerStartMeleeCombo(int Cmd);// 0x28bb380
	void ServerEnableMeleeCharging(bool bEnableChargeMove);// 0x28bb200
	void ServerDoSneakAttack();// 0x28bb1b0
	void ResetMeleeFlags();// 0x28bb140
	void OnRep_CurrentMeleeIndex();// 0x28baff0
	void OnRep_CurrentMeleeActionType();// 0x28bafb0
	void OnPlayerWeaponDurabilityChange(const int Durability);// 0x28baf30
	void OnPlayerWeaponChange(const ArkWeaponBase* Weapon, enum WeaponSlot);// 0x28bae70
	void OnMeleeTargetingCharacterDead(ArkCharacterBase* DeadCharacter);// 0x28badf0
	void NotifyAbilityEnd(out const AbilityEndedData EndData);// 0x28bad50
	bool IsSnapPoseValid();// 0x28bad00
	bool HasValidTargetingActor();// 0x28bacd0
	ArkCharacterBase* GetValidSneakAttackTarget();// 0x28bac70
	ShapeComponent* GetTrickComponent();// 0x28b6260
	Vector GetPreferMeleeDirection();// 0x28bac00
	Vector GetPlayerFaceDirection();// 0x28babc0
	Vector GetPlayerCameraDirection();// 0x28bab80
	Vector GetMeleeTargetingDirection();// 0x28bab40
	PoseSnapshot GetMeleeSnapPose();// 0x28baa70
	Actor* GetCurrentTargetingActor();// 0x28ba990
	ArkCharacterBase* GetCurrentSneakAttackTarget();// 0x28ba960
	void GetCurrentMeleeInfo(out MeleeConfigTable MeleeInfo);// 0x28ba800
	void EnableSnapPoseValid(bool bValid);// 0x28ba6c0
	void EnablePlayerDesiredRotation(bool bEnable, Rotator rot);// 0x28ba5e0
	void EnablePerfectCombo(float DelayTime, float DurationTime);// 0x28ba520
	void CalcPaceAdjustmentData(out Vector Direction, out float Distance);// 0x28ba410
	void AcceptMeleeActionInfo(enum ActionType);// 0x28ba0e0

--------------------------------
Class: AbilityEndedData
	GameplayAbility* AbilityThatEnded;//[Offset: 0x0, Size: 0x8]
	GameplayAbilitySpecHandle AbilitySpecHandle;//[Offset: 0x8, Size: 0x4]
	bool bReplicateEndAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bWasCancelled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	bool bWasRetriggered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1]

--------------------------------
Class: ArkPlayerVoteComponent.ArkCharacterLiteComponent.LiteComponent.Object
	void ToggleVote();// 0xcac2b0

--------------------------------
Class: ArkPlayerExchangeComponent.ArkCharacterLiteComponent.LiteComponent.Object
	float AutoCloseUIDistance;//[Offset: 0xb8, Size: 0x4]
	Actor* CurrentInteractivePoint;//[Offset: 0xc0, Size: 0x8]
	enum State;//[Offset: 0xd4, Size: 0x1]
	ArkExchangeItem[] ChooseList;//[Offset: 0xd8, Size: 0x10]
	ArkExchangeGameConfig ExchangeConfig;//[Offset: 0x100, Size: 0x210]
	int ListCount;//[Offset: 0x314, Size: 0x4]
	void ShowChooseUI();// 0x28b31e0
	void ServerOnInteractive(ArkExchangeInteractionPoint* InterActor);// 0x2870660
	void OnRep_ExchangeConfig();// 0x28b2fb0
	void OnRep_ChooseList();// 0x28b2f90
	void OnInteractive(ArkExchangeInteractionPoint* InterActor);// 0x28b2db0
	bool IsAutoReset();// 0x27942e0
	enum GetState();// 0x28b2820
	int GetCostPrice();// 0x28b27f0
	ArkExchangeItem[] GetChooseList();// 0x28b2770
	int GetBuyTimes();// 0x28b2740
	void CloseChooseUI();// 0x28b2640
	void ClientRefreshPointView();// 0x28b2620
	void ClientReceivedChooseListChanged(const ArkExchangeItem[] InChooseList);// 0x28b2580
	void ClientReceivedChooseList(const bool AutoReset, const ArkExchangeItem[] InChooseList);// 0x28b2490
	void ChooseMod(int ChooseIndex);// 0x28b20d0
	bool CheckCostPrice();// 0x28b20a0
	bool CanInteractive();// 0x28b2070
	void BuyMod();// 0x28b2050

--------------------------------
Class: ArkExchangeInteractionPoint.ArkInteractiveActor.ArkStaticActor.Actor.Object
	int CostPrice;//[Offset: 0x580, Size: 0x4]
	bool bEnoughMoney;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x584, Size: 0x1]
	enum BuyState;//[Offset: 0x585, Size: 0x1]
	int BuyTimes;//[Offset: 0x588, Size: 0x4]
	void OnStateChangeBP();// 0x305c9c0
	float GetBuffDiscount();// 0x271e190

--------------------------------
Class: ArkExchangeItem
	enum ModType;//[Offset: 0x0, Size: 0x1]
	int ItemId;//[Offset: 0x4, Size: 0x4]
	enum WeaponUpgradeMode;//[Offset: 0x8, Size: 0x1]
	int ItemCost;//[Offset: 0xc, Size: 0x4]
	bool bChoosed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ArkExchangeGameConfig
	int CostItemID;//[Offset: 0x0, Size: 0x4]
	bool bEnableIncrementCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	<int,int> IncrementCost;//[Offset: 0x8, Size: 0x50]
	int[] ReplicatedIncrementCost;//[Offset: 0x58, Size: 0x10]
	int BuyModPrice;//[Offset: 0x68, Size: 0x4]
	int ListCount;//[Offset: 0x6c, Size: 0x4]
	bool bAutoReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	enum WeaponUpgradeMode;//[Offset: 0x71, Size: 0x1]
	ArkExchangeModRefreshConfig RefreshConfig;//[Offset: 0x78, Size: 0x198]

--------------------------------
Class: ArkExchangeModRefreshConfig
	bool bAllowDuplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int OwnSyncModEnlargeRate;//[Offset: 0x4, Size: 0x4]
	<enum,int> ModWeight;//[Offset: 0x8, Size: 0x50]
	<enum,int> ModTypeCD;//[Offset: 0x58, Size: 0x50]
	<enum,int> ModTypeInCDWeight;//[Offset: 0xa8, Size: 0x50]
	<int,int> SyncModWeight;//[Offset: 0xf8, Size: 0x50]
	<int,int> BandModWeight;//[Offset: 0x148, Size: 0x50]

--------------------------------
Class: ArkPlayerServicingStoreComponent.ArkPlayerExchangeComponent.ArkCharacterLiteComponent.LiteComponent.Object
	float CheckOpenInterval;//[Offset: 0x338, Size: 0x4]
	ServicingStoreInitInfo InitInfo;//[Offset: 0x350, Size: 0x18]
	delegate ClientDelegateRefreshUI;//[Offset: 0x368, Size: 0x10]
	delegate ClientCloseUIDelegate;//[Offset: 0x378, Size: 0x10]
	delegate ClientRandomWeaponPlugin;//[Offset: 0x3d8, Size: 0x10]
	ArkExchangeItem Armor;//[Offset: 0x3e8, Size: 0x14]
	ArkExchangeItem[] ReBuyArmorList;//[Offset: 0x400, Size: 0x10]
	int BuyArmorNum;//[Offset: 0x410, Size: 0x4]
	ArkExchangeItem RandomWeapon;//[Offset: 0x414, Size: 0x14]
	int WeaponGTID;//[Offset: 0x428, Size: 0x4]
	ArkExchangeItem RandomBuff;//[Offset: 0x42c, Size: 0x14]
	ArkExchangeItem Medical;//[Offset: 0x440, Size: 0x14]
	ArkExchangeItem[] ReBuyMedicalList;//[Offset: 0x458, Size: 0x10]
	int BuyMedicalNum;//[Offset: 0x468, Size: 0x4]
	int RefreshNum;//[Offset: 0x46c, Size: 0x4]
	ArkWeaponPluginsInfo WeaponPluginsInfo;//[Offset: 0x470, Size: 0x70]
	float ExtraExchangePricePer;//[Offset: 0x4e0, Size: 0x4]
	BuyRecord[] BuyRecord;//[Offset: 0x4e8, Size: 0x10]
	ArkServicingStoreConfig ServicingStoreConfig;//[Offset: 0x4f8, Size: 0x90]
	int IncrementCostBuyNum;//[Offset: 0x588, Size: 0x4]
	delegate ClientVoteCompleted;//[Offset: 0x590, Size: 0x10]
	VoteCompletedPlayerID(UInt64Property)[] VoteCompletedPlayerID;//[Offset: 0x5a0, Size: 0x10]
	void VoteCloseServicingStoreUI(float Timer);// 0x28d0d50
	void ToggleServicingStoreMenuUI(bool Toggle, bool WaitDataGenerate);// 0x28d0980
	void ResetServicingStore();// 0x28ce150
	void RefreshUIMenu();// 0x260b410
	void OnRep_WeaponPluginsInfo();// 0x28cd940
	void OnRep_VoteCompletedPlayerID();// 0x28cd900
	void OnRep_InitInfo();// 0x28cd660
	void OnLogout();// 0x28cd3f0
	bool LocalPlayerStateIsVoteCompleted();// 0x28cce50
	bool IsServicingStoreInitialed();// 0x28ccb20
	void InitServicingStoreMenuUI(out const ServicingStoreInitInfo Info);// 0x28cc590
	bool HasBuyRecord(enum ModType, int InIndex);// 0x28cbfe0
	int GetWeaponQuality();// 0x28cbf00
	FString GetWeaponDisplayString();// 0x28cbc60
	float GetVoteCloseServicingStoreTime();// 0x28cbc30
	float GetUIShowOpenTime();// 0x28cbc00
	int GetRestSwitchIndex();// 0x27c1c20
	bool GetReBuyMedical(out ArkExchangeItem OutItem);// 0x28cb3a0
	bool GetReBuyArmor(out ArkExchangeItem OutItem);// 0x28cb2f0
	ArkExchangeItem GetRandomWeaponMod();// 0x28cb2c0
	ArkExchangeItem GetRandomBuffMod();// 0x28cb290
	ArkServicingStoreBuff GetRandomBuffInfo();// 0x28cb1b0
	int GetPlayerCost();// 0x28cad10
	ArkExchangeItem GetMedicalMod();// 0x28ca820
	int GetItemMaxCount(int ItemId);// 0x28ca6a0
	int GetItemCost(enum ModType);// 0x28ca610
	int GetItemBuyNum(enum ModType);// 0x28ca580
	int GetExchangeItemCost();// 0x28ca120
	int GetCurrentItemCount(int ItemId);// 0x28ca010
	int GetCurrentArmorCost();// 0x28c9fa0
	int GetBuyRecordNum(enum ModType, int InIndex);// 0x28c9e50
	int GetBuyRecordCost(enum ModType, int InIndex);// 0x28c9d90
	int GetBuffModifyExchangeItemCost();// 0x28c9d60
	int GetBubble();// 0x28c9d30
	ArkExchangeItem GetArmorMod();// 0x28c9500
	bool CheckServicingCost(int Cost);// 0x28c8440
	bool CheckBuyNum(enum ModType, int InIndex, int InBuyNum);// 0x28c8340
	bool CanUpgradeArmor(int CurrentArmorItemID);// 0x28c82b0
	bool CanReBuyItem(enum Type);// 0x28c8220
	bool CanBuyMedical(int MedicalItemID);// 0x28c8190
	void BuyChooseMod(enum ModType, int ItemId, int Cost, int Index);// 0x28c8050

--------------------------------
Class: ServicingStoreInitInfo
	int BubbleNum;//[Offset: 0x0, Size: 0x4]
	bool bIsBoss;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bInitialed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	int64 OpenServicingPlayerID;//[Offset: 0x8, Size: 0x8]
	float OpenTime;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BuyRecord
	int BuyNum;//[Offset: 0x0, Size: 0x4]
	enum ModType;//[Offset: 0x4, Size: 0x1]
	int Index;//[Offset: 0x8, Size: 0x4]
	int Cost;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ArkServicingStoreConfig
	int MedicalItemIDConfig;//[Offset: 0x0, Size: 0x4]
	int MinArmorItemIDConfig;//[Offset: 0x4, Size: 0x4]
	int MaxArmorItemIDConfig;//[Offset: 0x8, Size: 0x4]
	ArkServicingStoreRandomWeaponAndGT[] RandomWeaponItemIDConfig;//[Offset: 0x10, Size: 0x10]
	ArkServicingStoreBuff[] RandomBuffItemConfig;//[Offset: 0x20, Size: 0x10]
	float ServicingStoreMenuCloseTime;//[Offset: 0x30, Size: 0x4]
	float ServicingStoreMenuVoteCloseTime;//[Offset: 0x34, Size: 0x4]
	float ClientDelayClose;//[Offset: 0x38, Size: 0x4]
	float DelayOpen;//[Offset: 0x3c, Size: 0x4]
	bool NeedFiltrateGTAndGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	int MaxMedicalBuyNum;//[Offset: 0x44, Size: 0x4]
	int MaxArmorBuyNum;//[Offset: 0x48, Size: 0x4]
	bool bEnableServicingStore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	int[] IncrementCost;//[Offset: 0x50, Size: 0x10]
	int[] MedicalCost;//[Offset: 0x60, Size: 0x10]
	int[] ArmorCost;//[Offset: 0x70, Size: 0x10]
	int RandomWeaponCost;//[Offset: 0x80, Size: 0x4]
	int RandomBuffCost;//[Offset: 0x84, Size: 0x4]
	int RestSwitchIndex;//[Offset: 0x88, Size: 0x4]

--------------------------------
Class: ArkServicingStoreRandomWeaponAndGT
	int RandomWeaponItemIDConfig;//[Offset: 0x0, Size: 0x4]
	<int,float> RandomWeaponGTItemIDConfig;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: ArkServicingStoreBuff
	class ArkGameBuff* BuffClass;//[Offset: 0x0, Size: 0x8]
	FText BuffName;//[Offset: 0x8, Size: 0x18]
	FText BuffEffect;//[Offset: 0x20, Size: 0x18]
	FText DeBuffEffect;//[Offset: 0x38, Size: 0x18]
	Texture2D* IconImage;//[Offset: 0x50, Size: 0x28]

--------------------------------
Class: ArkWeaponSlotInfo
	FName AttachPointName;//[Offset: 0x0, Size: 0x8]
	enum Slot;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: ArkPlayerPerceivedInfo
	ArkNpc* NpcCharacter;//[Offset: 0x0, Size: 0x8]
	float PerceptionProgress;//[Offset: 0x8, Size: 0x4]
	float IncreaseRate;//[Offset: 0xc, Size: 0x4]
	float ClientPerceptionProgress;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ArkPlayerCombatWithAIInfo
	ArkNpc* NpcCharacter;//[Offset: 0x0, Size: 0x8]
	float EnterCombatTime;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ArkPlayerSyncVOComponent.ArkCharacterLiteComponent.LiteComponent.Object

--------------------------------
Class: ArkPlayerCheatWidgetsComponent.ArkCharacterLiteComponent.LiteComponent.Object
	FlowingWidget[] DamageNumberWidgetSet;//[Offset: 0xa8, Size: 0x10]
	FlowingWidget[] NPCHealthWidgetSet;//[Offset: 0xb8, Size: 0x10]
	class UserWidget* DamageNumberWidgetClass;//[Offset: 0xc8, Size: 0x8]
	class UserWidget* NPCHealthWidgetClass;//[Offset: 0xd0, Size: 0x8]
	int MaxWidgets;//[Offset: 0xd8, Size: 0x4]
	void SetHealthWidget(UserWidget* Widget, float Health, float MaxHealth);// 0x305c9c0
	void SetDamageWidget(UserWidget* Widget, out const FString[] Damages);// 0x305c9c0

--------------------------------
Class: FlowingWidget
	WidgetComponent* FlowingWidgetComponent;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ArkHavenRPCInterface.Object
	delegate OnHavenDataReady;//[Offset: 0x28, Size: 0x10]
	delegate OnSurvivorChange;//[Offset: 0x38, Size: 0x10]
	delegate OnNewMetagameEvent;//[Offset: 0x48, Size: 0x10]
	delegate OnNotifcationProcessed;//[Offset: 0x58, Size: 0x10]
	delegate OnFriendListResponse;//[Offset: 0x68, Size: 0x10]
	delegate OnPartyInviteRsp;//[Offset: 0x78, Size: 0x10]
	delegate OnMallGoodsListRefresh;//[Offset: 0x88, Size: 0x10]
	delegate OnPurchaseGoodsRsp;//[Offset: 0x98, Size: 0x10]
	delegate OnGetWeaponInfoRsp;//[Offset: 0xa8, Size: 0x10]
	delegate OnUnlockWeaponBlueprintRsp;//[Offset: 0xb8, Size: 0x10]
	delegate OnUnlockWeaponRsp;//[Offset: 0xc8, Size: 0x10]
	delegate OnCraftWeaponRsp;//[Offset: 0xd8, Size: 0x10]
	delegate OnEquipWeaponRsp;//[Offset: 0xe8, Size: 0x10]
	delegate OnDecomposeWeaponRsp;//[Offset: 0xf8, Size: 0x10]
	delegate OnSetWeaponAccessoryRsp;//[Offset: 0x108, Size: 0x10]
	delegate OnSetWeaponSkinRsp;//[Offset: 0x118, Size: 0x10]
	delegate OnUnlockWeaponSkinRsp;//[Offset: 0x128, Size: 0x10]
	delegate OnNDMRefreshRsp;//[Offset: 0x138, Size: 0x10]
	delegate OnNDMReplaceRsp;//[Offset: 0x148, Size: 0x10]
	delegate OnNDMGiveUpRsp;//[Offset: 0x158, Size: 0x10]
	delegate OnNDMRepaireRsp;//[Offset: 0x168, Size: 0x10]
	delegate OnWeaponDataSync;//[Offset: 0x178, Size: 0x10]
	delegate OnUnlockSyncRsp;//[Offset: 0x188, Size: 0x10]
	delegate OnTeamJoinRequest;//[Offset: 0x198, Size: 0x10]
	delegate OnMatchMakingStateChange;//[Offset: 0x1a8, Size: 0x10]
	delegate OnJoinMatchMakingRsp;//[Offset: 0x1b8, Size: 0x10]
	delegate OnTeamStateChange;//[Offset: 0x1c8, Size: 0x10]
	delegate OnWaitRoomStateChange;//[Offset: 0x1d8, Size: 0x10]
	delegate OnSurvivorDataChangedWaitroom;//[Offset: 0x1e8, Size: 0x10]
	delegate OnUpgradeSection;//[Offset: 0x1f8, Size: 0x10]
	delegate OnInstaHealSurvivor;//[Offset: 0x208, Size: 0x10]
	delegate OnSurvivorReleased;//[Offset: 0x218, Size: 0x10]
	delegate OnSurvivorTypeChanged;//[Offset: 0x228, Size: 0x10]
	delegate OnRefreshSurvivors;//[Offset: 0x238, Size: 0x10]
	delegate OnSurvivorStateChanged;//[Offset: 0x248, Size: 0x10]
	delegate OnPlayerSurvivorIDChanged;//[Offset: 0x258, Size: 0x10]
	delegate OnArmbandUnlocked;//[Offset: 0x268, Size: 0x10]
	delegate OnPurchaseCurrencyResult;//[Offset: 0x278, Size: 0x10]
	delegate OnHavenNewMatchResult;//[Offset: 0x288, Size: 0x10]
	delegate OnSurvivorArmBandChanged;//[Offset: 0x298, Size: 0x10]
	delegate OnSurvivorPerkTreeSet;//[Offset: 0x2a8, Size: 0x10]
	delegate OnSurvivorPerkTreeRefresh;//[Offset: 0x2b8, Size: 0x10]
	delegate OnAddItems;//[Offset: 0x2c8, Size: 0x10]
	delegate OnRemoveItems;//[Offset: 0x2d8, Size: 0x10]
	delegate OnUpdateItems;//[Offset: 0x2e8, Size: 0x10]
	delegate OnRefreshSurvivorLeftTimeChanged;//[Offset: 0x2f8, Size: 0x10]
	delegate OnSearchFriendRsp;//[Offset: 0x308, Size: 0x10]
	delegate OnHavenResult;//[Offset: 0x318, Size: 0x10]
	<FName,ArkHavenProperty*> Propertys;//[Offset: 0x328, Size: 0x50]
	void UpgradeSection(enum Section);// 0x27bd930
	void UpdateWaitRoomPlayerInfo(out const HavenWaitRoomUpdatePlayerInfo NewInfo);// 0x27bd840
	bool UnSetPerk(FString SurvivorID, int FromLevel, int FromSlot);// 0x27bd320
	bool UnSetAllPerks(FString SurvivorID);// 0x27bd270
	void UnlockWeaponSkin(FString WeaponUUID, int SkinID);// 0x27bd760
	void UnlockWeaponBlueprint(int BlueprintID);// 0x27bd6d0
	void UnlockWeaponAccessory(FString WeaponUUID, int AccessoryID);// 0x27bd5f0
	void UnlockWeapon(int WeaponId);// 0x27bd560
	void UnlockSyncItem(int SyncItemID);// 0x27bd4d0
	void UnlockArmband(int ArmBandID);// 0x27bd440
	void UnInit();// 0x27bd250
	bool ToggleBitHavenStat(out const ArkHavenStatPropertyRef StatPropertyRef, int InBitEnum, bool bOnOff);// 0x27bd120
	void TeamReady(bool bReady);// 0x27bd090
	void SetWeaponSkin(int WeaponTypeID, int SkinID);// 0x27bcfd0
	void SetWeaponAccessory(FString WeaponUUID, out const int[] Accessories);// 0x27bced0
	bool SetVOLineNameFinishedOneTime(out const FName InName);// 0x27bce20
	bool SetSectionViewedHavenLevel(enum Section);// 0x27bcd90
	bool SetResearchCenterMaxViewedTier();// 0x27bcd60
	void SetPlayerSurvivorID(FString SurvivorID);// 0x27bccc0
	bool SetPerkToTree(FString SurvivorID, out const int[] PerkTree);// 0x27bcbb0
	bool SetOuterGameFlow(enum InType, FString ExtraMessage);// 0x27bcac0
	bool SetHavenStatByClient(out const ArkHavenStatPropertyRef StatPropertyRef, int Value);// 0x27bc9d0
	bool SetDialogueLineFinishedOneTime(out const ArkContextualDialogueLine InLine);// 0x27bc8a0
	void SearchFriend(FString Name);// 0x27bc800
	void ReportLeaderboardScore(enum Type, int ModeKey, int Score);// 0x305c9c0
	void ReleaseSurvivor(FString SurvivorID);// 0x27bc760
	void RefreshSurvivors();// 0x278d000
	void RefreshMall();// 0x27bc740
	void RecoverSurvivor(FString SurvivorID);// 0x27bc6a0
	bool RecordFinishGameStep(int Step, int CostTimeSeconds, FString ExtraMessage);// 0x27bc580
	void PurchaseGoods(int GoodsID);// 0x27bc4f0
	void PurchaseCurrency(enum Type, out const FString[] Params);// 0x27bc3e0
	void ProcessHavenResult(out const ArkHavenResultData ResultData);// 0x27bc350
	void NotifyGameInstance(ArkGameInstance* InGameInstance);// 0x27bc2c0
	void NotifcationProcessed(int MessageGSID);// 0x27bc230
	void NDMReplace(FString WeaponUUID);// 0x27bc190
	void NDMRepaire(FString WeaponUUID);// 0x27bc0f0
	void NDMRefresh(FString WeaponUUID);// 0x27bc050
	void NDMGiveUp(FString WeaponUUID);// 0x27bbfb0
	void ModifyPromptCount(int ID, int Count);// 0x27bbef0
	void LeaveTraining();// 0x27bbed0
	void LeaveTeam();// 0x27bbeb0
	void KickTeamMate(int64 KickPlayerUID);// 0x26419a0
	void JoinTeam(FString TeamId);// 0x27bbdc0
	void JoinMatchmaking(enum MapMode);// 0x27bbd40
	bool IsSkinUnlocked(int SkinID);// 0x27bbca0
	void InviteFriend(int64 FriendUID);// 0x27bbc10
	void InstaRefreshSurvivors();// 0x109fc60
	void InstaHealSurvivor(FString SurvivorID);// 0x27bbb70
	void InitPropertys();// 0x27bbb50
	void InitDataTables(ArkHavenMetagameConfig* InHavenMetagameConfig);// 0x27bbac0
	void HireSurvivor(FString SurvivorID);// 0x27bba20
	void GetWeaponTypeSkinMap(out <int,int> OutTypeWeaponSkin);// 0x27bb890
	void GetWeaponStats(out ArkWeaponTypeStatResult[] OutWeaponStats);// 0x27bb7b0
	void GetWeaponSkinUnlocks(out int[] OutWeaponSkinUnlocks);// 0x27bb700
	void GetWeaponSet(out ArkHavenWeaponSet OutWeaponSet);// 0x27bb620
	void GetWeaponInfo();// 0x27bb600
	void GetWeaponBlueprintUnlocks(out int[] OutWeaponBlueprintUnlocks);// 0x27bb550
	int GetWeaponBagUsedCapacity();// 0x27bb520
	int GetWeaponBagCapacity();// 0x27bb4f0
	void GetWeaponBag(out ArkHavenWeaponInfo[] OutWeaponBag);// 0x27bb410
	bool GetUnlockedSyncData(out ArkUnlockedSyncData[] OutUnlockedSyncData);// 0x27bb330
	void GetUnlockedArmbands(out int[] OutUnlockedArmbands);// 0x27bb280
	void GetTeamInfo(out ArkOnlineTeam TeamInfo);// 0x27bb120
	bool GetSurvivorInfo(FString SurvivorID, out ArkHavenSurvivorInfo OutSurvivorInfo);// 0x27baef0
	void GetSurvivorIDsByType(enum InType, out FString[] OutSurvivorsIDs);// 0x27bade0
	void GetSurvivorIDs(out FString[] OutSurvivorsIDs);// 0x27bad10
	void GetStatNames(out FName[] StatNames);// 0x27babe0
	int GetSkinIDForWeaponType(int WeaponTypeID);// 0x27bab40
	void GetSectionConfig(enum SectionID, out ArkHavenSectionConfig OutSectionConfig);// 0x27baa00
	void GetRefreshSurvivorConfigs(out ArkRefreshSurvivorConfig[] OutConfig);// 0x27ba8c0
	int GetPurchaseCost(enum Type, out ArkHavenStatPropertyRef CostHavenStat);// 0x27ba7d0
	ArkHavenProperty* GetProperty(out const FName Name);// 0x27ba720
	void GetPlayerSurvivorID(out FString SurvivorID);// 0x27ba670
	bool GetPerkSet(FString SurvivorID, int EffectiveAtLevel, out int[] OutPerkSet);// 0x27ba3a0
	bool GetPerks(FString SurvivorID, out ArkPerkTree OutPerk);// 0x27ba4f0
	void GetMatchWaitRoomInfo(out ArkMatchWaitRoomInfo TeamInfo);// 0x27ba0a0
	void GetMatchResults(out ArkHavenMatchResult[] OutMatchResult);// 0x27b9e80
	bool GetMallGoodsList(out ArkMallGoodInfo[] OutGoodsList);// 0x27b9ce0
	void GetLeftTimeToNextSurvivorRefresh(out <int,float> OutLeftTime);// 0x27b9b50
	void GetInventoryItems(out <FString,ArkHavenInventoryItem> OutItems);// 0x27b9a40
	bool GetHavenStatType(out const ArkHavenStatPropertyRef StatPropertyRef, out enum Type);// 0x27b9940
	int GetHavenStatQuality(out const ArkHavenStatPropertyRef StatPropertyRef);// 0x27b9890
	bool GetHavenStat(out const ArkHavenStatPropertyRef StatPropertyRef, out int OutStat);// 0x27b9790
	void GetHavenProgression(int Level, out ArkHavenLevelConfigRow OutLevelConfig);// 0x27b9660
	void GetHavenNervalLevel(int Level, out ArkHavenNervaLevelConfigRow OutLevelConfig);// 0x27b9530
	void GetHavenBattlePassLevel(int SeasonID, int Level, out ArkBattlePassLevelConfig OutLevelConfig);// 0x27b93a0
	void GetFriendListRequest();// 0x2631360
	int GetFreeSurvivorSlots();// 0x106f4c0
	void GetChiefInfo(out ArkHavenSurvivorInfo OutChiefInfo);// 0x27b91d0
	void GetChiefID(out FString ChiefID);// 0x27b9120
	void GetBaseInfo(out ArkHavenBaseInfo BaseInfo);// 0x27b9050
	void GetBalance();// 0x109ff30
	int GetArmBandID(FString SurvivorID);// 0x27b8fa0
	void GetArkUnlockEvent(int MessageGSID, out ArkUnlockEvent OutEvent);// 0x27b8ec0
	void GetArkSurvivorRefreshEvent(int MessageGSID, out ArkSurvivorRefreshEvent OutEvent);// 0x27b8da0
	void GetArkSurvivorRecoveryEvent(int MessageGSID, out ArkSurvivorRecoveryEvent OutEvent);// 0x27b8cb0
	void GetArkStatChangeEvent(int MessageGSID, out ArkStatChangeEvent OutEvent);// 0x27b8bd0
	void GetArkMetagameEvents(out ArkMetagameEvent[] OutIncomingEvents);// 0x27b8b20
	void GetAllSurvivors(out ArkHavenSurvivorInfo[] OutSurvivors);// 0x27b89a0
	void GetAllArmbands(out <int,ArkArmBandConfigRow> OutArmbands);// 0x27b8870
	static ArkHavenRPCInterface* Get(const Object* WorldContext);// 0x27b87f0
	void FetchLeaderboardDataFromSvr(enum Type, int ModeKey);// 0x305c9c0
	void EquipWeapon(FString WeaponUUID);// 0x27b8750
	void EquipSyncItem(int SyncItemID);// 0x27b86c0
	bool EquipArmBand(int ArmBandID);// 0x27b8620
	void EnterTraining();// 0x27b8600
	void DecomposeWeapon(FString WeaponUUID);// 0x27b8560
	void CreateOrder();// 0x109fdc0
	void CraftWeapon(int BlueprintID);// 0x27b84d0
	void ClientSetUnlock(out const ArkHavenUnlockPropertyRef UnlockPropertyRef);// 0x27b8430
	void ClearMatchResults();// 0x27b8410
	bool CheckVOLineNameFinishedOneTime(out const FName InName);// 0x27b8360
	bool CheckOuterGameFlow(enum InType);// 0x27b82d0
	bool CheckHavenUnlock(out const ArkHavenUnlockPropertyRef UnlockPropertyRef);// 0x27b8220
	bool CheckDialogueLineFinishedOneTime(out const ArkContextualDialogueLine InLine);// 0x27b80f0
	bool CheckDataReady(enum InDataType);// 0x27b8060
	bool CheckBitHavenStat(out const ArkHavenStatPropertyRef StatPropertyRef, int InBitEnum);// 0x27b7f70
	void CancelMatchmaking();// 0x27b7f50

--------------------------------
Class: ArkHavenProperty.Object
	enum PropertyType;//[Offset: 0x28, Size: 0x1]
	delegate OnStatChanged;//[Offset: 0x30, Size: 0x10]
	delegate OnUnlocked;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: HavenWaitRoomUpdatePlayerInfo
	Vector2D WayPointUV;//[Offset: 0x0, Size: 0x8]
	Vector2D ProbePointUV;//[Offset: 0x8, Size: 0x8]
	FString SurvivorID;//[Offset: 0x10, Size: 0x10]
	int ArmBandID;//[Offset: 0x20, Size: 0x4]
	HavenWaitRoomUpdateWeaponInfo[] WeaponSet;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: HavenWaitRoomUpdateWeaponInfo
	int weaponPos;//[Offset: 0x0, Size: 0x4]
	int WeaponId;//[Offset: 0x4, Size: 0x4]
	FString weaponAttr;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ArkHavenResultData
	enum Result;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ArkGameInstance.G6PlatformGameInstance.PlatformGameInstance.GameInstance.Object
	float FPSIntervalTime;//[Offset: 0x2d8, Size: 0x4]
	class ArkWaterMarkWidget* WaterMarkWidgetClass;//[Offset: 0x2e0, Size: 0x8]
	class ArkPlayerAudioFlagWidget* PlayerAudioFlagWidgetClass;//[Offset: 0x2e8, Size: 0x8]
	class UserWidget* HiRezDownloadingHintWidgetClass;//[Offset: 0x2f0, Size: 0x8]
	delegate OnLocalPlayerSpawnedEvent;//[Offset: 0x2f8, Size: 0x10]
	int FPSDelayDelataValue;//[Offset: 0x308, Size: 0x4]
	ArkPlayerAudioFlagWidget* PlayerAudioFlagWidget;//[Offset: 0x310, Size: 0x8]
	class ArkGameServerRPCComponent* ArkGameServerRPCComponentClass;//[Offset: 0x338, Size: 0x8]
	ArkGameServerRPCComponent* ArkGameServerRPCComponent;//[Offset: 0x340, Size: 0x8]
	class ArkClientC2SConfig* C2SConfigClass;//[Offset: 0x348, Size: 0x8]
	ArkClientC2SConfig* C2SConfig;//[Offset: 0x368, Size: 0x8]
	ArkOnlineUtil* ArkOnlineUtil;//[Offset: 0x370, Size: 0x8]
	ArkGameEngine* ArkGameEngine;//[Offset: 0x378, Size: 0x8]
	ArkWaterMarkWidget* ArkGameWaterMark;//[Offset: 0x380, Size: 0x8]
	ArkObjectPoolAllocator* ObjectPoolAllocator;//[Offset: 0x388, Size: 0x8]
	ArkManagerBase*[] ManagerArray;//[Offset: 0x398, Size: 0x10]
	class ArkManagerBase[] ManagerClassArray;//[Offset: 0x3a8, Size: 0x10]
	<enum,ArkManagerInitRelationList> ManagerTypeInitRelationMap;//[Offset: 0x3b8, Size: 0x50]
	class ArkAudioManager* AudioManagerClass;//[Offset: 0x408, Size: 0x8]
	class ArkAnimCompressManager* AnimCompressManagerClass;//[Offset: 0x410, Size: 0x8]
	class ArkGlobalQuestManager* GlobalQuestManagerClass;//[Offset: 0x418, Size: 0x8]
	class ArkKeyBindingManager* KeyBindingManagerClass;//[Offset: 0x420, Size: 0x8]
	class ArkUserDataManager* UserDataManagerClass;//[Offset: 0x428, Size: 0x8]
	class ArkSettingSystemDataManager* SettingSystemDataManagerClass;//[Offset: 0x430, Size: 0x8]
	class ArkPreloadManagerGameInstance* PreloadManagerGameInstanceClass;//[Offset: 0x438, Size: 0x8]
	class ArkInteractionDataManager* InteractionDataManagerClass;//[Offset: 0x440, Size: 0x8]
	class ArkHavenDataManager* HavenDataManagerClass;//[Offset: 0x448, Size: 0x8]
	class ArkDSNetworkWatcherManager* DSNetworkWatcherManagerClass;//[Offset: 0x450, Size: 0x8]
	class ArkFestActivityManager* FestActivityClass;//[Offset: 0x458, Size: 0x8]
	class ArkSeasonActivityManager* SeasonActivityClass;//[Offset: 0x460, Size: 0x8]
	class ArkConfigManager* ConfigManagerClass;//[Offset: 0x468, Size: 0x28]
	class ArkConfigManager* ArkUIConfigManagerClass;//[Offset: 0x490, Size: 0x28]
	class ArkTextFormatManager* TextFormatManagerClass;//[Offset: 0x4b8, Size: 0x8]
	class ArkGameletManager* GameletManagerClass;//[Offset: 0x4c0, Size: 0x8]
	class ArkPayManager* PayManagerClass;//[Offset: 0x4c8, Size: 0x8]
	ArkGameInstance* MainInstance;//[Offset: 0x4d0, Size: 0x8]
	delegate OnFindReplaysComplete;//[Offset: 0x510, Size: 0x10]
	bool bHasFirstShowLogo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 0x1]
	Package*[] CachePackages;//[Offset: 0x550, Size: 0x10]
	World*[] CacheWorlds;//[Offset: 0x560, Size: 0x10]
	Object*[] CacheObjects;//[Offset: 0x570, Size: 0x10]
	bool bSupportPreloadMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 0x1]
	FString[] PreCacheMaps;//[Offset: 0x588, Size: 0x10]
	AkInitBank* AkInitBank;//[Offset: 0x5a0, Size: 0x28]
	void SetLoginPlatform(byte TargetLoginPlatform);// 0x2753fa0
	void SetGameServerStartTimeStamp(int64 InTimeStamp);// 0x2753f00
	void SetAutoTestScript(FString TargetAutoTestScript);// 0x2753d90
	void SetAutoTestParams(FString TargetAutoTestParams);// 0x2753cf0
	void SetAllPS5ActivityAvailability(bool bInEnabled);// 0x1075060
	void RenameReplay(FString ReplayName, FString NewFriendlyReplayName);// 0x2753a60
	void OnWorldInitStatusUpdated(enum NewStatus);// 0x26c22a0
	void OnNetworkFailure(World* InWorld, NetDriver* InNetDriver, byte InType, FString InErrorMessage);// 0x2753440
	bool IsReplayGameInstance();// 0x27533f0
	bool IsRecordingReplay();// 0x27533c0
	bool IsMainGameInstance();// 0x2753390
	bool GetSkipToMatchmakingEnabled();// 0x2753200
	float GetRealTimeSinceStartup();// 0x27531e0
	ArkOnlineUtil* GetOnlineUtil();// 0x27531b0
	bool GetNeedToJoinSession();// 0x2753190
	enum GetLoginPlatForm();// 0x2753160
	int64 GetGameServerTimeStamp();// 0x2753110
	ArkClientC2SConfig* GetC2SConfig();// 0x2753040
	FString GetAutoTestScript();// 0x2752f80
	FString GetAutoTestParams();// 0x2752ec0
	ArkOnlineSession* GetArkOnlineSession();// 0x2752e90
	void FindReplays();// 0x2752b30
	void DeleteReplay(FString ReplayName);// 0x2752a90
	void BeginCacheMapForIntegratedMap();// 0x2752760
	void BeginCacheMap(FString MapName, bool bAutoOpenLevel);// 0x2752680
	void ArkAddReplayEvent();// 0x2752660

--------------------------------
Class: G6PlatformGameInstance.PlatformGameInstance.GameInstance.Object
	DebugConsole* DebugConsole;//[Offset: 0x268, Size: 0x8]
	G6CustomScriptStatProfiler* Profiler;//[Offset: 0x270, Size: 0x8]
	bool bUseG6OnlineSession;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	void Lua(FString strLua);// 0x12c2150
	void DAWLua(FString strLua);// 0x12c1300
	void ConsoleCMD(out FString Cmd);// 0x12c1140

--------------------------------
Class: PlatformGameInstance.GameInstance.Object
	delegate ApplicationWillDeactivateDelegate;//[Offset: 0x198, Size: 0x10]
	delegate ApplicationHasReactivatedDelegate;//[Offset: 0x1a8, Size: 0x10]
	delegate ApplicationWillEnterBackgroundDelegate;//[Offset: 0x1b8, Size: 0x10]
	delegate ApplicationHasEnteredForegroundDelegate;//[Offset: 0x1c8, Size: 0x10]
	delegate ApplicationWillTerminateDelegate;//[Offset: 0x1d8, Size: 0x10]
	delegate ApplicationShouldUnloadResourcesDelegate;//[Offset: 0x1e8, Size: 0x10]
	delegate ApplicationReceivedStartupArgumentsDelegate;//[Offset: 0x1f8, Size: 0x10]
	delegate ApplicationRegisteredForRemoteNotificationsDelegate;//[Offset: 0x208, Size: 0x10]
	delegate ApplicationRegisteredForUserNotificationsDelegate;//[Offset: 0x218, Size: 0x10]
	delegate ApplicationFailedToRegisterForRemoteNotificationsDelegate;//[Offset: 0x228, Size: 0x10]
	delegate ApplicationReceivedRemoteNotificationDelegate;//[Offset: 0x238, Size: 0x10]
	delegate ApplicationReceivedLocalNotificationDelegate;//[Offset: 0x248, Size: 0x10]
	delegate ApplicationReceivedScreenOrientationChangedNotificationDelegate;//[Offset: 0x258, Size: 0x10]

--------------------------------
Class: DebugConsole.Object
	delegate OnCustomConsoleCommandCommit;//[Offset: 0x40, Size: 0x10]
	delegate OnErrorMessageReceived;//[Offset: 0x50, Size: 0x10]
	delegate OnNewMessageReceived;//[Offset: 0x60, Size: 0x10]
	void UnregisterCustomConsoleCommandInfo(out const FString[] InCustomCommandList);// 0x12c2b90
	void SetNonFilterMessagesUIDRange(int InStartId, int InEndId);// 0x12c2970
	void SetMaxMessagesCount(int InMaxCount);// 0x12c28f0
	void SetLogLevel(byte logLevel);// 0x12c2870
	void SetLogFilterText(out const FText InFilterText);// 0x12c27a0
	void SetLogDisplayCategory(out const FName CategoryName);// 0x12c2710
	void ResetMessageFilter();// 0x12c26f0
	void RegisterCustomConsoleCommandInfo(out const FString[] InCustomCommandList);// 0x12c2620
	void OnNewMessageReceivedEvent__DelegateSignature(FString MessageMarkupText);// 0x305c9c0
	void OnErrorMessageReceivedEvent__DelegateSignature();// 0x305c9c0
	void OnCustomConsoleCommandCommittedEvent__DelegateSignature(FString CommandName, FString ExtraArgs);// 0x305c9c0
	bool IsMessageFiltered(int InMessageIndex);// 0x12c2090
	int GetMessageUID(int InMessageIndex);// 0x12c1a70
	FString GetMessageText(int InMessageIndex);// 0x12c19d0
	int GetCurrentMessagesCount();// 0x12c1850
	void GetConsoleInputHistory(out FString[] OutHistoryInputList);// 0x12c1780
	void GetCommandAutoCompleteSuggestions(out const FText InInputText, out FString[] OutAutoCompleteList);// 0x12c1610
	FName[] GetAvailableLogCategories();// 0x12c1580
	void CommitConsoleCommand(out const FText InText);// 0x12c1070
	void ClearAllDisplayText();// 0x12c1050

--------------------------------
Class: G6CustomScriptStatProfiler.Object
	void UpdateStatProfilerData();// 0xae2270
	void StartScopeByIndex(int InStatIndex);// 0x12c2b10
	int StartScope(FString InStatName);// 0x12c2a60
	bool IsStatProfileEnabled();// 0x12c2120
	FString GetStatItemUniqueFullName(int InStatItemIndex);// 0x12c1e00
	void GetStatItemParentLevel(int InStatItemIndex, out int[] OutParentLevelItems);// 0x12c1f70
	int GetStatItemParentIndex(int InStatItemIndex);// 0x12c1ee0
	int GetStatItemMaxChildCallDepth(int InStatItemIndex);// 0x12c1b00
	FString GetStatItemDisplayName(int InStatItemIndex);// 0x12c1e00
	FString GetStatItemData(int InStatItemIndex, out float[] OutItemData);// 0x12c1cc0
	void GetStatItemChildren(int InStatItemIndex, out int[] OutChildItems, bool bScriptOnly);// 0x12c1b90
	int GetStatItemCallDepth(int InStatItemIndex);// 0x12c1b00
	int GetItemIndexByNameAndDepth(FString InName, int InCallDepth, FString InFullUniqueName);// 0x12c1880
	void EndScope(FString InStatName);// 0x12c13f0
	int CreateScriptStat(FString InStatName, FString InStatDesc);// 0x12c11f0

--------------------------------
Class: ArkOnlineUtil.Object
	float GetSettlementConfig(FString Key);// 0x305c9c0

--------------------------------
Class: ArkClientC2SConfig.Object
	FString ServerIP;//[Offset: 0x28, Size: 0x10]
	int ServerPort;//[Offset: 0x38, Size: 0x4]
	FString GetServerURL();// 0x26d7c00

--------------------------------
Class: ArkOnlineSession.OnlineSession.Object
	World* CurrentDisconnectedWorld;//[Offset: 0x28, Size: 0x8]
	void OnConfirmDisconnect();// 0x2879830

--------------------------------
Class: ArkWaterMarkWidget.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	Image* GameStatusBackImage;//[Offset: 0x308, Size: 0x8]
	TextBlock* FPSText;//[Offset: 0x310, Size: 0x8]
	TextBlock* PingText;//[Offset: 0x318, Size: 0x8]
	TextBlock* WarningText;//[Offset: 0x320, Size: 0x8]
	TextBlock* LeftUpID;//[Offset: 0x328, Size: 0x8]
	TextBlock* RightUpID;//[Offset: 0x330, Size: 0x8]
	TextBlock* LeftDownID;//[Offset: 0x338, Size: 0x8]
	TextBlock* RightDownID;//[Offset: 0x340, Size: 0x8]

--------------------------------
Class: ArkPlayerAudioFlagWidget.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	DynamicEntryBox* SpeakerBox;//[Offset: 0x300, Size: 0x8]

--------------------------------
Class: DynamicEntryBox.DynamicEntryBoxBase.Widget.Visual.Object
	class UserWidget* EntryWidgetClass;//[Offset: 0x1e8, Size: 0x8]
	void Reset(bool bDeleteWidgets);// 0x41489f0
	void RemoveEntry(UserWidget* EntryWidget);// 0x41488c0
	UserWidget* BP_CreateEntryOfClass(class UserWidget EntryClass);// 0x4147e60
	UserWidget* BP_CreateEntry();// 0x4147e30

--------------------------------
Class: DynamicEntryBoxBase.Widget.Visual.Object
	enum EntryBoxType;//[Offset: 0x118, Size: 0x1]
	Vector2D EntrySpacing;//[Offset: 0x11c, Size: 0x8]
	Vector2D[] SpacingPattern;//[Offset: 0x128, Size: 0x10]
	SlateChildSize EntrySizeRule;//[Offset: 0x138, Size: 0x8]
	byte EntryHorizontalAlignment;//[Offset: 0x140, Size: 0x1]
	byte EntryVerticalAlignment;//[Offset: 0x141, Size: 0x1]
	int MaxElementSize;//[Offset: 0x144, Size: 0x4]
	UserWidgetPool EntryWidgetPool;//[Offset: 0x158, Size: 0x90]
	void SetEntrySpacing(out const Vector2D InEntrySpacing);// 0x4148be0
	int GetNumEntries();// 0x41484f0
	UserWidget*[] GetAllEntries();// 0x41483d0

--------------------------------
Class: UserWidgetPool
	UserWidget*[] ActiveWidgets;//[Offset: 0x0, Size: 0x10]
	UserWidget*[] InactiveWidgets;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ArkGameServerRPCComponent.Object
	ArkHavenRPCInterface* RPCInterface;//[Offset: 0x28, Size: 0x8]
	class ArkHavenRPCInterface* RPCFunctionClass;//[Offset: 0x30, Size: 0x8]
	class ArkHavenMetagameConfig* HavenMetagameConfigClass;//[Offset: 0x38, Size: 0x8]
	ArkHavenMetagameConfig* HavenMetagameConfig;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: ArkHavenMetagameConfig.Object
	DataTable* StatsConfig;//[Offset: 0x28, Size: 0x8]
	DataTable* UnlockConfig;//[Offset: 0x30, Size: 0x8]
	DataTable* HavenProgression;//[Offset: 0x38, Size: 0x8]
	DataTable* SectionConfigTable;//[Offset: 0x40, Size: 0x8]
	DataTable* RefreshSurvivorConfig;//[Offset: 0x48, Size: 0x8]
	DataTable* NervalLevelConfig;//[Offset: 0x50, Size: 0x8]
	DataTable* BattlePassLevelConfig;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: ArkGameEngine.GameEngine.Engine.Object
	ArkGameInstance* GameInstanceForMain;//[Offset: 0xf30, Size: 0x8]
	ArkGameInstance* GameInstanceForReplay;//[Offset: 0xf38, Size: 0x8]

--------------------------------
Class: GameEngine.Engine.Object
	float MaxDeltaTime;//[Offset: 0xea0, Size: 0x4]
	float ServerFlushLogInterval;//[Offset: 0xea4, Size: 0x4]
	GameInstance* GameInstance;//[Offset: 0xea8, Size: 0x8]

--------------------------------
Class: Engine.Object
	Font* TinyFont;//[Offset: 0x30, Size: 0x8]
	SoftObjectPath TinyFontName;//[Offset: 0x38, Size: 0x18]
	Font* SmallFont;//[Offset: 0x50, Size: 0x8]
	SoftObjectPath SmallFontName;//[Offset: 0x58, Size: 0x18]
	Font* MediumFont;//[Offset: 0x70, Size: 0x8]
	SoftObjectPath MediumFontName;//[Offset: 0x78, Size: 0x18]
	Font* LargeFont;//[Offset: 0x90, Size: 0x8]
	SoftObjectPath LargeFontName;//[Offset: 0x98, Size: 0x18]
	Font* SubtitleFont;//[Offset: 0xb0, Size: 0x8]
	SoftObjectPath SubtitleFontName;//[Offset: 0xb8, Size: 0x18]
	Font*[] AdditionalFonts;//[Offset: 0xd0, Size: 0x10]
	FString[] AdditionalFontNames;//[Offset: 0xe8, Size: 0x10]
	class Console* ConsoleClass;//[Offset: 0xf8, Size: 0x8]
	SoftClassPath ConsoleClassName;//[Offset: 0x100, Size: 0x18]
	class GameViewportClient* GameViewportClientClass;//[Offset: 0x118, Size: 0x8]
	SoftClassPath GameViewportClientClassName;//[Offset: 0x120, Size: 0x18]
	float ParticleExternalSpawnRateScale;//[Offset: 0x138, Size: 0x4]
	SoftClassPath PendingNetGameClassName;//[Offset: 0x140, Size: 0x18]
	class PendingNetGame* PengdingNetGameClass;//[Offset: 0x158, Size: 0x8]
	class LocalPlayer* LocalPlayerClass;//[Offset: 0x160, Size: 0x8]
	SoftClassPath LocalPlayerClassName;//[Offset: 0x168, Size: 0x18]
	class WorldSettings* WorldSettingsClass;//[Offset: 0x180, Size: 0x8]
	SoftClassPath WorldSettingsClassName;//[Offset: 0x188, Size: 0x18]
	SoftClassPath NavigationSystemClassName;//[Offset: 0x1a0, Size: 0x18]
	class NavigationSystemBase* NavigationSystemClass;//[Offset: 0x1b8, Size: 0x8]
	SoftClassPath NavigationSystemConfigClassName;//[Offset: 0x1c0, Size: 0x18]
	class NavigationSystemConfig* NavigationSystemConfigClass;//[Offset: 0x1d8, Size: 0x8]
	SoftClassPath AvoidanceManagerClassName;//[Offset: 0x1e0, Size: 0x18]
	class AvoidanceManager* AvoidanceManagerClass;//[Offset: 0x1f8, Size: 0x8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x200, Size: 0x8]
	SoftClassPath PhysicsCollisionHandlerClassName;//[Offset: 0x208, Size: 0x18]
	SoftClassPath GameUserSettingsClassName;//[Offset: 0x220, Size: 0x18]
	class GameUserSettings* GameUserSettingsClass;//[Offset: 0x238, Size: 0x8]
	SoftClassPath AIControllerClassName;//[Offset: 0x240, Size: 0x18]
	GameUserSettings* GameUserSettings;//[Offset: 0x258, Size: 0x8]
	class LevelScriptActor* LevelScriptActorClass;//[Offset: 0x260, Size: 0x8]
	SoftClassPath LevelScriptActorClassName;//[Offset: 0x268, Size: 0x18]
	SoftClassPath DefaultBlueprintBaseClassName;//[Offset: 0x280, Size: 0x18]
	SoftClassPath GameSingletonClassName;//[Offset: 0x298, Size: 0x18]
	Object* GameSingleton;//[Offset: 0x2b0, Size: 0x8]
	SoftClassPath AssetManagerClassName;//[Offset: 0x2b8, Size: 0x18]
	AssetManager* AssetManager;//[Offset: 0x2d0, Size: 0x8]
	DataBuffer* DefaultDataBuffer;//[Offset: 0x2d8, Size: 0x8]
	SoftObjectPath DefaultDataBufferName;//[Offset: 0x2e0, Size: 0x18]
	Texture2D* DefaultTexture;//[Offset: 0x2f8, Size: 0x8]
	SoftObjectPath DefaultTextureName;//[Offset: 0x300, Size: 0x18]
	Texture* DefaultDiffuseTexture;//[Offset: 0x318, Size: 0x8]
	SoftObjectPath DefaultDiffuseTextureName;//[Offset: 0x320, Size: 0x18]
	Texture2D* DefaultBSPVertexTexture;//[Offset: 0x338, Size: 0x8]
	SoftObjectPath DefaultBSPVertexTextureName;//[Offset: 0x340, Size: 0x18]
	Texture2D* HighFrequencyNoiseTexture;//[Offset: 0x358, Size: 0x8]
	SoftObjectPath HighFrequencyNoiseTextureName;//[Offset: 0x360, Size: 0x18]
	Texture2D* DefaultBokehTexture;//[Offset: 0x378, Size: 0x8]
	SoftObjectPath DefaultBokehTextureName;//[Offset: 0x380, Size: 0x18]
	Texture2D* DefaultBloomKernelTexture;//[Offset: 0x398, Size: 0x8]
	SoftObjectPath DefaultBloomKernelTextureName;//[Offset: 0x3a0, Size: 0x18]
	Material* WireframeMaterial;//[Offset: 0x3b8, Size: 0x8]
	FString WireframeMaterialName;//[Offset: 0x3c0, Size: 0x10]
	Material* DebugMeshMaterial;//[Offset: 0x3d0, Size: 0x8]
	SoftObjectPath DebugMeshMaterialName;//[Offset: 0x3d8, Size: 0x18]
	Material* EmissiveMeshMaterial;//[Offset: 0x3f0, Size: 0x8]
	SoftObjectPath EmissiveMeshMaterialName;//[Offset: 0x3f8, Size: 0x18]
	Material* LevelColorationLitMaterial;//[Offset: 0x410, Size: 0x8]
	FString LevelColorationLitMaterialName;//[Offset: 0x418, Size: 0x10]
	Material* LevelColorationUnlitMaterial;//[Offset: 0x428, Size: 0x8]
	FString LevelColorationUnlitMaterialName;//[Offset: 0x430, Size: 0x10]
	Material* LightingTexelDensityMaterial;//[Offset: 0x440, Size: 0x8]
	FString LightingTexelDensityName;//[Offset: 0x448, Size: 0x10]
	Material* ShadedLevelColorationLitMaterial;//[Offset: 0x458, Size: 0x8]
	FString ShadedLevelColorationLitMaterialName;//[Offset: 0x460, Size: 0x10]
	Material* ShadedLevelColorationUnlitMaterial;//[Offset: 0x470, Size: 0x8]
	FString ShadedLevelColorationUnlitMaterialName;//[Offset: 0x478, Size: 0x10]
	Material* RemoveSurfaceMaterial;//[Offset: 0x488, Size: 0x8]
	SoftObjectPath RemoveSurfaceMaterialName;//[Offset: 0x490, Size: 0x18]
	Material* VertexColorMaterial;//[Offset: 0x4a8, Size: 0x8]
	FString VertexColorMaterialName;//[Offset: 0x4b0, Size: 0x10]
	Material* VertexColorViewModeMaterial_ColorOnly;//[Offset: 0x4c0, Size: 0x8]
	FString VertexColorViewModeMaterialName_ColorOnly;//[Offset: 0x4c8, Size: 0x10]
	Material* VertexColorViewModeMaterial_AlphaAsColor;//[Offset: 0x4d8, Size: 0x8]
	FString VertexColorViewModeMaterialName_AlphaAsColor;//[Offset: 0x4e0, Size: 0x10]
	Material* VertexColorViewModeMaterial_RedOnly;//[Offset: 0x4f0, Size: 0x8]
	FString VertexColorViewModeMaterialName_RedOnly;//[Offset: 0x4f8, Size: 0x10]
	Material* VertexColorViewModeMaterial_GreenOnly;//[Offset: 0x508, Size: 0x8]
	FString VertexColorViewModeMaterialName_GreenOnly;//[Offset: 0x510, Size: 0x10]
	Material* VertexColorViewModeMaterial_BlueOnly;//[Offset: 0x520, Size: 0x8]
	FString VertexColorViewModeMaterialName_BlueOnly;//[Offset: 0x528, Size: 0x10]
	SoftObjectPath DebugEditorMaterialName;//[Offset: 0x538, Size: 0x18]
	Material* ConstraintLimitMaterial;//[Offset: 0x550, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialX;//[Offset: 0x558, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialXAxis;//[Offset: 0x560, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialY;//[Offset: 0x568, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialYAxis;//[Offset: 0x570, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialZ;//[Offset: 0x578, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialZAxis;//[Offset: 0x580, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;//[Offset: 0x588, Size: 0x8]
	Material* InvalidLightmapSettingsMaterial;//[Offset: 0x590, Size: 0x8]
	SoftObjectPath InvalidLightmapSettingsMaterialName;//[Offset: 0x598, Size: 0x18]
	Material* PreviewShadowsIndicatorMaterial;//[Offset: 0x5b0, Size: 0x8]
	SoftObjectPath PreviewShadowsIndicatorMaterialName;//[Offset: 0x5b8, Size: 0x18]
	Material* ArrowMaterial;//[Offset: 0x5d0, Size: 0x8]
	MaterialInstanceDynamic* ArrowMaterialYellow;//[Offset: 0x5d8, Size: 0x8]
	SoftObjectPath ArrowMaterialName;//[Offset: 0x5e0, Size: 0x18]
	LinearColor LightingOnlyBrightness;//[Offset: 0x5f8, Size: 0x10]
	LinearColor[] ShaderComplexityColors;//[Offset: 0x608, Size: 0x10]
	LinearColor[] QuadComplexityColors;//[Offset: 0x618, Size: 0x10]
	LinearColor[] LightComplexityColors;//[Offset: 0x628, Size: 0x10]
	LinearColor[] StationaryLightOverlapColors;//[Offset: 0x638, Size: 0x10]
	LinearColor[] LODColorationColors;//[Offset: 0x648, Size: 0x10]
	LinearColor[] HLODColorationColors;//[Offset: 0x658, Size: 0x10]
	LinearColor[] StreamingAccuracyColors;//[Offset: 0x668, Size: 0x10]
	float MaxPixelShaderAdditiveComplexityCount;//[Offset: 0x678, Size: 0x4]
	float MaxES3PixelShaderAdditiveComplexityCount;//[Offset: 0x67c, Size: 0x4]
	float MinLightMapDensity;//[Offset: 0x680, Size: 0x4]
	float IdealLightMapDensity;//[Offset: 0x684, Size: 0x4]
	float MaxLightMapDensity;//[Offset: 0x688, Size: 0x4]
	bool bRenderLightMapDensityGrayscale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68c, Size: 0x1]
	float RenderLightMapDensityGrayscaleScale;//[Offset: 0x690, Size: 0x4]
	float RenderLightMapDensityColorScale;//[Offset: 0x694, Size: 0x4]
	LinearColor LightMapDensityVertexMappedColor;//[Offset: 0x698, Size: 0x10]
	LinearColor LightMapDensitySelectedColor;//[Offset: 0x6a8, Size: 0x10]
	StatColorMapping[] StatColorMappings;//[Offset: 0x6b8, Size: 0x10]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x6c8, Size: 0x8]
	SoftObjectPath DefaultPhysMaterialName;//[Offset: 0x6d0, Size: 0x18]
	GameNameRedirect[] ActiveGameNameRedirects;//[Offset: 0x6e8, Size: 0x10]
	ClassRedirect[] ActiveClassRedirects;//[Offset: 0x6f8, Size: 0x10]
	PluginRedirect[] ActivePluginRedirects;//[Offset: 0x708, Size: 0x10]
	StructRedirect[] ActiveStructRedirects;//[Offset: 0x718, Size: 0x10]
	Texture2D* PreIntegratedSkinBRDFTexture;//[Offset: 0x728, Size: 0x8]
	SoftObjectPath PreIntegratedSkinBRDFTextureName;//[Offset: 0x730, Size: 0x18]
	Texture2D* BlueNoiseTexture;//[Offset: 0x748, Size: 0x8]
	SoftObjectPath BlueNoiseTextureName;//[Offset: 0x750, Size: 0x18]
	Texture2D* MiniFontTexture;//[Offset: 0x768, Size: 0x8]
	SoftObjectPath MiniFontTextureName;//[Offset: 0x770, Size: 0x18]
	Texture* WeightMapPlaceholderTexture;//[Offset: 0x788, Size: 0x8]
	SoftObjectPath WeightMapPlaceholderTextureName;//[Offset: 0x790, Size: 0x18]
	Texture2D* LightMapDensityTexture;//[Offset: 0x7a8, Size: 0x8]
	SoftObjectPath LightMapDensityTextureName;//[Offset: 0x7b0, Size: 0x18]
	Texture2D* GlobalHeightmapTexture;//[Offset: 0x7c8, Size: 0x8]
	Vector4 GlobalHeightmapTransform;//[Offset: 0x7d0, Size: 0x10]
	Texture2D* SMAAAreaTexture;//[Offset: 0x7e0, Size: 0x8]
	SoftObjectPath SMAAAreaTextureName;//[Offset: 0x7e8, Size: 0x18]
	Texture2D* SMAASearchTexture;//[Offset: 0x800, Size: 0x8]
	SoftObjectPath SMAASearchTextureName;//[Offset: 0x808, Size: 0x18]
	GameViewportClient* GameViewport;//[Offset: 0x828, Size: 0x8]
	FString[] DeferredCommands;//[Offset: 0x830, Size: 0x10]
	int TickCycles;//[Offset: 0x840, Size: 0x4]
	int GameCycles;//[Offset: 0x844, Size: 0x4]
	int ClientCycles;//[Offset: 0x848, Size: 0x4]
	float NearClipPlane;//[Offset: 0x84c, Size: 0x4]
	bool bHardwareSurveyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x850, Size: 0x1]
	bool bSubtitlesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x850, Size: 0x1]
	bool bSubtitlesForcedOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x850, Size: 0x1]
	int MaximumLoopIterationCount;//[Offset: 0x854, Size: 0x4]
	bool bCanBlueprintsTickByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x858, Size: 0x1]
	bool bOptimizeAnimBlueprintMemberVariableAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x858, Size: 0x1]
	bool bAllowMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x858, Size: 0x1]
	bool bEnableEditorPSysRealtimeLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x858, Size: 0x1]
	bool bSmoothFrameRate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x858, Size: 0x1]
	bool bUseFixedFrameRate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x858, Size: 0x1]
	float FixedFrameRate;//[Offset: 0x85c, Size: 0x4]
	FloatRange SmoothedFrameRateRange;//[Offset: 0x860, Size: 0x10]
	EngineCustomTimeStep* CustomTimeStep;//[Offset: 0x870, Size: 0x8]
	SoftClassPath CustomTimeStepClassName;//[Offset: 0x898, Size: 0x18]
	TimecodeProvider* TimecodeProvider;//[Offset: 0x8b0, Size: 0x8]
	SoftClassPath TimecodeProviderClassName;//[Offset: 0x8d8, Size: 0x18]
	bool bGenerateDefaultTimecode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f0, Size: 0x1]
	FrameRate GenerateDefaultTimecodeFrameRate;//[Offset: 0x8f4, Size: 0x8]
	float GenerateDefaultTimecodeFrameDelay;//[Offset: 0x8fc, Size: 0x4]
	bool bCheckForMultiplePawnsSpawnedInAFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x900, Size: 0x1]
	int NumPawnsAllowedToBeSpawnedInAFrame;//[Offset: 0x904, Size: 0x4]
	bool bShouldGenerateLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x908, Size: 0x1]
	Color C_WorldBox;//[Offset: 0x90c, Size: 0x4]
	Color C_BrushWire;//[Offset: 0x910, Size: 0x4]
	Color C_AddWire;//[Offset: 0x914, Size: 0x4]
	Color C_SubtractWire;//[Offset: 0x918, Size: 0x4]
	Color C_SemiSolidWire;//[Offset: 0x91c, Size: 0x4]
	Color C_NonSolidWire;//[Offset: 0x920, Size: 0x4]
	Color C_WireBackground;//[Offset: 0x924, Size: 0x4]
	Color C_ScaleBoxHi;//[Offset: 0x928, Size: 0x4]
	Color C_VolumeCollision;//[Offset: 0x92c, Size: 0x4]
	Color C_BSPCollision;//[Offset: 0x930, Size: 0x4]
	Color C_OrthoBackground;//[Offset: 0x934, Size: 0x4]
	Color C_Volume;//[Offset: 0x938, Size: 0x4]
	Color C_BrushShape;//[Offset: 0x93c, Size: 0x4]
	float StreamingDistanceFactor;//[Offset: 0x940, Size: 0x4]
	DirectoryPath GameScreenshotSaveDirectory;//[Offset: 0x948, Size: 0x10]
	enum TransitionType;//[Offset: 0x958, Size: 0x1]
	FString TransitionDescription;//[Offset: 0x960, Size: 0x10]
	FString TransitionGameMode;//[Offset: 0x970, Size: 0x10]
	float MeshLODRange;//[Offset: 0x980, Size: 0x4]
	bool bAllowMatureLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x984, Size: 0x1]
	float CameraRotationThreshold;//[Offset: 0x988, Size: 0x4]
	float CameraTranslationThreshold;//[Offset: 0x98c, Size: 0x4]
	float PrimitiveProbablyVisibleTime;//[Offset: 0x990, Size: 0x4]
	float MaxOcclusionPixelsFraction;//[Offset: 0x994, Size: 0x4]
	bool bPauseOnLossOfFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x998, Size: 0x1]
	int MaxParticleResize;//[Offset: 0x99c, Size: 0x4]
	int MaxParticleResizeWarn;//[Offset: 0x9a0, Size: 0x4]
	DropNoteInfo[] PendingDroppedNotes;//[Offset: 0x9a8, Size: 0x10]
	float NetClientTicksPerSecond;//[Offset: 0x9b8, Size: 0x4]
	float DisplayGamma;//[Offset: 0x9bc, Size: 0x4]
	float MinDesiredFrameRate;//[Offset: 0x9c0, Size: 0x4]
	LinearColor DefaultSelectedMaterialColor;//[Offset: 0x9c4, Size: 0x10]
	LinearColor SelectedMaterialColor;//[Offset: 0x9d4, Size: 0x10]
	LinearColor SelectionOutlineColor;//[Offset: 0x9e4, Size: 0x10]
	LinearColor SubduedSelectionOutlineColor;//[Offset: 0x9f4, Size: 0x10]
	LinearColor SelectedMaterialColorOverride;//[Offset: 0xa04, Size: 0x10]
	bool bIsOverridingSelectedColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa14, Size: 0x1]
	bool bEnableOnScreenDebugMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa18, Size: 0x1]
	bool bEnableOnScreenDebugMessagesDisplay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa18, Size: 0x1]
	bool bSuppressMapWarnings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa18, Size: 0x1]
	bool bDisableAILogging;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa18, Size: 0x1]
	UInt32Property bEnableVisualLogRecordingOnStart;//[Size: 0x4]
	int ScreenSaverInhibitorSemaphore;//[Offset: 0xa24, Size: 0x4]
	bool bLockReadOnlyLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa28, Size: 0x1]
	FString ParticleEventManagerClassPath;//[Offset: 0xa30, Size: 0x10]
	float SelectionHighlightIntensity;//[Offset: 0xa40, Size: 0x4]
	float BSPSelectionHighlightIntensity;//[Offset: 0xa44, Size: 0x4]
	float SelectionHighlightIntensityBillboards;//[Offset: 0xa48, Size: 0x4]
	NetDriverDefinition[] NetDriverDefinitions;//[Offset: 0xc98, Size: 0x10]
	FString[] ServerActors;//[Offset: 0xca8, Size: 0x10]
	FString[] RuntimeServerActors;//[Offset: 0xcb8, Size: 0x10]
	float NetErrorLogInterval;//[Offset: 0xcc8, Size: 0x4]
	bool bStartedLoadMapMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xccc, Size: 0x1]
	int NextWorldContextHandle;//[Offset: 0xce8, Size: 0x4]

--------------------------------
Class: PendingNetGame.Object
	NetDriver* NetDriver;//[Offset: 0x30, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bUseDynamicResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	UInt32Property ResolutionSizeX;//[Size: 0x4]
	UInt32Property ResolutionSizeY;//[Size: 0x4]
	UInt32Property LastUserConfirmedResolutionSizeX;//[Size: 0x4]
	UInt32Property LastUserConfirmedResolutionSizeY;//[Size: 0x4]
	int WindowPosX;//[Offset: 0x98, Size: 0x4]
	int WindowPosY;//[Offset: 0x9c, Size: 0x4]
	int FullscreenMode;//[Offset: 0xa0, Size: 0x4]
	int LastConfirmedFullscreenMode;//[Offset: 0xa4, Size: 0x4]
	int PreferredFullscreenMode;//[Offset: 0xa8, Size: 0x4]
	UInt32Property Version;//[Size: 0x4]
	int AudioQualityLevel;//[Offset: 0xb0, Size: 0x4]
	int LastConfirmedAudioQualityLevel;//[Offset: 0xb4, Size: 0x4]
	float FrameRateLimit;//[Offset: 0xb8, Size: 0x4]
	int DesiredScreenWidth;//[Offset: 0xc0, Size: 0x4]
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]
	int DesiredScreenHeight;//[Offset: 0xc8, Size: 0x4]
	int LastUserConfirmedDesiredScreenWidth;//[Offset: 0xcc, Size: 0x4]
	int LastUserConfirmedDesiredScreenHeight;//[Offset: 0xd0, Size: 0x4]
	float LastRecommendedScreenWidth;//[Offset: 0xd4, Size: 0x4]
	float LastRecommendedScreenHeight;//[Offset: 0xd8, Size: 0x4]
	float LastCPUBenchmarkResult;//[Offset: 0xdc, Size: 0x4]
	float LastGPUBenchmarkResult;//[Offset: 0xe0, Size: 0x4]
	float[] LastCPUBenchmarkSteps;//[Offset: 0xe8, Size: 0x10]
	float[] LastGPUBenchmarkSteps;//[Offset: 0xf8, Size: 0x10]
	float LastGPUBenchmarkMultiplier;//[Offset: 0x108, Size: 0x4]
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1]
	int HDRDisplayOutputNits;//[Offset: 0x110, Size: 0x4]
	float DisplayGammaValue;//[Offset: 0x114, Size: 0x4]
	float DisplayMaxGammaValue;//[Offset: 0x118, Size: 0x4]
	float DisplayMinGammaValue;//[Offset: 0x11c, Size: 0x4]
	bool bEnableGlobalIllumination;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	delegate OnGameUserSettingsUINeedsUpdate;//[Offset: 0x128, Size: 0x10]
	void ValidateSettings();// 0x2875c10
	bool SupportsNGXDLSS();// 0xcbd6b0
	bool SupportsNGX();// 0x4ba84c0
	bool SupportsHDRDisplayOutput();// 0x29ded00
	void SetVSyncEnabled(bool bEnable);// 0x4ba8330
	void SetVisualEffectQuality(int Value);// 0x4ba8440
	void SetViewDistanceQuality(int Value);// 0x4ba83c0
	void SetToDefaults();// 0x4b73d20
	void SetTextureQuality(int Value);// 0x4ba82b0
	void SetShadowQuality(int Value);// 0x4ba8230
	void SetShadingQuality(int Value);// 0x4ba81b0
	void SetScreenResolution(IntPoint Resolution);// 0x4ba8130
	void SetResolutionScaleValueEx(float NewScaleValue);// 0x4ba80b0
	void SetResolutionScaleValue(int NewScaleValue);// 0x4ba8030
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0x4ba7fb0
	void SetPostProcessingQuality(int Value);// 0x4ba7f30
	void SetOverallScalabilityLevel(int Value);// 0x4ba7ea0
	void SetGIEnable(bool bEnable);// 0x28e32b0
	void SetFullscreenMode(byte InFullscreenMode);// 0x4ba7e20
	void SetFrameRateLimit(float NewLimit);// 0x4ba7da0
	void SetFoliageQuality(int Value);// 0x4ba7d20
	void SetDynamicResolutionEnabled(bool bEnable);// 0x4ba7c90
	void SetDisplayMinGamma(float InMinGamma);// 0x4ba7c10
	void SetDisplayMaxGamma(float InMaxGamma);// 0x4ba7b90
	void SetDisplayGamma(float InGamma);// 0x4ba7b10
	void SetDetailsQuality(int Value);// 0x4ba7a90
	void SetCpuQuality(int Value);// 0x4ba7a10
	void SetBenchmarkFallbackValues();// 0x4ba79f0
	void SetAudioQualityLevel(int QualityLevel);// 0x4ba7970
	void SetAntiAliasingQuality(int Value);// 0x4ba78f0
	void SetAnimQuality(int Value);// 0x4ba7870
	void SaveSettings();// 0xcac2b0
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0x4ba7770
	void RevertVideoMode();// 0x4ba7750
	void ResetToCurrentSettings();// 0xb04ed0
	void NGXDriverUpdateRequired(out bool DriverOutOfDate, out int MinDriverVersionMajor, out int MinDriverVersionMinor);// 0x4ba7600
	void LoadSettings(bool bForceReload);// 0x4ba7570
	bool IsVSyncEnabled();// 0x4ba7540
	bool IsVSyncDirty();// 0x4ba7510
	bool IsScreenResolutionDirty();// 0x4ba74e0
	bool IsHDREnabled();// 0x4ba74b0
	bool IsFullscreenModeDirty();// 0x4ba7480
	bool IsDynamicResolutionEnabled();// 0x4ba7450
	bool IsDynamicResolutionDirty();// 0x4ba7420
	bool IsDirty();// 0x18ccc10
	int GetVisualEffectQuality();// 0x4ba7390
	int GetViewDistanceQuality();// 0x4ba7360
	int GetTextureQuality();// 0x4ba7330
	static int GetSyncInterval();// 0x4ba7300
	int GetShadowQuality();// 0x4ba72d0
	int GetShadingQuality();// 0x4ba72a0
	IntPoint GetScreenResolution();// 0x4ba7220
	float GetResolutionScaleNormalized();// 0x4ba71f0
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0x4ba7050
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0x4ba6eb0
	float GetRecommendedResolutionScale();// 0x4ba6e70
	byte GetPreferredFullscreenMode();// 0x4ba6e40
	int GetPostProcessingQuality();// 0x4ba6e10
	int GetOverallScalabilityLevel();// 0x4ba6ca0
	IntPoint GetLastConfirmedScreenResolution();// 0x4ba6c60
	byte GetLastConfirmedFullscreenMode();// 0x4ba6c30
	bool GetGIEnable();// 0x186f870
	static GameUserSettings* GetGameUserSettings();// 0x4ba6c00
	byte GetFullscreenMode();// 0x4ba6bd0
	float GetFrameRateLimit();// 0x4ba6ba0
	static int GetFramePace();// 0x4ba6b70
	int GetFoliageQuality();// 0x4ba6b40
	float GetDisplayMaxGamma();// 0x4ba6b10
	float GetDisplayGamma();// 0x4ba6ae0
	int GetDetailsQuality();// 0x3d16d70
	IntPoint GetDesktopResolution();// 0x4ba6aa0
	static IntPoint GetDefaultWindowPosition();// 0x4ba6a60
	static byte GetDefaultWindowMode();// 0x4ba6a30
	float GetDefaultResolutionScale();// 0x4ba69f0
	static IntPoint GetDefaultResolution();// 0x4ba69b0
	int GetCurrentHDRDisplayNits();// 0x4ba6980
	int GetCpuQuality();// 0x4ba6950
	int GetAudioQualityLevel();// 0x4ba6930
	int GetAntiAliasingQuality();// 0x186f3c0
	int GetAnimQuality();// 0x4ba6900
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0x4ba6840
	void ConfirmVideoMode();// 0x188dba0
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0x4ba67b0
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0x4ba6720
	void ApplyNonResolutionSettings();// 0x188cea0
	void ApplyHardwareBenchmarkResults();// 0x260b410

--------------------------------
Class: AssetManager.Object
	Object*[] ObjectReferenceList;//[Offset: 0x2c0, Size: 0x10]
	bool bIsGlobalAsyncScanEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	bool bShouldGuessTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 0x1]
	bool bShouldUseSynchronousLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2, Size: 0x1]
	bool bIsLoadingFromPakFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d3, Size: 0x1]
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 0x1]
	bool bIsBulkScanning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d6, Size: 0x1]
	bool bIsPrimaryAssetDirectoryCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d7, Size: 0x1]
	bool bIsManagementDatabaseCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	bool bUpdateManagementDatabaseAfterScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 0x1]
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da, Size: 0x1]
	int NumberOfSpawnedNotifications;//[Offset: 0x2dc, Size: 0x4]

--------------------------------
Class: StatColorMapping
	FString StatName;//[Offset: 0x0, Size: 0x10]
	StatColorMapEntry[] ColorMap;//[Offset: 0x10, Size: 0x10]
	bool DisableBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: StatColorMapEntry
	float In;//[Offset: 0x0, Size: 0x4]
	Color Out;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: GameNameRedirect
	FName OldGameName;//[Offset: 0x0, Size: 0x8]
	FName NewGameName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ClassRedirect
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	FName OldClassName;//[Offset: 0x8, Size: 0x8]
	FName NewClassName;//[Offset: 0x10, Size: 0x8]
	FName OldSubobjName;//[Offset: 0x18, Size: 0x8]
	FName NewSubobjName;//[Offset: 0x20, Size: 0x8]
	FName NewClassClass;//[Offset: 0x28, Size: 0x8]
	FName NewClassPackage;//[Offset: 0x30, Size: 0x8]
	bool InstanceOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: PluginRedirect
	FString OldPluginName;//[Offset: 0x0, Size: 0x10]
	FString NewPluginName;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: StructRedirect
	FName OldStructName;//[Offset: 0x0, Size: 0x8]
	FName NewStructName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	float Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: EngineCustomTimeStep.Object

--------------------------------
Class: TimecodeProvider.Object
	float FrameDelay;//[Offset: 0x28, Size: 0x4]
	Timecode GetTimecode();// 0x4cb13a0
	enum GetSynchronizationState();// 0x4cb1370
	QualifiedFrameTime GetQualifiedFrameTime();// 0x4cb1330
	FrameRate GetFrameRate();// 0x4cb1260
	Timecode GetDelayedTimecode();// 0x4cb1220
	QualifiedFrameTime GetDelayedQualifiedFrameTime();// 0x4cb11e0

--------------------------------
Class: Timecode
	int Hours;//[Offset: 0x0, Size: 0x4]
	int Minutes;//[Offset: 0x4, Size: 0x4]
	int Seconds;//[Offset: 0x8, Size: 0x4]
	int Frames;//[Offset: 0xc, Size: 0x4]
	bool bDropFrameFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: DirectoryPath
	FString Path;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: DropNoteInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	FString Comment;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: NetDriverDefinition
	FName DefName;//[Offset: 0x0, Size: 0x8]
	FName DriverClassName;//[Offset: 0x8, Size: 0x8]
	FName DriverClassNameFallback;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ArkObjectPoolAllocator.Object

--------------------------------
Class: ArkManagerInitRelationList
	enum[] ManagerTypeList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ArkAudioManager.ArkManagerBase.Object
	Actor* mWindActor;//[Offset: 0x98, Size: 0x8]
	ArkAudioGlobalConfig GlobalAudioConfig;//[Offset: 0xb8, Size: 0x150]
	ArkVoiceGlobalConfig GlobalVoiceConfig;//[Offset: 0x208, Size: 0x10]
	<FName,AkAudioEvent*> LoadedAudioEventMap;//[Offset: 0x218, Size: 0x50]
	ArkPlayer* mCameraPlayer;//[Offset: 0x288, Size: 0x8]
	ArkAkComponent* AkComp_BlastWave;//[Offset: 0x290, Size: 0x8]
	ArkAkPortalComponent*[] mEffectivePortals;//[Offset: 0x2a0, Size: 0x10]
	static void UpdateWindParameters(Actor* WindActor, out const Vector WindDir, float WindStrength);// 0x2675230
	static void UnregisterLoopSoundInspector(int PlayingID);// 0x26751c0
	static void ToggleMixPreset(bool bOn, FName ConfigName);// 0x2675100
	static void StopLoopEventAttachedAsync(AkAudioEvent* StartEvent, AkAudioEvent* StopEvent, SceneComponent* AttachComponent, FName AttachSocketName, int FadeOutMS);// 0x2674ea0
	static void StopLoopEventAttached(AkAudioEvent* StartEvent, AkAudioEvent* StopEvent, SceneComponent* AttachComponent, FName AttachSocketName);// 0x2674d70
	static void StopLoopEventAsync(AkAudioEvent* StartEvent, AkAudioEvent* StopEvent, ArkAkComponent* AkComponent, int FadeOutMS);// 0x2674b50
	static void StopLoopEvent(AkAudioEvent* StartEvent, AkAudioEvent* StopEvent, ArkAkComponent* AkComponent);// 0x2674a60
	static void StopAll();// 0x2674a40
	static void StopAkEventOnObject(ArkAkComponent* AkComponent, AkAudioEvent* StopEvent, int PlayingID, int TransitionMs);// 0x2674910
	static void StopAkEvent(int PlayingID, int TransitionMs);// 0x2674860
	static void StopAkBackgroundMusic(int TransitionTimeMS);// 0x26747f0
	static void SetVoiceChatRecordingMode(int Mode);// 0x26746b0
	static void SetVoiceChatEnabled(bool bEnable);// 0x2673bd0
	static void SetSysVolume(enum Type, float Value01);// 0x2674740
	void SetNeedRefreshListenerLocation();// 0x2674720
	static void SetMicrophoneSensitivity(int Sensitivity);// 0x26746b0
	static void SetCombatRTPCScheme(enum NewScheme, float Range);// 0x2674600
	static void SetBGMState(enum NewState, const Object* WorldContextObject);// 0x2674550
	static int SetAkSwitchByEnum(Enum* Enum, int Value, ArkAkComponent* AkComponent);// 0x2674460
	static int SetAkSwitchByAsset(out const AkSwitchValue* SwitchAsset, ArkAkComponent* AkComponent);// 0x2674350
	static int SetAkSwitch(FString SwitchGroup, FString Value, ArkAkComponent* AkComponent);// 0x2674220
	static int SetAkStateByEnum(Enum* Enum, int Value);// 0x2674160
	static int SetAkStateByAsset(out const AkStateValue* StateAsset);// 0x26740a0
	static int SetAkState(FString Group, FString Value);// 0x2673fb0
	static int SetAkRtpcByAsset(out const AkRtpc* RtpcAsset, float Value, int InterpolationTimeMs, ArkAkComponent* AkComponent);// 0x2673e10
	static int SetAkRTPC(FString Name, float Value, int InterpolationTimeMs, ArkAkComponent* AkComponent);// 0x2673cc0
	static void SaveVoiceChatRecordingMode(int Mode);// 0x2673c50
	static void SaveVoiceChatEnabled(bool bEnable);// 0x2673bd0
	static void SaveSysVolume(enum Type, float Value01);// 0x2673b20
	static void SaveMicrophoneSensitivity(int Sensitivity);// 0x2673ab0
	void ResetAudioCulture();// 0x2673a90
	static void RegisterLoopSoundInspector(const Object* WorldContextObject, AkAudioEvent* LoopSound, int PlayingID, float MaxDuration);// 0x2673950
	static void PostSoftAkEventUIAsync_BP(const Object* WorldContextObject, AkAudioEvent* AkEventPtr, float DelaySeconds, bool bStopWhenDestroy, bool bForcePlay, int CallbackType, out const delegate Callback);// 0x26736a0
	static void PostSoftAkEventAttachedAsync(AkAudioEvent* AkEventPtr, Actor* AttachTarget, SceneComponent* AttachComponent, FName AttachPointName, out const FString[] Switches, out const <FString,float> RTPCs, float DelaySeconds, bool bStopWhenDestroy, bool bForcePlay, int CallbackType, out const delegate Callback);// 0x26731f0
	static ArkAkComponent* PostSoftAkEventAtLocationAsync(const Object* WorldContextObject, AkAudioEvent* AkEventPtr, out const Vector Location, out const FString[] Switches, out const <FString,float> RTPCs, int CallbackType, out const delegate Callback, float DelaySeconds, bool bForcePlay);// 0x2672dc0
	static void PostSoftAkEventAsyncWithLifeCallback(const Object* WorldContextObject, AkAudioEvent* AkEventPtr, float DelaySeconds, bool bStopWhenDestroy, bool bForcePlay, out const delegate StartCallback, out const delegate EndCallback);// 0x2672840
	static void PostSoftAkEventAsync_BP(AkAudioEvent* AkEventPtr, ArkAkComponent* AkComponent, float DelaySeconds, bool bStopWhenDestroy, bool bForcePlay, int CallbackType, out const delegate Callback);// 0x2672b10
	static ArkAkComponent* PostLoopEventAttachedAsync(AkAudioEvent* StartEvent, out const AkAudioEvent*[] StopEvents, SceneComponent* AttachComponent, FName AttachSocketName);// 0x2672640
	static ArkAkComponent* PostLoopEventAttached(AkAudioEvent* StartEvent, out const AkAudioEvent*[] StopEvents, SceneComponent* AttachComponent, FName AttachSocketName);// 0x26724e0
	static ArkAkComponent* PostLoopEventAtLocationAsync(const Object* WorldContextObject, AkAudioEvent* StartEvent, out const AkAudioEvent*[] StopEvents, out const Vector Location);// 0x26722d0
	static ArkAkComponent* PostLoopEventAtLocation(const Object* WorldContextObject, AkAudioEvent* StartEvent, out const AkAudioEvent*[] StopEvents, out const Vector Location);// 0x2672160
	static ArkAkComponent* PostLoopEventAsync(AkAudioEvent* StartEvent, out const AkAudioEvent*[] StopEvents, ArkAkComponent* AkComponent);// 0x2671f90
	static ArkAkComponent* PostLoopEvent(AkAudioEvent* StartEvent, out const AkAudioEvent*[] StopEvents, ArkAkComponent* AkComponent);// 0x2671e70
	static ArkAkComponent* PostAkEventAttached(AkAudioEvent* AkEvent, FString AkEventName, Actor* AttachTarget, SceneComponent* AttachComponent, FName AttachPointName, out const FString[] Switches, out const <FString,float> RTPCs, int CallbackType, out const delegate Callback, out int OutPlayingID, float DelaySeconds, bool bStopWhenDestroy, bool bForcePlay);// 0x26719a0
	static ArkAkComponent* PostAkEventAtLocation(const Object* WorldContextObject, AkAudioEvent* AkEvent, FString AkEventName, out const Vector Location, out const FString[] Switches, out const <FString,float> RTPCs, int CallbackType, out const delegate Callback, out int OutPlayingID, float DelaySeconds, bool bForcePlay);// 0x2671550
	static ArkAkComponent* PostAkEvent(AkAudioEvent* AkEvent, FString AkEventName, int CallbackType, out const delegate Callback, ArkAkComponent* AkComponent, out int OutPlayingID, float DelaySeconds, bool bStopWhenDestroy, bool bForcePlay);// 0x2671280
	static bool PlayWhooshSound(const Object* WorldContextObject, enum BulletType, Vector StartPos, Vector EndPos, bool bJustStart);// 0x26710f0
	static bool PlayWaveBlast(const Object* WorldContextObject, AkAudioEvent* Sound, Vector Origin, float MaxRadius, float Duration);// 0x2670f40
	static void PlaySoftAkBackgroundMusic(const Object* WorldContextObject, AkAudioEvent* MusicEvent, AkAudioEvent* StopEvent, int TransitionTimeMS);// 0x2670d20
	static void PlayAkBackgroundMusic(AkAudioEvent* MusicEvent, AkAudioEvent* StopEvent, int TransitionTimeMS);// 0x2670c30
	void OnWorldCleanup_BP();// 0x305c9c0
	void OnToggleLoadingScreen_BP(bool bLoadingScreenIsOn);// 0x305c9c0
	void OnTeamActivatedShuttleIDChanged(int ShuttleID, int TeamId);// 0x2670b70
	void OnShuttleStateChangeEvent(enum LastState, enum NewState, float StartTime, int OwnShuttleID);// 0x2670a20
	void OnShuttleSpawned(ArkShuttleBase* Shuttle);// 0x107d1f0
	void OnShuttleFinished(int WinnerTeamID, int OwnShuttleID);// 0x2670960
	void OnShuttleCountdown(int ShuttleID, int Seconds, enum SuttleState);// 0x2670860
	void OnSettlementMenuOpen();// 0x2670840
	void OnPrePlayBGM_BP(out const AkAudioEvent* BGMEvent);// 0x305c9c0
	void OnPostPlayBGM_BP(out const AkAudioEvent* BGMEvent);// 0x305c9c0
	void OnLoadingPanelClosed_BP();// 0x305c9c0
	void OnGameFlowChange_BP(enum OldType, enum NewType);// 0x305c9c0
	void OnCheat_BP(FString Command);// 0x305c9c0
	static bool IsVoiceChatEnabled();// 0x2670810
	static int GetVoiceChatRecordingMode();// 0x26707e0
	static float GetSysVolume(enum Type);// 0x2670760
	static FName GetNoiseTagOfSound(out const AkAudioEvent* SoundEvent);// 0x26706a0
	static int GetMicrophoneSensitivity();// 0x2670670
	static ArkAudioGlobalConfig GetGlobalConfig();// 0x2670630
	static AkAudioEvent* GetAudioEventByName(FName AudioName);// 0x2670570
	static FString GetAkSwitch(FString SwitchGroup, ArkAkComponent* AkComponent);// 0x2670450
	static FString GetAkState(FString StateGroup);// 0x2670370
	static float GetAkRTPC(FString Name, ArkAkComponent* AkComponent);// 0x2670290
	static Vector GetAkListenerPosition(const Object* WorldContextObject);// 0x2670200
	static AkComponent* GetAkListener(const Object* WorldContextObject, out Vector OutLocation, out Vector OutFront, out Vector OutUp);// 0x2670090
	static ArkAkComponent* GetAkComponent(SceneComponent* Component, FName AttachName);// 0x266ffd0
	static bool FireSoundNoiseToAI(AkAudioEvent* SoundEvent, Actor* Emitter, ArkCharacterBase* Instigator, Vector Location);// 0x266fe10
	static ArkAkRoomComponent* FindRoomAtLocation(const Object* WorldContextObject, out const Vector Location);// 0x266fd40
	void AkCallback(enum CallbackType, AkCallbackInfo* CallbackInfo);// 0x266fc80

--------------------------------
Class: AkStateValue.AkGroupValue.AkAudioType.Object

--------------------------------
Class: ArkAudioGlobalConfig
	AkAudioBank*[] AutoLoadBanks;//[Offset: 0x0, Size: 0x10]
	<FName,AkSyncParameterTransfer> GameSyncParameterTransferMap;//[Offset: 0x10, Size: 0x50]
	ArkAudioMixPresetConfig[] MixPresetConfigs;//[Offset: 0x60, Size: 0x10]
	<int,AkHeroParams> HeroParams;//[Offset: 0x70, Size: 0x50]
	float CombatRTPC_TransitionTime;//[Offset: 0xc0, Size: 0x4]
	float CombatRTPC_AffectRadius;//[Offset: 0xc4, Size: 0x4]
	float CombatToIdleBGMDelay;//[Offset: 0xc8, Size: 0x4]
	int CombatRTPC_PlayerCountHack;//[Offset: 0xcc, Size: 0x4]
	int CombatRTPC_EliteCountHack;//[Offset: 0xd0, Size: 0x4]
	int CombatRTPC_SwarmCountHack;//[Offset: 0xd4, Size: 0x4]
	int CombatRTPC_FinalSwarmCountHack;//[Offset: 0xd8, Size: 0x4]
	int[] CombatRTPC_EnemyStages;//[Offset: 0xe0, Size: 0x10]
	float Weather_RTPC_TransitionTime;//[Offset: 0xf0, Size: 0x4]
	ArkPlayerSoundTable* PlayerSoundTable;//[Offset: 0xf8, Size: 0x8]
	ArkMiscSoundTable* MiscSoundTable;//[Offset: 0x100, Size: 0x8]
	DataTable* WeaponSoundTable;//[Offset: 0x108, Size: 0x8]
	DataTable* NpcSoundTable;//[Offset: 0x110, Size: 0x8]
	DataTable* SoundInfoTable;//[Offset: 0x118, Size: 0x8]
	int MaxActivePortals;//[Offset: 0x120, Size: 0x4]
	float PortalCheckRadius;//[Offset: 0x124, Size: 0x4]
	float DistCullingCheckInterval;//[Offset: 0x128, Size: 0x4]
	ArkBulletSoundConfig[] BulletSoundConfigs;//[Offset: 0x130, Size: 0x10]
	ArkWindRustleSoundConfig[] WindRustleConfigs;//[Offset: 0x140, Size: 0x10]

--------------------------------
Class: AkSyncParameterTransfer
	AkSwitchValue*[] Switches;//[Offset: 0x0, Size: 0x10]
	AkRtpc*[] RTPCs;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: ArkAudioMixPresetConfig
	FName ConfigName;//[Offset: 0x0, Size: 0x8]
	AkAudioEvent* StartEvent;//[Offset: 0x8, Size: 0x8]
	AkAudioEvent* EndEvent;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: AkHeroParams
	AkRtpc* DistanceRTPC;//[Offset: 0x0, Size: 0x28]

--------------------------------
Class: ArkMiscSoundTable.DataAsset.Object
	AkAudioEvent* MainMenuBGM;//[Offset: 0x30, Size: 0x8]
	AkAudioEvent* MainMenuBGM_Stop;//[Offset: 0x38, Size: 0x8]
	AkAudioEvent* IntroBGM;//[Offset: 0x40, Size: 0x8]
	AkAudioEvent* IntroBGM_Stop;//[Offset: 0x48, Size: 0x8]
	AkAudioEvent* ExploreBGM;//[Offset: 0x50, Size: 0x8]
	AkAudioEvent* ExploreBGM_Stop;//[Offset: 0x58, Size: 0x8]
	AkAudioEvent* CombatBGM;//[Offset: 0x60, Size: 0x8]
	AkAudioEvent* CombatBGM_Stop;//[Offset: 0x68, Size: 0x8]
	AkAudioEvent* CombatBGMState;//[Offset: 0x70, Size: 0x8]
	AkAudioEvent* CombatBGMState_Stop;//[Offset: 0x78, Size: 0x8]
	AkAudioEvent* CombatFinalBGM_A;//[Offset: 0x80, Size: 0x8]
	AkAudioEvent* CombatFinalBGM_A_Stop;//[Offset: 0x88, Size: 0x8]
	AkAudioEvent* ShuttleFailBGM_A;//[Offset: 0x90, Size: 0x8]
	AkAudioEvent* CombatFinalBGM;//[Offset: 0x98, Size: 0x8]
	AkAudioEvent* CombatFinalBGM_Stop;//[Offset: 0xa0, Size: 0x8]
	AkAudioEvent* ShuttleFailBGM;//[Offset: 0xa8, Size: 0x8]
	AkAudioEvent* CombatFinalCountDownBGM;//[Offset: 0xb0, Size: 0x8]
	AkAudioEvent* ShuttleLaunchBGM;//[Offset: 0xb8, Size: 0x8]
	AkAudioEvent* ShuttleLaunchBGM_Stop;//[Offset: 0xc0, Size: 0x8]
	ArkAudioEventSelector ShuttleFlyingBy;//[Offset: 0xc8, Size: 0x78]
	AkAudioEvent* DeathBGM;//[Offset: 0x140, Size: 0x8]
	AkAudioEvent* DeathBGM_Stop;//[Offset: 0x148, Size: 0x8]

--------------------------------
Class: ArkAudioEventSelector
	AkAudioEvent* BaseEvent;//[Offset: 0x0, Size: 0x28]
	<int,AkAudioEvent*> HeroOverriders;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: ArkBulletSoundConfig
	float WhooshSoundAffectRadius;//[Offset: 0x0, Size: 0x4]
	AkAudioEvent* WhooshSoundIn;//[Offset: 0x8, Size: 0x28]
	AkAudioEvent* WhooshSoundOut;//[Offset: 0x30, Size: 0x28]

--------------------------------
Class: ArkWindRustleSoundConfig
	AkAudioEvent* RustleSound;//[Offset: 0x0, Size: 0x28]
	float RustleSoundRadius;//[Offset: 0x28, Size: 0x4]
	AkAudioEvent* RustleSound_Stop;//[Offset: 0x30, Size: 0x28]
	ArkWindRustleMeshConfig[] ApplicableMeshes;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: ArkWindRustleMeshConfig
	StaticMesh* Mesh;//[Offset: 0x0, Size: 0x8]
	Vector2D EffectiveSegment;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ArkVoiceGlobalConfig
	DataTable*[] AutoLoadVOTable;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ArkAnimCompressManager.ArkManagerBase.Object
	<AnimationCompressionLibraryDatabase*,int> ACLDataBaseRefNumMap;//[Offset: 0x90, Size: 0x50]
	int DefaultTargetFidelity;//[Offset: 0xe0, Size: 0x4]
	static ArkAnimCompressManager* Get(const Object* WorldContext);// 0x2663b10

--------------------------------
Class: ArkGlobalQuestManager.ArkQuestManager.ArkResourceManagerBase.ArkManagerBase.Object
	DataTable* VendorInfo2QuestTable;//[Offset: 0x2c8, Size: 0x8]
	int GetHavenCommonEventTargetValue(int questID);// 0x29190c0
	enum GetGlobalQuestType(int questID);// 0x2919030
	FText GetFormattedQuestTitle(int questID);// 0x2918e90
	FText GetFormattedQuestDesc(int questID);// 0x2918da0
	Texture2D* GetBackGroundIconByID(int questID);// 0x29189d0
	static ArkGlobalQuestManager* Get(const Object* WorldContext);// 0x29188d0
	void ClearQuestItemsByVendorID(int VendorID);// 0x2917cd0
	void ClearQuestItemsByActivityID(int activityID);// 0x2917c50

--------------------------------
Class: ArkKeyBindingManager.ArkManagerBase.Object
	DataTable* KeyBindingTable;//[Offset: 0x90, Size: 0x8]
	<FName,ArkKeyBindingData> KeyBindings;//[Offset: 0x98, Size: 0x50]
	<FString,float> InputControlSliderDataMap;//[Offset: 0xe8, Size: 0x50]
	SoftObjectPath GamePadSchemeTableA;//[Offset: 0x138, Size: 0x18]
	SoftObjectPath GamePadSchemeTableB;//[Offset: 0x150, Size: 0x18]
	SoftObjectPath GamePadSchemeTableC;//[Offset: 0x168, Size: 0x18]
	void UnbindKeyIfBinding(out const Key Key);// 0x2821500
	void UnbindKey(out const FName RowName, bool bIsAlternateKey);// 0x2821430
	void SetSettingSystemFloatValue(FString KeyName, FString InVal);// 0x2821220
	void SetGamePadSchemeMode(int InSchemeType);// 0x28211a0
	void ResetKeyBindingToDefult();// 0x2821180
	void ResetControlDataToDefult();// 0x2821160
	void OnLoadKeyBindingRsp(FString KeyBindingDataString);// 0x2820dc0
	void LoadKeyBindingsFromString(FString KeyBindingToLoad);// 0x2820700
	bool IsKeyAlreadyBinded(out const Key Key, out FName BindingName_Out, out bool bIsAlternateKey_Out);// 0x28203c0
	bool IsActionCanKeyBinding(out const FName ActionName);// 0x2820320
	float GetSettingSystemFloatValue(FString OptionName);// 0x2820270
	Key GetPrimaryKeyByActionName(out const FName ActionName, bool InputWithGamepad);// 0x2820150
	enum GetGamePadSchemeMode();// 0x281ff20
	Key GetAlternateKeyByActionName(out const FName ActionName, bool InputWithGamepad);// 0x281fde0
	static ArkKeyBindingManager* Get(const Object* WorldContext);// 0x281fca0
	void BindKey(out const FName RowName, out const Key KeyToBind, bool bIsAlternateKey);// 0x281f980

--------------------------------
Class: ArkKeyBindingData.TableRowBase
	FName KeyBindingName;//[Offset: 0x8, Size: 0x8]
	FName ActionName;//[Offset: 0x10, Size: 0x8]
	FText DisplayName;//[Offset: 0x18, Size: 0x18]
	Key PrimaryKey;//[Offset: 0x30, Size: 0x18]
	Key AlternateKey;//[Offset: 0x48, Size: 0x18]
	Key GamePadPrimaryKey;//[Offset: 0x60, Size: 0x18]
	Key GamePadAlternateKey;//[Offset: 0x78, Size: 0x18]
	float ScaleMultiplier;//[Offset: 0x90, Size: 0x4]
	enum BindingType;//[Offset: 0x94, Size: 0x1]
	enum InputType;//[Offset: 0x95, Size: 0x1]
	int SettingCategoryTypeID;//[Offset: 0x98, Size: 0x4]

--------------------------------
Class: ArkUserDataManager.ArkManagerBase.Object
	ArkUserDataModel*[] UserDataModelArray;//[Offset: 0x90, Size: 0x10]
	<FString,enum> UserDataModelNameMap;//[Offset: 0xa0, Size: 0x50]
	void OnPreLoadMap(FString MapName);// 0x29bbe70
	ArkUserDataModel* GetUserDataModelByName(FString ModelName);// 0x29bb700
	ArkUserDataModel* GetUserDataModel(enum ModelType);// 0x29bb670
	static ArkUserDataManager* Get(const Object* WorldContext);// 0x29bb4d0
	void ClearPerMatchData();// 0x29baf00
	void ClearPerAccountData();// 0x29baee0

--------------------------------
Class: ArkUserDataModel.Object
	bool EnableDataRuntimeCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	void NotifyInt32Data(FString sKey);// 0x29bbbd0
	bool HasValidData(FString NodeFullPathName);// 0x29bb7b0

--------------------------------
Class: ArkSettingSystemDataManager.ArkResourceManagerBase.ArkManagerBase.Object
	delegate OnSettingSystemShowConflictKeyEvent;//[Offset: 0xb8, Size: 0x10]
	FName MenuName;//[Offset: 0xc8, Size: 0x8]
	FName HUDStateName;//[Offset: 0xd0, Size: 0x8]
	int MenuID;//[Offset: 0xd8, Size: 0x4]
	ArkUserDataModel* UserDataModel;//[Offset: 0xe0, Size: 0x8]
	FName SettingVersionNumStr;//[Offset: 0xec, Size: 0x8]
	ArkSettingPageData[] CurSettingItemConfigMap;//[Offset: 0xf8, Size: 0x10]
	ArkSettingSystemPageConfig[] AllConfigArray;//[Offset: 0x108, Size: 0x10]
	void OnRecvSaveInServerSettingsData(FString SettingSystemDataStr);// 0x294a880
	FString GetDataValueByKey(out const FName InKey);// 0x29491c0
	static ArkSettingSystemDataManager* Get(const Object* WorldContext);// 0x2948f10

--------------------------------
Class: ArkSettingPageData
	FText PageName;//[Offset: 0x0, Size: 0x18]
	ArkSettingDataBase*[] SettingDataArray;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ArkSettingDataBase.Object
	ArkUserDataModel* ModelRegistered;//[Offset: 0x68, Size: 0x8]
	FString CurDefaultNumStr;//[Offset: 0x70, Size: 0x10]
	class UserWidget* CurEntrySettingClass;//[Offset: 0x80, Size: 0x8]
	FText XSXTitleText;//[Offset: 0x88, Size: 0x18]
	FText PSTitleText;//[Offset: 0xa0, Size: 0x18]
	void OnDoRealDetailWorkInGame(FString InNewVal);// 0x305c9c0
	FString GetKeyNameStr();// 0x26f3090
	FName GetKeyName();// 0x29494c0

--------------------------------
Class: ArkSettingSystemPageConfig
	FText PageName;//[Offset: 0x0, Size: 0x18]
	FText PS5PageName;//[Offset: 0x18, Size: 0x18]
	FText XBoxPageName;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath SettingItemDataTable;//[Offset: 0x48, Size: 0x18]

--------------------------------
Class: ArkPreloadManagerGameInstance.ArkPreloadManagerBase.ArkManagerBase.Object
	XDNAContextPool* XDNAContextPool;//[Offset: 0xd0, Size: 0x8]
	CharacterXFaceConfig[] XFaceConfig;//[Offset: 0xd8, Size: 0x10]
	XDNAContext* GetXDNAContext(FName CharacterName);// 0x28fe9e0

--------------------------------
Class: ArkPreloadManagerBase.ArkManagerBase.Object
	PreloadAssets AlwaysPreloadAssets;//[Offset: 0x90, Size: 0x18]
	PreloadAssets PreloadAssets;//[Offset: 0xa8, Size: 0x18]
	Object*[] CachedObjects;//[Offset: 0xc0, Size: 0x10]

--------------------------------
Class: XDNAContext.Object
	static XDNAContext* SetupXRigLogic(Object* Outer, byte Character, FString pathFromContentFolderToDnaFile, FString path2rigParam, bool IsRelative, out bool IsLoaded);// 0xdcd270
	bool SetUIControllerValue(FString uiController, float Value);// 0xdcd140
	bool SetRigParamsFromFile(FString FilePath, bool IsRelative);// 0xdcd000
	bool SetRigParamsFromBytes(FString Data);// 0xdccf50
	static XDNAContext* MakeEmbeddedXDnaContext(Object* Outer);// 0xdcced0
	bool IsXDNAValid();// 0xdccea0
	FString[] GetAnimJointNames();// 0xdcce20
	bool AddXDnaDatabase(byte Character, FString pathFromContentFolderToDnaFile, bool IsRelative);// 0xdccca0
	ControllerInfo AddControllerInfoFromDy(FString dyEscFile);// 0xdccae0

--------------------------------
Class: ControllerInfo
	FString[] Names;//[Offset: 0x0, Size: 0x10]
	FString[] NameWithAttribute;//[Offset: 0x10, Size: 0x10]
	float[] Values;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: XDNAContextPool.Object
	<FName,XDNAContext*> XDNAContextMap;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: CharacterXFaceConfig
	FName CharacterName;//[Offset: 0x0, Size: 0x8]
	FString XDNADatabasePath;//[Offset: 0x8, Size: 0x10]
	FString XDNAParamPath;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: PreloadAssets
	enum PreloadRunEnv;//[Offset: 0x0, Size: 0x1]
	Object*[] CachedObjectConfigs;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ArkInteractionDataManager.ArkResourceManagerBase.ArkManagerBase.Object
	SoftObjectPath InteraciveObjectDataTablePath;//[Offset: 0xb8, Size: 0x18]
	SoftClassPath DefaultInteractionWidgetClassPath;//[Offset: 0xd0, Size: 0x18]
	<FName,ArkInteractiveObjectDataInfo> InteractiveObjectMap;//[Offset: 0xe8, Size: 0x50]
	class ArkInteractionWidget* DefaultInteractionWidgetClass;//[Offset: 0x138, Size: 0x8]
	FText DefaultInteractionText;//[Offset: 0x140, Size: 0x18]

--------------------------------
Class: ArkInteractiveObjectDataInfo.TableRowBase
	FName ObjectName;//[Offset: 0x8, Size: 0x8]
	float InteractPlayerCriticleRange;//[Offset: 0x10, Size: 0x4]
	float InteractPlayerCriticleOpenAngle;//[Offset: 0x14, Size: 0x4]
	CurveFloat* InteractPlayerCriticleDistanceFactorCurve;//[Offset: 0x18, Size: 0x8]
	float InteractPlayerFocusAngleLimit;//[Offset: 0x20, Size: 0x4]
	CurveFloat* InteractPlayerFocusAngleFactorCurve;//[Offset: 0x28, Size: 0x8]
	bool RequestViewIntersect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	float InteractSimulatedViewSegmentLength;//[Offset: 0x34, Size: 0x4]
	float InteractSimulatedSphereRadius;//[Offset: 0x38, Size: 0x4]
	CurveFloat* InteractSimulatedCapsuleHeightCurve;//[Offset: 0x40, Size: 0x8]
	CurveFloat* InteractSimulatedCapsuleRadiusCurve;//[Offset: 0x48, Size: 0x8]
	float InteractRadius;//[Offset: 0x50, Size: 0x4]
	float InteractDirectMinYaw;//[Offset: 0x54, Size: 0x4]
	float InteractDirectMaxYaw;//[Offset: 0x58, Size: 0x4]
	Vector InteractLocationOffset;//[Offset: 0x5c, Size: 0xc]
	bool bCheckInteractedByInFront;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	float HalfAngleRangeInFrontOfInteractActor;//[Offset: 0x6c, Size: 0x4]
	<enum,ArkInteractionTypeInfo> InteractionTypeMap;//[Offset: 0x70, Size: 0x50]
	Vector2D UIOffset;//[Offset: 0xc0, Size: 0x8]

--------------------------------
Class: ArkInteractionTypeInfo
	enum InteractionType;//[Offset: 0x0, Size: 0x1]
	enum InputType;//[Offset: 0x1, Size: 0x1]
	<enum,ArkInteractionAnimData> AnimDataInfoMap;//[Offset: 0x8, Size: 0x50]
	bool bUseCustomCameraConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	CameraConfig CustomCameraConfig;//[Offset: 0x60, Size: 0x50]
	CameraConfig CustomCameraConfigCrouched;//[Offset: 0xb0, Size: 0x50]
	bool bResetCameraWhenInteractionEnds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	bool AnimEndByNotify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 0x1]
	bool AnimEndInterruptable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x102, Size: 0x1]
	bool bAllowCrouchInteracting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x103, Size: 0x1]
	bool bForceCrouchInteracting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	bool bHoldInteracting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105, Size: 0x1]
	bool bEnableMultipleInteracting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x106, Size: 0x1]
	float InteractDuration;//[Offset: 0x108, Size: 0x4]
	float InteractCountDownDelay;//[Offset: 0x10c, Size: 0x4]
	float AllowMaxMoveSpeed;//[Offset: 0x110, Size: 0x4]
	enum MoveType;//[Offset: 0x114, Size: 0x1]
	float MoveDuration;//[Offset: 0x118, Size: 0x4]
	float MoveSpeed;//[Offset: 0x11c, Size: 0x4]
	Rotator RotateSpeed;//[Offset: 0x120, Size: 0xc]
	enum FocusType;//[Offset: 0x12c, Size: 0x1]
	FText InteractiveTitle;//[Offset: 0x130, Size: 0x18]
	LinearColor InteractiveTitleColor;//[Offset: 0x148, Size: 0x10]
	FText InteractiveDesc;//[Offset: 0x158, Size: 0x18]
	bool bUseDefaultWidgetClass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	class ArkInteractionWidget* WidgetClass;//[Offset: 0x178, Size: 0x8]
	FText InteractionTypeText;//[Offset: 0x180, Size: 0x18]
	enum AbilityType;//[Offset: 0x198, Size: 0x1]
	bool HideWeaponWhenHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x199, Size: 0x1]
	AkAudioEvent* AkEvent_InteractionStart;//[Offset: 0x1a0, Size: 0x28]
	AkAudioEvent* AkEvent_InteractionComplete;//[Offset: 0x1c8, Size: 0x28]
	AkAudioEvent* AkEvent_InteractionCancel;//[Offset: 0x1f0, Size: 0x28]

--------------------------------
Class: ArkInteractionAnimData
	AnimSequenceBase* SourceAnim;//[Offset: 0x0, Size: 0x8]
	AnimSequenceBase* SourceEndAnim;//[Offset: 0x8, Size: 0x8]
	AnimSequenceBase* SourceCancelAnim;//[Offset: 0x10, Size: 0x8]
	AnimSequenceBase* TargetAnim;//[Offset: 0x18, Size: 0x8]
	AnimSequenceBase* TargetEndAnim;//[Offset: 0x20, Size: 0x8]
	AnimSequenceBase* TargetCancelAnim;//[Offset: 0x28, Size: 0x8]
	enum PositionType;//[Offset: 0x30, Size: 0x1]
	float RelativeDistance;//[Offset: 0x34, Size: 0x4]
	Vector RelativeLocation;//[Offset: 0x38, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc]
	float HeightOffsetMin;//[Offset: 0x50, Size: 0x4]
	float HeightOffsetMax;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: ArkHavenDataManager.ArkResourceManagerBase.ArkManagerBase.Object
	FName CurrencyNotEnoughtConfirmAction;//[Offset: 0xb8, Size: 0x8]
	FName CurrencyNotEnoughtCancelAction;//[Offset: 0xc0, Size: 0x8]
	FText TextCurrencyNotEnoughTitle;//[Offset: 0xc8, Size: 0x18]
	FText TextCurrencyNotEnoughDefContent;//[Offset: 0xe0, Size: 0x18]
	FText TextCurrencyNotEnoughConfirm;//[Offset: 0xf8, Size: 0x18]
	FText TextCurrencyNotEnoughCancel;//[Offset: 0x110, Size: 0x18]
	int ItemCountNeedMore;//[Offset: 0x12c, Size: 0x4]
	ArkHavenRPCInterface* HavenRPCInterface;//[Offset: 0x138, Size: 0x8]
	ArkMallGoodInfo[] MallGoodsList;//[Offset: 0x5d0, Size: 0x10]
	ArkHavenMatchResult[] MatchResults;//[Offset: 0x5e0, Size: 0x10]
	ArkMetagameEvent[] AllMailBoxMetagameEvents;//[Offset: 0x5f0, Size: 0x10]
	ArkStatChangeEvent[] StatChangeMetagameEvents;//[Offset: 0x600, Size: 0x10]
	ArkUnlockEvent[] UnlockMetagameEvents;//[Offset: 0x610, Size: 0x10]
	ArkSurvivorRefreshEvent[] SurvivorRefreshMetagameEventss;//[Offset: 0x620, Size: 0x10]
	ArkSurvivorRecoveryEvent[] SurvivorRecoveryMetagameEvents;//[Offset: 0x630, Size: 0x10]
	ArkMailInfo[] MailList;//[Offset: 0x640, Size: 0x10]
	ArkMailAttachmentInfo[] MailAttachmentData;//[Offset: 0x650, Size: 0x10]
	<FString,ArkHavenInventoryItem> InventoryItems;//[Offset: 0x660, Size: 0x50]
	<FString,bool> FinishedOneTimeDialogueLines;//[Offset: 0x6b0, Size: 0x50]
	<int,int> LeftTimeToNextSurvivorRefresh;//[Offset: 0x700, Size: 0x50]
	<enum,int> FinishMatchCount;//[Offset: 0x750, Size: 0x50]
	<int,ArkLeaderboardFullInfo> LeaderboardInfoMap;//[Offset: 0x7a0, Size: 0x50]
	ArkUnlockedSyncData[] UnlockedSyncData;//[Offset: 0x7f0, Size: 0x10]
	SoftObjectPath HavenStatConfigTablePath;//[Offset: 0x800, Size: 0x18]
	<FName,ArkHavenProperty*> HavenStatPropertys;//[Offset: 0x818, Size: 0x50]
	<int,int> PromptData;//[Offset: 0x868, Size: 0x50]
	SoftObjectPath PromptTableConfigTablePath;//[Offset: 0x8b8, Size: 0x18]
	<int,int> PromptConfig;//[Offset: 0x8d0, Size: 0x50]
	DataTable* PromptDataTable;//[Offset: 0x920, Size: 0x8]
	SoftObjectPath HeroSurvivorConfigTablePath;//[Offset: 0x928, Size: 0x18]
	int TeamerDisplayTime;//[Offset: 0x940, Size: 0x4]
	int EnterGameSequenceTime;//[Offset: 0x944, Size: 0x4]
	SoftObjectPath GeneralAttachmentConfigTablePath;//[Offset: 0x9e8, Size: 0x18]
	ArkHavenGeneralAttachmentConfig[] GeneralAttachmentConfig;//[Offset: 0xa00, Size: 0x10]
	ArkHavenGeneralAttachmentConfig[] RandBags;//[Offset: 0xa10, Size: 0x10]
	int[] RandBagWeights;//[Offset: 0xa20, Size: 0x10]
	ArkHavenGeneralAttachmentConfig[] RandBagSlots;//[Offset: 0xa30, Size: 0x10]
	int[] RandBagSlotWeights;//[Offset: 0xa40, Size: 0x10]
	DataTable* GeneralAttachmentConfigTable;//[Offset: 0xa50, Size: 0x8]
	SoftObjectPath HeroSkinConfigTablePath;//[Offset: 0xa58, Size: 0x18]
	<int,ArkHavenHeroSkinConfig> HeroSkinConfigMap;//[Offset: 0xa70, Size: 0x50]
	DataTable* HeroSkinConfigTable;//[Offset: 0xac0, Size: 0x8]
	ArkPromptConfig[] AllPromptConfigs;//[Offset: 0xad0, Size: 0x10]
	SoftObjectPath DeliverItemConfigTablePath;//[Offset: 0xae0, Size: 0x18]
	ArkDeliverItemConfig[] DeliverItemConfig;//[Offset: 0xaf8, Size: 0x10]
	<int,ArkDeliverItemConfig> DeliverItemConfigByItemID;//[Offset: 0xb08, Size: 0x50]
	DataTable* DeliverItemConfigTable;//[Offset: 0xb58, Size: 0x8]
	SoftObjectPath ProfileAvatarConfigTablePath;//[Offset: 0xb60, Size: 0x18]
	<int,ArkProfileAvatarConfig> ProfileAvatarConfig;//[Offset: 0xb78, Size: 0x50]
	DataTable* ProfileAvatarDataTable;//[Offset: 0xbc8, Size: 0x8]
	SoftObjectPath RegistrationAreaConfigTablePath;//[Offset: 0xbd0, Size: 0x18]
	<int,ArkRegistrationAreaConfig> RegistrationAreaConfig;//[Offset: 0xbe8, Size: 0x50]
	DataTable* RegistrationAreaDataTable;//[Offset: 0xc38, Size: 0x8]
	SoftObjectPath MailConfigTablePath;//[Offset: 0xc40, Size: 0x18]
	<int,ArkMailConfig> MailConfigMap;//[Offset: 0xc58, Size: 0x50]
	DataTable* MailDataTable;//[Offset: 0xca8, Size: 0x8]
	SoftObjectPath AvailableTimeTablePath;//[Offset: 0xcb0, Size: 0x18]
	<int,ArkAvailableTimeConfig> AvailableTimeMap;//[Offset: 0xcc8, Size: 0x50]
	DataTable* AvailableTimeTable;//[Offset: 0xd18, Size: 0x8]
	SoftObjectPath ItemSourceConfigTablePath;//[Offset: 0xd20, Size: 0x18]
	ArkItemSourceConfig[] ItemSourceConfigs;//[Offset: 0xd38, Size: 0x10]
	DataTable* ItemSourceDataTable;//[Offset: 0xd48, Size: 0x8]
	SoftObjectPath HavenPlayerEffectConfigTablePath;//[Offset: 0xd50, Size: 0x18]
	<enum,ArkHavenPlayerEffectConfig> HavenPlayerEffectConfigMap;//[Offset: 0xd68, Size: 0x50]
	DataTable* HavenPlayerEffectDataTable;//[Offset: 0xdb8, Size: 0x8]
	<enum,ArkHavenPlayerEffect> HavenPlayerEffectMap;//[Offset: 0xdc0, Size: 0x50]
	int DefaultGameMapMode;//[Offset: 0xe10, Size: 0x4]
	bool IsPveGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe14, Size: 0x1]
	bool bCanTeleportToSyncedHeroInCinematicMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe15, Size: 0x1]
	<FString,bool> MenuFuncStatusMap;//[Offset: 0xe18, Size: 0x50]
	bool IsOfflineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe68, Size: 0x1]
	Vector LastMatchLocation;//[Offset: 0xe6c, Size: 0xc]
	void UpdateUnlockedSyncExp(int ItemId, int Exp);// 0x27910d0
	bool UpdateSurvivorType(FString SurvivorID, enum NewType);// 0x2790fe0
	bool UpdateSurvivorSuitID(FString SurvivorID, const int SuitID);// 0x2790ef0
	bool UpdateSurvivorState(FString SurvivorID, enum NewState, int Duration, int MedBaySlot);// 0x2790d90
	bool UpdateSurvivorArmBand(FString SurvivorID, int ArmBandID);// 0x278dd80
	void UpdatePlayerEffects(out const ArkHavenPlayerEffect InHavenPlayerEffect);// 0x2790be0
	void UpdateMenuFunc(FString MenuFunc, int status);// 0x2790ac0
	void UpdateMail(out const ArkMailInfo MailInfo);// 0x27909c0
	void UpdateItem(FString Serial, out const ArkHavenInventoryItem Item);// 0x2790840
	bool UpdateHavenUnlocks(out const FString[] UpdateUnlocks);// 0x2790760
	bool UpdateHavenStat(FName StatName, int NewValue);// 0x27906a0
	bool UnSetAllPerks(FString SurvivorID);// 0x27905f0
	bool TryLoadMatchInfoLocalSave();// 0x27905c0
	bool TryGetRegistrationAreaConfig(int InRoleAreaID, out ArkRegistrationAreaConfig OutRegistrationAreaConfig);// 0x2790480
	Texture2D* TryGetHeroHeadImage(int HeroID);// 0x27903b0
	void SetWaitRoomUpdateInfo(int64 UID, out const HavenWaitRoomUpdatePlayerInfo InData);// 0x2790200
	void SetWaitRoomInfoMate(out const ArkOnlinePlayer InData);// 0x2790030
	void SetWaitRoomInfo(out const ArkMatchWaitRoomInfo InData);// 0x278ff60
	void SetUserBaseInfo(out const ArkUserBaseInfo InData);// 0x278feb0
	void SetUnlockMainModeNum(int InNum);// 0x278fe30
	void SetTeamInfo(out const ArkOnlineTeam InData);// 0x278fca0
	void SetSurvivorInfoMap(out const <FString,ArkHavenSurvivorInfo> InData);// 0x278fb70
	void SetRoleAreaID(const int InRoleAreaID);// 0x278fa60
	void SetPVEGameMode(int Mode);// 0x278f6b0
	void SetPlayerSurvivorID(FString SurvivorID);// 0x278f970
	void SetPlayerName(FString InData);// 0x278f880
	bool SetPerk(FString SurvivorID, int PerkID, int Level, int Slot);// 0x278f730
	void SetOuterGameFlowByServer(int InData);// 0x278f630
	bool SetOuterGameFlow(enum InType);// 0x278f5a0
	void SetOfflineMode(bool bIsOffline);// 0x278f520
	void SetMatchmakingProgress(int PlayerNum, int MaxPlayerNum);// 0x278f2b0
	void SetMatchInfoLocalSaveIsVR();// 0x278f290
	void SetMatchInfoLocalSave(enum Mode, bool Win, int LevelID);// 0x278f190
	void SetMatchCount(enum Mode, int Count);// 0x278f0d0
	void SetMailAttachmentData(ArkMailAttachmentInfo[] Attachments);// 0x278ef40
	void SetLeftTimeToNextSurvivorRefresh(int RefreshID, int InTime);// 0x278ee80
	void SetLeaderboardTopN(enum Type, int ModeKey, out const ArkLeaderboardNode[] InData);// 0x278ed20
	void SetLeaderboardMyInfo(enum Type, int ModeKey, out const ArkLeaderboardNode InData);// 0x278ebd0
	void SetInMatchEID(FString InEID);// 0x278eb30
	void SetHavenPlayerEffects(out ArkHavenPlayerEffect[] InHavenPlayerEffects);// 0x278e9c0
	void SetGeneralAttachmentAttribute(out FString InAttribute, int AttachmentItemID, int SlotID);// 0x278e8a0
	void SetG6ZoneID(int InData);// 0x278e820
	void SetFinishedOneTimeDialogueLine(FString LineName);// 0x278e780
	void SetConnectURL(FString InUrl, FString MatchEID);// 0x278e690
	void SetChiefInfo(out const ArkHavenSurvivorInfo InData);// 0x278e4c0
	void SetChannelID(int InData);// 0x278e440
	void SetCanTeleportToSyncedHeroInCinematicModeState(bool bInCanTeleport);// 0x278e1b0
	void SetBaseInfo(out const ArkHavenBaseInfo InData);// 0x278de70
	bool SetArmBandID(FString SurvivorID, int InArmBandID);// 0x278dd80
	void SetAreaID(int InData);// 0x278dd00
	void ResetAllData();// 0x278dcc0
	void RemoveSurvivor(FString SurvivorID);// 0x278dc20
	void RemoveMetaGameEvent(enum Type, int MessageGSID);// 0x278db60
	void RemoveItem(FString Serial);// 0x278dac0
	void OnUserLogin();// 0x278d9c0
	void OnHotFixManagerDoUnInit();// 0x278d9a0
	void OnHotFixManagerDoInit();// 0x278d980
	void OnConfirmCurrencyNotEnough();// 0x278d940
	void OnCancelCurrencyNotEnough();// 0x278d920
	void OnAvailableTimeDataTableModified(int DataTableID, FString DataTableName, DataTable* DataTable);// 0x278d810
	void ModifyPromptCount(int ID, int Count);// 0x278d750
	bool IsHeroLocked(int InHeroID);// 0x278d660
	bool IsHeroHideInGame(int HeroID);// 0x278d5d0
	bool IsChief(FString SurvivorID);// 0x278d520
	void HavenDataReady(enum InDataType);// 0x278d1a0
	bool HasItemSource(int ItemId);// 0x278d110
	bool HasFinishedPrompt(int ID);// 0x278d080
	int GetWareHouseItemCountByItemID(const int inItemID);// 0x278cf50
	bool GetWaitRoomMateInfo(int64 UID, out ArkOnlinePlayer outData);// 0x278cd50
	ArkMatchWaitRoomInfo GetWaitRoomInfo();// 0x278cd20
	ArkUserBaseInfo GetUserBaseInfo();// 0x278ccf0
	ArkUnlockedSyncData[] GetUnlockedSyncData();// 0x278cbd0
	int[] GetUnlockedArmbands();// 0x278cb90
	int GetTotalMatchCount();// 0x278cb30
	int GetTimeTillMatchWaitTime(ArkHavenRPCInterface* InHavenRPCInterface);// 0x278caa0
	ArkOnlineTeam GetTeamInfo();// 0x278ca30
	int GetSurvivorNum();// 0x278ca00
	<FString,ArkHavenSurvivorInfo> GetSurvivorInfoMapRef();// 0x278c9d0
	<FString,ArkHavenSurvivorInfo> GetSurvivorInfoMap();// 0x278c9d0
	bool GetSurvivorInfo(FString SurvivorID, out ArkHavenSurvivorInfo OutSurvivorInfo);// 0x278c7b0
	<int,int> GetSurvivorIndexMap();// 0x278c6b0
	int GetSurvivorIndexByHeroID(int InHeroID);// 0x278c620
	void GetSurvivorIDsByType(enum InType, out FString[] OutSurvivorsIDs);// 0x278c510
	void GetSurvivorIDs(out FString[] OutSurvivorsIDs);// 0x278c440
	int GetSurvivorCapacity();// 0x278c410
	int GetStartingHeroID();// 0x278c3e0
	void GetShuttleRushMatchCount(out int Count, out int OutUnlockMainModeNum);// 0x278c300
	int GetRoleAreaID();// 0x278c2e0
	bool GetPVEGameMode();// 0x278bcc0
	<int,int> GetPromptConfigArray();// 0x278c2a0
	FString GetPlayerUIDAsStringInt64();// 0x278c220
	FString GetPlayerUIDAsString();// 0x278c1a0
	void GetPlayerSurvivorID(out FString SurvivorID);// 0x278c0f0
	FString GetPlayerName();// 0x278c0c0
	int64 GetPlayerId();// 0x278c0a0
	int GetPlayerHavenProperty(out const ArkHavenStatPropertyRef HavenStat, out ArkHavenProperty* OutHavenProperty);// 0x278bfa0
	bool GetPerkSet(FString SurvivorID, int EffectiveAtLevel, out int[] OutPerkSet);// 0x278bce0
	bool GetPerks(FString SurvivorID, out ArkPerkTree OutPerk);// 0x278be30
	bool GetOfflineMode();// 0x278bca0
	ArkMailInfo GetNewMail();// 0x278bbc0
	int GetMoreMatchTimes();// 0x278bb90
	<FString,bool> GetMenuFuncMap();// 0x278ba80
	ArkHavenMatchResult[] GetMatchResults();// 0x278b850
	bool GetMatchmakingProgress(out int PlayerNum, out int MaxPlayerNum);// 0x278b990
	int GetMatchCountByMapMode(enum Mode);// 0x278b7c0
	ArkMallGoodInfo[] GetMallGoodsList();// 0x278b660
	ArkMailInfo[] GetMails();// 0x278b540
	ArkMailConfig GetMailConfig(int MailID);// 0x278b430
	ArkMailAttachmentInfo[] GetMailAttachmentData();// 0x278b3b0
	void GetLeftTimeToNextSurvivorRefresh(out <int,float> OutLeftTime);// 0x278b220
	void GetLeaderboardFullInfo(enum Type, int ModeKey, out ArkLeaderboardFullInfo outData);// 0x278b0a0
	ArkItemSourceConfig[] GetItemSourceConfigs();// 0x278afa0
	bool GetItemDecompositionItems(int ItemId, out ArkGeneralItemCfg[] Items);// 0x278ae90
	void GetInventoryItems(out <FString,ArkHavenInventoryItem> OutItems);// 0x278ad80
	FString GetInMatchEID();// 0x278ad40
	int[] GetHeroOwnedSkinList(int InHeroID);// 0x278ac70
	int GetHeroIDBySuitItemID(int InSuitItemID);// 0x278abe0
	int GetHeroEquippedSkinItemID(int InHeroID);// 0x278ab50
	int GetHeroEquippedBagItemID(int InHeroID);// 0x278aac0
	int GetHavenStatByStatName(FName StatName);// 0x278aa30
	bool GetHavenStat(out const ArkHavenStatPropertyRef StatPropertyRef, out int OutStat);// 0x278a940
	<enum,ArkHavenPlayerEffect> GetHavenPlayerEffects();// 0x278a830
	bool GetHavenPlayerEffectByType(out ArkHavenPlayerEffectConfig OutPlayerEffectConfig, enum Type);// 0x278a6b0
	int GetG6ZoneID();// 0x278a690
	int GetDefaultGameMapMode();// 0x278a5b0
	int GetCurrentHeroID();// 0x278a550
	int GetCurrencyItemCount(const int inItemID);// 0x278a4c0
	void GetChiefInfo(out ArkHavenSurvivorInfo OutSurvivorInfo);// 0x278a2b0
	void GetChiefID(out FString ChiefID);// 0x278a200
	int GetChannelID();// 0x278a1e0
	int GetBlueprintFragments();// 0x278a180
	ArkHavenBaseInfo GetBaseInfo();// 0x278a150
	FString GetAvatarStringByItemIDWithSkinPendant(int HeroItemID, int SkinItemID, int Slot, int PendantItemID);// 0x2789fb0
	FString GetAvatarStringByItemIDWithSkin(int HeroItemID, int SkinItemID);// 0x2789eb0
	FString GetAvatarStringByItemIDWithBagPendant(int HeroItemID, int BagItemID, int Slot, int PendantItemID);// 0x2789d10
	FString GetAvatarStringByItemIDWithBag(int HeroItemID, int BagItemID);// 0x2789c10
	FString GetAvatarStringByItemID(int HeroItemID);// 0x2789b40
	ArkProfileAvatarConfig GetAvatarConfigByID(int ID);// 0x2789a40
	int GetArmBandID(FString SurvivorID);// 0x2789990
	void GetArkUnlockEvent(int MessageGSID, out ArkUnlockEvent OutEvent);// 0x27898b0
	void GetArkSurvivorRefreshEvent(int MessageGSID, out ArkSurvivorRefreshEvent OutEvent);// 0x27897a0
	void GetArkSurvivorRecoveryEvent(int MessageGSID, out ArkSurvivorRecoveryEvent OutEvent);// 0x27896b0
	void GetArkStatChangeEvent(int MessageGSID, out ArkStatChangeEvent OutEvent);// 0x27895d0
	void GetArkMetagameEvents(out ArkMetagameEvent[] OutIncomingEvents);// 0x2789520
	int GetAreaID();// 0x2789500
	void GetAllSurvivors(out ArkHavenSurvivorInfo[] OutSurvivors);// 0x2789380
	static ArkHavenDataManager* Get(const Object* WorldContextObject);// 0x2789300
	int FindOrAddSurvivorIndexForHeroID(int InHeroID);// 0x27891d0
	bool EmptyPerkSet(FString SurvivorID);// 0x2789120
	void DoConnectDS(Object* WorldContextObject);// 0x27890a0
	void ClearMetaGameEventsOnlyInAllArray();// 0x2789080
	void ClearMatchResult();// 0x2789060
	void ClearMailList();// 0x2789040
	void ClearGoodsList();// 0x2789020
	bool CheckSingleCurrencyItemEnough(int ItemId, int ItemCount, bool bDialogNotice);// 0x2788f00
	bool CheckOuterGameFlow(enum InType);// 0x2788e70
	bool CheckHavenUnlock(out const ArkHavenUnlockPropertyRef UnlockPropertyRef);// 0x2788dc0
	bool CheckFinishedOneTimeDialogueLine(FString LineName);// 0x2788d10
	bool CheckDataReady(enum InDataType);// 0x2788c80
	bool CheckCurrencyItemsEnough(out const <int,int> ItemIDCounts, bool bDialogNotice);// 0x2788a90
	bool CheckCommodityCanBuy(const int InCommodityID);// 0x2788a00
	bool CheckBitHavenStat(out const ArkHavenStatPropertyRef StatPropertyRef, int InBitEnum);// 0x2788910
	bool CheckAllDataReady();// 0x27888e0
	bool CanTeleportToSyncedHeroInCinematicModeState();// 0x2788380
	void AddWaitRoomProbedSafeHouse(Vector2D ProbedPoint);// 0x27881c0
	void AddUnlockedSyncData(int ItemId, int Exp, int ParentItemID);// 0x27880c0
	void AddUnlockedArmband(int ArmBandID);// 0x2788040
	void AddSurvivor(out const ArkHavenSurvivorInfo SurvivorInfo);// 0x2787e70
	bool AddPerkSet(FString SurvivorID, int EffectiveAtLevel, int InPerkSetID);// 0x2787d60
	void AddNewMail(out const ArkMailInfo NewMail);// 0x2787c60
	void AddMetaGameEvent(int MessageGSID, enum EventType);// 0x2787ba0
	void AddMatchResult(out const ArkHavenMatchResult InMatchResult);// 0x2787870
	void AddItem(FString Serial, out const ArkHavenInventoryItem Item);// 0x2787770
	void AddGoodInfo(out const ArkMallGoodInfo InGoodInfo);// 0x27876c0
	void AddArkUnlockEvent(out const ArkUnlockEvent Event);// 0x27875a0
	void AddArkSurvivorRefreshEvent(out const ArkSurvivorRefreshEvent Event);// 0x27874c0
	void AddArkSurvivorRecoveryEvent(out const ArkSurvivorRecoveryEvent Event);// 0x2787410
	void AddArkStatChangeEvent(out const ArkStatChangeEvent Event);// 0x2787370

--------------------------------
Class: ArkHavenPlayerEffect
	enum Type;//[Offset: 0x0, Size: 0x1]
	<int,float> ItemEnchantMap;//[Offset: 0x8, Size: 0x50]
	int[] EffectIDs;//[Offset: 0x58, Size: 0x10]
	int Times;//[Offset: 0x68, Size: 0x4]
	int EnchantLevel;//[Offset: 0x6c, Size: 0x4]
	int64 RefreshTime;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: ArkMallGoodInfo.TableRowBase
	int GoodID;//[Offset: 0x8, Size: 0x4]
	int DisplayItemID;//[Offset: 0xc, Size: 0x4]
	FString DisplayItemParamString;//[Offset: 0x10, Size: 0x10]
	enum Type;//[Offset: 0x20, Size: 0x1]
	FName Category;//[Offset: 0x24, Size: 0x8]
	FName SubCategory;//[Offset: 0x2c, Size: 0x8]
	PaperSprite* SubCategoryIcon;//[Offset: 0x38, Size: 0x28]
	ArkHavenStatValueIncrementOperation[] price;//[Offset: 0x60, Size: 0x10]
	FText Name;//[Offset: 0x70, Size: 0x18]
	bool bShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	bool bRecommend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1]
	FText Desc;//[Offset: 0x90, Size: 0x18]
	int HavenLevelLimit;//[Offset: 0xa8, Size: 0x4]
	int ItemId;//[Offset: 0xac, Size: 0x4]

--------------------------------
Class: ArkHavenStatValueIncrementOperation
	ArkHavenStatPropertyRef Stat;//[Offset: 0x0, Size: 0xc]
	int Value;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ArkHavenMatchResult
	enum FightResult;//[Offset: 0x0, Size: 0x1]
	int BlueprintFragmentsGained;//[Offset: 0x4, Size: 0x4]
	<FName,int> GotHavenStats;//[Offset: 0x8, Size: 0x50]
	int PrevXP;//[Offset: 0x58, Size: 0x4]
	int XPGained;//[Offset: 0x5c, Size: 0x4]
	int PrevLevel;//[Offset: 0x60, Size: 0x4]
	int NewLevel;//[Offset: 0x64, Size: 0x4]
	int PreToken;//[Offset: 0x68, Size: 0x4]
	int TokenGained;//[Offset: 0x6c, Size: 0x4]
	int EncryptedDrivePve;//[Offset: 0x70, Size: 0x4]
	int[] ClothingPartsUnlocked;//[Offset: 0x78, Size: 0x10]
	ArkHavenMatchResultSurvivorInfo[] SurvivorUpdates;//[Offset: 0x88, Size: 0x10]
	ArkHavenMatchResultWeaponInfo[] WeaponUpdates;//[Offset: 0x98, Size: 0x10]
	ArkHavenMatchResultWeaponProficiencyInfo[] WeaponProficiencyUpdates;//[Offset: 0xa8, Size: 0x10]

--------------------------------
Class: ArkHavenMatchResultSurvivorInfo
	FText FirstName;//[Offset: 0x0, Size: 0x18]
	FText LastName;//[Offset: 0x18, Size: 0x18]
	int ClassID;//[Offset: 0x30, Size: 0x4]
	int IconID;//[Offset: 0x34, Size: 0x4]
	ArkPerkTree Perks;//[Offset: 0x38, Size: 0x30]
	enum SurvivorChange;//[Offset: 0x68, Size: 0x1]
	FString SurvivorID;//[Offset: 0x70, Size: 0x10]
	int ArmBandID;//[Offset: 0x80, Size: 0x4]

--------------------------------
Class: ArkHavenMatchResultWeaponInfo
	FString UID;//[Offset: 0x0, Size: 0x10]
	int ItemId;//[Offset: 0x10, Size: 0x4]
	int OldDurability;//[Offset: 0x14, Size: 0x4]
	int NewDurability;//[Offset: 0x18, Size: 0x4]
	int MaxDurability;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ArkHavenMatchResultWeaponProficiencyInfo
	int WeaponTypeID;//[Offset: 0x0, Size: 0x4]
	int OldMasterLv;//[Offset: 0x4, Size: 0x4]
	int NewMasterLv;//[Offset: 0x8, Size: 0x4]
	int OldMasterLvScore;//[Offset: 0xc, Size: 0x4]
	int NewMasterLvScore;//[Offset: 0x10, Size: 0x4]
	int OldNextLvScore;//[Offset: 0x14, Size: 0x4]
	int NewNextLvScore;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ArkMetagameEvent
	int MessageGSID;//[Offset: 0x0, Size: 0x4]
	enum EventType;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: ArkStatChangeEvent.ArkMetagameEvent
	FName StatName;//[Offset: 0x8, Size: 0x8]
	int OldValue;//[Offset: 0x10, Size: 0x4]
	int NewValue;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ArkUnlockEvent.ArkMetagameEvent
	FName UnlockName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ArkSurvivorRefreshEvent.ArkMetagameEvent
	FString[] SurvivorIDs;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ArkSurvivorRecoveryEvent.ArkMetagameEvent
	FString SurvivorID;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ArkMailInfo
	int Index;//[Offset: 0x0, Size: 0x4]
	enum Type;//[Offset: 0x4, Size: 0x1]
	FString Title;//[Offset: 0x8, Size: 0x10]
	FString Content;//[Offset: 0x18, Size: 0x10]
	bool bIsRead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bIsTaken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	int Time;//[Offset: 0x2c, Size: 0x4]
	int MailID;//[Offset: 0x30, Size: 0x4]
	ArkMailAttachmentInfo[] Attachments;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: ArkMailAttachmentInfo
	int ID;//[Offset: 0x0, Size: 0x4]
	int Count;//[Offset: 0x4, Size: 0x4]
	FString Attributes;//[Offset: 0x8, Size: 0x10]
	bool bIsTaken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	int ConvertedItemID;//[Offset: 0x1c, Size: 0x4]
	int ConvertedItemCount;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: ArkHavenInventoryItem
	FString Serial;//[Offset: 0x0, Size: 0x10]
	int ItemId;//[Offset: 0x10, Size: 0x4]
	int ItemCount;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ArkRegistrationAreaConfig.TableRowBase
	int RegistrationAreaID;//[Offset: 0x8, Size: 0x4]
	FString RegistrationAreaName;//[Offset: 0x10, Size: 0x10]
	FString RegistrationAreaStandardName;//[Offset: 0x20, Size: 0x10]
	FString CurrencyType;//[Offset: 0x30, Size: 0x10]
	FString AreaConfigFileNameList;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: ArkOnlinePlayer
	int64 UID;//[Offset: 0x0, Size: 0x8]
	FString Name;//[Offset: 0x8, Size: 0x10]
	int HavenLevel;//[Offset: 0x18, Size: 0x4]
	int AvatarIcon;//[Offset: 0x1c, Size: 0x4]
	ArkHavenSurvivorInfo NowSurvivor;//[Offset: 0x20, Size: 0x98]
	int[] PreSetWeapons;//[Offset: 0xb8, Size: 0x10]
	ArkWeaponPluginsInfo[] WeaponSet;//[Offset: 0xc8, Size: 0x10]
	enum State;//[Offset: 0xd8, Size: 0x1]
	<int,ArkEquippedPendantData> PendantDataMap;//[Offset: 0xe0, Size: 0x50]
	bool bTeamReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]

--------------------------------
Class: ArkEquippedPendantData
	<int,int> EquippedData;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: ArkMatchWaitRoomInfo
	ArkOnlinePlayer[] MateList;//[Offset: 0x0, Size: 0x10]
	ArkMatchTeamStartPoint StartPoint;//[Offset: 0x10, Size: 0x30]
	ArkMatchShipLandRange FirstLandShip;//[Offset: 0x40, Size: 0x10]
	Vector2D[] KeyResourcePoints;//[Offset: 0x50, Size: 0x10]
	Vector2D[] SafeHousesLocUV;//[Offset: 0x60, Size: 0x10]
	ArkGamePoiInfo[] PoiList;//[Offset: 0x70, Size: 0x10]
	int MatchFoundStartTime;//[Offset: 0x80, Size: 0x4]
	int WaitRoomTime;//[Offset: 0x84, Size: 0x4]
	int64[] TeamIDIndex;//[Offset: 0x88, Size: 0x10]
	<int64,HavenWaitRoomUpdatePlayerInfo> UpdateMap;//[Offset: 0x98, Size: 0x50]
	enum MapMode;//[Offset: 0xe8, Size: 0x1]
	int LevelID;//[Offset: 0xec, Size: 0x4]
	int CurrentExp;//[Offset: 0xf0, Size: 0x4]
	int OpenedTimes;//[Offset: 0xf4, Size: 0x4]
	int HiddenSuppressLevelMax;//[Offset: 0xf8, Size: 0x4]
	int SuppressLevel;//[Offset: 0xfc, Size: 0x4]
	int[] ExtraBonusIDs;//[Offset: 0x100, Size: 0x10]
	int[] XPCosts;//[Offset: 0x110, Size: 0x10]

--------------------------------
Class: ArkMatchTeamStartPoint
	FText Name;//[Offset: 0x0, Size: 0x18]
	int Difficulty;//[Offset: 0x18, Size: 0x4]
	Vector2D LocationUV;//[Offset: 0x1c, Size: 0x8]
	Vector Location;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: ArkMatchShipLandRange
	Vector2D Range;//[Offset: 0x0, Size: 0x8]
	Vector2D CenterLocationUV;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ArkGamePoiInfo
	Vector2D Location;//[Offset: 0x0, Size: 0x8]
	FText Name;//[Offset: 0x8, Size: 0x18]
	enum Type;//[Offset: 0x20, Size: 0x1]

--------------------------------
Class: ArkLeaderboardFullInfo
	ArkLeaderboardNode MyInfo;//[Offset: 0x0, Size: 0x38]
	ArkLeaderboardNode[] TopN;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: ArkLeaderboardNode
	FString Name;//[Offset: 0x0, Size: 0x10]
	int Score;//[Offset: 0x10, Size: 0x4]
	int Timestamp;//[Offset: 0x14, Size: 0x4]
	int extra;//[Offset: 0x18, Size: 0x4]
	int64 UID;//[Offset: 0x20, Size: 0x8]
	FString OnlineID;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: ArkUnlockedSyncData
	int ItemId;//[Offset: 0x0, Size: 0x4]
	int Exp;//[Offset: 0x4, Size: 0x4]
	int[] UnlockedChildren;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ArkHavenGeneralAttachmentConfig.TableRowBase
	int AttachmentItemID;//[Offset: 0x8, Size: 0x4]
	int OwnerItemID;//[Offset: 0xc, Size: 0x4]
	enum OwnerItemType;//[Offset: 0x10, Size: 0x1]
	int OwnerItemSubType;//[Offset: 0x14, Size: 0x4]
	bool IsDefaultEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	int[] DefaultEquipSlot;//[Offset: 0x20, Size: 0x10]
	int MinSlotID;//[Offset: 0x30, Size: 0x4]
	int MaxSlotID;//[Offset: 0x34, Size: 0x4]
	bool IsMultiEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	ArkCommonUnlockDesc UnlockMethod;//[Offset: 0x40, Size: 0x70]
	ArkHavenAttachmentUnlockReward[] RewardList;//[Offset: 0xb0, Size: 0x10]
	int SortKey;//[Offset: 0xc0, Size: 0x4]
	int RandWeight;//[Offset: 0xc4, Size: 0x4]

--------------------------------
Class: ArkCommonUnlockDesc.TableRowBase
	bool bDefaultUnlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	ArkCostUnlockConfig CostUnlock;//[Offset: 0x10, Size: 0x20]
	int OwnUnlock;//[Offset: 0x30, Size: 0x4]
	ArkCommonEventList ConditionUnlock;//[Offset: 0x38, Size: 0x20]
	FText UnlockDescOverride;//[Offset: 0x58, Size: 0x18]

--------------------------------
Class: ArkCostUnlockConfig.TableRowBase
	enum Op;//[Offset: 0x8, Size: 0x1]
	ArkCostConfig[] Costs;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ArkCostConfig
	int CostID;//[Offset: 0x0, Size: 0x4]
	int CostCount;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ArkHavenAttachmentUnlockReward.TableRowBase
	int ItemId;//[Offset: 0x8, Size: 0x4]
	int ItemQuantity;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ArkHavenHeroSkinConfig.TableRowBase
	int ID;//[Offset: 0x8, Size: 0x4]
	int HeroID;//[Offset: 0xc, Size: 0x4]
	int SuitID;//[Offset: 0x10, Size: 0x4]
	bool HideInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	int SortKey;//[Offset: 0x18, Size: 0x4]
	AnimMontage* PerformAnimation;//[Offset: 0x20, Size: 0x8]
	ArkCommonUnlockDesc UnlockMethod;//[Offset: 0x28, Size: 0x70]
	int[] PerkIDList;//[Offset: 0x98, Size: 0x10]
	<enum,FName> CameraViewNameMap;//[Offset: 0xa8, Size: 0x50]
	int BotRandWeight;//[Offset: 0xf8, Size: 0x4]

--------------------------------
Class: ArkPromptConfig.TableRowBase
	int PromptID;//[Offset: 0x8, Size: 0x4]
	class ArkPromptBaseEvent* PromptClass;//[Offset: 0x10, Size: 0x8]
	int Times;//[Offset: 0x18, Size: 0x4]
	float AutoFinishInternal;//[Offset: 0x1c, Size: 0x4]
	bool bNeedQueue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	FText Title;//[Offset: 0x28, Size: 0x18]
	FText Desc;//[Offset: 0x40, Size: 0x18]
	FText Desc_Gamepad;//[Offset: 0x58, Size: 0x18]
	int PIPTextrueIndex;//[Offset: 0x70, Size: 0x4]
	FText PIPName;//[Offset: 0x78, Size: 0x18]
	bool bClosebyVO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	FName DialogEventName;//[Offset: 0x94, Size: 0x8]
	Texture2D* SoftTexture2D;//[Offset: 0xa0, Size: 0x28]
	bool bClosebyVideo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool bLoopVideo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	FileMediaSource* SoftVideo;//[Offset: 0xd0, Size: 0x28]

--------------------------------
Class: ArkPromptBaseEvent.Object
	bool bIsAutoFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	float AutoFinishTime;//[Offset: 0x30, Size: 0x4]
	float MaxAutoFinishTime;//[Offset: 0x34, Size: 0x4]
	float DelayActiveTime;//[Offset: 0x3c, Size: 0x4]
	bool bNeedQueue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bClosebyVO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool bClosebyVideo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
	void TryFinish(bool bSpecialFinish);// 0x290adf0
	void TryActivate();// 0x2875ed0
	void DelayTryActiveHandle();// 0x1086080
	void DelayTryActive(float DelayTime);// 0x2909f80

--------------------------------
Class: FileMediaSource.BaseMediaSource.MediaSource.Object
	FString FilePath;//[Offset: 0x88, Size: 0x10]
	bool PrecacheFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	void SetFilePath(FString Path);// 0x42c5e00

--------------------------------
Class: BaseMediaSource.MediaSource.Object
	FName PlayerName;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: MediaSource.Object
	bool Validate();// 0x12c2a30
	void SetMediaOptionString(out const FName Key, FString Value);// 0x42c61a0
	void SetMediaOptionInt64(out const FName Key, int64 Value);// 0x42c60d0
	void SetMediaOptionFloat(out const FName Key, float Value);// 0x42c6000
	void SetMediaOptionBool(out const FName Key, bool Value);// 0x42c5f30
	FString GetUrl();// 0x106a700

--------------------------------
Class: ArkDeliverItemConfig.TableRowBase
	int ItemId;//[Offset: 0x8, Size: 0x4]
	int DeliverID;//[Offset: 0xc, Size: 0x4]
	ArkGeneralItemCfg[] ConversionItems;//[Offset: 0x10, Size: 0x10]
	ArkGeneralItemCfg[] DecompositionItems;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: ArkGeneralItemCfg.TableRowBase
	int ItemId;//[Offset: 0x8, Size: 0x4]
	int ItemQuantity;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ArkProfileAvatarConfig.TableRowBase
	int ID;//[Offset: 0x8, Size: 0x4]
	enum Type;//[Offset: 0xc, Size: 0x1]
	Texture2D* icon;//[Offset: 0x10, Size: 0x28]
	bool bDefaultEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	int SortKey;//[Offset: 0x3c, Size: 0x4]
	FText UnlockDesc;//[Offset: 0x40, Size: 0x18]
	ArkCommonUnlockDesc UnlockMethod;//[Offset: 0x58, Size: 0x70]

--------------------------------
Class: ArkMailConfig.TableRowBase
	int MailID;//[Offset: 0x8, Size: 0x4]
	enum MailType;//[Offset: 0xc, Size: 0x1]
	FText MailTitle;//[Offset: 0x10, Size: 0x18]
	FText MailContent;//[Offset: 0x28, Size: 0x18]
	ArkMailAttachmentInfo[] Attachments;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: ArkAvailableTimeConfig.TableRowBase
	int TimeID;//[Offset: 0x8, Size: 0x4]
	FString BeginTime;//[Offset: 0x10, Size: 0x10]
	FString EndTime;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: ArkItemSourceConfig.TableRowBase
	int ItemId;//[Offset: 0x8, Size: 0x4]
	enum Type;//[Offset: 0xc, Size: 0x1]
	int[] LevelIDs;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ArkHavenPlayerEffectConfig.TableRowBase
	int ID;//[Offset: 0x8, Size: 0x4]
	enum Type;//[Offset: 0xc, Size: 0x1]
	int Duration;//[Offset: 0x10, Size: 0x4]
	int Times;//[Offset: 0x14, Size: 0x4]
	FString ConfigStr;//[Offset: 0x18, Size: 0x10]
	bool bShowInEffectWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	Texture2D* DisplayIcon;//[Offset: 0x30, Size: 0x28]
	FText EffectDesc;//[Offset: 0x58, Size: 0x18]

--------------------------------
Class: ArkUserBaseInfo
	FString UserNickName;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ArkOnlineTeam
	ArkOnlinePlayer[] MateList;//[Offset: 0x0, Size: 0x10]
	FString TeamId;//[Offset: 0x10, Size: 0x10]
	int64 LeaderUID;//[Offset: 0x20, Size: 0x8]
	int UpdateTime;//[Offset: 0x28, Size: 0x4]
	enum State;//[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: ArkHavenBaseInfo
	int64 UID;//[Offset: 0x0, Size: 0x8]
	FString PlayerName;//[Offset: 0x8, Size: 0x10]
	<FName,int> Stats;//[Offset: 0x18, Size: 0x50]
	ArkHavenWeaponSet WeaponSet;//[Offset: 0x68, Size: 0x48]
	ArkHavenWeaponInfo[] WeaponBag;//[Offset: 0xb0, Size: 0x10]
	int WeaponBagCapacity;//[Offset: 0xc0, Size: 0x4]
	int[] WeaponBlueprintUnlocks;//[Offset: 0xc8, Size: 0x10]
	int[] WeaponSkinUnlocks;//[Offset: 0xd8, Size: 0x10]
	<int,int> TypeWeaponSkin;//[Offset: 0xe8, Size: 0x50]
	ArkWeaponTypeStatResult[] WeaponStats;//[Offset: 0x138, Size: 0x10]
	FName[] Unlocks;//[Offset: 0x148, Size: 0x10]
	FString PlayerSurvivorID;//[Offset: 0x158, Size: 0x10]
	FString ChiefID;//[Offset: 0x168, Size: 0x10]
	int[] UnlockedArmbands;//[Offset: 0x178, Size: 0x10]
	int OuterGameFlow;//[Offset: 0x188, Size: 0x4]
	int[] PurchasedGoods;//[Offset: 0x190, Size: 0x10]

--------------------------------
Class: ArkHavenWeaponSet
	int PrimaryID;//[Offset: 0x0, Size: 0x4]
	FString PrimaryUID;//[Offset: 0x8, Size: 0x10]
	int PistolID;//[Offset: 0x18, Size: 0x4]
	FString PistolUID;//[Offset: 0x20, Size: 0x10]
	int MeleeID;//[Offset: 0x30, Size: 0x4]
	FString MeleeUID;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: ArkHavenWeaponInfo
	FString UID;//[Offset: 0x0, Size: 0x10]
	int ItemId;//[Offset: 0x10, Size: 0x4]
	int Durability;//[Offset: 0x14, Size: 0x4]
	int MaxDurability;//[Offset: 0x18, Size: 0x4]
	int AccessorySize;//[Offset: 0x1c, Size: 0x4]
	int[] AccessoryList;//[Offset: 0x20, Size: 0x10]
	enum Type;//[Offset: 0x30, Size: 0x1]

--------------------------------
Class: ArkWeaponTypeStatResult
	int WeaponTypeID;//[Offset: 0x0, Size: 0x4]
	int MasterLv;//[Offset: 0x4, Size: 0x4]
	int MaxMasterLv;//[Offset: 0x8, Size: 0x4]
	int MasterCurrentLvScore;//[Offset: 0xc, Size: 0x4]
	int MasterNextLvScore;//[Offset: 0x10, Size: 0x4]
	ArkWeaponTypeSingleStat[] Stats;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ArkWeaponTypeSingleStat
	enum Key;//[Offset: 0x0, Size: 0x1]
	int Total;//[Offset: 0x4, Size: 0x4]
	int Max;//[Offset: 0x8, Size: 0x4]
	int MaxTime;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ArkHavenUnlockPropertyRef.ArkHavenPropertyRef

--------------------------------
Class: ArkDSNetworkWatcherManager.ArkManagerBase.Object
	ArkNetworkWatcher* Watcher;//[Offset: 0x98, Size: 0x8]
	class UserWidget* LagNoticeWidget;//[Offset: 0xa0, Size: 0x28]
	FText TextFailToJoinServerDialogContent;//[Offset: 0xc8, Size: 0x18]
	FText TextLostConnectDialogContent;//[Offset: 0xe0, Size: 0x18]
	FText TextLostConnectAndCantReconnectDialogContent;//[Offset: 0xf8, Size: 0x18]
	class ArkPureTextDataBoxNoHUD* NoHUDPureTextDataBoxClass;//[Offset: 0x110, Size: 0x8]
	FText QuitGameConfirmText;//[Offset: 0x118, Size: 0x18]
	FText BackToLoginConfirmText;//[Offset: 0x130, Size: 0x18]
	FName LeftActionName;//[Offset: 0x148, Size: 0x8]
	FName RightActionName;//[Offset: 0x150, Size: 0x8]
	void OnConfirmNetworkError();// 0x2710560
	static ArkDSNetworkWatcherManager* Get(const Object* WorldContextObject);// 0x270fef0

--------------------------------
Class: ArkNetworkWatcher.Object
	float Common_CheckInterval;//[Offset: 0x34, Size: 0x4]
	float Common_SecondsForHello;//[Offset: 0x3c, Size: 0x4]
	UserWidget* LagNoticeWidgetInstance;//[Offset: 0x48, Size: 0x8]
	ArkPureTextDataBoxNoHUD* NoHUDDataBoxWidget;//[Offset: 0x50, Size: 0x8]
	void OnConfirmTryTravelAgain();// 0x27105a0
	void OnConfirmReconnect();// 0x2710580
	void OnConfirmBackToLogin();// 0x2710540
	void OnConfirmBackToHaven();// 0x2710520

--------------------------------
Class: ArkPureTextDataBoxNoHUD.UserWidget.Widget.Visual.Object
	TextBlock* TextBlockTitle;//[Offset: 0x238, Size: 0x8]
	RichTextBlock* RichTextContent;//[Offset: 0x240, Size: 0x8]
	Button* ButtonConfirm;//[Offset: 0x248, Size: 0x8]
	WidgetSwitcher* WidgetSwitcherConfirmIcon;//[Offset: 0x250, Size: 0x8]
	TextBlock* TextBlockConfirm;//[Offset: 0x258, Size: 0x8]
	Button* ButtonCancel;//[Offset: 0x260, Size: 0x8]
	WidgetSwitcher* WidgetSwitcherCancelIcon;//[Offset: 0x268, Size: 0x8]
	TextBlock* TextBlockCancel;//[Offset: 0x270, Size: 0x8]
	void OnConfirmTriggerAction();// 0x290a5d0
	void OnCancelTriggerAction();// 0x290a5b0

--------------------------------
Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0x138, Size: 0x8]
	ButtonStyle WidgetStyle;//[Offset: 0x140, Size: 0x278]
	LinearColor ColorAndOpacity;//[Offset: 0x3b8, Size: 0x10]
	LinearColor BackgroundColor;//[Offset: 0x3c8, Size: 0x10]
	byte ClickMethod;//[Offset: 0x3d8, Size: 0x1]
	byte TouchMethod;//[Offset: 0x3d9, Size: 0x1]
	byte PressMethod;//[Offset: 0x3da, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3db, Size: 0x1]
	delegate OnClicked;//[Offset: 0x3e0, Size: 0x10]
	delegate OnPressed;//[Offset: 0x3f0, Size: 0x10]
	delegate OnReleased;//[Offset: 0x400, Size: 0x10]
	delegate OnHovered;//[Offset: 0x410, Size: 0x10]
	delegate OnUnHovered;//[Offset: 0x420, Size: 0x10]
	void SetTouchMethod(byte InTouchMethod);// 0x41459b0
	void SetStyle(out const ButtonStyle InStyle);// 0x41458d0
	void SetPressMethod(byte InPressMethod);// 0x4145750
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x4144ac0
	void SetClickMethod(byte InClickMethod);// 0x4144a40
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x41443c0
	bool IsPressed();// 0x4144130

--------------------------------
Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SlateWidgetStyleContainerBase.Object

--------------------------------
Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x8, Size: 0x88]
	SlateBrush Hovered;//[Offset: 0x90, Size: 0x88]
	SlateBrush Pressed;//[Offset: 0x118, Size: 0x88]
	SlateBrush Disabled;//[Offset: 0x1a0, Size: 0x88]
	Margin NormalPadding;//[Offset: 0x228, Size: 0x10]
	Margin PressedPadding;//[Offset: 0x238, Size: 0x10]
	SlateSound PressedSlateSound;//[Offset: 0x248, Size: 0x18]
	SlateSound HoveredSlateSound;//[Offset: 0x260, Size: 0x18]

--------------------------------
Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: WidgetSwitcher.PanelWidget.Widget.Visual.Object
	int ActiveWidgetIndex;//[Offset: 0x138, Size: 0x4]
	void SetActiveWidgetIndex(int Index);// 0x41708f0
	void SetActiveWidget(Widget* Widget);// 0x2928f70
	Widget* GetWidgetAtIndex(int Index);// 0x4170860
	int GetNumWidgets();// 0x4170830
	int GetActiveWidgetIndex();// 0x4170800
	Widget* GetActiveWidget();// 0x41707d0

--------------------------------
Class: ArkFestActivityManager.ArkManagerBase.Object
	int TopActivitySubWidgetID;//[Offset: 0x98, Size: 0x4]
	delegate DelegateOnActivityMenuClose;//[Offset: 0xa0, Size: 0x10]
	delegate OnCheckActivityFinished;//[Offset: 0xb0, Size: 0x10]
	DataTable* FestivalDataTable;//[Offset: 0xd0, Size: 0x8]
	DataTable* ExtraBonusDataTable;//[Offset: 0xd8, Size: 0x8]
	DataTable* DisplayIconDataTable;//[Offset: 0xe0, Size: 0x8]
	DataTable* ActivityMenuTable;//[Offset: 0xe8, Size: 0x8]
	DataTable* DailyLoginRewardDataTable;//[Offset: 0xf0, Size: 0x8]
	<int,class ArkActivityEntity> ActivityEntityMap;//[Offset: 0x520, Size: 0x50]
	<int,ArkActivityEntity*> ActivityEntities;//[Offset: 0x570, Size: 0x50]
	<class Object,class UserWidget> ActivitySoftWidgetMap;//[Offset: 0x670, Size: 0x50]
	ArkOfflineRewardItem[] OfflineRewardItems;//[Offset: 0x6c0, Size: 0x10]
	FText PopupTitleText;//[Offset: 0x6d0, Size: 0x18]
	FText PopupContentText;//[Offset: 0x6e8, Size: 0x18]
	FText PopupAgreeText;//[Offset: 0x700, Size: 0x18]
	FText PopupDisagreeText;//[Offset: 0x718, Size: 0x18]
	FName PopupAgreeAction;//[Offset: 0x730, Size: 0x8]
	FName PopupDisagreeAction;//[Offset: 0x738, Size: 0x8]
	class UserWidget* ContentWidgetClass;//[Offset: 0x740, Size: 0x8]
	FText RewardTitleText;//[Offset: 0x748, Size: 0x18]
	FText RewardContentText;//[Offset: 0x760, Size: 0x18]
	FText RewardConfirmText;//[Offset: 0x778, Size: 0x18]
	FName RewardConfirmAction;//[Offset: 0x790, Size: 0x8]
	class UserWidget* RewardWidget;//[Offset: 0x798, Size: 0x8]
	DataTable* SeasonConstConfigTable;//[Offset: 0x7a0, Size: 0x8]
	ArkUserDataModel* WeeklyTourneyDataModel;//[Offset: 0x7a8, Size: 0x8]
	FText WarningTitle;//[Offset: 0x7b0, Size: 0x18]
	FText WarningText;//[Offset: 0x7c8, Size: 0x18]
	float AutoCloseTime;//[Offset: 0x7e0, Size: 0x4]
	FString CheckMapName;//[Offset: 0x7e8, Size: 0x10]
	FName PandoraPopupMenu;//[Offset: 0x7f8, Size: 0x8]
	float WaitTime;//[Offset: 0x800, Size: 0x4]
	FName[] InputDisablePandoraPopup;//[Offset: 0x808, Size: 0x10]
	ArkRewardCardRsp RewardCardRsp;//[Offset: 0x848, Size: 0x30]
	void UpdatePanPandoraExpiredOnPlayerInput(out const Key Key, byte InputEvent);// 0x2736c90
	void UpdatePandoraExpiredOnMenuOpen(const ArkPopupMenuBase* ChangedMenu, int ChangedMenuID, bool MenuIsOpenedFlag);// 0x2736db0
	void UpdateActiveActivity(int activityID);// 0x2736a10
	void TryStartActivities(int64 serverTime);// 0x2736990
	void SetPopupActivityDisable(int activityID);// 0x27365a0
	void SetOfflineTime(int Time);// 0x2736520
	void SetNeedOpenWhenSignOut(bool IsNeedOpenWhenSignOut);// 0x2736490
	void SetNeedOpenWhenLogin(bool IsNeedOpenWhenLogin);// 0x2736400
	void SetIsSystemMenuExit(bool IsSystemMenuExit);// 0x2735cd0
	void SetAsyncLoadFinished(bool IsAsyncLoadFinished);// 0x2735200
	void RefreshRewardCardInfo(out const ArkRewardCardRsp rsp);// 0x2735010
	void PopupWeeklyTourneyRewardDataBox();// 0x2734ff0
	void PopupWarningDataBox();// 0x2734fd0
	void PopupSpecificActivityWidget(int WidgetId);// 0x2734f50
	bool PopupActivity();// 0x2734f20
	void OpenActivityBarMenu();// 0x2734f00
	void OpenActivatedWidgetJumpMenu();// 0x2734ee0
	void OnRewardWidgetCreated(UserWidget* CreatedWidget);// 0x2734e60
	void OnPreLoadMap(FString MapName);// 0x2734dc0
	void OnPopupMenuClose(const ArkPopupMenuBase* ChangedMenu, int ChangedMenuID, bool MenuIsOpenedFlag);// 0x2734cc0
	void OnPandoraPopupDataReady();// 0x2734ca0
	void OnHotFixManagerDoUnInit();// 0x2734c80
	void OnHotFixManagerDoInit();// 0x2734c60
	void OnHotFixDataTableReqEnd();// 0x2734c40
	void OnGetActiveActivity(ArkActivityActiveData[] ActivityDataList);// 0x2734b60
	void OnFestivalDataTableModified(int DataTableID, FString DataTableName, DataTable* DataTable);// 0x2734a50
	void OnDisagreeAction();// 0x2734a30
	void OnConfirmRewardDataBoxAction();// 0x2734a10
	void OnAgreeAction();// 0x27349f0
	void OnActivatedWidgetJumpMenu(bool bIsHasActivity);// 0x2734960
	bool IsWidgetInActivePlatform(int WidgetId);// 0x27348d0
	bool IsUseSpecificWidget();// 0x27348b0
	bool IsSystemMenuExit();// 0x2734890
	bool IsNeedOpenWhenSignOut();// 0x2734870
	bool IsNeedOpenWhenLogin();// 0x2734850
	bool IsHasAnyActivity(FName MenuName);// 0x27347c0
	bool IsAllActivityCheckFinished();// 0x27347a0
	bool IsActivityActiveByWidgetID(int WidgetId);// 0x2734710
	bool IsActivityActivate(int activityID);// 0x2734680
	bool GetTopWidgetActivityConfig(out ArkFestActivityData outData);// 0x27344a0
	bool GetTopActivityWidgetCfg(out ArkActivityMenuConfig ActivityMenuConfig);// 0x27343e0
	ArkActivitySubTitle[] GetSubTitles(int WidgetId);// 0x27342a0
	int[] GetSubIDsByMasterID(int MasterID);// 0x27341d0
	FString GetOfflineTimeStr();// 0x2734150
	int[] GetLoginDayArray();// 0x2733c80
	bool GetExtraBonusByID(int ID, out ArkFestActivityExtraBonusConfig outData);// 0x27337d0
	bool GetDisplayIconByID(int ID, out ArkFestActivityDisplayIconData outData);// 0x27335f0
	bool GetDataByID(int ID, out ArkFestActivityData outData);// 0x27333e0
	<int,ArkLoginRewardConfig> GetDailyLoginConfigs();// 0x27332d0
	int GetCurrentMenuActivityID();// 0x27332a0
	int64 GetActivityStartTime(int activityID);// 0x2732d50
	FString[] GetActivityRedDotModules();// 0x2732c70
	FText GetActivityNameByWidgetID(int WidgetId);// 0x2732b80
	ArkFestActivityData GetActivityMenuConfig(int WidgetId);// 0x2732ac0
	int GetActivityIDByWidgetID(int WidgetId);// 0x2732a30
	bool GetActivityConfigByWidgetID(int WidgetId, out ArkFestActivityData OutActivityData);// 0x2732820
	int[] GetActivatedFestActivities(int serverTime);// 0x2732750
	static ArkFestActivityManager* Get(const Object* WorldContext);// 0x27326d0
	void FinishWhenSpecificWidgetOpen();// 0x27326a0
	void CreateSystemExitDataBox();// 0x2732680
	void ClearOfflineRewardItems();// 0x2732660
	void CheckDailyLoginReceiveAll(int ReceivedDay);// 0x27325e0
	void CallLua_QuitGame();// 0x305c9c0
	void CallLua_HandleSeasonalPurchased();// 0x305c9c0
	void CallLua_GetRewardCardInfoReq();// 0x305c9c0
	void CallLua_CheckIsActiveActivityList(out const int[] CheckList);// 0x305c9c0
	void AddOfflineRewardItem(int ItemId, int Count);// 0x2732520

--------------------------------
Class: ArkActivityEntity.Object
	DataTable* ExtraAILootTablePath;//[Offset: 0x28, Size: 0x28]
	DataTable* ExtraLootSpawnerMarkTablePath;//[Offset: 0x50, Size: 0x28]
	bool bSpawnOnlyDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	class ArkItemLootBox* LootBoxClass;//[Offset: 0x80, Size: 0x28]
	<FName,ArkRangeParam_Int> LootBoxNumRange;//[Offset: 0xa8, Size: 0x50]
	DataTable* ExtraAILootTable;//[Offset: 0xf8, Size: 0x8]
	DataTable* ExtraLootSpawnerMarkTable;//[Offset: 0x100, Size: 0x8]
	ArkItemLootBox*[] AllSpawnedBox;//[Offset: 0x108, Size: 0x10]
	void OnWorldInitStatusUpdated(enum NewStatus);// 0x260bf70
	void OnLootSpawnerGeneratedLoot(ArkGameplayEventWrapper* GameplayEvent);// 0x260ba00
	void OnAIGeneratedLoot(ArkGameplayEventWrapper* GameplayEvent);// 0x260b8f0

--------------------------------
Class: ArkItemLootBox.ArkTreasureChestPickUp.ArkPickUp.ArkInteractiveActor.ArkStaticActor.Actor.Object
	int GroupIndex;//[Offset: 0x9c0, Size: 0x4]

--------------------------------
Class: ArkTreasureChestPickUp.ArkPickUp.ArkInteractiveActor.ArkStaticActor.Actor.Object
	FName[] LootNameList;//[Offset: 0x938, Size: 0x10]
	FName[] ShareableLootNameList;//[Offset: 0x948, Size: 0x10]
	bool ShouldSpawnAtBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x958, Size: 0x1]
	ArkPickUp*[] SpawnedItems;//[Offset: 0x960, Size: 0x10]
	bool bCanInterect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x970, Size: 0x1]
	ArkSoftSkeletalMeshComponent* MeshComp;//[Offset: 0x978, Size: 0x8]
	AnimSequence* ChestOpenAnim;//[Offset: 0x980, Size: 0x8]
	AnimSequence* ChestCloseAnim;//[Offset: 0x988, Size: 0x8]
	AnimSequence* ChestOpeningAnim;//[Offset: 0x990, Size: 0x8]
	AnimSequence* ChestClosingAnim;//[Offset: 0x998, Size: 0x8]
	float DelaySpawnPickUpSeconds;//[Offset: 0x9a8, Size: 0x4]
	ArkPlayer* CurInteractedPlayer;//[Offset: 0x9b8, Size: 0x8]
	void OnRep_CanInterect();// 0x29a1e80
	void OnCanInteractChanged(bool CurrentlyCanInteract);// 0x305c9c0
	void ClientSpawnLootEffectNormal(enum inLevel);// 0x29a14e0
	void ClientSpawnLootEffectImportant(enum inLevel);// 0x29a1460

--------------------------------
Class: ArkRangeParam_Int
	int Min;//[Offset: 0x0, Size: 0x4]
	int Max;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ArkPopupMenuBase.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	<ParticleSystemWidget2*> ChildParticleWidgets;//[Offset: 0x378, Size: 0x50]
	AkAudioEvent* AkEventOnMenuOpen;//[Offset: 0x3c8, Size: 0x28]
	AkAudioEvent* AkEventOnMenuClose;//[Offset: 0x3f0, Size: 0x28]
	int MenuID;//[Offset: 0x418, Size: 0x4]
	FName MenuName;//[Offset: 0x41c, Size: 0x8]
	bool IsMenuOpennedFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x424, Size: 0x1]
	bool IsMenuFocusCapturedFlag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x424, Size: 0x1]
	bool IsCommitOpeningProcessDone;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x424, Size: 0x1]
	bool IsCommitClosingProcessDone;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x424, Size: 0x1]
	bool bAutoCommitOpening;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x425, Size: 0x1]
	bool bAutoCommitClosing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x426, Size: 0x1]
	class ArkPopupMenuKeyAction[] DefaultMenuActionConfigs;//[Offset: 0x428, Size: 0x10]
	ArkPopupMenuKeyAction*[] DefaultMenuActions;//[Offset: 0x438, Size: 0x10]
	bool bEnableFadeInOutAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 0x1]
	bool bIsMenuSimulateFeature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x449, Size: 0x1]
	ArkUserDataModel*[] ModelsRegistered;//[Offset: 0x4a8, Size: 0x10]
	bool TryMenuCloseForEscape();// 0x28e7b40
	bool ShouldMenuPlayFadeIn();// 0x28e7b20
	bool SetFocusOnLastGamePadFocusedWidget();// 0x28e7af0
	void PlayFadeOut(out const delegate OnPlayFinished);// 0x28e79c0
	void PlayFadeIn();// 0x28e79a0
	void OnMenuPreWarm();// 0x278d020
	void OnMenuOpen();// 0x278d040
	void OnMenuLoseFocus();// 0x28e7710
	void OnMenuJumpStateChanged(const ArkPopupMenuBase* JumpMenu, bool bMenuOpened);// 0x28e7640
	void OnMenuJump(int TabIndex, out const FString[] UserParams);// 0x28e7530
	void OnMenuDestroyed();// 0x27b8410
	void OnMenuCreated();// 0x278d060
	void OnMenuClose();// 0x28e7510
	void OnMenuCaptureFocus();// 0x28e74f0
	void OnCommitOpeningProcessDone();// 0x109fef0
	void OnCommitClosingProcessDone();// 0x109ff10
	bool IsMenuSimulateFeature();// 0x28e74b0
	bool IsMenuOpenned();// 0x28e7480
	bool IsMenuClosing();// 0x28e7450
	bool IsMenuCaptureFocus();// 0x28e7420
	void DoCloseMenu();// 0x28e7360
	void CommitOpeningProcessDone();// 0x28e7320
	void CommitClosingProcessDone();// 0x28e7300
	void CloseMenu(bool SkipClosingProcess, bool DoNotCacheAfterCloseFlag);// 0x28e7230
	bool CheckMenuCloseForCloseAll();// 0x109f3b0

--------------------------------
Class: ParticleSystemWidget2.Widget.Visual.Object
	Object* ParticleSystemTemplate;//[Offset: 0x110, Size: 0x8]
	byte ProjectionMethod;//[Offset: 0x118, Size: 0x1]
	float FieldOfView;//[Offset: 0x11c, Size: 0x4]
	float DistanceToCamera;//[Offset: 0x120, Size: 0x4]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 0x1]
	bool bActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x125, Size: 0x1]
	FXSystemComponent* WorldParticleComponent;//[Offset: 0x128, Size: 0x8]
	Actor* WorldParticleActor;//[Offset: 0x130, Size: 0x8]
	void UnInitParticleSystem();// 0xdc2590
	void SetParticleSystem(ParticleSystem* ParticleSystem);// 0xdc2510
	void SetNiagaraSystem(NiagaraSystem* ParticleSystem);// 0xdc2510
	void SetActivate(bool bIsActivate);// 0xdc2480
	void InitParticleSystem();// 0xdc2460
	ParticleSystemComponent* GetParticleComponent();// 0xdc2430
	NiagaraComponent* GetNiagaraComponent();// 0xdc2400

--------------------------------
Class: NiagaraSystem.FXSystemAsset.Object
	bool bDumpDebugSystemInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bDumpDebugEmitterInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	bool bRequireCurrentFrameData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	bool bFixedBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	NiagaraEffectType* EffectType;//[Offset: 0x38, Size: 0x8]
	bool bOverrideScalabilitySettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	NiagaraSystemScalabilityOverride[] ScalabilityOverrides;//[Offset: 0x48, Size: 0x10]
	NiagaraSystemScalabilityOverrides SystemScalabilityOverrides;//[Offset: 0x58, Size: 0x10]
	NiagaraEmitterHandle[] EmitterHandles;//[Offset: 0x68, Size: 0x10]
	NiagaraParameterCollectionInstance*[] ParameterCollectionOverrides;//[Offset: 0x78, Size: 0x10]
	NiagaraScript* SystemSpawnScript;//[Offset: 0x88, Size: 0x8]
	NiagaraScript* SystemUpdateScript;//[Offset: 0x90, Size: 0x8]
	NiagaraSystemCompiledData SystemCompiledData;//[Offset: 0xa8, Size: 0x218]
	NiagaraUserRedirectionParameterStore ExposedParameters;//[Offset: 0x2c0, Size: 0xc8]
	Box FixedBounds;//[Offset: 0x388, Size: 0x1c]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 0x1]
	float WarmupTime;//[Offset: 0x3a8, Size: 0x4]
	int WarmupTickCount;//[Offset: 0x3ac, Size: 0x4]
	float WarmupTickDelta;//[Offset: 0x3b0, Size: 0x4]
	bool bHasSystemScriptDIsWithPerInstanceData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 0x1]
	FName[] UserDINamesReadInSystemScripts;//[Offset: 0x3b8, Size: 0x10]

--------------------------------
Class: NiagaraEffectType.Object
	enum UpdateFrequency;//[Offset: 0x28, Size: 0x4]
	enum CullReaction;//[Offset: 0x2c, Size: 0x4]
	NiagaraSignificanceHandler* SignificanceHandler;//[Offset: 0x30, Size: 0x8]
	NiagaraSystemScalabilitySettings[] DetailLevelScalabilitySettings;//[Offset: 0x38, Size: 0x10]
	NiagaraSystemScalabilitySettingsArray SystemScalabilitySettings;//[Offset: 0x48, Size: 0x10]
	NiagaraEmitterScalabilitySettingsArray EmitterScalabilitySettings;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: NiagaraSignificanceHandler.Object

--------------------------------
Class: NiagaraSystemScalabilitySettings
	NiagaraPlatformSet Platforms;//[Offset: 0x0, Size: 0x30]
	bool bCullByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bCullMaxInstanceCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bCullPerSystemMaxInstanceCount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool bCullByMaxTimeWithoutRender;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	float MaxDistance;//[Offset: 0x34, Size: 0x4]
	int MaxInstances;//[Offset: 0x38, Size: 0x4]
	int MaxSystemInstances;//[Offset: 0x3c, Size: 0x4]
	float MaxTimeWithoutRender;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: NiagaraPlatformSet
	int QualityLevelMask;//[Offset: 0x0, Size: 0x4]
	NiagaraDeviceProfileStateEntry[] DeviceProfileStates;//[Offset: 0x8, Size: 0x10]
	NiagaraPlatformSetCVarCondition[] CVarConditions;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: NiagaraDeviceProfileStateEntry
	FName ProfileName;//[Offset: 0x0, Size: 0x8]
	UInt32Property QualityLevelMask;//[Size: 0x4]
	UInt32Property SetQualityLevelMask;//[Size: 0x4]

--------------------------------
Class: NiagaraPlatformSetCVarCondition
	FName CVarName;//[Offset: 0x0, Size: 0x8]
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	int MinInt;//[Offset: 0xc, Size: 0x4]
	int MaxInt;//[Offset: 0x10, Size: 0x4]
	float MinFloat;//[Offset: 0x14, Size: 0x4]
	float MaxFloat;//[Offset: 0x18, Size: 0x4]
	bool bUseMinInt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool bUseMaxInt;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]
	bool bUseMinFloat;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1]
	bool bUseMaxFloat;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: NiagaraSystemScalabilitySettingsArray
	NiagaraSystemScalabilitySettings[] Settings;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NiagaraEmitterScalabilitySettingsArray
	NiagaraEmitterScalabilitySettings[] Settings;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NiagaraEmitterScalabilitySettings
	NiagaraPlatformSet Platforms;//[Offset: 0x0, Size: 0x30]
	bool bScaleSpawnCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	float SpawnCountScale;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: NiagaraSystemScalabilityOverride.NiagaraSystemScalabilitySettings
	bool bOverrideDistanceSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	bool bOverrideInstanceCountSettings;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1]
	bool bOverridePerSystemInstanceCountSettings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 0x1]
	bool bOverrideTimeSinceRendererSettings;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: NiagaraSystemScalabilityOverrides
	NiagaraSystemScalabilityOverride[] Overrides;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NiagaraEmitterHandle
	Guid ID;//[Offset: 0x0, Size: 0x10]
	FName IdName;//[Offset: 0x10, Size: 0x8]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	FName Name;//[Offset: 0x1c, Size: 0x8]
	NiagaraEmitter* Instance;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: NiagaraEmitter.Object
	bool bLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bDeterminism;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	int RandomSeed;//[Offset: 0x2c, Size: 0x4]
	enum AllocationMode;//[Offset: 0x30, Size: 0x1]
	int PreAllocationCount;//[Offset: 0x34, Size: 0x4]
	NiagaraEmitterScriptProperties UpdateScriptProps;//[Offset: 0x38, Size: 0x28]
	NiagaraEmitterScriptProperties SpawnScriptProps;//[Offset: 0x60, Size: 0x28]
	enum SimTarget;//[Offset: 0x88, Size: 0x1]
	Box FixedBounds;//[Offset: 0x8c, Size: 0x1c]
	int MinDetailLevel;//[Offset: 0xa8, Size: 0x4]
	int MaxDetailLevel;//[Offset: 0xac, Size: 0x4]
	NiagaraDetailsLevelScaleOverrides GlobalSpawnCountScaleOverrides;//[Offset: 0xb0, Size: 0x14]
	NiagaraPlatformSet Platforms;//[Offset: 0xc8, Size: 0x30]
	NiagaraEmitterScalabilityOverrides ScalabilityOverrides;//[Offset: 0xf8, Size: 0x10]
	bool bInterpolatedSpawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1]
	bool bFixedBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x108, Size: 0x1]
	bool bUseMinDetailLevel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x108, Size: 0x1]
	bool bUseMaxDetailLevel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x108, Size: 0x1]
	bool bOverrideGlobalSpawnCountScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x108, Size: 0x1]
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x108, Size: 0x1]
	bool bCombineEventSpawn;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x108, Size: 0x1]
	float MaxDeltaTimePerTick;//[Offset: 0x10c, Size: 0x4]
	UInt32Property DefaultShaderStageIndex;//[Size: 0x4]
	UInt32Property MaxUpdateIterations;//[Size: 0x4]
	<SpawnStages(UInt32Property)> SpawnStages;//[Offset: 0x118, Size: 0x50]
	bool bSimulationStagesEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x168, Size: 0x1]
	bool bDeprecatedShaderStagesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x168, Size: 0x1]
	bool bLimitDeltaTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x168, Size: 0x1]
	FString UniqueEmitterName;//[Offset: 0x170, Size: 0x10]
	NiagaraRendererProperties*[] RendererProperties;//[Offset: 0x180, Size: 0x10]
	NiagaraEventScriptProperties[] EventHandlerScriptProps;//[Offset: 0x190, Size: 0x10]
	NiagaraSimulationStageBase*[] SimulationStages;//[Offset: 0x1a0, Size: 0x10]
	NiagaraScript* GPUComputeScript;//[Offset: 0x1b0, Size: 0x8]
	FName[] SharedEventGeneratorIds;//[Offset: 0x1b8, Size: 0x10]

--------------------------------
Class: NiagaraEmitterScriptProperties
	NiagaraScript* Script;//[Offset: 0x0, Size: 0x8]
	NiagaraEventReceiverProperties[] EventReceivers;//[Offset: 0x8, Size: 0x10]
	NiagaraEventGeneratorProperties[] EventGenerators;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: NiagaraScript.NiagaraScriptBase.Object
	enum Usage;//[Offset: 0x28, Size: 0x1]
	int UsageIndex;//[Offset: 0x2c, Size: 0x4]
	Guid UsageId;//[Offset: 0x30, Size: 0x10]
	NiagaraParameterStore RapidIterationParameters;//[Offset: 0x40, Size: 0x78]
	NiagaraScriptExecutionParameterStore ScriptExecutionParamStore;//[Offset: 0xb8, Size: 0x98]
	NiagaraBoundParameter[] ScriptExecutionBoundParameters;//[Offset: 0x150, Size: 0x10]
	NiagaraVMExecutableDataId CachedScriptVMId;//[Offset: 0x160, Size: 0x48]
	NiagaraVMExecutableData CachedScriptVM;//[Offset: 0x1b8, Size: 0xe0]
	NiagaraParameterCollection*[] CachedParameterCollectionReferences;//[Offset: 0x298, Size: 0x10]
	NiagaraScriptDataInterfaceInfo[] CachedDefaultDataInterfaces;//[Offset: 0x2a8, Size: 0x10]
	void RaiseOnGPUCompilationComplete();// 0xae2270

--------------------------------
Class: NiagaraScriptBase.Object

--------------------------------
Class: NiagaraParameterStore
	Object* Owner;//[Offset: 0x8, Size: 0x8]
	NiagaraVariableWithOffset[] SortedParameterOffsets;//[Offset: 0x10, Size: 0x10]
	byte[] ParameterData;//[Offset: 0x20, Size: 0x10]
	NiagaraDataInterface*[] DataInterfaces;//[Offset: 0x30, Size: 0x10]
	Object*[] UObjects;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: NiagaraVariableWithOffset.NiagaraVariableBase
	int Offset;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: NiagaraVariableBase
	FName Name;//[Offset: 0x0, Size: 0x8]
	NiagaraTypeDefinitionHandle TypeDefHandle;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: NiagaraTypeDefinitionHandle
	int RegisteredTypeIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraMergeable.Object

--------------------------------
Class: NiagaraScriptExecutionParameterStore.NiagaraParameterStore
	int ParameterSize;//[Offset: 0x78, Size: 0x4]
	UInt32Property PaddedParameterSize;//[Size: 0x4]
	NiagaraScriptExecutionPaddingInfo[] PaddingInfo;//[Offset: 0x80, Size: 0x10]
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]

--------------------------------
Class: NiagaraScriptExecutionPaddingInfo
	uint16 SrcOffset;//[Offset: 0x0, Size: 0x2]
	uint16 DestOffset;//[Offset: 0x2, Size: 0x2]
	uint16 SrcSize;//[Offset: 0x4, Size: 0x2]
	uint16 DestSize;//[Offset: 0x6, Size: 0x2]

--------------------------------
Class: NiagaraBoundParameter
	NiagaraVariable Parameter;//[Offset: 0x0, Size: 0x20]
	int SrcOffset;//[Offset: 0x20, Size: 0x4]
	int DestOffset;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: NiagaraVariable.NiagaraVariableBase
	byte[] VarData;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: NiagaraVMExecutableDataId
	Guid CompilerVersionID;//[Offset: 0x0, Size: 0x10]
	enum ScriptUsageType;//[Offset: 0x10, Size: 0x1]
	Guid ScriptUsageTypeID;//[Offset: 0x14, Size: 0x10]
	bool bUsesRapidIterationParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	bool bInterpolatedSpawn;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1]
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 0x1]
	Guid BaseScriptID;//[Offset: 0x28, Size: 0x10]
	NiagaraCompileHash BaseScriptCompileHash;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: NiagaraCompileHash
	byte[] DataHash;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NiagaraVMExecutableData
	byte[] ByteCode;//[Offset: 0x0, Size: 0x10]
	byte[] OptimizedByteCode;//[Offset: 0x10, Size: 0x10]
	int NumTempRegisters;//[Offset: 0x20, Size: 0x4]
	int NumUserPtrs;//[Offset: 0x24, Size: 0x4]
	byte[] ScriptLiterals;//[Offset: 0x28, Size: 0x10]
	NiagaraVariable[] Attributes;//[Offset: 0x38, Size: 0x10]
	NiagaraScriptDataUsageInfo DataUsage;//[Offset: 0x48, Size: 0x1]
	NiagaraScriptDataInterfaceCompileInfo[] DataInterfaceInfo;//[Offset: 0x50, Size: 0x10]
	VMExternalFunctionBindingInfo[] CalledVMExternalFunctions;//[Offset: 0x60, Size: 0x10]
	NiagaraDataSetID[] ReadDataSets;//[Offset: 0x80, Size: 0x10]
	NiagaraDataSetProperties[] WriteDataSets;//[Offset: 0x90, Size: 0x10]
	NiagaraStatScope[] StatScopes;//[Offset: 0xa0, Size: 0x10]
	NiagaraDataInterfaceGPUParamInfo[] DIParamInfo;//[Offset: 0xb0, Size: 0x10]
	enum LastCompileStatus;//[Offset: 0xc0, Size: 0x1]
	SimulationStageMetaData[] SimulationStageMetaData;//[Offset: 0xc8, Size: 0x10]
	bool bReadsSignificanceIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]

--------------------------------
Class: NiagaraScriptDataUsageInfo
	bool bReadsAttributeData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: NiagaraScriptDataInterfaceCompileInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	int UserPtrIdx;//[Offset: 0x8, Size: 0x4]
	NiagaraTypeDefinition Type;//[Offset: 0x10, Size: 0x10]
	FName RegisteredParameterMapRead;//[Offset: 0x20, Size: 0x8]
	FName RegisteredParameterMapWrite;//[Offset: 0x28, Size: 0x8]
	bool bIsPlaceholder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: NiagaraTypeDefinition
	Object* ClassStructOrEnum;//[Offset: 0x0, Size: 0x8]
	uint16 UnderlyingType;//[Offset: 0x8, Size: 0x2]

--------------------------------
Class: VMExternalFunctionBindingInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	FName OwnerName;//[Offset: 0x8, Size: 0x8]
	bool[] InputParamLocations;//[Offset: 0x10, Size: 0x10]
	int NumOutputs;//[Offset: 0x20, Size: 0x4]
	VMFunctionSpecifier[] FunctionSpecifiers;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: VMFunctionSpecifier
	FName Key;//[Offset: 0x0, Size: 0x8]
	FName Value;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: NiagaraDataSetID
	FName Name;//[Offset: 0x0, Size: 0x8]
	enum Type;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: NiagaraDataSetProperties
	NiagaraDataSetID ID;//[Offset: 0x0, Size: 0xc]
	NiagaraVariable[] Variables;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: NiagaraStatScope
	FName FullName;//[Offset: 0x0, Size: 0x8]
	FName FriendlyName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: NiagaraDataInterfaceGPUParamInfo
	FString DataInterfaceHLSLSymbol;//[Offset: 0x0, Size: 0x10]
	FString DIClassName;//[Offset: 0x10, Size: 0x10]
	NiagaraDataInterfaceGeneratedFunction[] GeneratedFunctions;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceGeneratedFunction

--------------------------------
Class: SimulationStageMetaData
	FName SimulationStageName;//[Offset: 0x0, Size: 0x8]
	FName IterationSource;//[Offset: 0x8, Size: 0x8]
	bool bSpawnOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bWritesParticles;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bPartialParticleUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	FName[] OutputDestinations;//[Offset: 0x18, Size: 0x10]
	int MinStage;//[Offset: 0x28, Size: 0x4]
	int MaxStage;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: NiagaraParameterCollection.Object
	FName Namespace;//[Offset: 0x28, Size: 0x8]
	NiagaraVariable[] Parameters;//[Offset: 0x30, Size: 0x10]
	MaterialParameterCollection* SourceMaterialCollection;//[Offset: 0x40, Size: 0x8]
	NiagaraParameterCollectionInstance* DefaultInstance;//[Offset: 0x48, Size: 0x8]
	Guid CompileId;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: NiagaraParameterCollectionInstance.Object
	NiagaraParameterCollection* Collection;//[Offset: 0x28, Size: 0x8]
	NiagaraVariable[] OverridenParameters;//[Offset: 0x30, Size: 0x10]
	NiagaraParameterStore ParameterStorage;//[Offset: 0x40, Size: 0x78]
	void SetVectorParameter(FString InVariableName, Vector InValue);// 0xade830
	void SetVector4Parameter(FString InVariableName, out const Vector4 InValue);// 0xade740
	void SetVector2DParameter(FString InVariableName, Vector2D InValue);// 0xade670
	void SetQuatParameter(FString InVariableName, out const Quat InValue);// 0xade350
	void SetIntParameter(FString InVariableName, int InValue);// 0xade270
	void SetFloatParameter(FString InVariableName, float InValue);// 0xade190
	void SetColorParameter(FString InVariableName, LinearColor InValue);// 0xade0b0
	void SetBoolParameter(FString InVariableName, bool InValue);// 0xaddfd0
	Vector GetVectorParameter(FString InVariableName);// 0xaddbe0
	Vector4 GetVector4Parameter(FString InVariableName);// 0xaddb30
	Vector2D GetVector2DParameter(FString InVariableName);// 0xadda80
	Quat GetQuatParameter(FString InVariableName);// 0xadd9d0
	int GetIntParameter(FString InVariableName);// 0xadd860
	float GetFloatParameter(FString InVariableName);// 0xadd7b0
	LinearColor GetColorParameter(FString InVariableName);// 0xadd700
	bool GetBoolParameter(FString InVariableName);// 0xadd650

--------------------------------
Class: NiagaraScriptDataInterfaceInfo
	NiagaraDataInterface* DataInterface;//[Offset: 0x0, Size: 0x8]
	FName Name;//[Offset: 0x8, Size: 0x8]
	int UserPtrIdx;//[Offset: 0x10, Size: 0x4]
	NiagaraTypeDefinition Type;//[Offset: 0x18, Size: 0x10]
	FName RegisteredParameterMapRead;//[Offset: 0x28, Size: 0x8]
	FName RegisteredParameterMapWrite;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: NiagaraEventReceiverProperties
	FName Name;//[Offset: 0x0, Size: 0x8]
	FName SourceEventGenerator;//[Offset: 0x8, Size: 0x8]
	FName SourceEmitter;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: NiagaraEventGeneratorProperties
	int MaxEventsPerFrame;//[Offset: 0x0, Size: 0x4]
	FName ID;//[Offset: 0x4, Size: 0x8]
	NiagaraDataSetCompiledData DataSetCompiledData;//[Offset: 0x10, Size: 0x40]

--------------------------------
Class: NiagaraDataSetCompiledData
	NiagaraVariable[] Variables;//[Offset: 0x0, Size: 0x10]
	NiagaraVariableLayoutInfo[] VariableLayouts;//[Offset: 0x10, Size: 0x10]
	NiagaraDataSetID ID;//[Offset: 0x20, Size: 0xc]
	UInt32Property TotalFloatComponents;//[Size: 0x4]
	UInt32Property TotalInt32Components;//[Size: 0x4]
	UInt32Property TotalHalfComponents;//[Size: 0x4]
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	enum SimTarget;//[Offset: 0x3c, Size: 0x1]

--------------------------------
Class: NiagaraVariableLayoutInfo
	UInt32Property FloatComponentStart;//[Size: 0x4]
	UInt32Property Int32ComponentStart;//[Size: 0x4]
	UInt32Property HalfComponentStart;//[Size: 0x4]
	NiagaraTypeLayoutInfo LayoutInfo;//[Offset: 0x10, Size: 0x60]

--------------------------------
Class: NiagaraTypeLayoutInfo
	FloatComponentByteOffsets(UInt32Property)[] FloatComponentByteOffsets;//[Offset: 0x0, Size: 0x10]
	FloatComponentRegisterOffsets(UInt32Property)[] FloatComponentRegisterOffsets;//[Offset: 0x10, Size: 0x10]
	Int32ComponentByteOffsets(UInt32Property)[] Int32ComponentByteOffsets;//[Offset: 0x20, Size: 0x10]
	Int32ComponentRegisterOffsets(UInt32Property)[] Int32ComponentRegisterOffsets;//[Offset: 0x30, Size: 0x10]
	HalfComponentByteOffsets(UInt32Property)[] HalfComponentByteOffsets;//[Offset: 0x40, Size: 0x10]
	HalfComponentRegisterOffsets(UInt32Property)[] HalfComponentRegisterOffsets;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: NiagaraDetailsLevelScaleOverrides
	float Low;//[Offset: 0x0, Size: 0x4]
	float Medium;//[Offset: 0x4, Size: 0x4]
	float High;//[Offset: 0x8, Size: 0x4]
	float Epic;//[Offset: 0xc, Size: 0x4]
	float Cine;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: NiagaraEmitterScalabilityOverrides
	NiagaraEmitterScalabilityOverride[] Overrides;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NiagaraEmitterScalabilityOverride.NiagaraEmitterScalabilitySettings
	bool bOverrideSpawnCountScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: NiagaraRendererProperties.NiagaraMergeable.Object
	NiagaraPlatformSet Platforms;//[Offset: 0x28, Size: 0x30]
	int SortOrderHint;//[Offset: 0x58, Size: 0x4]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	bool bMotionBlurEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 0x1]

--------------------------------
Class: NiagaraEventScriptProperties.NiagaraEmitterScriptProperties
	enum ExecutionMode;//[Offset: 0x28, Size: 0x1]
	UInt32Property SpawnNumber;//[Size: 0x4]
	UInt32Property MaxEventsPerFrame;//[Size: 0x4]
	Guid SourceEmitterID;//[Offset: 0x34, Size: 0x10]
	FName SourceEventName;//[Offset: 0x44, Size: 0x8]
	bool bRandomSpawnNumber;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	UInt32Property MinSpawnNumber;//[Size: 0x4]

--------------------------------
Class: NiagaraSimulationStageBase.NiagaraMergeable.Object
	NiagaraScript* Script;//[Offset: 0x28, Size: 0x8]
	FName SimulationStageName;//[Offset: 0x30, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: NiagaraSystemCompiledData
	NiagaraParameterStore InstanceParamStore;//[Offset: 0x0, Size: 0x78]
	NiagaraDataSetCompiledData DataSetCompiledData;//[Offset: 0x78, Size: 0x40]
	NiagaraDataSetCompiledData SpawnInstanceParamsDataSetCompiledData;//[Offset: 0xb8, Size: 0x40]
	NiagaraDataSetCompiledData UpdateInstanceParamsDataSetCompiledData;//[Offset: 0xf8, Size: 0x40]
	NiagaraParameterDataSetBindingCollection SpawnInstanceGlobalBinding;//[Offset: 0x138, Size: 0x20]
	NiagaraParameterDataSetBindingCollection SpawnInstanceSystemBinding;//[Offset: 0x158, Size: 0x20]
	NiagaraParameterDataSetBindingCollection SpawnInstanceOwnerBinding;//[Offset: 0x178, Size: 0x20]
	NiagaraParameterDataSetBindingCollection[] SpawnInstanceEmitterBindings;//[Offset: 0x198, Size: 0x10]
	NiagaraParameterDataSetBindingCollection UpdateInstanceGlobalBinding;//[Offset: 0x1a8, Size: 0x20]
	NiagaraParameterDataSetBindingCollection UpdateInstanceSystemBinding;//[Offset: 0x1c8, Size: 0x20]
	NiagaraParameterDataSetBindingCollection UpdateInstanceOwnerBinding;//[Offset: 0x1e8, Size: 0x20]
	NiagaraParameterDataSetBindingCollection[] UpdateInstanceEmitterBindings;//[Offset: 0x208, Size: 0x10]

--------------------------------
Class: NiagaraParameterDataSetBindingCollection
	NiagaraParameterDataSetBinding[] FloatOffsets;//[Offset: 0x0, Size: 0x10]
	NiagaraParameterDataSetBinding[] Int32Offsets;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: NiagaraParameterDataSetBinding
	int ParameterOffset;//[Offset: 0x0, Size: 0x4]
	int DataSetComponentOffset;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: NiagaraUserRedirectionParameterStore.NiagaraParameterStore
	<NiagaraVariable,NiagaraVariable> UserParameterRedirects;//[Offset: 0x78, Size: 0x50]

--------------------------------
Class: NiagaraComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	NiagaraSystem* Asset;//[Offset: 0x670, Size: 0x8]
	enum TickBehavior;//[Offset: 0x678, Size: 0x1]
	NiagaraUserRedirectionParameterStore OverrideParameters;//[Offset: 0x680, Size: 0xc8]
	bool bForceSolo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x748, Size: 0x1]
	bool bEnableGpuComputeDebug;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x748, Size: 0x1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x774, Size: 0x1]
	bool bRenderingEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x774, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x774, Size: 0x1]
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x774, Size: 0x1]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x778, Size: 0x4]
	NiagaraMaterialOverride[] EmitterMaterials;//[Offset: 0x780, Size: 0x10]
	delegate OnSystemFinished;//[Offset: 0x798, Size: 0x10]
	SceneComponent* AutoAttachParent;//[Offset: 0x7a8, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x7b0, Size: 0x8]
	enum AutoAttachLocationRule;//[Offset: 0x7b8, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x7b9, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x7ba, Size: 0x1]
	void SetVariableVec4(FName InVariableName, out const Vector4 InValue);// 0xad3210
	void SetVariableVec3(FName InVariableName, Vector InValue);// 0xad3140
	void SetVariableVec2(FName InVariableName, Vector2D InValue);// 0xad3080
	void SetVariableTextureRenderTarget(FName InVariableName, TextureRenderTarget* TextureRenderTarget);// 0xad2fc0
	void SetVariableQuat(FName InVariableName, out const Quat InValue);// 0xad2ef0
	void SetVariableObject(FName InVariableName, Object* Object);// 0xad2e30
	void SetVariableMaterial(FName InVariableName, MaterialInterface* Object);// 0xad2d70
	void SetVariableLinearColor(FName InVariableName, out const LinearColor InValue);// 0xad2ca0
	void SetVariableInt(FName InVariableName, int InValue);// 0xad2be0
	void SetVariableFloat(FName InVariableName, float InValue);// 0xad2b10
	void SetVariableBool(FName InVariableName, bool InValue);// 0xad2a40
	void SetVariableActor(FName InVariableName, Actor* Actor);// 0xad2980
	void SetTickBehavior(enum NewTickBehavior);// 0xad2900
	void SetSeekDelta(float InSeekDelta);// 0xad2880
	void SetRenderingEnabled(bool bInRenderingEnabled);// 0xad27f0
	void SetPreviewLODDistance(bool bEnablePreviewLODDistance, float PreviewLODDistance);// 0xad2720
	void SetPaused(bool bInPaused);// 0xad2690
	void SetNiagaraVariableVec4(FString InVariableName, out const Vector4 InValue);// 0xad25a0
	void SetNiagaraVariableVec3(FString InVariableName, Vector InValue);// 0xad24b0
	void SetNiagaraVariableVec2(FString InVariableName, Vector2D InValue);// 0xad23e0
	void SetNiagaraVariableQuat(FString InVariableName, out const Quat InValue);// 0xad2300
	void SetNiagaraVariableObject(FString InVariableName, Object* Object);// 0xad1ea0
	void SetNiagaraVariableLinearColor(FString InVariableName, out const LinearColor InValue);// 0xad2220
	void SetNiagaraVariableInt(FString InVariableName, int InValue);// 0xad2140
	void SetNiagaraVariableFloat(FString InVariableName, float InValue);// 0xad2060
	void SetNiagaraVariableBool(FString InVariableName, bool InValue);// 0xad1f80
	void SetNiagaraVariableActor(FString InVariableName, Actor* Actor);// 0xad1ea0
	void SetMaxSimTime(float InMaxTime);// 0xad1e20
	void SetGpuComputeDebug(bool bEnableDebug);// 0xad1d90
	void SetForceSolo(bool bInForceSolo);// 0xad1d00
	void SetDesiredAge(float InDesiredAge);// 0xad1c80
	void SetCanRenderWhileSeeking(bool bInCanRenderWhileSeeking);// 0xad1bf0
	void SetAutoDestroy(bool bInAutoDestroy);// 0xad1b60
	void SetAsset(NiagaraSystem* InAsset);// 0xad1ae0
	void SetAllowScalability(bool bAllow);// 0xad1a50
	void SetAgeUpdateMode(enum InAgeUpdateMode);// 0xad19d0
	void SeekToDesiredAge(float InDesiredAge);// 0xad1950
	void ResetSystem();// 0xad1930
	void ReinitializeSystem();// 0xad1910
	bool IsPaused();// 0xad18e0
	enum GetTickBehavior();// 0xad18c0
	float GetSeekDelta();// 0x7fca00
	bool GetPreviewLODDistanceEnabled();// 0xad18a0
	int GetPreviewLODDistance();// 0xad1880
	Vector[] GetNiagaraParticleValueVec3_DebugOnly(FString InEmitterName, FString InValueName);// 0xad1600
	float[] GetNiagaraParticleValues_DebugOnly(FString InEmitterName, FString InValueName);// 0xad1740
	Vector[] GetNiagaraParticlePositions_DebugOnly(FString InEmitterName);// 0xad1510
	float GetMaxSimTime();// 0xad14e0
	bool GetForceSolo();// 0xad14b0
	float GetDesiredAge();// 0xad1480
	NiagaraDataInterface* GetDataInterface(FString Name);// 0xad13d0
	NiagaraSystem* GetAsset();// 0xad13b0
	enum GetAgeUpdateMode();// 0xad1380
	void AdvanceSimulationByTime(float SimulateTime, float TickDeltaSeconds);// 0xad12c0
	void AdvanceSimulation(int TickCount, float TickDeltaSeconds);// 0xad11f0

--------------------------------
Class: NiagaraMaterialOverride
	MaterialInterface* Material;//[Offset: 0x0, Size: 0x8]
	UInt32Property MaterialSubIndex;//[Size: 0x4]
	NiagaraRendererProperties* EmitterRendererProperty;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ArkPopupMenuKeyAction.Object
	FName ActionName;//[Offset: 0x28, Size: 0x8]
	ArkPopupMenuBase* OwnerMenu;//[Offset: 0x30, Size: 0x8]
	void OnPostUnregisterAction();// 0x188cea0
	void OnPostRegisterAction();// 0x188cec0
	void OnExecuteAction(out const Key InKey, enum HoldEvent, float InDuration, float inElapsedTime);// 0x28f19a0

--------------------------------
Class: ArkRewardCardRsp
	int[] CardIDs;//[Offset: 0x0, Size: 0x10]
	int[] ValidDays;//[Offset: 0x10, Size: 0x10]
	int[] DailyNextTime;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: ArkActivityActiveData
	int activityID;//[Offset: 0x0, Size: 0x4]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: ArkOfflineRewardItem
	int ItemId;//[Offset: 0x0, Size: 0x4]
	int Count;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ArkFestActivityData.TableRowBase
	int ID;//[Offset: 0x8, Size: 0x4]
	int MasterID;//[Offset: 0xc, Size: 0x4]
	FText Name;//[Offset: 0x10, Size: 0x18]
	FString Desc;//[Offset: 0x28, Size: 0x10]
	FString StartTime;//[Offset: 0x38, Size: 0x10]
	FString EndTime;//[Offset: 0x48, Size: 0x10]
	int TabPageWidgetID;//[Offset: 0x58, Size: 0x4]
	int PopupWidgetID;//[Offset: 0x5c, Size: 0x4]
	int[] ExtraBonusIDs;//[Offset: 0x60, Size: 0x10]
	int[] DisplayIconIDs;//[Offset: 0x70, Size: 0x10]
	FString HavenMap;//[Offset: 0x80, Size: 0x10]
	enum ActivityEndRewardProcessType;//[Offset: 0x90, Size: 0x1]
	ArkCommonEventList ActivateRequireCondition;//[Offset: 0x98, Size: 0x20]

--------------------------------
Class: ArkActivityMenuConfig.TableRowBase
	int SubWidgetID;//[Offset: 0x8, Size: 0x4]
	FString Desc;//[Offset: 0x10, Size: 0x10]
	FText TitleName;//[Offset: 0x20, Size: 0x18]
	PaperSprite* TitleIcon;//[Offset: 0x38, Size: 0x28]
	FName TemplateMenuName;//[Offset: 0x60, Size: 0x8]
	class UserWidget* SubWidgetClass;//[Offset: 0x68, Size: 0x28]
	ArkActivityMenuJumpCmd JumpCmdStruct;//[Offset: 0x90, Size: 0x18]
	int ActivityPriority;//[Offset: 0xa8, Size: 0x4]
	bool PopupWhenLogin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 0x1]
	bool PopupWhenSignOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad, Size: 0x1]
	FString RedDotModule;//[Offset: 0xb0, Size: 0x10]
	bool FullScreenPage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	Margin PageOffset;//[Offset: 0xc4, Size: 0x10]
	byte ActivePlatform;//[Offset: 0xd4, Size: 0x1]
	ArkActivitySubTitle[] Subtitles;//[Offset: 0xd8, Size: 0x10]

--------------------------------
Class: ArkActivityMenuJumpCmd
	FName JumpMenuName;//[Offset: 0x0, Size: 0x8]
	ArkJumpIDStruct[] SubWidgetIDStruct;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ArkJumpIDStruct
	int SubWidgetID;//[Offset: 0x0, Size: 0x4]
	FString OverrideEndTime;//[Offset: 0x8, Size: 0x10]
	FText OverrideTimeDesc;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: ArkActivitySubTitle
	FText SubTitleName;//[Offset: 0x0, Size: 0x18]
	int SubTitleID;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ArkFestActivityExtraBonusConfig.TableRowBase
	int ExtraBonusID;//[Offset: 0x8, Size: 0x4]
	enum BonusType;//[Offset: 0xc, Size: 0x1]
	float Rate;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ArkFestActivityDisplayIconData.TableRowBase
	int DisplayIconID;//[Offset: 0x8, Size: 0x4]
	FString Name;//[Offset: 0x10, Size: 0x10]
	PaperSprite* DisplayIcon;//[Offset: 0x20, Size: 0x28]
	FText DisplayText;//[Offset: 0x48, Size: 0x18]
	FText ValueString;//[Offset: 0x60, Size: 0x18]
	FText DisplayCornerText;//[Offset: 0x78, Size: 0x18]

--------------------------------
Class: ArkLoginRewardConfig.TableRowBase
	int Day;//[Offset: 0x8, Size: 0x4]
	int SpeciaLevel;//[Offset: 0xc, Size: 0x4]
	FText SpecialInstruction;//[Offset: 0x10, Size: 0x18]
	ArkLoginRewardItemConfig[] Rewards;//[Offset: 0x28, Size: 0x10]
	Texture2D* DisplayImage;//[Offset: 0x38, Size: 0x28]
	bool bUseQualityColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: ArkLoginRewardItemConfig.TableRowBase
	int ItemId;//[Offset: 0x8, Size: 0x4]
	int Count;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ArkSeasonActivityManager.ArkResourceManagerBase.ArkManagerBase.Object
	SoftObjectPath SeasonActivityTablePath;//[Offset: 0xb8, Size: 0x18]
	ArkSeasonActivityConfig[] SeasonActivityConfigs;//[Offset: 0xd0, Size: 0x10]
	int EntranceRankNum;//[Offset: 0x138, Size: 0x4]
	float FirstTimeLengthToRefreshEntranceRank;//[Offset: 0x13c, Size: 0x4]
	float TimeLengthToRefreshEntranceRank;//[Offset: 0x140, Size: 0x4]
	float TickActivityIsOpenInterval;//[Offset: 0x160, Size: 0x4]
	void OnTeamLeaderChanged(int64 LeaderUID);// 0x305c9c0
	void OnMemberRejectModifyList(FString InMemberName);// 0x305c9c0
	void OnChangeToTeamIdle();// 0x305c9c0
	bool IsProtocolHasTimeLock(int inLevel);// 0x293eda0
	ArkSelProtocolActivityDA* GetSelProtocolDA();// 0x293ed00
	int GetProtocolUnlockRemainTime(int inLevel);// 0x293eb70
	int GetCurrentSelProtocolPhaseLevelID();// 0x293ea60
	int GetCurrentSelProtocolPhaseIndex();// 0x293ea30
	enum GetCurrentActivityType();// 0x293ea10
	ArkSeasonActivityDA* GetCurrentActivityDA();// 0x293e9e0
	static ArkSeasonActivityManager* Get(const Object* WorldContext);// 0x293e5f0
	enum FindCurrentActivityType();// 0x293e530
	void CallLua_GMUnlockModifier(int InProtocolLevel);// 0x305c9c0
	void CallLua_GMTestProtocolAnimation();// 0x305c9c0
	float CalcProtocolsScoreScaleAndDifficultyValue(out const int[] InModifierList, out int OutDifficultyValue);// 0x293e390

--------------------------------
Class: ArkSelProtocolActivityDA.ArkSeasonActivityDA.DataAsset.Object
	int[] LevelToUnlockDays;//[Offset: 0x70, Size: 0x10]
	ArkSelProtocolPhase[] Phases;//[Offset: 0x80, Size: 0x10]
	SoftObjectPath SelProtocolTablePath;//[Offset: 0x90, Size: 0x18]
	SoftObjectPath SeasonQuestExtTablePath;//[Offset: 0xa8, Size: 0x18]
	bool GetSeasonQuestExtConfig(int questID, out ArkSeasonQuestExtConfig OutConfig);// 0x293ec00
	ArkSeasonProtocolConfig GetProtocolConfigByModifierID(int ModifierID);// 0x293eab0
	ArkSeasonProtocolConfig[] GetAllProtocolsByLevel(int FromLevel, int ToLevel);// 0x293e8a0
	int GetActivityPhaseLevelID(const Object* WorldContext);// 0x293e810
	int GetActivityPhaseIndex(const Object* WorldContext);// 0x293e780
	int GetActivityPhaseActivityID(const Object* WorldContext);// 0x293e6f0
	int FindProtocolMutexGroupID(int ModifierID);// 0x293e560

--------------------------------
Class: ArkSeasonActivityDA.DataAsset.Object
	int MasterActivityID;//[Offset: 0x30, Size: 0x4]
	enum CommodityMallType;//[Offset: 0x34, Size: 0x1]
	FName PrimaryMenu;//[Offset: 0x38, Size: 0x8]
	FName SecondaryMenu;//[Offset: 0x40, Size: 0x8]
	enum RankType;//[Offset: 0x48, Size: 0x1]
	class ArkUserWidgetBase* BackgroundWidgetClass;//[Offset: 0x50, Size: 0x8]
	FString MallCurrencyKey;//[Offset: 0x58, Size: 0x10]
	StaticMesh* EntranceMesh;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: ArkSeasonQuestExtConfig.TableRowBase
	int questID;//[Offset: 0x8, Size: 0x4]
	int[] ModifierIDList;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ArkSelProtocolPhase
	int activityID;//[Offset: 0x0, Size: 0x4]
	int LevelID;//[Offset: 0x4, Size: 0x4]
	enum RankScoreStatisticsType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: ArkSeasonProtocolConfig.TableRowBase
	int ModifierID;//[Offset: 0x8, Size: 0x4]
	int MutexGroupID;//[Offset: 0xc, Size: 0x4]
	int Level;//[Offset: 0x10, Size: 0x4]
	int ListViewRowIndex;//[Offset: 0x14, Size: 0x4]
	int Difficulty;//[Offset: 0x18, Size: 0x4]
	float Score;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ArkSeasonActivityConfig.TableRowBase
	enum ActivityType;//[Offset: 0x8, Size: 0x1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	ArkSeasonActivityDA* ActivityData;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ArkConfigManager.ArkManagerBase.Object
	<FString,DataTable*> DataTablesLoadedCache;//[Offset: 0x90, Size: 0x50]
	DataTable* MallGood;//[Offset: 0x360, Size: 0x28]
	DataTable* HavenConstConfig;//[Offset: 0x388, Size: 0x28]
	DataTable* PurchaseCfg;//[Offset: 0x3b0, Size: 0x28]
	DataTable* WeaponAccessory;//[Offset: 0x3d8, Size: 0x28]
	DataTable* OnlineConfig;//[Offset: 0x400, Size: 0x28]
	DataTable* HeroSurvivorConfig;//[Offset: 0x428, Size: 0x28]
	DataTable* PVENormalLevelMapsConfig;//[Offset: 0x450, Size: 0x28]
	DataTable* PVEDungeonLevelMapsConfig;//[Offset: 0x478, Size: 0x28]
	DataTable* AdsPicturesConfig;//[Offset: 0x4a0, Size: 0x28]
	DataTable* GearChipBaseConfig;//[Offset: 0x4c8, Size: 0x28]
	DataTable* GearChipDecompose;//[Offset: 0x4f0, Size: 0x28]
	DataTable* GearChipPrime;//[Offset: 0x518, Size: 0x28]
	DataTable* GearChipAttrEntryLib;//[Offset: 0x540, Size: 0x28]
	DataTable* GearChipAttrEntryGenerate;//[Offset: 0x568, Size: 0x28]
	DataTable* GearChipQualityUpgrade;//[Offset: 0x590, Size: 0x28]
	DataTable* GearChipLevelUpgrade;//[Offset: 0x5b8, Size: 0x28]
	DataTable* GearChipRecast;//[Offset: 0x5e0, Size: 0x28]
	DataTable* GearChipGenerateRule;//[Offset: 0x608, Size: 0x28]
	DataTable* GearChipBaseIDLibConfig;//[Offset: 0x630, Size: 0x28]
	DataTable* ConsumableEffectCfg;//[Offset: 0x658, Size: 0x28]
	DataTable* HavenLootBoxCfg;//[Offset: 0x680, Size: 0x28]
	DataTable* MetaSyncConfig;//[Offset: 0x6a8, Size: 0x28]
	DataTable* GameModeConfig;//[Offset: 0x6d0, Size: 0x28]
	DataTable* CommonEventConfig;//[Offset: 0x6f8, Size: 0x28]
	DataTable* RewardCardConfig;//[Offset: 0x720, Size: 0x28]
	DataTable* LoginRewardConfig;//[Offset: 0x748, Size: 0x28]
	DataTable* SeasonConstConfig;//[Offset: 0x770, Size: 0x28]
	DataTable* ItemAccessConfig;//[Offset: 0x798, Size: 0x28]
	DataTable* ItemSpecialCconfig;//[Offset: 0x7c0, Size: 0x28]
	DataTable* CommonRewardConfig;//[Offset: 0x7e8, Size: 0x28]
	DataTable* AITypeGroupConfig;//[Offset: 0x810, Size: 0x28]
	DataTable* SalvageRunConfig;//[Offset: 0x838, Size: 0x28]
	DataTable* LevelIDConfig;//[Offset: 0x860, Size: 0x28]
	DataTable* PveStoryLevelConfig;//[Offset: 0x888, Size: 0x28]
	DataTable* GrowthGuideDescConfig;//[Offset: 0x8b0, Size: 0x28]
	DataTable* GrowthGuidePromptsConfig;//[Offset: 0x8d8, Size: 0x28]
	DataTable* LevelEntranceConfig;//[Offset: 0x900, Size: 0x28]
	DataTable* SubmersibleConfig;//[Offset: 0x928, Size: 0x28]
	DataTable* HavenSettlementConfig;//[Offset: 0x950, Size: 0x28]
	DataTable* ActivityHavenLootBoxCfg;//[Offset: 0x978, Size: 0x28]
	DataTable* NanoBandSchemeDefaultConfig;//[Offset: 0x9b0, Size: 0x28]
	void OnDataTableModified(int DataTableID, FString DataTableName, DataTable* DataTable);// 0x26eb420
	ArkRewardCardConfig GetRewardCardConfig_ByID(int ID);// 0x26eb0a0
	ArkLevelEntranceConfig[] GetLevelEntranceConfigs_ByModePagingString(FString InSourceString);// 0x26eafb0
	ArkLevelEntranceConfig[] GetLevelEntranceConfigs_ByCatalogType(FName CatalogType);// 0x26eaee0
	ArkChipBaseConfig GetGearChipBaseInfo_ByID(int ID);// 0x26eae20
	void GetAllModePagingStringAndType(out FName[] CatalogTypeArray, out FString[] ModePagingSourceStringArray, out FString[] ModePagingShowStringArray);// 0x26eac50
	void GetAllLevelCatalogNameStringAndType(out FName[] CatalogTypeArray, out FString[] CatalogNameStringArray);// 0x26eab10
	static ArkConfigManager* Get(const Object* WorldContext);// 0x26eaa10
	ArkPVEStoryLevelConfig BP_GetPveStoryLevelConfig_ByLevelID(int LevelID);// 0x26ea6f0
	ArkLevelEntranceConfig BP_GetLevelEntranceConfig_ByLevelID(int LevelID);// 0x26ea630
	ArkCommonEvent BP_GetCommonEventConfig_ByEventID(int EventID);// 0x26ea440

--------------------------------
Class: ArkRewardCardConfig.TableRowBase
	int ID;//[Offset: 0x8, Size: 0x4]
	FString Desc;//[Offset: 0x10, Size: 0x10]
	int ValidDays;//[Offset: 0x20, Size: 0x4]
	int CurrencyItemID;//[Offset: 0x24, Size: 0x4]
	int CurrencyCount;//[Offset: 0x28, Size: 0x4]
	int CommodityID;//[Offset: 0x2c, Size: 0x4]
	bool IsRenewable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	ArkRewardCardItem[] InstantRewards;//[Offset: 0x38, Size: 0x10]
	ArkRewardCardItem[] DailyRewards;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: ArkRewardCardItem
	int ItemId;//[Offset: 0x0, Size: 0x4]
	int Num;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ArkLevelEntranceConfig.TableRowBase
	int LevelID;//[Offset: 0x8, Size: 0x4]
	FName CatalogType;//[Offset: 0xc, Size: 0x8]
	int CatalogOrder;//[Offset: 0x14, Size: 0x4]
	ArkDescText CatalogText;//[Offset: 0x18, Size: 0x28]
	ArkDescText ModePagingText;//[Offset: 0x40, Size: 0x28]
	ArkDescText UnderModeText;//[Offset: 0x68, Size: 0x28]
	ArkDescText TitleText;//[Offset: 0x90, Size: 0x28]
	ArkDescText SubTitleText;//[Offset: 0xb8, Size: 0x28]
	ArkDescText LockDescText;//[Offset: 0xe0, Size: 0x28]
	ArkLevelEntranceObjectiveDesc ObjectiveDesc;//[Offset: 0x108, Size: 0x20]
	Texture2D* EntranceTexture;//[Offset: 0x128, Size: 0x28]
	int RecommendedPowerMin;//[Offset: 0x150, Size: 0x4]
	int RecommendedPowerMax;//[Offset: 0x154, Size: 0x4]
	FString RecommendedString;//[Offset: 0x158, Size: 0x10]
	enum[] ConditionModes;//[Offset: 0x168, Size: 0x10]
	int ConditionModeMatchCount;//[Offset: 0x178, Size: 0x4]
	FText ConditionModeLockDescription;//[Offset: 0x180, Size: 0x18]
	bool HasCrustSeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]
	bool SupportSolo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x199, Size: 0x1]
	bool SupportTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19a, Size: 0x1]
	enum ModeIconType;//[Offset: 0x19b, Size: 0x1]

--------------------------------
Class: ArkLevelEntranceObjectiveDesc
	FString TimeString;//[Offset: 0x0, Size: 0x10]
	FText[] DescTextArray;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ArkChipBaseConfig.TableRowBase
	int ID;//[Offset: 0x8, Size: 0x4]
	enum ChipType;//[Offset: 0xc, Size: 0x1]
	enum Rarity;//[Offset: 0xd, Size: 0x1]
	int AttrEntryLibID;//[Offset: 0x10, Size: 0x4]
	int RecastLibID;//[Offset: 0x14, Size: 0x4]
	int PolarizationLibID;//[Offset: 0x18, Size: 0x4]
	int PolarizationCount;//[Offset: 0x1c, Size: 0x4]
	int EffectItemID;//[Offset: 0x20, Size: 0x4]
	int DisplayItemID;//[Offset: 0x24, Size: 0x4]
	FText Name;//[Offset: 0x28, Size: 0x18]
	FText Describe;//[Offset: 0x40, Size: 0x18]
	ArkChipDescInfo[] Describes;//[Offset: 0x58, Size: 0x10]
	Texture2D* icon;//[Offset: 0x68, Size: 0x28]
	int GrowthGuideScore;//[Offset: 0x90, Size: 0x4]

--------------------------------
Class: ArkChipDescInfo
	FText DescribeText;//[Offset: 0x0, Size: 0x18]
	FText NumberText;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: ArkPVEStoryLevelConfig.TableRowBase
	int LevelID;//[Offset: 0x8, Size: 0x4]
	FText DifficultyDesc;//[Offset: 0x10, Size: 0x18]
	int UnlockRequireLevelID;//[Offset: 0x28, Size: 0x4]
	FText ChapterName;//[Offset: 0x30, Size: 0x18]
	FText LevelName;//[Offset: 0x48, Size: 0x18]
	FText Desc;//[Offset: 0x60, Size: 0x18]
	FText ShortDesc;//[Offset: 0x78, Size: 0x18]
	Texture2D* Picture;//[Offset: 0x90, Size: 0x28]
	enum MapMode;//[Offset: 0xb8, Size: 0x1]
	enum SoloMapMode;//[Offset: 0xb9, Size: 0x1]
	FText UnlockRequireDesc;//[Offset: 0xc0, Size: 0x18]
	int ArmbandAugmentationEffectLevel;//[Offset: 0xd8, Size: 0x4]
	int RecommendedPower;//[Offset: 0xdc, Size: 0x4]
	ArkCostUnlockConfig GameCost;//[Offset: 0xe0, Size: 0x20]
	ArkCommonEventList UnlockRequireCondition;//[Offset: 0x100, Size: 0x20]

--------------------------------
Class: ArkCommonEvent.TableRowBase
	int EventID;//[Offset: 0x8, Size: 0x4]
	int PreEventID;//[Offset: 0xc, Size: 0x4]
	FString PreEventTarget;//[Offset: 0x10, Size: 0x10]
	ArkCommonEventDesc Event;//[Offset: 0x20, Size: 0x38]
	ArkDescText Desc;//[Offset: 0x58, Size: 0x28]

--------------------------------
Class: ArkCommonEventDesc
	enum OwnerType;//[Offset: 0x0, Size: 0x1]
	int OwnerParam;//[Offset: 0x4, Size: 0x4]
	enum OwnerAdditionalType;//[Offset: 0x8, Size: 0x1]
	int OwnerAdditionalParam;//[Offset: 0xc, Size: 0x4]
	enum LimitMode;//[Offset: 0x10, Size: 0x1]
	int LimitLevelId;//[Offset: 0x14, Size: 0x4]
	enum EventType;//[Offset: 0x18, Size: 0x1]
	FString EventParam;//[Offset: 0x20, Size: 0x10]
	enum EventParamType;//[Offset: 0x30, Size: 0x1]
	enum EventValueCalcType;//[Offset: 0x31, Size: 0x1]

--------------------------------
Class: ArkTextFormatManager.ArkManagerBase.Object
	<FName,class ArkTextFormatParserBase> FormatParserClasses;//[Offset: 0x90, Size: 0x50]
	bool bEnableBPExtension;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	<FName,ArkTextFormatParserBase*> ParserMap;//[Offset: 0xe8, Size: 0x50]
	float PreConvertNumber(out const <FString> InConvertFlags, float InValue);// 0x298f0e0
	FText K2_Format(FText Fmt, out const ArkTextFormatParam InFmtParam);// 0x298edf0
	static bool GetValueForBuffObject(out float outValue, ArkGameBuff* InBuffObj, FString InFieldName);// 0x298eca0
	bool GetValueForBuffID(out float outValue, int InBuffID, int InBuffIndex, const FName InFieldName);// 0x298eb30
	static ArkTextFormatManager* Get(const Object* WorldContext);// 0x298ea80
	void ConvertNumberByTokens(out FText OutResult, const float Value, out const FString[] InTokens, int InStartIndex);// 0x298e680
	FText ConvertNumber(const float Value, out const <FString> InConvertFlags);// 0x298e4c0
	static <FString> BuildConvertFlags(out const FString[] InTokens, int InStartIndex);// 0x298e210

--------------------------------
Class: ArkTextFormatParserBase.Object
	FText DoParse(out const FString[] InTokens, out const ArkTextFormatParam InFmtParam);// 0x298e890

--------------------------------
Class: ArkTextFormatParam
	FName ContextName;//[Offset: 0x0, Size: 0x8]
	Object* ObjectParam;//[Offset: 0x8, Size: 0x8]
	int UserData1;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ArkGameletManager.ArkManagerBase.Object
	<FString,Font*> GameletFonts;//[Offset: 0x90, Size: 0x50]
	DataTable* GameletAppNameTable;//[Offset: 0xe0, Size: 0x8]
	class UserWidget* GameletPageClass;//[Offset: 0xe8, Size: 0x8]
	FName PatFaceAdName;//[Offset: 0xf0, Size: 0x8]
	<FName,ArkGameletAppNameConfig> GameletAppNameToIDConfigMap;//[Offset: 0xf8, Size: 0x50]
	ArkGameletMessageHandle* GameletMessageHandle;//[Offset: 0x148, Size: 0x8]
	void SetEntranceStatus(out const FName AppID, bool bDisplayStatus);// 0x2753e30
	void ReqRefreshPandoraAppDisplay(out const FName appName, bool bShow);// 0x2753c20
	void ReqPanameraRefreshAdData(out const FName appName, bool bForce);// 0x2753b50
	void OpenGameletAppByName(out const FName appName, CanvasPanel* AppContainer, FName HUDState);// 0x2753950
	void OpenGameletAppByID(out const FName AppID, CanvasPanel* AppContainer, FName HUDState);// 0x2753840
	void OnViewCreated(Widget* GameletWidget, FString AppInfoJsonStr);// 0x2753760
	void OnViewAboutToDestroy(Widget* GameletWidget, FString AppInfoJsonStr);// 0x2753680
	int OnRefreshUserdata();// 0x2753650
	int OnReceiveSDKMessage(FString MsgJsonStr);// 0x27535a0
	void OnCultureChanged();// 0x2753420
	bool IsGameletPatFaceReady();// 0x2753360
	bool IsGameletAppReady(out const FName appName);// 0x27532c0
	bool GetEntranceStatus(out const FName AppID);// 0x2753070
	FString[] GetAllActCenterPageAppNames();// 0x2752db0
	int GetActiveActCenterPageNum();// 0x2752d80
	int GetActCenterPageRedPointModuleID();// 0x2752d50
	static ArkGameletManager* Get(const Object* WorldContext);// 0x2752cd0
	ArkPandoraActivityPageData[] GenerateAllActCenterPageWidgets(Object* WorldContextObject);// 0x2752b90
	void GameletLogout();// 0x2752b70
	void GameletLogin();// 0x2752b50
	ArkPandoraActivityPageData CreateActCenterPageWidgetByAppName(Object* WorldContextObject, FString appName, bool bAutoCloseOnDestruct);// 0x27528c0
	void CloseGameletAppByName(out const FName appName);// 0x2752830
	void CloseGameletAppByID(out const FName AppID);// 0x27527a0
	void CleanPanameraStatData();// 0x2752780
	void AddPanameraStatData(FString Key, FString Value);// 0x2752570

--------------------------------
Class: ArkPandoraActivityPageData
	FString appName;//[Offset: 0x0, Size: 0x10]
	FString PageName;//[Offset: 0x10, Size: 0x10]
	int sortPriority;//[Offset: 0x20, Size: 0x4]
	UserWidget* ArkPageWidgetBase;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ArkGameletAppNameConfig.TableRowBase
	FName appName;//[Offset: 0x8, Size: 0x8]
	FName ChineseAdID;//[Offset: 0x10, Size: 0x8]
	FName OverseaAdID;//[Offset: 0x18, Size: 0x8]
	FName ChineseAppID;//[Offset: 0x20, Size: 0x8]
	FName OverSeaAppID;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ArkGameletMessageHandle.Object
	void ShowItemTip(bool bShowTip, int ItemId, float posx, float posy, float Width, float Height, UserWidget* ParentUserWidget);// 0x1293dd0
	void OnPandoraRsp_pandoraShowTextTip(out const ArkPandoraMessageRsp ArkPandoraMessageRsp);// 0x2759b20
	void OnPandoraRsp_pandoraShowRedpoint(out const ArkPandoraMessageRsp ArkPandoraMessageRsp);// 0x2759a70
	void OnPandoraRsp_pandoraShowReceivedItem(out const ArkPandoraMessageRsp ArkPandoraMessageRsp);// 0x27599c0
	void OnPandoraRsp_pandoraShowLoading(out const ArkPandoraMessageRsp ArkPandoraMessageRsp);// 0x2759910
	void OnPandoraRsp_pandoraShowItemTip(out const ArkPandoraMessageRsp ArkPandoraMessageRsp);// 0x2759860
	void OnPandoraRsp_pandoraShowEntrance(out const ArkPandoraMessageRsp ArkPandoraMessageRsp);// 0x27597b0
	void OnPandoraRsp_pandoraRefreshPlayerLevel(out const ArkPandoraMessageRsp ArkPandoraMessageRsp);// 0x2759700
	void OnPandoraRsp_pandoraOpenUrl(out const ArkPandoraMessageRsp ArkPandoraMessageRsp);// 0x2759650
	void OnPandoraRsp_pandoraMidasPay(out const ArkPandoraMessageRsp ArkPandoraMessageRsp);// 0x27595a0
	void OnPandoraRsp_pandoraGoSystem(out const ArkPandoraMessageRsp ArkPandoraMessageRsp);// 0x27594f0
	void OnPandoraRsp_pandoraGoPandora(out const ArkPandoraMessageRsp ArkPandoraMessageRsp);// 0x2759440
	void OnPandoraRsp_pandoraGetItemInfo(out const ArkPandoraMessageRsp ArkPandoraMessageRsp);// 0x2759390
	void OnPandoraRsp_pandoraActCenterReady(out const ArkPandoraMessageRsp ArkPandoraMessageRsp);// 0x27592e0
	void OnPandoraRsp_panameraGetLabelsData(out const ArkPandoraMessageRsp ArkPandoraMessageRsp);// 0x2759230
	void OnPandoraRsp_panameraADPositionReady(out const ArkPandoraMessageRsp ArkPandoraMessageRsp);// 0x2759180
	void OnHandleConfirmDataBox();// 0x26cb690
	LuaOverridesClass LUA_OVERRIDES_ArkGameletMessageHandle;//[Size: 0x0]

--------------------------------
Class: ArkPandoraMessageRsp
	FString Type;//[Offset: 0x0, Size: 0x10]
	FString Content;//[Offset: 0x10, Size: 0x10]
	FString Info;//[Offset: 0x20, Size: 0x10]
	FString AppID;//[Offset: 0x30, Size: 0x10]
	FString appName;//[Offset: 0x40, Size: 0x10]
	FString openIds;//[Offset: 0x50, Size: 0x10]
	FString Source;//[Offset: 0x60, Size: 0x10]
	FString extend;//[Offset: 0x70, Size: 0x10]
	FString activityClassification;//[Offset: 0x80, Size: 0x10]
	FString platId;//[Offset: 0x90, Size: 0x10]
	FString payUrl;//[Offset: 0xa0, Size: 0x10]
	FString adId;//[Offset: 0xb0, Size: 0x10]
	FString openAppId;//[Offset: 0xc0, Size: 0x10]
	FString tabID;//[Offset: 0xd0, Size: 0x10]
	FString sortPriority;//[Offset: 0xe0, Size: 0x10]
	FString secondTabName;//[Offset: 0xf0, Size: 0x10]
	FString State;//[Offset: 0x100, Size: 0x10]
	FString ItemId;//[Offset: 0x110, Size: 0x10]
	FString posx;//[Offset: 0x120, Size: 0x10]
	FString posy;//[Offset: 0x130, Size: 0x10]
	FString Width;//[Offset: 0x140, Size: 0x10]
	FString Height;//[Offset: 0x150, Size: 0x10]

--------------------------------
Class: ArkPayManager.ArkManagerBase.Object
	FName ConfirmActionName;//[Offset: 0xa0, Size: 0x8]
	FText ConfirmActionText;//[Offset: 0xa8, Size: 0x18]
	FText RechargeSucceedContentText;//[Offset: 0xc0, Size: 0x18]
	FText RechargeSucceedTitleText;//[Offset: 0xd8, Size: 0x18]
	FText CustomRechargeIsEmptyTitleText;//[Offset: 0xf0, Size: 0x18]
	FText CustomRechargeIsEmptyContentText;//[Offset: 0x108, Size: 0x18]
	FText SteamOverlayWarningTitleText;//[Offset: 0x120, Size: 0x18]
	FText SteamOverlayWarningContentText;//[Offset: 0x138, Size: 0x18]
	class UserWidget* SteamOverlayWarningContentWidget;//[Offset: 0x150, Size: 0x8]
	FName SteamOverlayWarningConfirmActionName;//[Offset: 0x158, Size: 0x8]
	FText SteamOverlayWarningConfirmActionText;//[Offset: 0x160, Size: 0x18]
	FName SteamOverlayWarningCancelActionName;//[Offset: 0x178, Size: 0x8]
	FText SteamOverlayWarningCancelActionText;//[Offset: 0x180, Size: 0x18]
	FString SteamOverlayWarningURL;//[Offset: 0x198, Size: 0x10]
	SoftObjectPath RechargeConfigTablePath;//[Offset: 0x1a8, Size: 0x18]
	DataTable* LoadedRechargeConfigTable;//[Offset: 0x1c0, Size: 0x8]
	SoftObjectPath EpicIDMapConfigTablePath;//[Offset: 0x1c8, Size: 0x18]
	DataTable* LoadedEpicIDMapConfigTable;//[Offset: 0x1e0, Size: 0x8]
	SoftObjectPath RechargeRewardConfigTablePath;//[Offset: 0x3a8, Size: 0x18]
	DataTable* RechargeRewardConfigTable;//[Offset: 0x3c0, Size: 0x8]
	SoftObjectPath PurchasableItemConfigTablePath;//[Offset: 0x440, Size: 0x18]
	DataTable* LoadedPurchasableItemConfigTable;//[Offset: 0x458, Size: 0x8]
	SoftObjectPath CurrencyTypeLocConfigTablePath;//[Offset: 0x4b0, Size: 0x18]
	DataTable* LoadedCurrencyTypeLocConfigTable;//[Offset: 0x4c8, Size: 0x8]
	SoftObjectPath PlatformPacksConfigTablePath;//[Offset: 0x520, Size: 0x18]
	DataTable* LoadedPlatformPacksConfigTable;//[Offset: 0x538, Size: 0x8]
	ArkPayEvent[] PayEvents;//[Offset: 0x590, Size: 0x10]
	bool TryLoadRechargeConfig();// 0x287f660
	bool TryLoadPurchasableItemConfig();// 0x287f630
	bool TryGetRechargeChannelPriceAndCurrencyTypeByRechargeID(int InRechargeID, out int OutPrice, out FString OutCurrencyType);// 0x287f4f0
	bool TryGetCurrentAreaCurrencyPriceText(int InPrice, out FText OutPriceText);// 0x287f3d0
	bool TryGetCurrencyPriceTextByCommodityID(const int inID, out FText OutCurrentPriceText, out FText OutOriginPriceText);// 0x287f220
	bool TryGetChannelPriceByCommodityID(const int inID, out int OutChannelPrice);// 0x287f150
	bool TryGetChannelPriceAndCurrencyTypeByCommodityID(const int inID, out int OutPrice, out FString OutCurrencyType);// 0x287f010
	bool TryGetChannelCurrencyTypeByCommodityID(const int inID, out FString OutCurrencyType);// 0x287ef20
	void SetTotalRechargeAmount(int amount);// 0x287eea0
	void SetRechargeRewardClaimedByLevel(int Level, bool bClaimed);// 0x287ede0
	void SetProductList(out const ArkPayProductList[] InProductList);// 0x287ec70
	void SetOrderResult(const FString InOrderID, const bool bInPayResult);// 0x287eb40
	void SetEnv(int InIsSandbox);// 0x287eac0
	void SetAreaInfo(FString InCountryCode, FString InCurrencyType);// 0x287e9d0
	void RequestGetProductList();// 0x287e9b0
	void ReprovideFinished();// 0x287e990
	void ReProvide();// 0x287e890
	void ReportPlatformDLCPacks(FString InPacksType);// 0x287e8b0
	void PurchaseCommodity(const int inID, const int InNum, out const delegate InOnBuyItemPaymentResult);// 0x287e760
	void OpenWaitingRechargeMenu();// 0x287e740
	void OpenCustomRechargeIsEmptyDataBox();// 0x305c9c0
	void OnRechargeSucceed(int InRechargeID, FString InOrderID, int InRechargeCurrencyNum);// 0x305c9c0
	void LeavePay();// 0x287e720
	bool IsRechargeRewardClaimed(int Level);// 0x287e690
	bool IsPurchasableCommodityByCommodityID(const int inID);// 0x287e600
	FString GetRegistrationAreaCurrencyType();// 0x287e580
	ArkRechargeRewardConfig[] GetRechargeRewardConfigs();// 0x287e480
	<int,ArkHavenRechargeConfig> GetRechargeInfosByChannelType(enum InChannelType);// 0x287e350
	<int,ArkHavenRechargeConfig> GetRechargeInfos();// 0x287e240
	bool GetRechargeInfoByRechargeID(int InRechargeID, out ArkHavenRechargeConfig OutRechargeInfo);// 0x287e100
	bool GetRechargeInfoByChannelTypeAndChannelItemID(enum InChannelType, FString InChannelItemID, out ArkHavenRechargeConfig OutRechargeInfo);// 0x287df20
	void GetRechargeChannelPriceAndCurrencyType(out const ArkHavenRechargeConfig InRechargeItem, out int OutPrice, out FString OutCurrencyType);// 0x287dd60
	ArkPayProduct[] GetProducts(FString InChannel);// 0x287dbc0
	FString GetOfferIDByCatalogItemID(FString InCatalogItemID);// 0x287d850
	void GetGoodsInfo();// 0x287d7a0
	FText GetCurrencyUnitByCurrencyType(FString InCurrencyType);// 0x287d6a0
	FText GetCurrencyPriceText(const int InOriginPrice, FString InCurrencyType, const float InDiscount);// 0x287d510
	FText GetCurrencyFormatByCurrencyType(FString InCurrencyType);// 0x287d410
	float GetCommodityDiscount(int InCommodityID);// 0x305c9c0
	FString GetCoinItemIDByRechargeID(int InRechargeID);// 0x287d340
	void GetCoinInfo();// 0x287d320
	void GetChannelPriceAndCurrencyType(out const ArkPurchasableItemConfig InChannelItem, out int OutPrice, out FString OutCurrencyType);// 0x287d110
	int GetChannelPrice(out const ArkPurchasableItemConfig InChannelItem);// 0x287cfa0
	FString GetChannelCurrencyType(out const ArkPurchasableItemConfig InChannelItem);// 0x287cdf0
	FString GetCatalogItemIDByOfferID(FString InOfferID);// 0x287ccc0
	static ArkPayManager* Get(const Object* WorldContext);// 0x287cbc0
	void FinishRechargeWithCache(int InClientErrorCode);// 0x287cb40
	void FinishRecharge(int InRechargeID, FString InOrderID, int InClientErrorCode);// 0x287ca30
	void FinishGetProductList();// 0x287ca10
	void EnterPay();// 0x287c9f0
	void EndPurchase(out const ArkBuyGoodsInGameParam InParam);// 0x287c920
	void EmptyStoreEvent();// 0xae2270
	void CloseWaitingRechargeMenu();// 0x287c900
	void ClearProductList();// 0x287c880
	bool CheckSteamOverlay();// 0x287c850
	bool CanPurchaseInCurrentPlatform();// 0x287c820
	void CallLua_RequestDataUpdate();// 0x305c9c0
	void CallLua_OpenSteamOverlayWarningDataBox();// 0x305c9c0
	void BeginRecharge(int InRechargeID, FString InOrderID, const <FString,FString> InAppExtends);// 0x287c650
	void BeginPurchase(out const ArkBuyGoodsInGameParam InParam);// 0x287c580
	void AddUniqueProducts(FString InChannel, out const ArkPayProduct[] InProducts);// 0x287c410
	void AddUniqueProduct(FString InChannel, out const ArkPayProduct InProduct);// 0x287c2a0

--------------------------------
Class: ArkPayEvent
	enum PayEventType;//[Offset: 0x0, Size: 0x1]
	int ClientErrorCode;//[Offset: 0x4, Size: 0x4]
	int RechargeID;//[Offset: 0x8, Size: 0x4]
	FString OrderID;//[Offset: 0x10, Size: 0x10]
	ArkBuyGoodsInGameParam Param;//[Offset: 0x20, Size: 0x40]

--------------------------------
Class: ArkBuyGoodsInGameParam
	FString OrderID;//[Offset: 0x0, Size: 0x10]
	int CommodityID;//[Offset: 0x10, Size: 0x4]
	int CommodityCount;//[Offset: 0x14, Size: 0x4]
	FString PayChannelItemID;//[Offset: 0x18, Size: 0x10]
	FString PayInfo;//[Offset: 0x28, Size: 0x10]
	int ErrorCode;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: ArkPayProductList
	FString Channel;//[Offset: 0x0, Size: 0x10]
	ArkPayProduct[] Products;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ArkPayProduct
	FString ID;//[Offset: 0x0, Size: 0x10]
	FString Name;//[Offset: 0x10, Size: 0x10]
	int ExchangeRate;//[Offset: 0x20, Size: 0x4]
	int price;//[Offset: 0x24, Size: 0x4]
	FString Type;//[Offset: 0x28, Size: 0x10]
	FString CurrencyType;//[Offset: 0x38, Size: 0x10]
	FString Country;//[Offset: 0x48, Size: 0x10]
	FString Desc;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: ArkRechargeRewardConfig.TableRowBase
	int RechargeLevel;//[Offset: 0x8, Size: 0x4]
	float RechargeAmount;//[Offset: 0xc, Size: 0x4]
	ArkRechargeGiveawayData[] Rewards;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ArkRechargeGiveawayData
	int ItemId;//[Offset: 0x0, Size: 0x4]
	int ItemCount;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ArkHavenRechargeConfig.TableRowBase
	int RechargeID;//[Offset: 0x8, Size: 0x4]
	enum ChannelType;//[Offset: 0xc, Size: 0x1]
	FString ChannelItemID;//[Offset: 0x10, Size: 0x10]
	Texture2D* RechargeIcon;//[Offset: 0x20, Size: 0x28]
	int CurrencyID;//[Offset: 0x48, Size: 0x4]
	int CurrencyNum;//[Offset: 0x4c, Size: 0x4]
	float RealCurrencyPrice;//[Offset: 0x50, Size: 0x4]
	ArkRechargeGiveawayData[] Giveaways;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: ArkPurchasableItemConfig.TableRowBase
	int ID;//[Offset: 0x8, Size: 0x4]
	FString WeGameItemID;//[Offset: 0x10, Size: 0x10]
	FString SteamItemID;//[Offset: 0x20, Size: 0x10]
	FString EpicItemID;//[Offset: 0x30, Size: 0x10]
	FString PS5ItemID;//[Offset: 0x40, Size: 0x10]
	FString XSXItemID;//[Offset: 0x50, Size: 0x10]
	FString LauncherItemID;//[Offset: 0x60, Size: 0x10]
	enum Type;//[Offset: 0x70, Size: 0x1]
	float price;//[Offset: 0x74, Size: 0x4]
	float OriginPrice;//[Offset: 0x78, Size: 0x4]
	FString Name;//[Offset: 0x80, Size: 0x10]
	FString Desc;//[Offset: 0x90, Size: 0x10]

--------------------------------
Class: AkInitBank.AkAssetBase.AkAudioType.Object
	FString[] AvailableAudioCultures;//[Offset: 0x50, Size: 0x10]
	FString DefaultLanguage;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: ArkHavenSectionConfig.TableRowBase
	enum SectionID;//[Offset: 0x8, Size: 0x1]
	FText UIName;//[Offset: 0x10, Size: 0x18]
	ArkHavenStatPropertyRef TierStat;//[Offset: 0x28, Size: 0xc]
	ArkHavenUnlockPropertyRef AvailabilityUnlock;//[Offset: 0x34, Size: 0xc]
	DataTable* UpgradeConfig;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: ArkRefreshSurvivorConfig.TableRowBase
	int ID;//[Offset: 0x8, Size: 0x4]
	FText Desc;//[Offset: 0x10, Size: 0x18]
	enum DateFormatType;//[Offset: 0x28, Size: 0x1]
	FString DateString;//[Offset: 0x30, Size: 0x10]
	int RefreshIntervalSecs;//[Offset: 0x40, Size: 0x4]
	int RefreshTimes;//[Offset: 0x44, Size: 0x4]
	int PackID;//[Offset: 0x48, Size: 0x4]
	ArkHavenStatValueIncrementOperation[] Conditions;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: ArkHavenLevelConfigRow.TableRowBase
	UInt32Property XPCost;//[Size: 0x4]
	ArkHavenStatValueIncrementOperation[] StatChanges;//[Offset: 0x10, Size: 0x10]
	ArkNormalItemInfo[] ClientAwardInfoArray;//[Offset: 0x20, Size: 0x10]
	ArkHavenUnlockPropertyRef[] Unlocks;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ArkNormalItemInfo
	int ItemId;//[Offset: 0x0, Size: 0x4]
	int ItemCount;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ArkHavenNervaLevelConfigRow.TableRowBase
	int XPCost;//[Offset: 0x8, Size: 0x4]
	ArkHavenStatValueIncrementOperation[] StatChanges;//[Offset: 0x10, Size: 0x10]
	ArkGeneralItemCfg[] RewardItems;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: ArkBattlePassLevelConfig.TableRowBase
	int BattleSeasonID;//[Offset: 0x8, Size: 0x4]
	int Level;//[Offset: 0xc, Size: 0x4]
	int Exp;//[Offset: 0x10, Size: 0x4]
	ArkBattlePassReward[] Rewards;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ArkBattlePassReward
	int ID;//[Offset: 0x0, Size: 0x4]
	int Count;//[Offset: 0x4, Size: 0x4]
	int RefPrice;//[Offset: 0x8, Size: 0x4]
	enum RewardType;//[Offset: 0xc, Size: 0x1]
	enum IconType;//[Offset: 0xd, Size: 0x1]
	enum DetailType;//[Offset: 0xe, Size: 0x1]
	bool bHLCover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 0x1]
	enum HLBorderType;//[Offset: 0x10, Size: 0x1]
	bool bIsExpensive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	FText ExtraDesc;//[Offset: 0x18, Size: 0x18]
	bool bHasDetail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bDisplayHighValueFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]

--------------------------------
Class: ArkArmBandConfigRow.TableRowBase
	int ArmBandID;//[Offset: 0x8, Size: 0x4]
	bool bInDevelopment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	FText Name;//[Offset: 0x10, Size: 0x18]
	FText Desc;//[Offset: 0x28, Size: 0x18]
	int ClassID;//[Offset: 0x40, Size: 0x4]
	ArkHavenStatValueIncrementOperation[] UnlockConditions;//[Offset: 0x48, Size: 0x10]
	ArkHavenStatValueIncrementOperation[] UnlockCost;//[Offset: 0x58, Size: 0x10]
	int PerkTreeID;//[Offset: 0x68, Size: 0x4]
	int ActiveSkillUnlockLevel;//[Offset: 0x6c, Size: 0x4]
	class ArkItemChip[] ActiveSkills;//[Offset: 0x70, Size: 0x10]
	class ArkItemChip* PassiveSkill;//[Offset: 0x80, Size: 0x8]
	PaperSprite* icon;//[Offset: 0x88, Size: 0x28]
	class ArkItem* ItemClass;//[Offset: 0xb0, Size: 0x8]
	enum[] AllowedMapMode;//[Offset: 0xb8, Size: 0x10]

--------------------------------
Class: ArkItemChip.ArkItem.Object
	int PerkID;//[Offset: 0x98, Size: 0x4]
	enum ChipType;//[Offset: 0x9c, Size: 0x1]
	ArkChipDataInfo ChipInfo;//[Offset: 0xa0, Size: 0x50]
	ArkGameBuff* ItemPassiveBuff;//[Offset: 0xf0, Size: 0x8]
	ArkGameBuff*[] ItemBuffs;//[Offset: 0xf8, Size: 0x10]

--------------------------------
Class: ArkChipDataInfo.TableRowBase
	class ArkItem* ChipItem;//[Offset: 0x8, Size: 0x8]
	int ChipID;//[Offset: 0x10, Size: 0x4]
	enum ChipType;//[Offset: 0x14, Size: 0x1]
	bool bIsActiveChip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]
	class GameplayAbility* ActiveAbility;//[Offset: 0x18, Size: 0x8]
	float CD;//[Offset: 0x20, Size: 0x4]
	FName CDtag;//[Offset: 0x24, Size: 0x8]
	int[] BuffIDArray;//[Offset: 0x30, Size: 0x10]
	class ArkGameBuff* PassiveBuff;//[Offset: 0x40, Size: 0x8]
	bool bCanLevelUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool bCanStack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	bool bIsSyncChip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
	bool bIsDesyncChip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1]
	int ItemId;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: ArkPlayerBagComponent.ArkCharacterLiteComponent.LiteComponent.Object
	float PickupCrateEnableDelayTime;//[Offset: 0xa8, Size: 0x4]
	ArkItemAvatarBag* AvatarBagItem;//[Offset: 0xb0, Size: 0x8]
	SkeletalMeshComponent* AvatarBagMesh;//[Offset: 0xb8, Size: 0x8]
	SkeletalMesh* VehicleMesh;//[Offset: 0xc0, Size: 0x28]
	MaterialInterface* OverrideInvisibleVehicleMaterial;//[Offset: 0xe8, Size: 0x28]
	ArkSoftSkeletalMeshComponentWithPool* VehicleMeshComponent;//[Offset: 0x110, Size: 0x8]
	ArkSoftSkeletalMeshComponentWithPool* InvisibleVehicleMeshComponent;//[Offset: 0x118, Size: 0x8]
	<ParticleSystem*,ArkSoftParticleSystemComponentWithPool*> PickSucEffectParComMap;//[Offset: 0x120, Size: 0x50]
	ArkDropOutAnimationPack EliminatedAnimations;//[Offset: 0x170, Size: 0x50]
	ArkDropOutAnimationPack EliminatedAnimationsChief;//[Offset: 0x1c0, Size: 0x50]
	ArkDropOutAnimationPack WinAnimations;//[Offset: 0x210, Size: 0x50]
	ArkDeathCrate* PlayerDeathCrateRef;//[Offset: 0x260, Size: 0x8]
	SkeletalMesh* CacheSkeletalMesh;//[Offset: 0x268, Size: 0x28]
	AnimSequenceBase* CacheEliminatedAnimation;//[Offset: 0x290, Size: 0x28]
	AnimSequenceBase* CacheWinAnimation;//[Offset: 0x2b8, Size: 0x28]
	void OnPlayerAvatarPartChanged(const ArkItemAvatar* AvatarItem, enum PartType, SkeletalMeshComponent* PartMesh, bool bFPPPart);// 0x28a05c0
	void OnAnimationLoadDone(bool bWin, ArkSoftSkeletalMeshComponent* PlayerBagMesh);// 0x28a03e0

--------------------------------
Class: ArkItemAvatarBag.ArkItemAvatar.ArkItem.Object
	ArkPickupBagAnimationData PickupAnimationData;//[Offset: 0x190, Size: 0x80]

--------------------------------
Class: ArkPickupBagAnimationData.TableRowBase
	SkeletalMesh* SkeletalMesh;//[Offset: 0x8, Size: 0x28]
	AnimSequenceBase* EliminatedAnimation;//[Offset: 0x30, Size: 0x28]
	AnimSequenceBase* WinAnimation;//[Offset: 0x58, Size: 0x28]

--------------------------------
Class: ArkSoftSkeletalMeshComponentWithPool.ArkSoftSkeletalMeshComponent.ArkSkeletalMeshComponent.SkeletalMeshComponentBudgeted.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ArkDropOutAnimationPack
	AnimSequenceBase* CharacterAnimation;//[Offset: 0x0, Size: 0x28]
	AnimSequenceBase* VehicleAnimation;//[Offset: 0x28, Size: 0x28]

--------------------------------
Class: ArkPostProcessData.Object
	FString TypeName;//[Offset: 0x28, Size: 0x10]
	int Count;//[Offset: 0x38, Size: 0x4]
	bool IsSingleton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	ArkPostProcess* PostProcess;//[Offset: 0x40, Size: 0x8]
	FString Content;//[Offset: 0x48, Size: 0x10]
	ArkPostProcess* GetPostProcess();// 0x28fe8f0

--------------------------------
Class: ArkPostProcess.Actor.Object
	delegate OnActiveFinished;//[Offset: 0x2e8, Size: 0x10]
	delegate OnDeactiveFinished;//[Offset: 0x2f8, Size: 0x10]
	MaterialInstance*[] MaterialList;//[Offset: 0x308, Size: 0x10]
	MaterialInstance*[] MaterialListForDemocracy;//[Offset: 0x318, Size: 0x10]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	MaterialInstanceDynamic*[] InstanceList;//[Offset: 0x330, Size: 0x10]
	ArkPostProcessData* Data;//[Offset: 0x348, Size: 0x8]
	ArkPlayer* MyPlayer;//[Offset: 0x350, Size: 0x8]
	void TryDestroy();// 0x28ff0f0
	void TryDeactive();// 0x28ff0d0
	void OnDeactiveFinished__DelegateSignature(FString NewType);// 0x305c9c0
	void OnActiveFinished__DelegateSignature(FString NewType);// 0x305c9c0
	bool IsActive();// 0x2662090
	ArkPlayer* GetPlayer();// 0x28fe8c0
	MaterialInstanceDynamic* GetInstance(int Index);// 0x28fe830
	void C2BP_OnTick(float DeltaTime);// 0x305c9c0
	void C2BP_OnExecute();// 0x305c9c0
	void C2BP_OnDeactive();// 0x305c9c0
	void C2BP_OnActive();// 0x305c9c0

--------------------------------
Class: ArkPlayerSyncShuttleComponent.ArkCharacterLiteComponent.LiteComponent.Object
	AkAudioEvent* AkEventSyncShuttleStart;//[Offset: 0xa8, Size: 0x8]
	AkAudioEvent* AkEventSyncShuttleFail;//[Offset: 0xb0, Size: 0x8]
	AkAudioEvent* AkEventSyncShuttleSuccess;//[Offset: 0xb8, Size: 0x8]

--------------------------------
Class: ArkPlayerMultiWidgetsComponent.ArkCharacterLiteComponent.LiteComponent.Object
	<FString,class UserWidget> WidgetClassMap;//[Offset: 0xa8, Size: 0x50]
	MaterialInstance* WidgetMaterial;//[Offset: 0xf8, Size: 0x8]
	LinearColor BackgroundColor;//[Offset: 0x100, Size: 0x10]
	bool bAttachToRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 0x1]
	bool bAttachToLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x110, Size: 0x1]
	<FString,WidgetComponent*> WidgetComponentMap;//[Offset: 0x118, Size: 0x50]
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x28beb80

--------------------------------
Class: ArkPlayerAssistInfo
	float CauseDamageTime;//[Offset: 0x0, Size: 0x4]
	ArkPlayer* CauseDamagePlayer;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ArkProjectileAutoReviveTower.ArkProjectileThrowableBase.ArkProjectileBase.Actor.Object
	float reviveAreaRadius;//[Offset: 0x780, Size: 0x4]
	float ReviveTime;//[Offset: 0x784, Size: 0x4]
	float reviveStartDelayTime;//[Offset: 0x788, Size: 0x4]
	ArkSoftStaticMeshComponent* throwableMesh;//[Offset: 0x790, Size: 0x8]
	ArkSoftStaticMeshComponent* reviveMesh;//[Offset: 0x798, Size: 0x8]
	SphereComponent* reviveArea;//[Offset: 0x7a0, Size: 0x8]
	ReviveInfo ReviveInfo;//[Offset: 0x7a8, Size: 0x10]
	RevivePlayerList(UInt64Property)[] RevivePlayerList;//[Offset: 0x7b8, Size: 0x10]
	ArkPlayer* LocalPlayer;//[Offset: 0x838, Size: 0x8]
	AkAudioEvent* akDestorySound;//[Offset: 0x850, Size: 0x28]
	ParticleSystem* akDestoryFX;//[Offset: 0x878, Size: 0x28]
	AkAudioEvent* akActiveSound;//[Offset: 0x8a0, Size: 0x8]
	ParticleSystem* akActiveFX;//[Offset: 0x8a8, Size: 0x28]
	ArkSoftParticleSystemComponentWithPool* activeFXInstance;//[Offset: 0x8d8, Size: 0x8]
	delegate OnDroneHealthUpdate;//[Offset: 0x8e0, Size: 0x10]
	void UpdateDroneHealth(float NewHealth, float TotalHealth);// 0x2903200
	void TickPlayerInReviveArea();// 0x2902c10
	void StartShowReviveProgress(RevivePlayerID(UInt64Property) RevivePlayerID);// 0x2903180
	void RevivePlayer(PlayerId(UInt64Property) PlayerId);// 0x2902f00
	void OnRep_ReviveStart();// 0x2902d30
	void OnRep_RevivePlayerList();// 0x2902d10
	void OnLocalPlayerLeave();// 0x305c9c0
	void OnLocalPlayerEnter();// 0x305c9c0
	Vector GetDroneCenterLocation();// 0x305c9c0
	void EndShowReviveProgress(RevivePlayerID(UInt64Property) RevivePlayerID);// 0x2902500

--------------------------------
Class: ReviveInfo
	bool bReviveStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector SyncLocation;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: ArkDSPlayerWeaponPluginData
	int ItemId;//[Offset: 0x0, Size: 0x4]
	int Skin;//[Offset: 0x4, Size: 0x4]
	int SkinLevel;//[Offset: 0x8, Size: 0x4]
	int Pendant;//[Offset: 0xc, Size: 0x4]
	int Decal;//[Offset: 0x10, Size: 0x4]
	int GunTech;//[Offset: 0x14, Size: 0x4]
	int GunTechLevel;//[Offset: 0x18, Size: 0x4]
	int[] Accessories;//[Offset: 0x20, Size: 0x10]
	int[] GuntechBuffList;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ArkPlayerTeamData.ArkGameDataCollection.Object
	int ID;//[Offset: 0x58, Size: 0x4]
	ArkPlayer*[] PlayerCharacters;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: ArkInfluenceMap.Object
	void SetInfluenceSourceValue(int SourceID, float Value);// 0x27f2ab0
	void SetInfluenceSourceRadius(int SourceID, float Radius);// 0x27f29e0
	void SetInfluenceSourceLocation(int SourceID, float X, float Y);// 0x27f28e0
	void RemoveInfluenceSource(int SourceID);// 0x27f26e0
	void Init(float centerOffsetX, float centerOffsetY, float Size, float GridSize);// 0x27f1f80
	float GetInfluenceValue(float X, float Y);// 0x27f1980
	int AddInfluenceSource(float X, float Y, float Value, float Radius, CurveFloat* DecayCurve);// 0x27f15a0

--------------------------------
Class: ArkAIDataBlackboard.ArkGameDataCollection.Object
	int MaxSwarmNum;//[Offset: 0x6c, Size: 0x4]
	int MaxEliteNum;//[Offset: 0x70, Size: 0x4]
	int CurrentSwarmNum;//[Offset: 0x74, Size: 0x4]
	int CurrentEliteNum;//[Offset: 0x78, Size: 0x4]
	<FName,ArkNpcNumSummary> SpawnMarkerNpcNumSummary;//[Offset: 0x80, Size: 0x50]
	<int,ArkNpc*> AICharacters;//[Offset: 0xd0, Size: 0x50]
	ArkNPC_EliteBase*[] EliteAICharacters;//[Offset: 0x120, Size: 0x10]
	ArkSwarmRagdollCorpseArchive[] SwarmRagdollCorpses;//[Offset: 0x130, Size: 0x10]
	<int,ArkSwarmStaticCorpseArchive> SwarmStaticCorpses;//[Offset: 0x140, Size: 0x50]
	<int,ArkAICorpseCollisionChunk*> CorpseCollisionChunks;//[Offset: 0x190, Size: 0x50]
	ArkSwarmEntityCharacter*[] SwarmLUTWithRecycleID;//[Offset: 0x2f8, Size: 0x10]
	PhysicalMaterial* CorpsePhysicalMaterial;//[Offset: 0x310, Size: 0x8]
	<ArkAISpawnMarker*> ServerSpawnMarkers;//[Offset: 0x3d0, Size: 0x50]
	ArkInfluenceMap* ServerAISpawnNearMap;//[Offset: 0x4c0, Size: 0x8]
	ArkInfluenceMap* ServerAISpawnFarMap;//[Offset: 0x4c8, Size: 0x8]
	ArkInfluenceMap* ServerAIDespawnMap;//[Offset: 0x4d0, Size: 0x8]
	ArkInfluenceMap* ServerBossSpawnMap;//[Offset: 0x578, Size: 0x8]
	ArkInfluenceMap* ServerBossDespawnMap;//[Offset: 0x580, Size: 0x8]
	ArkMapGridCache* CharacterCache;//[Offset: 0x588, Size: 0x8]
	ArkAICommandUtility* ServerCommandUtility;//[Offset: 0x590, Size: 0x8]
	ArkInfluenceMap* ServerAIBirthInfluenceMap;//[Offset: 0x5a8, Size: 0x8]
	Actor*[] ServerAIPerceptionWhiteList;//[Offset: 0x5b8, Size: 0x10]
	<ArkPlayer*,ArkNpc*> RevivePlayerRecord;//[Offset: 0x5e0, Size: 0x50]
	int PVEDifficultyLevel;//[Offset: 0x630, Size: 0x4]
	<ArkCharacterBase*,ArkNpcFollowStandPositionInfo> NpcFollowStandPositionInfo;//[Offset: 0x638, Size: 0x50]
	ArkNpc*[] ClientRemarkableCharacters;//[Offset: 0x688, Size: 0x10]
	Object* GetElementalOverrideAssets(FString Key, class Object ElementChipClass, bool bIsClass);// 0x2628f50

--------------------------------
Class: ArkNpcNumSummary

--------------------------------
Class: ArkSwarmRagdollCorpseArchive
	InstancedSkeletalMeshActor* InstanceActor;//[Offset: 0x0, Size: 0x8]
	ArkSwarmEntityCharacter* SwarmCharacterUnsafe;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: ArkSwarmStaticCorpseArchive

--------------------------------
Class: ArkAICorpseCollisionChunk.Actor.Object
	int Index;//[Offset: 0x2e8, Size: 0x4]
	ArkAICorpseCollisionPillar[] Pillars;//[Offset: 0x2f0, Size: 0x10]
	ProceduralMeshComponent* ProceduralMesh;//[Offset: 0x300, Size: 0x8]
	ArkAIReplicatedStaticCorpseData[] StaticCorpseData;//[Offset: 0x308, Size: 0x10]
	void OnRep_StaticCorpseData();// 0x26250c0
	void OnRep_ProceduralMesh();// 0x2625020
	void OnRep_Pillars();// 0x2625020
	void OnRep_Index();// 0x2625020

--------------------------------
Class: ArkAICorpseCollisionPillar
	ArkAICorpseCollisionCell[] Cells;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ArkAICorpseCollisionCell
	float Floor;//[Offset: 0x0, Size: 0x4]
	float Ceil;//[Offset: 0x4, Size: 0x4]
	float[] CornerFloors;//[Offset: 0x8, Size: 0x10]
	float[] CornerCeils;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ProceduralMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x758, Size: 0x1]
	bool bUseAsyncCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x759, Size: 0x1]
	BodySetup* ProcMeshBodySetup;//[Offset: 0x760, Size: 0x8]
	ProcMeshSection[] ProcMeshSections;//[Offset: 0x768, Size: 0x10]
	KConvexElem[] CollisionConvexElems;//[Offset: 0x778, Size: 0x10]
	BoxSphereBounds LocalBounds;//[Offset: 0x788, Size: 0x1c]
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x7a8, Size: 0x10]
	void UpdateMeshSection_LinearColor(int SectionIndex, out const Vector[] Vertices, out const Vector[] Normals, out const Vector2D[] UV0, out const Vector2D[] UV1, out const Vector2D[] UV2, out const Vector2D[] UV3, out const LinearColor[] VertexColors, out const ProcMeshTangent[] Tangents);// 0xb8e4f0
	void UpdateMeshSection(int SectionIndex, out const Vector[] Vertices, out const Vector[] Normals, out const Vector2D[] UV0, out const Color[] VertexColors, out const ProcMeshTangent[] Tangents);// 0xb8e230
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0xb8df40
	void OnBeginOverlapCallback(PrimitiveComponent* HitComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0xb8dd30
	bool IsMeshSectionVisible(int SectionIndex);// 0xb8dca0
	int GetNumSections();// 0xb8d6d0
	void CreateMeshSection_LinearColor(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const Vector2D[] UV0, out const Vector2D[] UV1, out const Vector2D[] UV2, out const Vector2D[] UV3, out const LinearColor[] VertexColors, out const ProcMeshTangent[] Tangents, bool bCreateCollision);// 0xb8cfd0
	void CreateMeshSection(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const Vector2D[] UV0, out const Color[] VertexColors, out const ProcMeshTangent[] Tangents, bool bCreateCollision);// 0xb8cc80
	void ClearMeshSection(int SectionIndex);// 0xb8c320
	void ClearCollisionConvexMeshes();// 0xb8c300
	void ClearAllMeshSections();// 0xb8c2e0
	void AddCollisionConvexMesh(Vector[] ConvexVerts);// 0xb8bfb0

--------------------------------
Class: ProcMeshSection
	ProcMeshVertex[] ProcVertexBuffer;//[Offset: 0x0, Size: 0x10]
	ProcIndexBuffer(UInt32Property)[] ProcIndexBuffer;//[Offset: 0x10, Size: 0x10]
	Box SectionLocalBox;//[Offset: 0x20, Size: 0x1c]
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool bSectionVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]

--------------------------------
Class: ProcMeshVertex
	Vector Position;//[Offset: 0x0, Size: 0xc]
	Vector Normal;//[Offset: 0xc, Size: 0xc]
	ProcMeshTangent Tangent;//[Offset: 0x18, Size: 0x10]
	Color Color;//[Offset: 0x28, Size: 0x4]
	Vector2D UV0;//[Offset: 0x2c, Size: 0x8]
	Vector2D UV1;//[Offset: 0x34, Size: 0x8]
	Vector2D UV2;//[Offset: 0x3c, Size: 0x8]
	Vector2D UV3;//[Offset: 0x44, Size: 0x8]

--------------------------------
Class: ProcMeshTangent
	Vector TangentX;//[Offset: 0x0, Size: 0xc]
	bool bFlipTangentY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: ArkAIReplicatedStaticCorpseData
	int8 AITypeID;//[Offset: 0x0, Size: 0x1]
	int ID;//[Offset: 0x4, Size: 0x4]
	ArkCompressedTransform[] BoneTransforms;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ArkMapGridCache.Object
	void RemoveObject(Object* Object);// 0x2836d50
	void Init(float centerOffsetX, float centerOffsetY, float InSize, float InfGridSize);// 0x2836550
	void AddOrUpdateObject(float X, float Y, Object* Object);// 0x2835610

--------------------------------
Class: ArkAICommandUtility.Actor.Object
	ArkNpc*[] SpawnSpecifiedAIAtVolume(ArkAISpawnVolume* Volume, out const <FName,int> SpecifiedAITypes);// 0x261e430
	ArkNpc*[] SpawnAIWithinRadiusPattern(out const Vector CenterLocation, float Radius, ArkAISpawnPatternConfig* InSpawnPatternConfig, bool bIgnoreNumLimit);// 0x261e270
	ArkNpc*[] SpawnAIWithinRadius(out const Vector CenterLocation, float Radius, out const <FName,int> SpecifiedAITypes, bool bIgnoreNumLimit);// 0x261dfc0
	ArkNpc*[] SpawnAIAtVolume(ArkAISpawnVolume* Volume);// 0x261dee0
	ArkNpc*[] SpawnAIAtMarker(ArkAISpawnMarker* Marker);// 0x261de00
	void SetPVEDifficultyLevel(int Level);// 0x261dd80
	void SetCorpseClearTime(float DelaySeconds);// 0x261dc80
	void SetCombatTargetForAI(ArkNpc*[] AICharacters, Actor* TargetActor, bool isIgnoreMaxTargetLimit, bool isForceSetTarget);// 0x261dae0
	void SetAssembleVolumeForAI(ArkNpc*[] AICharacters, Volume* assembleVolume, bool bNeedSprint);// 0x261d970
	void SetAssemblePointForAI(ArkNpc*[] AICharacters, out const Vector Center, float Radius, bool bNeedSprint);// 0x261d7c0
	void SetAIVisibilityInVolume(Volume* Volume, bool IsVisible, bool includeDyingAI);// 0x261d6b0
	void SetAIEmotion(Vector Location, float Radius, enum emotionType);// 0x261d5a0
	bool ServerSyncNpcByRobot(ArkNpc* NPC, ArkPlayer* Player, int CoreChipID);// 0x261d4a0
	bool ServerSendLockOnCommand(ArkPlayer* Player, Actor* Target);// 0x261d3e0
	void ServerKillAllAI();// 0x261d3c0
	void ServerKillAIInVolume(Volume* Volume);// 0x261d340
	void ServerKillAIInBox(out const Box Box, float Extent);// 0x261d260
	void ServerClearAllAI();// 0x261d110
	static void ResumeNpcCombatBehavior(ArkNpc* NPC);// 0x261d0a0
	void RecoverSyncedNpcForPlayer(ArkPlayer* Player);// 0x261d020
	static void PauseNpcAllCombatBehavior(ArkNpc* NPC);// 0x261cfb0
	void OnShipActive(out const Vector Location);// 0x305c9c0
	void MakeNoiseInVolume(Volume* boundVolume, float Radius, float Volume);// 0x261ceb0
	void MakeNoiseAtLocation(Vector Location, float Radius, float Volume);// 0x261cda0
	void MakeAILookAtLocation(Vector Location, float Radius);// 0x261ccd0
	int GetAllAINum();// 0x261cc70
	ArkNpc*[] GetAIsInVolume(Volume* Volume);// 0x261cb90
	int GetAINumByType(FName AITypeName);// 0x261cb00
	ArkNpc*[] ForceSpawnAIAtRadius(out const <FName,int> SpecifiedAITypes, Vector Location, float MinRadius, float MaxRadius, float SpecifiedYaw, enum SpawnStatus, bool bCheckBlock);// 0x261c790
	void ForceDespawnAIs(ArkNpc*[] AICharacters);// 0x261c6b0
	void EnableResourceGuard(ArkAIResourceGuardConfig* ResourceGuard);// 0x261c630
	void EnableLandingAttract(bool bEnable);// 0x261c5a0
	void EnableAIRedistribute(bool IsEnable);// 0x261c510
	void DisableResourceGuard(ArkAIResourceGuardConfig* ResourceGuard);// 0x261c490
	void ClearAICorpseCollision();// 0x261c470
	void ArrangeCombatSwarmForPlayer(ArkPlayer* Player, int TargetNum, float MaxDistance, bool isIgnoreMaxTargetLimit, bool isForceSetTarget);// 0x261c2e0

--------------------------------
Class: ArkAIResourceGuardConfig.Actor.Object
	float MaxSpawnRadius;//[Offset: 0x2e8, Size: 0x4]
	bool bShouldAttractAIToGuard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 0x1]
	float AttractTargetRadius;//[Offset: 0x2f0, Size: 0x4]
	int MaxEliteNum;//[Offset: 0x2f4, Size: 0x4]
	int MaxSwarmNum;//[Offset: 0x2f8, Size: 0x4]
	float DespawnDelayTime;//[Offset: 0x2fc, Size: 0x4]
	ProgressDifficultyConfig[] ProgressDifficultyConfigs;//[Offset: 0x300, Size: 0x10]
	bool bShouldLoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	float Progress;//[Offset: 0x314, Size: 0x4]
	ArkNpc*[] SpawnedAICharacters;//[Offset: 0x318, Size: 0x10]
	ArkScoreNode* Resource;//[Offset: 0x348, Size: 0x8]
	ArkAISpawnMarker*[] SpawnMarkers;//[Offset: 0x358, Size: 0x10]
	void SetProgress(float InProgress);// 0x2657c20

--------------------------------
Class: ProgressDifficultyConfig
	float MinProgress;//[Offset: 0x0, Size: 0x4]
	float MaxProgress;//[Offset: 0x4, Size: 0x4]
	DifficultyRandomConfig[] DifficultyRandomConfigs;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: DifficultyRandomConfig
	int Difficulty;//[Offset: 0x0, Size: 0x4]
	float Weight;//[Offset: 0x4, Size: 0x4]
	float RespawnInterval;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ArkNpcFollowStandPositionInfo
	ArkNpcStandPositionAreaRecord[] NpcFollowStandPositions;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ArkNpcStandPositionAreaRecord
	Vector Position;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: ArkShuttleDataBlackboard.ArkGameDataCollection.Object
	<int,ArkShuttleBase*> Shuttles;//[Offset: 0x58, Size: 0x50]
	<int,ArkShuttleLandingPort*> LandingPorts;//[Offset: 0xa8, Size: 0x50]
	<int,ArkShuttleSpawner*> Spawners;//[Offset: 0xf8, Size: 0x50]
	ArkStartMatchEndCameraEvent EndMatchEvent;//[Offset: 0x148, Size: 0xc]
	ArkCinematicShuttle* CinematicShuttle;//[Offset: 0x158, Size: 0x8]
	Actor*[] ShuttleLandingPortTargets;//[Offset: 0x170, Size: 0x10]

--------------------------------
Class: ArkShuttleLandingPort.Actor.Object
	ArkLandingPortCommonData* CommonData;//[Offset: 0x350, Size: 0x8]
	ArkLandingPortReplicatedData* ReplicatedData;//[Offset: 0x358, Size: 0x8]
	int ShuttleID;//[Offset: 0x368, Size: 0x4]
	int ShuttleIndex;//[Offset: 0x36c, Size: 0x4]
	Vector IndicatorOffset;//[Offset: 0x370, Size: 0xc]
	class ArkLandingPortParticleComponent* ParticleClass;//[Offset: 0x380, Size: 0x8]
	ArkLandingPortParticleComponent* PortParticleComponent;//[Offset: 0x388, Size: 0x8]
	SceneComponent* PortComponet;//[Offset: 0x390, Size: 0x8]
	ArkSoftParticleSystemComponent* TextPSC;//[Offset: 0x398, Size: 0x8]
	ArkSoftParticleSystemComponent* BlastPSC;//[Offset: 0x3a0, Size: 0x8]
	ArkSoftDecalComponent* ScanDC;//[Offset: 0x3a8, Size: 0x8]
	ArkSoftParticleSystemComponent* LandingParticle;//[Offset: 0x3b0, Size: 0x8]
	ArkSoftDecalComponent* LandedGroundDecal;//[Offset: 0x3b8, Size: 0x8]
	MaterialInstanceDynamic* LandedGroundMaterial;//[Offset: 0x3c0, Size: 0x8]
	MaterialInstanceDynamic* LandedBoundaryMaterial;//[Offset: 0x3c8, Size: 0x8]
	ArkSoftDecalComponent* LandedBoundaryDecal;//[Offset: 0x3d0, Size: 0x8]
	ArkSoftParticleSystemComponent* LandedBoundaryParticle;//[Offset: 0x3d8, Size: 0x8]
	ArkSoftParticleSystemComponent* LandedStormParticle;//[Offset: 0x3e0, Size: 0x8]
	void SetShuttleIndex(int newIndex);// 0x295b620
	void SetShuttleID(int NewID);// 0x295b5a0
	void SetLandedStormParticleColor(Vector NewColor);// 0x295b510
	void SetLandedGroundColor(LinearColor NewColor);// 0x295b490
	void SetLandedBoundaryParticleColor(Vector NewColor);// 0x295b400
	void SetLandedBoundaryDecalColorVector(Vector NewColor);// 0x295b370
	void SetLandedBoundaryDecalColor(LinearColor NewColor);// 0x295b2f0
	void OnShuttleLocalStateChanged(enum NewState);// 0x305c9c0
	Vector GetWidgetLocation();// 0x295a450
	int GetShuttleIndex();// 0x295a0e0
	int GetShuttleID();// 0x295a090
	Vector GetLandingLocation();// 0x2959b40
	Vector GetIndicatorLocation();// 0x2959b00
	Vector GetIncomingLocation();// 0x2959ac0
	Vector GetGroundLocation();// 0x2959a80
	Vector GetCoreLocation();// 0x2959860

--------------------------------
Class: ArkLandingPortCommonData.ArkGameDataCollection.Object

--------------------------------
Class: ArkLandingPortReplicatedData.ArkGameDataCollection.Object
	LandingLevelInfo LandingLevelInfo;//[Offset: 0xc4, Size: 0x30]
	int LandingLevel;//[Offset: 0xf4, Size: 0x4]
	Vector LocationOffset;//[Offset: 0xf8, Size: 0xc]
	ArkShuttleLandingInfo[] LandingInfos;//[Offset: 0x108, Size: 0x10]
	void OnRep_LandingLevel();// 0x28257e0

--------------------------------
Class: LandingLevelInfo
	Vector LandingShipRandomOffsetLevel1;//[Offset: 0x0, Size: 0xc]
	Vector LandingShipRandomOffsetLevel2;//[Offset: 0xc, Size: 0xc]
	Vector LandingShipRandomOffsetLevel3;//[Offset: 0x18, Size: 0xc]
	float LandingShipRandomRadiusLevel1;//[Offset: 0x24, Size: 0x4]
	float LandingShipRandomRadiusLevel2;//[Offset: 0x28, Size: 0x4]
	float LandingShipRandomRadiusLevel3;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: ArkShuttleLandingInfo
	float Radius;//[Offset: 0x0, Size: 0x4]
	Vector Location;//[Offset: 0x4, Size: 0xc]
	float Weight;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ArkLandingPortParticleComponent.ArkLandingPortLiteComponent.LiteComponent.Object
	float CircleAnimDuration;//[Offset: 0xa8, Size: 0x4]
	void OnShuttleWasActivated(int ShuttleID, int TeamId);// 0x2825a60
	void OnShuttleStateChange(enum LastState, enum NewState, float StartTime, int OwnShuttleID);// 0x2825910
	void OnShuttleLandingWaveEvent(int NewShuttleID, float Radius, bool bPush);// 0x2825800

--------------------------------
Class: ArkLandingPortLiteComponent.LiteComponent.Object
	int GetShuttleID();// 0x2824e40
	ArkShuttleLandingPort* GetOwnerAsLandingPort();// 0x2824e10

--------------------------------
Class: ArkStartMatchEndCameraEvent
	int ShuttleID;//[Offset: 0x0, Size: 0x4]
	bool bWin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	int WinTeamID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ArkCinematicShuttle.Actor.Object
	FName SoundAttachSocketName;//[Offset: 0x2e8, Size: 0x8]
	ArkAkComponent* AkComponent;//[Offset: 0x2f0, Size: 0x8]
	int FlyEventID;//[Offset: 0x2f8, Size: 0x4]

--------------------------------
Class: ArkUIDataBlackboard.ArkGameDataCollection.Object
	ArkSyncInfo2DWidget* Sync2DWidget;//[Offset: 0x58, Size: 0x8]
	ArkSyncArmBandModWidget* SyncArmBandModWidget;//[Offset: 0x60, Size: 0x8]
	int PromptTutorialMenuID;//[Offset: 0x68, Size: 0x4]
	<FString,Texture*> PlayerHeadTextureMap;//[Offset: 0x70, Size: 0x50]

--------------------------------
Class: ArkSyncInfo2DWidget.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	Widget* SyncCommand;//[Offset: 0x300, Size: 0x8]
	ArkSkillWidget* RetrietCommand;//[Offset: 0x308, Size: 0x8]
	ArkSkillWidget* SwitchCommand;//[Offset: 0x310, Size: 0x8]
	Widget* SuperJumpCommand;//[Offset: 0x318, Size: 0x8]
	float StartTime2DTo3D;//[Offset: 0x320, Size: 0x4]
	float Duration2DTo3D;//[Offset: 0x324, Size: 0x4]
	float StartTime3DTo2D;//[Offset: 0x328, Size: 0x4]
	float Duration3DTo2D;//[Offset: 0x32c, Size: 0x4]
	LinearColor SyncAvailableColor;//[Offset: 0x348, Size: 0x10]
	LinearColor SyncUnavailableColor;//[Offset: 0x358, Size: 0x10]
	LinearColor AttackingColor;//[Offset: 0x368, Size: 0x10]
	LinearColor SearchingColor;//[Offset: 0x378, Size: 0x10]
	LinearColor OtherCommandColor;//[Offset: 0x388, Size: 0x10]
	<FString,ArkSyncInfoConfig> SyncInfoConfig;//[Offset: 0x398, Size: 0x50]
	CanvasPanel* NanoInfoRoot;//[Offset: 0x3e8, Size: 0x8]
	TextBlock* NanoName;//[Offset: 0x3f0, Size: 0x8]
	Image* SkillIcon;//[Offset: 0x3f8, Size: 0x8]
	ArkSync2DModInfo* Mod1;//[Offset: 0x400, Size: 0x8]
	ArkSync2DModInfo* Mod2;//[Offset: 0x408, Size: 0x8]
	ArkSync2DModInfo* Mod3;//[Offset: 0x410, Size: 0x8]
	Image* CriticalStun;//[Offset: 0x418, Size: 0x8]
	Image* Dead;//[Offset: 0x420, Size: 0x8]
	Overlay* RecoverRoot;//[Offset: 0x428, Size: 0x8]
	WidgetAnimation* Anim_Recover;//[Offset: 0x430, Size: 0x8]
	WidgetAnimation* DeadAni;//[Offset: 0x438, Size: 0x8]
	SizeBox* SyncAI;//[Offset: 0x440, Size: 0x8]
	SizeBox* SyncAI;//[Offset: 0x448, Size: 0x8]
	ArkNpc* CurSyncedAI;//[Offset: 0x458, Size: 0x8]
	ArkSync2DModInfo*[] ModList;//[Offset: 0x468, Size: 0x10]
	bool IsDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 0x1]
	bool bPlayerSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x479, Size: 0x1]
	bool bSwitched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47a, Size: 0x1]
	bool bInLittleSuperman;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 0x1]
	void UpdateSyncCommandState();// 0x2985a10
	void UnequipChip(out const int[] ChipUIDs);// 0x305c9c0
	void RefreshSupermanStatus();// 0x305c9c0
	void OnUpdateSyncSlot_BP(int price, int Total);// 0x305c9c0
	void OnUpdateSyncProgress(float InProgress);// 0x305c9c0
	void OnUpdateHealth_BP(float CellHealth, float MaxHealth);// 0x305c9c0
	void OnUpdateHealth();// 0x2985790
	void OnUpdateDisplaySyncedAI();// 0x2985770
	void OnSyncedNanoStateChanged();// 0x2985750
	void OnSyncedModChipsUpgrade(int ChipID);// 0x29856d0
	void OnSyncedModChipsChanged(bool bEquiped, int ChipID);// 0x2985610
	void OnSyncedAIsChanged_BP();// 0x305c9c0
	void OnSyncedAIsChanged();// 0x29855f0
	void OnSyncCommandCDChange_BP(float Progress);// 0x305c9c0
	void OnSyncableStateChange_BP(enum NewState, int SyncedAINumber);// 0x305c9c0
	void OnSwitchSync_BP();// 0x305c9c0
	void OnRecovery_BP();// 0x305c9c0
	void OnProductNotifySyncChip();// 0x2985530
	void OnPlayerSwitchSync(bool bSwitch);// 0x29854a0
	void OnPlayerEnergyChanged(int Energy);// 0x12c2b10
	void OnPlayerCharacterStateChanged(enum OldState, enum NewState);// 0x29853e0
	void OnPlayerActionStateChanged(ArkPlayer* InPlayer);// 0x2985360
	void OnLittleSupermanShowModEffectChanged(bool bShow);// 0x305c9c0
	void OnLittleSupermanChanged(bool bin);// 0x305c9c0
	void OnLeaveSwitchSync(bool bClientSimulation);// 0x29852d0
	void OnEnterCriticalStun(enum LastStunType, enum StunType);// 0x2985210
	void OnEngaging_BP(bool bEEngaging);// 0x305c9c0
	void OnEnergyAdded(int AddedEnergy);// 0x305c9c0
	void OnDyingRecoverStateChange_BP(bool bNewState);// 0x305c9c0
	void OnDyingRecoverStateChange(ArkNpc* NPC, bool bNewState);// 0x2985140
	void OnDying_BP();// 0x305c9c0
	void OnDead_BP();// 0x305c9c0
	void OnCriticalStun_BP();// 0x305c9c0
	void OnCharStateChanged(ArkCharacterBase* Character, enum OldCharacterState, enum CharacterState);// 0x2985040
	void OnAITaskChanged(enum InCurrentTaskType);// 0x2984f40
	void OnAICommandChanged(ArkNpc* NPC, out const ArkAICommandRepData Data);// 0x2984e60
	void HoldChip(out const int[] HoldChipUIDs, out const int[] AllChipUIDs);// 0x305c9c0
	ArkSyncChipIcon2D* GetChipIcon(int Index);// 0x2984b60
	void EquipChip(out const int[] ChipUIDs);// 0x305c9c0
	void DisplaySyncedAI(int ChipItemID, bool bActive);// 0x305c9c0
	void DisplaySecondSyncedAI(int ChipItemID, bool bActive);// 0x305c9c0

--------------------------------
Class: ArkSkillWidget.ArkCommonWidgetBase.UserWidget.Widget.Visual.Object
	float CurrentCDPercentage;//[Offset: 0x240, Size: 0x4]
	float LastCDPercentage;//[Offset: 0x244, Size: 0x4]
	ArkSkillWidgetStyle SkillWidgetStyle;//[Offset: 0x248, Size: 0x110]
	ArkSkillSlotWidget* WBP_Ark_SkillSlotWidget;//[Offset: 0x358, Size: 0x8]
	void StopLoopAnimeForSkillReady();// 0x29690c0
	void StartLoopAnimeForSkillReady(float IntervalTime);// 0x2969040
	void SetSkillUnable_BP(bool Unable);// 0x305c9c0
	void SetSkillBrushFromSoftIconTexture(out const Texture2D* InSoftIconTexture);// 0x29688c0
	void SetSkillBrushFromSoftIcon(out const PaperSprite* InSoftIcon);// 0x2968800
	void SetSkillBrush(out const SlateBrush InDefaultSkillBrush);// 0x2968680
	void SetSelectedHint(bool InShowSelectedHint);// 0x29685f0
	void SetKeyTipsTexts(out const FText[] InKeyTipsTexts);// 0x2967a70
	void SetKeyTipsNames(out const FName[] InKeyTipsNames);// 0x29679c0
	void SetKeyTipsLayoutType(out const enum InKeyTipsLayoutType);// 0x2967920
	void SetInputEnabled(bool InEnableFlag);// 0x2967890
	void SetCDPercentage(float InCDPercentage);// 0x2967790
	void SetBreakOffHold_BP();// 0x305c9c0
	void SetBreakOffHold();// 0x2967770
	bool PlayLoopAnimeForSkillReady(float IntervalTime);// 0x2967680

--------------------------------
Class: ArkSkillWidgetStyle
	ArkSkillSlotWidgetStyle SlotStyle;//[Offset: 0x0, Size: 0x30]
	bool UseSkillBrushFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	SlateBrush SkillBrush;//[Offset: 0x38, Size: 0x88]
	PaperSprite* SkillSoftIcon;//[Offset: 0xc0, Size: 0x28]
	Texture2D* SkillSoftIconTexture;//[Offset: 0xe8, Size: 0x28]

--------------------------------
Class: ArkSkillSlotWidgetStyle
	enum KeyTipsLayoutType;//[Offset: 0x0, Size: 0x1]
	FName[] KeyTipsNames;//[Offset: 0x8, Size: 0x10]
	FText[] KeyTipsTexts;//[Offset: 0x18, Size: 0x10]
	bool ShowSelectedHint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool ShowAlertHint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: ArkSkillSlotWidget.ArkCommonWidgetBase.UserWidget.Widget.Visual.Object
	ArkSkillSlotWidgetStyle SkillWidgetStyle;//[Offset: 0x240, Size: 0x30]
	bool bEnableAnimationEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	void SetSelectedHint(bool InShowSelectedHint);// 0x2963c00
	void SetKeyTipsTexts(out const FText[] InKeyTipsTexts);// 0x2963a70
	void SetKeyTipsNames(out const FName[] InKeyTipsNames);// 0x29639c0
	void SetKeyTipsLayoutType(out const enum InKeyTipsLayoutType);// 0x2963920
	void SetInputEnabled_BP(bool InEnableFlag);// 0x305c9c0
	void SetEnableAnimationEffect(bool InEnable);// 0x2963890
	void SetBreakOffHold_BP();// 0x305c9c0
	void SetAlertHint(bool InShowAlertHint);// 0x105a9e0
	void OnKeysBindingChangeFromUserSettings(ArkGameplayEventWrapper* InGameplayEvent);// 0x2963460
	bool IsReceiveRouteEvent();// 0x29632e0

--------------------------------
Class: ArkSyncChipIcon2D.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	Image* Quality;//[Offset: 0x300, Size: 0x8]
	Image* Flash;//[Offset: 0x308, Size: 0x8]
	Image* icon;//[Offset: 0x310, Size: 0x8]
	Image* Cooldown;//[Offset: 0x318, Size: 0x8]
	WidgetAnimation* EquipedAnim;//[Offset: 0x320, Size: 0x8]
	TextBlock* Text;//[Offset: 0x328, Size: 0x8]

--------------------------------
Class: ArkSyncInfoConfig
	FText DisplayText;//[Offset: 0x0, Size: 0x18]
	LinearColor DisplayColor;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ArkSync2DModInfo.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* Level;//[Offset: 0x300, Size: 0x8]
	Image* ModIcon;//[Offset: 0x308, Size: 0x8]
	FText LevelText;//[Offset: 0x310, Size: 0x18]
	void SetModInfo(int ModUID);// 0x2981150
	void OnUpgradeChipEffect();// 0x305c9c0
	void OnEquipedChipEffect();// 0x305c9c0
	void OnChipEffect_OneShot_BP();// 0x305c9c0
	void OnChipEffect_Loop_BP(bool bEffectOn);// 0x305c9c0
	void OnChipEffect_Cooldown_BP(float RestTime, float TotalTime, float StartTime);// 0x305c9c0
	void OnChipEffect_ClearCooldown_BP();// 0x305c9c0

--------------------------------
Class: Overlay.PanelWidget.Widget.Visual.Object
	OverlaySlot* AddChildToOverlay(Widget* Content);// 0x41518e0

--------------------------------
Class: OverlaySlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x4152d90
	void SetPadding(Margin InPadding);// 0x4152850
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x4152620

--------------------------------
Class: SizeBox.ContentWidget.PanelWidget.Widget.Visual.Object
	float WidthOverride;//[Offset: 0x148, Size: 0x4]
	float HeightOverride;//[Offset: 0x14c, Size: 0x4]
	float MinDesiredWidth;//[Offset: 0x150, Size: 0x4]
	float MinDesiredHeight;//[Offset: 0x154, Size: 0x4]
	float MaxDesiredWidth;//[Offset: 0x158, Size: 0x4]
	float MaxDesiredHeight;//[Offset: 0x15c, Size: 0x4]
	float MinAspectRatio;//[Offset: 0x160, Size: 0x4]
	float MaxAspectRatio;//[Offset: 0x164, Size: 0x4]
	bool bOverride_WidthOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x168, Size: 0x1]
	bool bOverride_HeightOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x168, Size: 0x1]
	bool bOverride_MinDesiredWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x168, Size: 0x1]
	bool bOverride_MinDesiredHeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x168, Size: 0x1]
	bool bOverride_MaxDesiredWidth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x168, Size: 0x1]
	bool bOverride_MaxDesiredHeight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x168, Size: 0x1]
	bool bOverride_MinAspectRatio;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x168, Size: 0x1]
	bool bOverride_MaxAspectRatio;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x168, Size: 0x1]
	void SetWidthOverride(float InWidthOverride);// 0x4158160
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x4157600
	void SetMinDesiredHeight(float InMinDesiredHeight);// 0x4157500
	void SetMinAspectRatio(float InMinAspectRatio);// 0x4157480
	void SetMaxDesiredWidth(float InMaxDesiredWidth);// 0x4157400
	void SetMaxDesiredHeight(float InMaxDesiredHeight);// 0x4157380
	void SetMaxAspectRatio(float InMaxAspectRatio);// 0x4157300
	void SetHeightOverride(float InHeightOverride);// 0x41570f0
	void ClearWidthOverride();// 0x41557b0
	void ClearMinDesiredWidth();// 0x4155790
	void ClearMinDesiredHeight();// 0x4155770
	void ClearMinAspectRatio();// 0x4155750
	void ClearMaxDesiredWidth();// 0x4155730
	void ClearMaxDesiredHeight();// 0x4155710
	void ClearMaxAspectRatio();// 0x41556f0
	void ClearHeightOverride();// 0x41556d0

--------------------------------
Class: ArkSyncArmBandModWidget.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	VerticalBox* ModRoot;//[Offset: 0x300, Size: 0x8]
	class ArkArmBandModCountWidget* ArkArmBandModCountClass;//[Offset: 0x308, Size: 0x8]
	class ArkArmBandModChargeWidget* ArkArmBandModChargeClass;//[Offset: 0x310, Size: 0x8]
	void OnSyncedModChipsChanged(bool bEquiped, int ChipID);// 0x2981050

--------------------------------
Class: ArkArmBandModCountWidget.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	Image* ModIcon;//[Offset: 0x300, Size: 0x8]
	Image* BuffIcon;//[Offset: 0x308, Size: 0x8]
	TextBlock* ModName;//[Offset: 0x310, Size: 0x8]
	TextBlock* CurCount;//[Offset: 0x318, Size: 0x8]
	ArkProgressBar* WBP_Ark_ProgressBar;//[Offset: 0x320, Size: 0x8]
	TextBlock* ready;//[Offset: 0x328, Size: 0x8]
	Overlay* ModInfoRoot;//[Offset: 0x330, Size: 0x8]
	Overlay* BuffInfoRoot;//[Offset: 0x338, Size: 0x8]
	void OnPlayReadyAni_BP(bool bReady);// 0x305c9c0

--------------------------------
Class: ArkProgressBar.ArkCommonWidgetBase.UserWidget.Widget.Visual.Object
	delegate CurLevelEffectCompleteHandle;//[Offset: 0x240, Size: 0x10]
	delegate ProgressChangedHandle;//[Offset: 0x250, Size: 0x10]
	ProgressBar* MyProgressBar;//[Offset: 0x260, Size: 0x8]
	float Progress;//[Offset: 0x268, Size: 0x4]
	byte BarFillType;//[Offset: 0x26c, Size: 0x1]
	ProgressBarStyle ProgressBarStyle;//[Offset: 0x270, Size: 0x1a0]
	float EachLevelCostTime;//[Offset: 0x410, Size: 0x4]
	void SetProgress(float TargetProgress);// 0x28feef0
	void SetBackgroundColor(SlateColor Color);// 0x28fee00
	void PlayLevelProgressEffect(out const ArkProgressLevelEffectInfo[] LevelEffectInfos);// 0x28febe0
	float GetProgress();// 0x26d1fe0

--------------------------------
Class: ProgressBar.Widget.Visual.Object
	ProgressBarStyle WidgetStyle;//[Offset: 0x110, Size: 0x1a0]
	SlateWidgetStyleAsset* Style;//[Offset: 0x2b0, Size: 0x8]
	SlateBrushAsset* BackgroundImage;//[Offset: 0x2b8, Size: 0x8]
	SlateBrushAsset* FillImage;//[Offset: 0x2c0, Size: 0x8]
	SlateBrushAsset* MarqueeImage;//[Offset: 0x2c8, Size: 0x8]
	float Percent;//[Offset: 0x2d0, Size: 0x4]
	byte BarFillType;//[Offset: 0x2d4, Size: 0x1]
	bool bIsMarquee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 0x1]
	Vector2D BorderPadding;//[Offset: 0x2d8, Size: 0x8]
	delegate PercentDelegate;//[Offset: 0x2e0, Size: 0x10]
	LinearColor FillColorAndOpacity;//[Offset: 0x2f0, Size: 0x10]
	delegate FillColorAndOpacityDelegate;//[Offset: 0x300, Size: 0x10]
	void SetPercent(float InPercent);// 0x41528e0
	void SetIsMarquee(bool InbIsMarquee);// 0x41526a0
	void SetFillColorAndOpacity(LinearColor InColor);// 0x41523e0
	void SetBarFillType(byte TargetType);// 0x4152200

--------------------------------
Class: ProgressBarStyle.SlateWidgetStyle
	SlateBrush BackgroundImage;//[Offset: 0x8, Size: 0x88]
	SlateBrush FillImage;//[Offset: 0x90, Size: 0x88]
	SlateBrush MarqueeImage;//[Offset: 0x118, Size: 0x88]

--------------------------------
Class: ArkProgressLevelEffectInfo
	float StartVal;//[Offset: 0x0, Size: 0x4]
	float EndVal;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ArkArmBandModChargeWidget.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	Image* ModIcon;//[Offset: 0x300, Size: 0x8]
	TextBlock* ModName;//[Offset: 0x308, Size: 0x8]
	TextBlock* Charging;//[Offset: 0x310, Size: 0x8]
	ArkProgressBar* WBP_Ark_ProgressBar;//[Offset: 0x318, Size: 0x8]
	TextBlock* ready;//[Offset: 0x320, Size: 0x8]
	void OnPlayReadyAni_BP(bool bReady);// 0x305c9c0

--------------------------------
Class: ArkGameSystemData.DataAsset.Object
	class ArkGameSystem[] GameSystems;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ArkECSPackageMapClient.PackageMap.Object
	Object*[] ObjData;//[Offset: 0xe0, Size: 0x10]

--------------------------------
Class: ArkAIAsyncSpawnBlueprintProxy.Object
	delegate OnComplete;//[Offset: 0x28, Size: 0x10]
	delegate OnSingleNpcSpawnedEvent;//[Offset: 0x38, Size: 0x10]
	void OnWorldContextObjectReturnToPool();// 0x260bf50
	void OnSpawnCompleted(out const AIRequestID RequestID, out const ArkNpc*[] SpawnedNpcs);// 0x260be40
	void OnSingleNpcSpawned(out const AIRequestID RequestID, ArkNpc* SpawnedNpc);// 0x260bd70

--------------------------------
Class: ArkSandTableManager.ArkManagerBase.Object
	ArkUserDataModel* SandTableDataModel;//[Offset: 0x90, Size: 0x8]
	DataTable* ModelActorClassTable;//[Offset: 0xa8, Size: 0x8]
	class ArkSandTableSignBase* TeamSpawnSignClass;//[Offset: 0xb0, Size: 0x8]
	class ArkSandTableSignBase* EnemySpawnSignClass;//[Offset: 0xb8, Size: 0x8]
	class ArkSandTableSignBase* WayPointSignClass;//[Offset: 0xc0, Size: 0x8]
	class ArkSandTableSignBase* ProbePointSignClass;//[Offset: 0xc8, Size: 0x8]
	<class Actor,class ArkSandTableSignBase> SpawnSignMap;//[Offset: 0xd0, Size: 0x50]
	MaterialInstance* FOWBrushInstance;//[Offset: 0x120, Size: 0x8]
	TextureRenderTarget2D* FOWRenderTargetTex;//[Offset: 0x128, Size: 0x8]
	float FOWStrength;//[Offset: 0x130, Size: 0x4]
	float FOWRadio;//[Offset: 0x134, Size: 0x4]
	float FOWDrawTime;//[Offset: 0x138, Size: 0x4]
	FText DefaultPOIName;//[Offset: 0x140, Size: 0x18]
	ArkHavenSituationMapEditable* SandTableRef;//[Offset: 0x1a8, Size: 0x8]
	ArkGameStateShuttleBase* MyGameStateShuttleBase;//[Offset: 0x1b0, Size: 0x8]
	ArkSandTableCamera* SandTableCamera;//[Offset: 0x1b8, Size: 0x8]
	ArkSandTableSignBase*[] EnemySpawnSignArray;//[Offset: 0x210, Size: 0x10]
	<Vector,Vector2D> EnemyHitStartLocArray;//[Offset: 0x220, Size: 0x50]
	float SandTableScanRadius;//[Offset: 0x270, Size: 0x4]
	<int,ArkSandTableSignBase*> LandingPortSignMap;//[Offset: 0x278, Size: 0x50]
	float ProbePointDetectRange;//[Offset: 0x2c8, Size: 0x4]
	ArkSandTableSignBase*[] ProbeTargetSignArray;//[Offset: 0x2f8, Size: 0x10]
	ArkSandTableSignBase*[] WayPointSignArray;//[Offset: 0x308, Size: 0x10]
	ArkSandTableSignBase*[] ProbePointSignArray;//[Offset: 0x318, Size: 0x10]
	<FString,CachedSignBaseStruct> SignActorMap;//[Offset: 0x328, Size: 0x50]
	ArkSandTableSignBase* TeamSpawnSign;//[Offset: 0x388, Size: 0x8]
	<MaterialInstanceDynamic*,float> FOWBrushMIDTimerMap;//[Offset: 0x3a0, Size: 0x50]
	SoftObjectPath ScanOnSandTableConfigDataTablePath;//[Offset: 0x3f8, Size: 0x18]
	<enum,ArkScanSandTableConfig> ScanOnSandTableConfig;//[Offset: 0x410, Size: 0x50]
	static void GetWorldPositionFromUV(const Object* WorldContext, const Vector2D InUV, out Vector OutWorldPosition);// 0x2932d80
	static void GetWorldMapKey(const Object* WorldContext, out FString KeyString);// 0x2932ca0
	static void GetUVRangeOfWorldPosition(const Object* WorldContext, float WorldRange, out Vector2D OutRangeUV);// 0x2932ba0
	static void GetUVOfWorldPosition(const Object* WorldContext, Vector WorldPosition, out Vector2D OutUV);// 0x2932a90
	bool GetSandTableOperationEnabled();// 0x2932a00
	static ArkSandTableManager* Get(const Object* WorldContext);// 0x2932750
	void EnableSandTableOperation(bool bEnable);// 0x2932600

--------------------------------
Class: ArkSandTableSignBase.Actor.Object
	SceneComponent* RootScene;//[Offset: 0x2e8, Size: 0x8]
	FString CurrentSignType;//[Offset: 0x2f0, Size: 0x10]
	int CurrentSignIndex;//[Offset: 0x300, Size: 0x4]
	Vector2D UVLocationOnSandTable;//[Offset: 0x304, Size: 0x8]
	ArkSandTableSignBase* CollageOwner;//[Offset: 0x310, Size: 0x8]
	ArkSandTableSignBase*[] CollageChildren;//[Offset: 0x318, Size: 0x10]
	void Update(int Param0);// 0x305c9c0
	void SetText(out const FText TextString);// 0x305c9c0
	void SetTableBounds(out const Vector Min, out const Vector Max, out const Vector InvTranslation, out const Vector InvScale);// 0x305c9c0
	void SetSignType(FString NewType);// 0x2707880
	void SetRadius(Vector2D RadiusValue);// 0x305c9c0
	void SetIndex(int Index);// 0x2933690
	void PlayAudio_BP();// 0x305c9c0
	void OnCollageOwnerChanged();// 0x305c9c0
	void OnCollageChildrenChanged();// 0x305c9c0
	void InitSelfLabel();// 0x305c9c0
	void Init(int64 Param0);// 0x305c9c0
	int GetIndex();// 0x2932970

--------------------------------
Class: ArkHavenSituationMapEditable.Actor.Object
	SceneComponent* RootScene;//[Offset: 0x2e8, Size: 0x8]
	ChildActorComponent* SandTableMeshActor;//[Offset: 0x2f0, Size: 0x8]
	StaticMeshComponent* GetMapMeshComponent();// 0x27c6e70
	BoxComponent* GetMapBoundsComponent();// 0x27c6e40
	StaticMeshComponent* GetLandingBoundsComponent();// 0x27c6e10

--------------------------------
Class: ArkGameStateShuttleBase.ArkGameStateBattle.ArkGameStateBase.GameState.GameStateBase.Info.Actor.Object

--------------------------------
Class: ArkGameStateBattle.ArkGameStateBase.GameState.GameStateBase.Info.Actor.Object
	ArkNotifyMessage* NofityMessage;//[Offset: 0x3a8, Size: 0x8]
	int NumTeams;//[Offset: 0x3b0, Size: 0x4]
	float RemainingWaitingTime;//[Offset: 0x3b8, Size: 0x4]
	UInt64Property GameID;//[Size: 0x8]
	bool bSupportRelife;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 0x1]
	float DeathLifeSpan;//[Offset: 0x3cc, Size: 0x4]
	float NoRelifeDeathLifeSpan;//[Offset: 0x3d0, Size: 0x4]
	bool bShowGameStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 0x1]
	float StartSequenceTimeRange;//[Offset: 0x3d8, Size: 0x4]
	bool bDisableInputUntilStartGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 0x1]
	float MaxRadarRange;//[Offset: 0x3e0, Size: 0x4]
	float PlayerProbeDetectRange;//[Offset: 0x3e4, Size: 0x4]
	bool bSupportLowHealthEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 0x1]
	CurveVector* PickUpParticleScaleCurve;//[Offset: 0x3f0, Size: 0x8]
	bool bAllowFriendlyFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 0x1]
	bool bAllowFriendlyHitEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9, Size: 0x1]
	bool bPlayStartMatchVO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fa, Size: 0x1]
	int TeamFilterFlags;//[Offset: 0x3fc, Size: 0x4]
	enum GameStartMode;//[Offset: 0x402, Size: 0x1]
	enum GameMapMode;//[Offset: 0x403, Size: 0x1]
	bool bIgnoreOpenServicingStoreCondition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 0x1]
	float DelayOpenServicingStoreTimer;//[Offset: 0x408, Size: 0x4]
	float AutoGotoHavenSeconds;//[Offset: 0x418, Size: 0x4]
	<enum,ArkGameFlowInfo> GameFlowMap;//[Offset: 0x428, Size: 0x50]
	ArkGameFlowInfo[] GameFlows;//[Offset: 0x478, Size: 0x10]
	enum CurrentGameFlowType;//[Offset: 0x488, Size: 0x1]
	SoftObjectPath GameFlowTablePath;//[Offset: 0x490, Size: 0x18]
	bool bShouldRefreshGameFlowDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 0x1]
	FString GameFlowDebugInfo;//[Offset: 0x4b0, Size: 0x10]
	float GamingFlowStartDelay;//[Offset: 0x4c0, Size: 0x4]
	FName GameFlowType;//[Offset: 0x4c4, Size: 0x8]
	FName ActiveBattleAreaTag;//[Offset: 0x4cc, Size: 0x8]
	ArkBattleAreaVolume*[] ActiveBattleAreas;//[Offset: 0x4d8, Size: 0x10]
	ArkPatrollingSwarmBriefInfo[] PatrollingSwarmBriefList;//[Offset: 0x4e8, Size: 0x10]
	bool bForceNoInfiniteClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 0x1]
	bool bInfiniteClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f9, Size: 0x1]
	bool bBornWithFullClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4fa, Size: 0x1]
	bool bAutoExitReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4fb, Size: 0x1]
	bool bAutoExitTacReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4fc, Size: 0x1]
	bool bUseCartoonPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4fd, Size: 0x1]
	ArkAudioEventSelector BGM;//[Offset: 0x500, Size: 0x78]
	ArkAudioEventSelector BGM_Stop;//[Offset: 0x578, Size: 0x78]
	bool bUseHeroBGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f0, Size: 0x1]
	bool bCanOpenBag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608, Size: 0x1]
	int NPCMapModeSuppressLevel;//[Offset: 0x60c, Size: 0x4]
	int NPCDefaultSuppressLevel;//[Offset: 0x610, Size: 0x4]
	bool UsePlayersSupperessLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x614, Size: 0x1]
	bool UseWildNanoSuppressLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x615, Size: 0x1]
	bool bShowDmgNumber;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x616, Size: 0x1]
	float MatchStartTime;//[Offset: 0x618, Size: 0x4]
	DataTable* AILevelConversionTable;//[Offset: 0x630, Size: 0x8]
	int[] ActivcedModifierIDs;//[Offset: 0x638, Size: 0x10]
	ArkEnterGameEffectNodeBase*[] EnterGameNodes;//[Offset: 0x648, Size: 0x10]
	class ArkEnterGameEffectNodeBase[] PreviewNodeClassRefArray;//[Offset: 0x658, Size: 0x10]
	bool bShowWaitingMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x668, Size: 0x1]
	ArkPlayerStateBattle*[] LikePlayerStates;//[Offset: 0x670, Size: 0x10]
	bool bInHUDFadeMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x680, Size: 0x1]
	void SetInHUDFadeMode(bool bInMode);// 0x2770010
	void ServerSendECSNetEvent(FString EventName, const byte[] Data, const Object*[] ObjData);// 0x276fbb0
	void OnWorldInitStatusUpdated(enum NewStatus);// 0x276f9b0
	void OnRep_LikePlayerStates();// 0x276f6f0
	void OnRep_GameStartMode();// 0x276f6d0
	void OnRep_CurrentGameFlowType(enum LastType);// 0x276f610
	void OnRep_bInHUDFadeMode();// 0x276f8d0
	void OnRep_ActiveModifierIDs();// 0x276f590
	void OnRep_ActiveBattleAreaTag();// 0xae2270
	void OnHandleFadeInGameOver();// 0x276f4f0
	void OnHandleExitLockInGameOver();// 0x276f4d0
	void OnDamageInfosRecorded(FString TargetName, FString FrameName, const FString[] RecordInfos);// 0x276f160
	void OnAutoGotoHaven();// 0x276f0c0
	bool IsHostile(const ArkCharacterBase* CharacterA, const ArkCharacterBase* CharacterB);// 0x276eea0
	bool HasWorldInitFinished();// 0x276ee80
	ArkPlayerStateBattle* GetPlayerStateByPlayerIDStr(FString StrPlayerID);// 0x276ed20
	ArkPlayer* GetPlayerByPlayerIndex(int PlayerIndex);// 0x276ec00
	int GetNPCDefaultSuppressLevel();// 0x276ea60
	enum GetGameMapMode();// 0x276ea40
	ArkGameFlowInfo GetGameFlowInfo(enum Type);// 0x276e8b0
	int GetAliveTeamCount();// 0x276e710
	int GetAliveNum();// 0x276e6e0
	void EndPlayingEnterCountingDown();// 0xca5a50
	void EnableGameFlowDebugInfoReplicated(bool bEnable);// 0x276e530

--------------------------------
Class: ArkGameStateBase.GameState.GameStateBase.Info.Actor.Object
	MaterialInterface* DefaultWidgetMaterial;//[Offset: 0x358, Size: 0x28]
	ParticleSystem*[] ItemDropAnimEffectTemplates;//[Offset: 0x380, Size: 0x10]
	Vector2D DropAnimInitVerticleSpeedRange;//[Offset: 0x390, Size: 0x8]
	Vector2D DropAnimInitGravityRange;//[Offset: 0x398, Size: 0x8]
	Vector2D DropAnimInitHorizontalAccRange;//[Offset: 0x3a0, Size: 0x8]

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x338, Size: 0x8]
	FName PreviousMatchState;//[Offset: 0x340, Size: 0x8]
	int ElapsedTime;//[Offset: 0x348, Size: 0x4]
	void OnRep_MatchState();// 0xca7ac0
	void OnRep_ElapsedTime();// 0xca7aa0

--------------------------------
Class: ArkNotifyMessage.Actor.Object
	ArkNotificationMessage[] NotifyMessage;//[Offset: 0x2e8, Size: 0x10]
	ArkToolTipsMessage[] ToolTipsMessage;//[Offset: 0x2f8, Size: 0x10]
	delegate OnNotificationMessageCleared;//[Offset: 0x308, Size: 0x10]
	delegate OnTooltipsMessageCleared;//[Offset: 0x318, Size: 0x10]
	delegate NotifyCurrentNotificationMessage;//[Offset: 0x328, Size: 0x10]
	delegate NotifyCurrentTooltipsMessage;//[Offset: 0x338, Size: 0x10]
	delegate OnNotificationMessageChange;//[Offset: 0x348, Size: 0x10]
	delegate OnTooltipsMessageChange;//[Offset: 0x358, Size: 0x10]
	void SendToolTips(ArkToolTipsMessage Msg);// 0x2859770
	void SendNotification(ArkNotificationMessage Msg);// 0x2859640
	void RemoveToolTips(enum Type);// 0x2859450
	void RemoveNotification(FString MsgID);// 0x2859370
	void AddToolTips(enum Type, FString Desc);// 0x28560d0

--------------------------------
Class: ArkNotificationMessage
	FString MsgID;//[Offset: 0x0, Size: 0x10]
	FString MsgDesc;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ArkToolTipsMessage
	enum MsgType;//[Offset: 0x0, Size: 0x1]
	FString MsgDesc;//[Offset: 0x8, Size: 0x10]
	double LastTime;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: ArkGameFlowInfo
	enum Mode;//[Offset: 0x0, Size: 0x1]
	float StartTime;//[Offset: 0x4, Size: 0x4]
	float Duration;//[Offset: 0x8, Size: 0x4]
	FlowFinishConditionInfo[] FinishConditions;//[Offset: 0x10, Size: 0x10]
	enum NextMode;//[Offset: 0x20, Size: 0x1]
	FString[] Parameters;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: FlowFinishConditionInfo
	enum FinishCondition;//[Offset: 0x0, Size: 0x1]
	float Param;//[Offset: 0x4, Size: 0x4]
	float ForceCompleteParam;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ArkBattleAreaVolume.Volume.Brush.Actor.Object
	FName BattleAreaTag;//[Offset: 0x320, Size: 0x8]
	Actor*[] ActorsToDestroyIfNotActive;//[Offset: 0x328, Size: 0x10]
	Actor*[] BindingActors;//[Offset: 0x338, Size: 0x10]
	bool IsActorInBattleArea(Actor* InActor);// 0x267d320

--------------------------------
Class: ArkPatrollingSwarmBriefInfo
	int PatrollingID;//[Offset: 0x0, Size: 0x4]
	Vector AverageCenter;//[Offset: 0x4, Size: 0xc]
	int AINum;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ArkEnterGameEffectNodeBase.Object
	float MaxEffectTime;//[Offset: 0x28, Size: 0x4]
	bool bAffectsAllInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	void StartNodeEffectInBp();// 0x305c9c0
	World* GetWorld();// 0xb050a0
	void EndNodeEffectInBp();// 0x305c9c0
	void CheckAllNodeResComplete();// 0x2719a10

--------------------------------
Class: ArkSandTableCamera.CameraActor.Actor.Object

--------------------------------
Class: CachedSignBaseStruct
	ArkSandTableSignBase*[] CachedSignBaseArray;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ArkScanSandTableConfig.TableRowBase
	enum GameMapMode;//[Offset: 0x8, Size: 0x1]
	float ScanUVRadius;//[Offset: 0xc, Size: 0x4]
	int ScanTimes;//[Offset: 0x10, Size: 0x4]
	ArkScanTargetConfig[] ScanTargets;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ArkScanTargetConfig
	class Actor* TargetActorClass;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ArkIndicatorTargetManager.ArkResourceManagerBase.ArkManagerBase.Object
	<enum,int> MinShowDistanceConfigs;//[Offset: 0xb8, Size: 0x50]
	ArkNewDarkErosion_PickUpClear*[] AllRoomVolume;//[Offset: 0x108, Size: 0x10]
	ArkNewDarkErosion_PickUpClear* CurPlayerInRoom;//[Offset: 0x118, Size: 0x8]
	float HUDFadeMarginY;//[Offset: 0x120, Size: 0x4]
	<int,Actor*> MarkedActorMap;//[Offset: 0x180, Size: 0x50]
	<enum,int> IndicatorLimitCountCfg;//[Offset: 0x1d0, Size: 0x50]
	delegate OnAddIndicatorTarget;//[Offset: 0x270, Size: 0x10]
	delegate OnRemoveIndicatorTarget;//[Offset: 0x280, Size: 0x10]
	delegate OnAddOrUpdateIndicatorLegacyParam;//[Offset: 0x290, Size: 0x10]
	delegate OnAddOrUpdateIndicatorGenericParam;//[Offset: 0x2a0, Size: 0x10]
	delegate OnRemoveIndicatorParam;//[Offset: 0x2b0, Size: 0x10]
	Actor* CurViewTarget;//[Offset: 0x2c0, Size: 0x8]
	<Actor*,ArkIndicatorParamSet> IndicatorParamMap;//[Offset: 0x2e8, Size: 0x50]
	SoftObjectPath PingIndicatorAssetDataTablePath;//[Offset: 0x338, Size: 0x18]
	SoftObjectPath PingItemIndicatorAssetDataTablePath;//[Offset: 0x350, Size: 0x18]
	<enum,ArkPingIndicatorStyle> PingIndicatorConfigs;//[Offset: 0x368, Size: 0x50]
	<int,Texture2D*> PingItemIndicatorConfigs;//[Offset: 0x3b8, Size: 0x50]
	DataTable* IndicatorConfigDataTable;//[Offset: 0x408, Size: 0x8]
	DataTable*[] NanoBuffDataTableList;//[Offset: 0x410, Size: 0x10]
	<int,Texture2D*> NanoBuffMap;//[Offset: 0x420, Size: 0x50]
	enum[] HiddenWayPointMarkerList;//[Offset: 0x470, Size: 0x10]
	enum[] HealthProgressIndicators;//[Offset: 0x480, Size: 0x10]
	float WayPointTransparency;//[Offset: 0x490, Size: 0x4]
	<enum,ArkIndicatorConfig> IndicatorConfigs;//[Offset: 0x498, Size: 0x50]
	void SetHUDFadeMarginY(float InMarginY);// 0x27ee7e0
	void RefreshTeamInfo();// 0x27ee5c0
	void OnViewTargetChanged(Actor* NewViewTarget);// 0x27ee540
	void OnToggleSpectating(bool bInStartSpectating);// 0x27ee4b0
	void OnPlayerStateRegistered(ArkPlayerStateBattle* PlayerState);// 0x27ee430
	void OnPlayerRegistered(ArkPlayer* Player);// 0x27ee430
	Actor*[] GetShowingIndicatorTargets(enum TargetType);// 0x27edcc0
	ArkPingIndicatorStyle GetPingIndicatorStyle(enum InPingIndicatorMarkerType);// 0x27edae0
	Actor*[] GetIndicatorTargets(enum TargetType);// 0x27eda10
	static ArkIndicatorTargetManager* Get(const Object* WorldContext);// 0x27ed8c0

--------------------------------
Class: ArkIndicatorParamSet

--------------------------------
Class: ArkPingIndicatorStyle
	LinearColor OverrideColor;//[Offset: 0x0, Size: 0x10]
	Vector2D DefaultConnectionSize;//[Offset: 0x10, Size: 0x8]
	CurveFloat* ConnectionSizeLerpCurve;//[Offset: 0x18, Size: 0x8]
	LinearColor ConnectionColor;//[Offset: 0x20, Size: 0x10]
	SlateColor DistanceTextColor;//[Offset: 0x30, Size: 0x28]
	bool DynamicIconSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	SlateBrush DefaultBGFocus;//[Offset: 0x60, Size: 0x88]
	SlateBrush DefaultIconFocus;//[Offset: 0xe8, Size: 0x88]
	SlateBrush DefaultFrameFocus;//[Offset: 0x170, Size: 0x88]
	SlateBrush DefaultBGThumbnail;//[Offset: 0x1f8, Size: 0x88]
	SlateBrush DefaultIconThumbnail;//[Offset: 0x280, Size: 0x88]
	SlateBrush DefaultFrameThumbnail;//[Offset: 0x308, Size: 0x88]
	SlateBrush OffscreenArrow;//[Offset: 0x390, Size: 0x88]

--------------------------------
Class: ArkIndicatorConfig.TableRowBase
	enum IndicatorType;//[Offset: 0x8, Size: 0x1]
	class ArkIndicatorWidget* IndicatorClass;//[Offset: 0x10, Size: 0x8]
	bool bAvailableInSpectatingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	int LifeRange;//[Offset: 0x1c, Size: 0x4]
	Vector2D Alignment;//[Offset: 0x20, Size: 0x8]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	int ZOrder;//[Offset: 0x2c, Size: 0x4]
	int Priority;//[Offset: 0x30, Size: 0x4]
	enum[] IndicatorGroupsType;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: ArkStencilManager.ArkManagerBase.Object
	MaterialParameterCollection* StencilParameters;//[Offset: 0x90, Size: 0x8]
	MaterialParameterCollection* ColorParameters;//[Offset: 0x98, Size: 0x8]
	FName StencilStartIndexName;//[Offset: 0xa0, Size: 0x8]
	void SetOutlineEnabled(bool bEnabled);// 0x2976f20
	void SetEliteDisplayOverrideEnabled(bool bEnabled);// 0x2976e90
	static ArkStencilManager* Get(const Object* WorldContext);// 0x29767f0
	static FString CombineStencilParameterName(FString Base);// 0x2976600

--------------------------------
Class: ArkSwarmManager.ArkManagerBase.Object
	int MaxSwarmEntityCacheNum;//[Offset: 0x140, Size: 0x4]
	PendingAnimNotify[] PendingAnimNotifyQueue;//[Offset: 0x148, Size: 0x10]
	SoftObjectPath DefaultAITypeTablePath;//[Offset: 0x158, Size: 0x18]
	FName PoolingSwarmTypeName;//[Offset: 0x170, Size: 0x8]
	int MaxSwarmPoolNum;//[Offset: 0x178, Size: 0x4]
	float SwarmPoolSupplyRate;//[Offset: 0x17c, Size: 0x4]
	int MaxSwarmNum;//[Offset: 0x180, Size: 0x4]
	int MaxEliteNum;//[Offset: 0x184, Size: 0x4]
	ArkSwarmEntityCharacter*[] SwarmCharacterPool;//[Offset: 0x188, Size: 0x10]
	class Character* PoolingSwarmCharacterClass;//[Offset: 0x1a0, Size: 0x8]
	class ArkNavFilter_Base* ServerNavigationFilterClass;//[Offset: 0x1a8, Size: 0x8]
	bool SweepMultiByChannelPerInstance(out HitResult[] OutHits, const ShapeComponent* ShapeComp, out const Vector Start, out const Vector End, byte TraceChannel, InstancedSkeletalMeshActor* SkeletalMeshActor);// 0x29813c0
	bool SweepMultiByChannel(out HitResult[] OutHits, const ShapeComponent* ShapeComp, out const Vector Start, out const Vector End, byte TraceChannel);// 0x29811d0
	void OnInstancedAnimNotify(InstancedSkeletalMeshActor* InstancedSkeletalMeshActor, int InstanceIndex, out const InstanceAnimNotify AnimNotify, bool bShoudPending);// 0x2980e80
	bool LineTraceSingleByChannel(out HitResult OutHit, out const Vector Start, out const Vector End, byte TraceChannel, out const Actor*[] InIgnoreActors, InstancedSkeletalMeshActor* SkeletalMeshActor);// 0x2980880
	InstancedSkeletalMeshActor*[] GetInstancedMeshActors();// 0x2980680
	InstancedSkeletalMeshActor* GetInstancedMeshActor(FName AITypeName);// 0x29805f0
	DataTable* GetAITypeTableInUse();// 0x2980470
	void AddImpulseAtLocation(ArkSwarmEntityCharacter* Character, out const FName BoneName, out const Vector Impulse, out const Vector Position, float InDuration, bool bHitDown, bool bUsePerBoneImpulseScale);// 0x2980230

--------------------------------
Class: PendingAnimNotify
	InstancedSkeletalMeshActor* InstancedSkeletalMeshActor;//[Offset: 0x0, Size: 0x8]
	int InstanceIndex;//[Offset: 0x8, Size: 0x4]
	InstanceAnimNotify AnimNotify;//[Offset: 0x10, Size: 0x28]

--------------------------------
Class: ArkNavFilter_Base.NavigationQueryFilter.Object
	class NavArea* NavLinkArea;//[Offset: 0x48, Size: 0x8]
	float StepHeight;//[Offset: 0x50, Size: 0x4]
	float MaxNavLinkDownHeight;//[Offset: 0x54, Size: 0x4]
	float MaxNavLinkUpHeight;//[Offset: 0x58, Size: 0x4]
	float JumpUpLinkTolerance;//[Offset: 0x5c, Size: 0x4]
	float JumpUpCostModifier;//[Offset: 0x60, Size: 0x4]
	bool bAllowNavlinks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	bool bAllowJumpUplinks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1]
	bool bAllowJumpOverlinks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66, Size: 0x1]
	bool bAllowBreakables;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67, Size: 0x1]
	bool bAllowDoors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	bool bAllowLockedDoors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]
	int MaxSearchNodes;//[Offset: 0x6c, Size: 0x4]
	ArkNavFilter_Base* MutableCopy;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: ArkTeamManager.ArkManagerBase.Object
	class ArkTeamInfo* TeamInfoClass;//[Offset: 0x98, Size: 0x8]
	ArkTeamInfo*[] TeamArray;//[Offset: 0xa0, Size: 0x10]
	<TeamCache_Key(UInt32Property),ArkTeamInfo*> TeamCache;//[Offset: 0xb0, Size: 0x50]
	void OnRep_TeamArray();// 0x298a230
	ArkTeamInfo* GetTeamByID(int TeamId);// 0x2989df0
	bool GetPlayerIDsInTeam(int TeamId, out Out(UInt64Property)[] Out);// 0x2989d00
	static ArkTeamManager* Get(const Object* WorldContext);// 0x2989c80

--------------------------------
Class: ArkDialogueManager.ArkManagerBase.Object
	<int,Actor*> ActorNameIDMap;//[Offset: 0x90, Size: 0x50]
	ArkPlayDialogueLineAsyncTaskBlueprintProxy*[] AllProxyObjects;//[Offset: 0xe0, Size: 0x10]
	enum MinimumAllowedPriority;//[Offset: 0xf0, Size: 0x1]
	DataTable*[] PreProcessVOLineTables;//[Offset: 0x198, Size: 0x10]
	void RemoveFactDictionary(out const FName Name);// 0x2707570

--------------------------------
Class: ArkPlayDialogueLineAsyncTaskBlueprintProxy.Object
	delegate OnFinishedPlaying;//[Offset: 0x28, Size: 0x10]
	Actor* Speaker;//[Offset: 0x38, Size: 0x8]
	void BroadcastFinishedPlaying(enum CallbackType, AkCallbackInfo* CallbackInfo);// 0x288ea60
	void Activate();// 0x288e460

--------------------------------
Class: ArkInGameQuestManager.ArkQuestManager.ArkResourceManagerBase.ArkManagerBase.Object
	static ArkInGameQuestManager* Get(const Object* WorldContext);// 0x2918950

--------------------------------
Class: ArkGameplayEventQuestManager.ArkQuestManager.ArkResourceManagerBase.ArkManagerBase.Object
	ArkQuestTableConfigs QuestTableConfigs_BeginMode;//[Offset: 0x278, Size: 0x28]
	static ArkGameplayEventQuestManager* Get(const Object* WorldContext);// 0x2918850

--------------------------------
Class: ArkInteractiveFieldManager.ArkManagerBase.Object
	FieldVolumeTextureData FieldVolumeTextureData;//[Offset: 0x90, Size: 0x2c]
	VolumeTexture* CurrentFrameFieldTexture;//[Offset: 0xc0, Size: 0x8]
	VolumeTexture* SpringFieldTexture;//[Offset: 0xc8, Size: 0x8]
	VolumeTexture* VolumeOffsetTexture;//[Offset: 0xd0, Size: 0x8]
	MaterialInstanceDynamic*[] GeneratedMIDs;//[Offset: 0xd8, Size: 0x10]
	Vector FieldCenterOffset;//[Offset: 0xe8, Size: 0xc]
	bool bDebugDrawFieldTes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1]
	void BPInit(bool bBPDebugDrawFieldTes);// 0x305c9c0
	static ArkInteractiveFieldManager* BPGet();// 0x2807860

--------------------------------
Class: FieldVolumeTextureData
	IntVector FieldTextureSize;//[Offset: 0x0, Size: 0xc]
	Vector FieldTextureInterval;//[Offset: 0xc, Size: 0xc]
	byte PixelFormat;//[Offset: 0x18, Size: 0x1]
	float CauseSpringVelocityThre;//[Offset: 0x1c, Size: 0x4]
	float GlobalWindFrameDiffusion;//[Offset: 0x20, Size: 0x4]
	float HardWindDamping;//[Offset: 0x24, Size: 0x4]
	float SoftWindDamping;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: VolumeTexture.Texture.StreamableRenderAsset.Object
	bool bUseAsUAV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 0x1]
	bool bUsePrebuildVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e9, Size: 0x1]
	byte PrebuildVolumeFormat;//[Offset: 0x1ea, Size: 0x1]
	int PrebuiltVolumeSizeX;//[Offset: 0x1ec, Size: 0x4]
	int PrebuiltVolumeSizeY;//[Offset: 0x1f0, Size: 0x4]
	int PrebuiltVolumeSizeZ;//[Offset: 0x1f4, Size: 0x4]

--------------------------------
Class: ArkTutorialManager.ArkManagerBase.Object
	DirectoryPath TutorialPlayerEventsRelativePath;//[Offset: 0x90, Size: 0x10]
	delegate OnTriggerTutorialPlayerEventDelegate;//[Offset: 0xa0, Size: 0x10]
	delegate OnPromptMenuCloseDelegate;//[Offset: 0xb0, Size: 0x10]
	delegate OnInstructedMenuCloseDelegate;//[Offset: 0xc0, Size: 0x10]
	void UpdateTutorialPlayerEvents(float DeltaSeconds);// 0x305c9c0
	void TriggerTutorialPlayerEvent(FName PlayerEvent);// 0x305c9c0
	void ReceiveTick(float DeltaSeconds);// 0x305c9c0
	void ReceiveDoInit();// 0x305c9c0
	void OpenPromptMenu(FName ListeningPlayerEvent);// 0x305c9c0
	void OpenInstructedMenu(FName InstructionName);// 0x305c9c0
	void OnInstructionStepChange(int StepIndex);// 0x305c9c0
	void InitTutorialPlayerEvents();// 0x305c9c0
	FName GetCurrentPromptName();// 0x305c9c0
	static ArkTutorialManager* Get(const Object* WorldContext);// 0x29a1560
	void ClosePromptMenu(bool bSucceed);// 0x305c9c0
	void CloseInstructedMenu(bool bSucceed);// 0x305c9c0
	void CheckDataTutorial(out FString[] OutMessages);// 0x305c9c0

--------------------------------
Class: ArkInteractiveWaterManager.ArkManagerBase.Object
	int StepFrame;//[Offset: 0x90, Size: 0x4]
	int CollisionResolution;//[Offset: 0x94, Size: 0x4]
	int SimulationResolution;//[Offset: 0x98, Size: 0x4]
	ArkInteractiveWaterTemplate Template;//[Offset: 0xa0, Size: 0x20]
	WaterEffectParameter[] EffectList;//[Offset: 0xd8, Size: 0x10]
	ArkInteractiveWaterComponent*[] InteractiveComponents;//[Offset: 0xe8, Size: 0x10]
	int TargetsCountInWater();// 0x2808760
	void SpawnEffect(out const WaterEffectParameter Parameter);// 0x28086c0
	bool IsInteractiveEnabled();// 0x2808070
	static ArkInteractiveWaterManager* GetInteractiveWaterManager();// 0x2807c50
	void EnableInteractive();// 0x2807a90
	void DisableInteractive();// 0x2807a70
	void BPInit();// 0x305c9c0

--------------------------------
Class: ArkInteractiveWaterTemplate
	TextureRenderTarget2D* OutputNormal;//[Offset: 0x0, Size: 0x8]
	TextureRenderTarget2D* OutputVelocity;//[Offset: 0x8, Size: 0x8]
	MaterialParameterCollection* GlobalParameters;//[Offset: 0x10, Size: 0x8]
	MaterialParameterCollection* DispatchParameters;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: WaterEffectParameter
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Vector Scale;//[Offset: 0xc, Size: 0xc]
	float InteractiveForce;//[Offset: 0x18, Size: 0x4]
	float WaterHeight;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ArkInteractiveWaterComponent.ActorComponent.Object
	PhysicalMaterial* PhysicsMaterial;//[Offset: 0x1f4, Size: 0x8]
	SkinnedMeshComponent* BindedTarget;//[Offset: 0x200, Size: 0x8]
	ArkCharacterBase* BindedCharacter;//[Offset: 0x208, Size: 0x8]
	ArkInteractiveWaterBox[] BoxRanges;//[Offset: 0x210, Size: 0x10]
	ArkInteractiveWaterSphere[] SphereRanges;//[Offset: 0x220, Size: 0x10]
	int VFXStepFrame;//[Offset: 0x230, Size: 0x4]
	ArkInteractiveWaterFootstepVFX[] StepVFXs;//[Offset: 0x238, Size: 0x10]
	void ExitWaterZone();// 0x2807b90
	void EnterWaterZone(out const HitResult HitResult);// 0x2807ab0
	void BindInteractiveToSkinnedMesh(SkinnedMeshComponent* SkinnedMesh, bool bForceReplace);// 0x2807960
	void BindInteractiveToArkCharacter(ArkCharacterBase* Character, bool bForceReplace);// 0x2807890
	void AddInteractiveSphere(out const ArkInteractiveWaterSphere Sphere);// 0x2807780
	void AddInteractiveBox(out const ArkInteractiveWaterBox Box);// 0x28076c0

--------------------------------
Class: ArkInteractiveWaterSphere.ArkInteractiveWaterShape

--------------------------------
Class: ArkInteractiveWaterShape
	FName SocketName;//[Offset: 0x8, Size: 0x8]
	float InteractiveForce;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ArkInteractiveWaterBox.ArkInteractiveWaterShape

--------------------------------
Class: ArkInteractiveWaterFootstepVFX
	ParticleSystem* ParticleTemplate;//[Offset: 0x0, Size: 0x28]
	Vector2D VelocityRange;//[Offset: 0x28, Size: 0x8]
	ClampedInterpolator[] VelocityInterpolators;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ClampedInterpolator
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	float InRangeA;//[Offset: 0x8, Size: 0x4]
	float InRangeB;//[Offset: 0xc, Size: 0x4]
	float OutRangeA;//[Offset: 0x10, Size: 0x4]
	float OutRangeB;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ArkDisplayItemManager.ArkResourceManagerBase.ArkManagerBase.Object
	<int,ArkDisplayItemDataLoader*> ClassLoadMaps;//[Offset: 0xb8, Size: 0x50]
	DataTable* DisplayItemConfigDataTable;//[Offset: 0x108, Size: 0x28]
	<enum,ArkDisplayItemSceneCaptureConfig> LoadedDisplayConfigMap;//[Offset: 0x130, Size: 0x50]
	<enum,ArkIndependentCaptureClassMap> LoadedIndependentSceneCaptureClassMap;//[Offset: 0x180, Size: 0x50]
	<enum,ArkIndependentCaptureClassMap> LoadedOverrideIndependentClassMap;//[Offset: 0x1d0, Size: 0x50]
	<enum,ArkDisplayItemDataMap> DisplayItemDataMap;//[Offset: 0x220, Size: 0x50]
	int CurrentID;//[Offset: 0x270, Size: 0x4]
	<int,ArkDisplayWorldProxy*> RequestedDisplayWorlds;//[Offset: 0x278, Size: 0x50]
	<int,ArkDisplayItemHandle*> RequestedHandleMap;//[Offset: 0x2c8, Size: 0x50]
	<enum,ArkDisplayWorldDict> DisplaySceneCaptureActorCustomFreePool;//[Offset: 0x318, Size: 0x50]
	ArkDisplayWorldProxy*[] UnLoadableCustomPoolArray;//[Offset: 0x368, Size: 0x10]
	SoftObjectPath WeaponRenderPhotoCFGDTPath;//[Offset: 0x378, Size: 0x18]
	SoftObjectPath CommonItemRenderPhotoCFGDTPath;//[Offset: 0x390, Size: 0x18]
	SoftObjectPath DisplayItemCaptureDataTablePath;//[Offset: 0x3a8, Size: 0x18]
	<int,ArkDisplayItemData> WeaponDisplayItemDataMap;//[Offset: 0x3c0, Size: 0x50]
	<int,ArkDisplayItemData> ItemDisplayItemDataMap;//[Offset: 0x410, Size: 0x50]
	<int,ArkDisplayItemCaptureConfigData> DisplayItemCaptureDataMap;//[Offset: 0x460, Size: 0x50]
	int MaxCustomPoolCount;//[Offset: 0x4c0, Size: 0x4]
	int SuggestedCustomPoolCount;//[Offset: 0x4c4, Size: 0x4]
	void SetDisplayItemClassLoad(const ArkDisplayItemDataLoader* LoaderData);// 0x2707780
	ArkDisplayItemDataLoader* GetDisplayItemDataLoader(enum InItemCaptureType, int inItemID);// 0x2706db0
	static ArkDisplayItemManager* Get(const Object* WorldContext);// 0x27069d0

--------------------------------
Class: ArkDisplayItemDataLoader.Object
	delegate OnDisplayItemClassLoaded;//[Offset: 0x28, Size: 0x10]
	ArkDisplayItemData ItemData;//[Offset: 0x40, Size: 0xc0]

--------------------------------
Class: ArkDisplayItemData.TableRowBase
	int ItemId;//[Offset: 0x8, Size: 0x4]
	class ArkDisplayItemActor* DisplayItemClass;//[Offset: 0x10, Size: 0x28]
	Transform RelativeDisplayTransform;//[Offset: 0x40, Size: 0x30]
	ArkDisplayItemCameraData[] CameraDataList;//[Offset: 0x70, Size: 0x10]
	Transform RelativeTransform_RenderWeaponToPhoto;//[Offset: 0x80, Size: 0x30]
	AnimSequence* Anim_RenderAvatarAndWeaponToPhoto;//[Offset: 0xb0, Size: 0x8]
	AnimMontage* PerformMontage;//[Offset: 0xb8, Size: 0x8]

--------------------------------
Class: ArkDisplayItemActor.Actor.Object
	bool StartLoadNotificationSent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	delegate OnFinishLoadDM;//[Offset: 0x318, Size: 0x10]
	delegate OnStartLoadDM;//[Offset: 0x328, Size: 0x10]
	World* MainWorld;//[Offset: 0x338, Size: 0x8]
	World* LocalWorld;//[Offset: 0x340, Size: 0x8]
	float MaxWaitingTimeForCapture;//[Offset: 0x350, Size: 0x4]
	bool bIsForPhotoCaptureUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x358, Size: 0x1]
	void SetParamString(FString InParamString);// 0x2707880
	void RequestLoadNotification();// 0x77ed40
	void PlayDisplayAnimation();// 0x305c9c0
	void NotifyStartLoad();// 0x2707230
	void NotifyFinishLoad();// 0x2707210
	bool IsLoadStarted();// 0x27071e0
	bool IsLoadFinished();// 0x27071b0

--------------------------------
Class: ArkDisplayItemCameraData
	Vector SpringArmRelativeLocation;//[Offset: 0x0, Size: 0xc]
	Quat SpringArmRelativeRotation;//[Offset: 0x10, Size: 0x10]
	float TargetArmLength;//[Offset: 0x20, Size: 0x4]
	Vector SocketOffset;//[Offset: 0x24, Size: 0xc]
	Vector TargetOffset;//[Offset: 0x30, Size: 0xc]
	float CameraFOVAngle;//[Offset: 0x3c, Size: 0x4]
	Quat CameraRelativeRotation;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: ArkDisplayItemSceneCaptureConfig.TableRowBase
	enum ConfigType;//[Offset: 0x8, Size: 0x1]
	bool EnableImitativeDisplayWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1]
	bool EnableLevelBasedDisplayWorld;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1]
	bool DisablePooledRT;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 0x1]
	SoftClassPath DisplayItemSceneCaptureClassPath;//[Offset: 0x10, Size: 0x18]
	SoftObjectPath DisplayLevelSoftPath;//[Offset: 0x28, Size: 0x18]
	DataTable* DT_IndependentSceneCaptureClass;//[Offset: 0x40, Size: 0x28]
	DataTable* DT_OverrideIndependentClass;//[Offset: 0x68, Size: 0x28]
	DataTable* DT_DisplayItemClass;//[Offset: 0x90, Size: 0x28]
	class ArkDisplayItemSceneCaptureActorBase* LoadedSceneCaptureActorClass;//[Offset: 0xb8, Size: 0x8]

--------------------------------
Class: ArkDisplayItemSceneCaptureActorBase.Actor.Object
	SceneComponent* RootSceneComponent;//[Offset: 0x318, Size: 0x8]
	SpringArmComponent* CameraSpringArmComponent;//[Offset: 0x320, Size: 0x8]
	SceneCaptureComponent2D* SceneCaptureComponent;//[Offset: 0x328, Size: 0x8]
	SceneComponent* DisplayItemRootComponent;//[Offset: 0x330, Size: 0x8]
	SceneComponent* ManagedVisibilityRootComponent;//[Offset: 0x338, Size: 0x8]
	ArkDisplayItemHandle* RegisteredDisplayItemHandle;//[Offset: 0x340, Size: 0x8]
	int DisplayItemRenderChangeLock;//[Offset: 0x348, Size: 0x4]
	<ArkDisplayItemActor*,bool> DisplayItemLoadingStateMap;//[Offset: 0x350, Size: 0x50]
	SceneComponent*[] CloseTickComponentList;//[Offset: 0x3a0, Size: 0x10]
	Actor*[] CloseTickActorList;//[Offset: 0x3b0, Size: 0x10]
	enum SceneCaptureSource;//[Offset: 0x3c8, Size: 0x1]
	enum SceneCaptureRenderMode;//[Offset: 0x3c9, Size: 0x1]
	bool bHasCustomAlphaInCaptureSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ca, Size: 0x1]
	int MaxCaptureTickFrame;//[Offset: 0x3cc, Size: 0x4]
	int OffsetDeltaFrame;//[Offset: 0x3d0, Size: 0x4]
	CurveFloat* FOVCurve;//[Offset: 0x3d8, Size: 0x8]
	CurveVector* CameraRelativeOffsetCurve;//[Offset: 0x3e0, Size: 0x8]
	DataTable* DefaultConsoleVariableDataTable;//[Offset: 0x3e8, Size: 0x8]
	bool bEnablePPVolumeInLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f0, Size: 0x1]
	bool bOverrideDisplayItemRenderSettings;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f0, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3f0, Size: 0x1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x3f1, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x3f4, Size: 0x4]
	int GlobalMaxCountPendingKillChildActors;//[Offset: 0x404, Size: 0x4]
	void ToggleLight_BP(bool bEnable);// 0x305c9c0
	void ResetDisplayState();// 0xca5ab0
	void OnViewportResizedDone(out const Vector2D CurrentResolution, float CurrentFOV);// 0x270d510
	void OnDisplayItemStartLoad(ArkDisplayItemActor* InDisplayItemActor);// 0x270d470
	void OnDisplayItemFinishLoad(ArkDisplayItemActor* InDisplayItemActor);// 0x270d3f0
	void DoViewportResize(out const Vector2D CurrentResolution);// 0x270d360
	void CameraSwitchView(enum CameraView);// 0x270d2c0
	void CameraSwitchOperation(int CameraStateIndex, bool InResetDisplayStateFlag);// 0x270d200
	WeightedBlendable[] BP_WeightedBlendablesToAdd();// 0x305c9c0
	void BP_OnZoomInOutOperation(float ZoomLerpFactor, int DisplayIndex);// 0x305c9c0
	void BP_OnZoomInOutDeltaOperation(float ZoomLerpDeltaFactor, int DisplayIndex);// 0x305c9c0
	void BP_OnTranslationCameraDeltaOperation(out const Vector2D DeltaLocation);// 0x305c9c0
	void BP_OnSetParamString(FString InParamString, int DisplayIndex);// 0x305c9c0
	void BP_OnSetDisplayItem(out const ArkDisplayItemData InDisplayItemData, bool InResetDisplayStateFlag, int DisplayIndex);// 0x305c9c0
	void BP_OnSetBgTexture(const Texture2D* BgTexture);// 0x305c9c0
	void BP_OnRotateItemOperation(out const Rotator InRotator, int DisplayIndex);// 0x305c9c0
	void BP_OnRotateItemDeltaOperation(out const Rotator InDeltaRotator, int DisplayIndex);// 0x305c9c0
	void BP_OnRotateCameraOperation(out const Rotator InRotator, int DisplayIndex);// 0x305c9c0
	void BP_OnRotateCameraDeltaOperation(out const Rotator InDeltaRotator, int DisplayIndex);// 0x305c9c0
	void BP_OnReturnToPool();// 0x305c9c0
	void BP_OnResumeByCustomPool();// 0x305c9c0
	void BP_OnPickFromPool();// 0x305c9c0
	void BP_OnPauseByCustomPool(bool IsOnDisplayItemRelease);// 0x305c9c0
	void BP_OnFireDisplayAction(FString InActionString, int DisplayIndex);// 0x305c9c0
	void BP_OnDisplayItemStartLoad();// 0x305c9c0
	void BP_OnDisplayItemFinishLoad();// 0x305c9c0
	void BP_OnCameraSwitchView(enum CameraView);// 0x305c9c0
	void BP_OnCameraSwitchOperation(int CameraStateIndex);// 0x305c9c0

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x468, Size: 0x1]
	float FOVAngle;//[Offset: 0x46c, Size: 0x4]
	float OrthoWidth;//[Offset: 0x470, Size: 0x4]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x478, Size: 0x8]
	byte CompositeMode;//[Offset: 0x480, Size: 0x1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x490, Size: 0x640]
	float PostProcessBlendWeight;//[Offset: 0xad0, Size: 0x4]
	bool bOverride_CustomNearClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xad4, Size: 0x1]
	float CustomNearClippingPlane;//[Offset: 0xad8, Size: 0x4]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xadc, Size: 0x1]
	Matrix CustomProjectionMatrix;//[Offset: 0xae0, Size: 0x40]
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb20, Size: 0x1]
	Vector ClipPlaneBase;//[Offset: 0xb24, Size: 0xc]
	Vector ClipPlaneNormal;//[Offset: 0xb30, Size: 0xc]
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb3c, Size: 0x1]
	bool bConsiderUnrenderedOpaquePixelAsFullyTranslucent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb3c, Size: 0x1]
	bool bDisableFlipCopyGLES;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb40, Size: 0x1]
	void CaptureScene();// 0x4c821f0
	void AddOrUpdateBlendable(interface class InBlendableObject, float InWeight);// 0x4c820a0

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x3a8, Size: 0x1]
	byte CaptureSource;//[Offset: 0x3a9, Size: 0x1]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3aa, Size: 0x1]
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3aa, Size: 0x1]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ab, Size: 0x1]
	bool bRenderedTwoside;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 0x1]
	bool bRenderStaticOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ad, Size: 0x1]
	float RecaptureTime;//[Offset: 0x3b0, Size: 0x4]
	bool bNeverCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 0x1]
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x3b8, Size: 0x10]
	Actor*[] HiddenActors;//[Offset: 0x3c8, Size: 0x10]
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x3d8, Size: 0x10]
	Actor*[] ShowOnlyActors;//[Offset: 0x3e8, Size: 0x10]
	float LODDistanceFactor;//[Offset: 0x3f8, Size: 0x4]
	float MaxViewDistanceOverride;//[Offset: 0x3fc, Size: 0x4]
	int CaptureSortPriority;//[Offset: 0x400, Size: 0x4]
	bool bUseRayTracingIfEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 0x1]
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x408, Size: 0x10]
	EngineConsoleVariableSetting[] ConsoleVariableSettings;//[Offset: 0x420, Size: 0x10]
	FString ProfilingEventName;//[Offset: 0x440, Size: 0x10]
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x4c858b0
	void ShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x4c857e0
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x4c852d0
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x4c85110
	void RemoveShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x4c85040
	void HideComponent(PrimitiveComponent* InComponent);// 0x4c82c40
	void HideActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x4c82b70
	void ClearShowOnlyComponents();// 0x4c82230
	void ClearHiddenComponents();// 0x4c82210

--------------------------------
Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 0x10]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: EngineConsoleVariableSetting
	FString ConsoleVariableName;//[Offset: 0x0, Size: 0x10]
	int Value;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ArkDisplayItemHandle.Object
	enum DisplayItemType;//[Offset: 0x28, Size: 0x1]
	ArkMultiWorldProxy* DisplayWorldProxy;//[Offset: 0x30, Size: 0x8]
	int DisplayItemID;//[Offset: 0x38, Size: 0x4]
	bool bHasAlphaInfoInRT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]

--------------------------------
Class: ArkMultiWorldProxy.Object
	World* MainWorldPtr;//[Offset: 0x48, Size: 0x8]
	int worldId;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: ArkIndependentCaptureClassMap
	<int,ArkIndependentSceneCaptureClassConfigData> IndependentConfigMap;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: ArkIndependentSceneCaptureClassConfigData.TableRowBase
	int ItemId;//[Offset: 0x8, Size: 0x4]
	bool EnableImitativeDisplayWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool EnableLevelBasedDisplayWorld;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool DisablePooledRT;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	SoftClassPath IndependentSceneCaptureClassPath;//[Offset: 0x10, Size: 0x18]
	SoftObjectPath DisplayLevelSoftPath;//[Offset: 0x28, Size: 0x18]
	class ArkDisplayItemSceneCaptureActorBase* LoadedSceneCaptureActorClass;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: ArkDisplayItemDataMap
	<int,ArkDisplayItemData> ItemMap;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: ArkDisplayWorldProxy.ArkMultiWorldProxy.Object
	SoftClassPath SceneCaptureActorClassPath;//[Offset: 0x78, Size: 0x18]
	SoftObjectPath LevelSoftPath;//[Offset: 0x90, Size: 0x18]
	ArkDisplayItemSceneCaptureActorBase* SceneCaptureActor;//[Offset: 0xa8, Size: 0x8]
	PostProcessVolume* OptionalPPV;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: PostProcessVolume.Volume.Brush.Actor.Object
	PostProcessSettings Settings;//[Offset: 0x330, Size: 0x640]
	CharacterLightProperties LightSettings;//[Offset: 0x970, Size: 0x28]
	float Priority;//[Offset: 0x998, Size: 0x4]
	float BlendRadius;//[Offset: 0x99c, Size: 0x4]
	float BlendWeight;//[Offset: 0x9a0, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9a4, Size: 0x1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9a4, Size: 0x1]
	void AddOrUpdateBlendable(interface class InBlendableObject, float InWeight);// 0x4c6f640

--------------------------------
Class: CharacterLightProperties
	bool bOverride_LightRotatorOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_Intensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_LightColor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_SourceAngle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_SourceSoftAngle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_Temperature;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bOverride_UseTemperature;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_CastShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	Rotator LightRotatorOffset;//[Offset: 0x4, Size: 0xc]
	float Intensity;//[Offset: 0x10, Size: 0x4]
	Color LightColor;//[Offset: 0x14, Size: 0x4]
	float SourceAngle;//[Offset: 0x18, Size: 0x4]
	float SourceSoftAngle;//[Offset: 0x1c, Size: 0x4]
	float Temperature;//[Offset: 0x20, Size: 0x4]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool bCastShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]

--------------------------------
Class: ArkDisplayWorldDict
	<SoftClassPath,ArkDisplayWorldSet> WorldDictMap;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: ArkDisplayWorldSet
	ArkDisplayWorldProxy*[] WorldProxies;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ArkDisplayItemCaptureConfigData.TableRowBase
	int ID;//[Offset: 0x8, Size: 0x4]
	FString ConfigName;//[Offset: 0x10, Size: 0x10]
	Transform cameraTransform;//[Offset: 0x20, Size: 0x30]
	int iRTSizeX;//[Offset: 0x50, Size: 0x4]
	int iRTSizeY;//[Offset: 0x54, Size: 0x4]
	AnimSequence* AnimToPhoto;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: ArkSignificanceManager.ArkManagerBase.Object
	AnimationBudgetAllocatorParameters AnimationAllocatorParameters;//[Offset: 0x90, Size: 0x50]
	AnimationBudgetAllocatorParameters AnimationAllocatorParametersLow;//[Offset: 0xe0, Size: 0x50]
	AnimationBudgetAllocatorParameters AnimationAllocatorParametersHigh;//[Offset: 0x130, Size: 0x50]
	<FName,ArkSignificanceLevelsData> ManagedObjectLevelConfig;//[Offset: 0x180, Size: 0x50]
	SceneComponent*[] ViewPointObjects;//[Offset: 0x220, Size: 0x10]
	static void UnregisterSignificanceAwaredObject(Object* Object);// 0x2964080
	static void RegisterSignificanceAwaredObject(Object* Object, float OverrideBoundsRadius, bool bManageTick, bool bManageVisibility, bool bManageMobility);// 0x2963700
	void ApplyAnimationQualityChanged(int NewQuality);// 0x2963120

--------------------------------
Class: AnimationBudgetAllocatorParameters
	float BudgetInMs;//[Offset: 0x0, Size: 0x4]
	float MinQuality;//[Offset: 0x4, Size: 0x4]
	int MaxTickRate;//[Offset: 0x8, Size: 0x4]
	float WorkUnitSmoothingSpeed;//[Offset: 0xc, Size: 0x4]
	float AlwaysTickFalloffAggression;//[Offset: 0x10, Size: 0x4]
	float InterpolationFalloffAggression;//[Offset: 0x14, Size: 0x4]
	int InterpolationMaxRate;//[Offset: 0x18, Size: 0x4]
	int MaxInterpolatedComponents;//[Offset: 0x1c, Size: 0x4]
	float InterpolationTickMultiplier;//[Offset: 0x20, Size: 0x4]
	float InitialEstimatedWorkUnitTimeMs;//[Offset: 0x24, Size: 0x4]
	int MaxTickedOffsreenComponents;//[Offset: 0x28, Size: 0x4]
	int StateChangeThrottleInFrames;//[Offset: 0x2c, Size: 0x4]
	float BudgetFactorBeforeReducedWork;//[Offset: 0x30, Size: 0x4]
	float BudgetFactorBeforeReducedWorkEpsilon;//[Offset: 0x34, Size: 0x4]
	float BudgetPressureSmoothingSpeed;//[Offset: 0x38, Size: 0x4]
	int ReducedWorkThrottleMinInFrames;//[Offset: 0x3c, Size: 0x4]
	int ReducedWorkThrottleMaxInFrames;//[Offset: 0x40, Size: 0x4]
	float BudgetFactorBeforeAggressiveReducedWork;//[Offset: 0x44, Size: 0x4]
	int ReducedWorkThrottleMaxPerFrame;//[Offset: 0x48, Size: 0x4]
	float BudgetPressureBeforeEmergencyReducedWork;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: ArkSignificanceLevelsData
	ArkSignificanceLevelInfo[] LevelConfigs;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ArkSignificanceLevelInfo
	enum SignificanceLevel;//[Offset: 0x0, Size: 0x1]
	float MinSignificanceValue;//[Offset: 0x4, Size: 0x4]
	int MaxObjectCount;//[Offset: 0x8, Size: 0x4]
	int CurObjectCount;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ArkRenderPhotoManager.ArkManagerBase.Object
	Vector photoActorBasePosition;//[Offset: 0x90, Size: 0xc]
	class ArkCaptureItemBase* RenderEliteClass;//[Offset: 0xa0, Size: 0x28]
	class ArkCaptureItemBase* RenderWeaponClass;//[Offset: 0xc8, Size: 0x28]
	class ArkCaptureItemBase* RenderCommonItemClass;//[Offset: 0xf0, Size: 0x28]
	FString PhotoPrefix;//[Offset: 0x118, Size: 0x10]
	ArkCaptureItemBase* captureEliteItem;//[Offset: 0x128, Size: 0x8]
	ArkCaptureItemBase* captureWeaponItem;//[Offset: 0x130, Size: 0x8]
	ArkCaptureItemBase* captureCommonItem;//[Offset: 0x138, Size: 0x8]
	static ArkRenderPhotoManager* Get(const Object* WorldContext);// 0x2924670
	ArkCaptureItemInfo GenerateCaptureItemInfo(FString strItemInfo, int captureConfigID);// 0x2924560
	void CleanAllCaches();// 0x2923ae0

--------------------------------
Class: ArkCaptureItemBase.Actor.Object
	delegate OnJobDone;//[Offset: 0x2f0, Size: 0x10]
	int iRTSizeW;//[Offset: 0x300, Size: 0x4]
	int iRTSizeH;//[Offset: 0x304, Size: 0x4]
	int iFinalRTwidth;//[Offset: 0x308, Size: 0x4]
	int iFinalRTheight;//[Offset: 0x30c, Size: 0x4]
	World* MainWorld;//[Offset: 0x310, Size: 0x8]
	World* LocalWorld;//[Offset: 0x318, Size: 0x8]
	SceneCaptureComponent2D* SceneCaptureComponent;//[Offset: 0x320, Size: 0x8]
	ArkCaptureItemResult[] CachedRender;//[Offset: 0x328, Size: 0x10]
	ArkCaptureItemCommand[] RenderCommandList;//[Offset: 0x338, Size: 0x10]
	bool bIsWorkingOnRender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]
	ArkCaptureItemCommand CurrentRenderCommand;//[Offset: 0x350, Size: 0x28]
	bool bWorldLoadOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 0x1]
	ArkDisplayItemActor* CurrentDisplayItem;//[Offset: 0x380, Size: 0x8]
	TextureRenderTarget2D*[] allRenderTargets;//[Offset: 0x388, Size: 0x10]
	float fWaitRenderStateTime;//[Offset: 0x398, Size: 0x4]
	float fWaitRenderStateTime_AfterCapture;//[Offset: 0x39c, Size: 0x4]
	void WaitForRenderStateReady();// 0xae2270
	void WaitForMipsReady();// 0xae2270
	bool RemoveCommand(out const ArkCaptureItemCommand RenderCommand);// 0x26a7bf0
	void PrepareForCapture(const ArkDisplayItemActor* TargetActor);// 0x26a7b70
	void OnWorldInitStatusUpdated(enum NewStatus);// 0x26a7af0
	void OnFinishCurrentCommand(Texture* InCommandTexture);// 0x26a7a70
	void OnCurrentTextureReady(Texture* PhotoTexture);// 0x26a79f0
	void OnAddNewCommand();// 0x26a79b0
	int NumOfCommands();// 0x14a8210
	void InitWorldStateWatcher();// 0x26a78a0
	void InitializeCommandState();// 0x26a78c0
	bool GetCommand(out ArkCaptureItemCommand RenderCommand);// 0x26a7670
	bool GetbWorldLoadOver();// 0x26a7880
	bool FindCachedRender(out ArkCaptureItemResult Output, out const ArkCaptureItemInfo itemInfo);// 0x26a7440
	void ExecuteNewCommand(out const ArkCaptureItemCommand RenderCommand);// 0x26a73c0
	void ExecuteCapture();// 0x26a73a0
	void CreateNewRenderTargetForSceneCapture(SceneCaptureComponent2D* SceneCapture);// 0x26a7320
	void ClearCurrentDisplayItem();// 0x26a7300
	void CleanCaches();// 0x26a72e0
	void CheckReadyTexturesInCache();// 0x26a72c0
	World* BP_GetMainWorld();// 0x26a7280
	World* BP_GetLocalWorld();// 0x26a7240
	int AddCommand(out const ArkCaptureItemCommand RenderCommand);// 0x26a7180
	void AbortCurrentRenderCommand(Texture* PhotoTexture);// 0x26a7100

--------------------------------
Class: ArkCaptureItemResult
	ArkCaptureItemInfo itemInfo;//[Offset: 0x0, Size: 0x20]
	Texture* Texture;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: ArkCaptureItemInfo
	FString strItemInfo;//[Offset: 0x0, Size: 0x10]
	FName TextureCacheKey;//[Offset: 0x10, Size: 0x8]
	int captureConfigID;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ArkCaptureItemCommand
	ArkCaptureItemInfo itemInfo;//[Offset: 0x0, Size: 0x20]
	int ID;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: ArkExtractionRewardFlowManager.ArkManagerBase.Object
	delegate OnPlayerSelecting;//[Offset: 0x90, Size: 0x10]
	delegate OnRewardSelected;//[Offset: 0xa0, Size: 0x10]
	delegate OnItemStatesChanged;//[Offset: 0xb0, Size: 0x10]
	delegate OnPlayerActivated;//[Offset: 0xc0, Size: 0x10]
	delegate OnPlayerActivationSkipped;//[Offset: 0xd0, Size: 0x10]
	delegate OnEndSelectionPhase;//[Offset: 0xe0, Size: 0x10]
	delegate OnAvailableRewardsChanged;//[Offset: 0xf0, Size: 0x10]
	int MaxPlayersToReward;//[Offset: 0x100, Size: 0x4]
	int NumRewardsToOffer;//[Offset: 0x104, Size: 0x4]
	float SelectionDurationSeconds;//[Offset: 0x108, Size: 0x4]
	float LastSelectionDurationInSeconds;//[Offset: 0x10c, Size: 0x4]
	float TimeToWaitBeforeSkipSeconds;//[Offset: 0x110, Size: 0x4]
	enum TransitionMode;//[Offset: 0x114, Size: 0x1]
	float DelayBeforeTransitionSeconds;//[Offset: 0x118, Size: 0x4]
	float SyncedStartTimeOffsetSeconds;//[Offset: 0x11c, Size: 0x4]
	bool bLockOnlyChoiceAutomatically;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	float DelayStartFlowSeconds;//[Offset: 0x124, Size: 0x4]
	float DelayEndFlowSeconds;//[Offset: 0x128, Size: 0x4]
	void StartFlow();// 0x2722e10
	void RewardSelected(FString PlayerId, PaperSprite* icon);// 0x2722bd0
	void PreEndFlow();// 0xae2270
	void PlayerSelecting();// 0x2722b80
	void OutTimeAutoSelectReward(AutoSelectPlayerID(UInt64Property) AutoSelectPlayerID, int AutoSelectItemID);// 0x2722a30
	void OnPlayerSelectRewardDelay();// 0x2722990
	void OnPlayerSelectReward(SelectPlayerID(UInt64Property) SelectPlayerID, int SelectItemID);// 0x27228d0
	bool IsLastPlayer();// 0x2722870
	bool IsActivePlayer(const ArkPlayerStatePve* PlayerState);// 0x27227e0
	float GetSelectionDurationInSeconds();// 0x2722720
	static ArkExtractionRewardFlowManager* Get(const Object* WorldContext);// 0x2722590
	void EndFlow();// 0x27224c0

--------------------------------
Class: ArkPlayerStatePve.ArkPlayerStateBattle.ArkPlayerStateBase.PlayerState.Info.Actor.Object
	delegate OnTokensUpdated;//[Offset: 0x1108, Size: 0x10]
	delegate OnUpgradeUnlocked;//[Offset: 0x1118, Size: 0x10]
	delegate OnPveScoreUpdated;//[Offset: 0x1128, Size: 0x10]
	delegate OnReceivedMatchResult;//[Offset: 0x1138, Size: 0x10]
	delegate OnRequestedReturnToHaven;//[Offset: 0x1148, Size: 0x10]
	bool bInNewDarkErosionPortal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1158, Size: 0x1]
	enum EndReason;//[Offset: 0x1159, Size: 0x1]
	class ArkItem* ScrapsClass;//[Offset: 0x1160, Size: 0x8]
	class ArkItem* TokenClass;//[Offset: 0x1168, Size: 0x8]
	int FlareCooldownTimer;//[Offset: 0x1170, Size: 0x4]
	int FlareIndicatorShowTimer;//[Offset: 0x1174, Size: 0x4]
	int FlareCooldown;//[Offset: 0x1178, Size: 0x4]
	delegate OnRecievedPlayerStatistics;//[Offset: 0x1180, Size: 0x10]
	delegate OnFlareCooldownTimerUpdated;//[Offset: 0x1190, Size: 0x10]
	delegate PlayerInfoSaved;//[Offset: 0x11a0, Size: 0x10]
	ArkPlayerInfo SavedPlayerInfo;//[Offset: 0x11b0, Size: 0x2f8]
	int FinalPveScore;//[Offset: 0x14a8, Size: 0x4]
	int ScrapsCount;//[Offset: 0x14ac, Size: 0x4]
	int CurrentObjectiveTokens;//[Offset: 0x14b0, Size: 0x4]
	ArkPveMatchResult UIMatchResult;//[Offset: 0x14b8, Size: 0x28]
	delegate RoundFinishedSignal;//[Offset: 0x14e0, Size: 0x10]
	bool bServicingCompleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14f0, Size: 0x1]
	bool bServicingStoreClosed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14f1, Size: 0x1]
	bool bIgnoreServicingStoreVote;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14f2, Size: 0x1]
	delegate OnServivingCompleteChanged;//[Offset: 0x14f8, Size: 0x10]
	ArkDensityValueInfo DensityValueInfo;//[Offset: 0x1508, Size: 0x8]
	<FName,int> PveMaterials;//[Offset: 0x1518, Size: 0x50]
	LinearColor FlareColor;//[Offset: 0x1568, Size: 0x10]
	int[] RecordPerkItems;//[Offset: 0x1580, Size: 0x10]
	void UpdateScrapsCount();// 0x28d56c0
	void ShowEndScreen();// 0x28d5520
	void SetServicingStoreIgnore(bool bIgnore);// 0x28d53e0
	void SetPveMaterial(out FName Key, int Val);// 0x28d5310
	void SetEndReason(const enum NewEndReason);// 0x28d5150
	void SetAmmoCount(enum AmmoType, int Count);// 0x28d5090
	void ServerTryKickPlayer();// 0x28d4fa0
	void ServerDebugModifyPveMaterial(FString Name, int DeltaValue);// 0x28d4e30
	void ServerAddPveScore(int ScoreToAdd);// 0x28d4da0
	void ServerAddObjectiveIsFound(enum Type, Actor* InObjective);// 0x28d4cd0
	void SavePlayerInfo(bool bKilled);// 0x28d4c40
	void ReloadAllWeapons();// 0x28d4c20
	void OnUsedFlare();// 0x28d4be0
	void OnTeamEliminated();// 0x28d4b30
	void OnRep_UIMatchResult();// 0x28d4ad0
	void OnRep_ServicingStoreClosed();// 0x28d4a90
	void OnRep_SavedPlayerInfo();// 0x28d4a70
	void OnRep_FlareCooldownTimer();// 0x28d4a30
	void OnRep_FinalPveScore();// 0x28d4a10
	void OnRep_EndReason();// 0x28d49f0
	void OnRep_DensityValueInfo();// 0x28d49d0
	void OnRep_CurrentObjectiveTokens();// 0x28d49b0
	void OnRep_bServicingCompleted();// 0x28d4af0
	void OnPlayerReturnToHavenInternal();// 0x28d4990
	void OnPlayerDead();// 0x28d4930
	void OnPlayerChooseToReturnTohaven();// 0x28d4910
	void OnControllerPlayerStateChange(ArkPlayerStateBattle* NewPS);// 0x28d4870
	void GotoHaven();// 0x28d45f0
	int GetObjectID(class ArkItem ItemClass);// 0x28d4360
	LinearColor GetFlareColor();// 0x28d4330
	enum GetEndReason();// 0x28d4300
	void CopyPlayerStatistiticsFromServerToClient();// 0x28d42e0
	void ClientRecievePlayerStatisticsFromServer(const int[] PlayerStat);// 0x28d41c0
	void ClientDebugModifyPveMaterial(FString Name, int DeltaValue);// 0x28d40e0
	void ClientConfirmServicingCompleted(InPlayerId(UInt64Property) InPlayerId);// 0x28d4050
	void ClearPerkItem();// 0x28d3e20
	void ClearMetaSyncItem();// 0x28d3e00
	void ClearEnergyItem();// 0x28d3de0
	void CanUseFlare(out bool bOutCanUseFlare);// 0x28d3a70
	void AdjustTokensBy(int TokenDelta);// 0x28d3930
	void AddMatchResult(out const FName Stat, const int Count);// 0x28d37e0

--------------------------------
Class: ArkPlayerInfo
	FString PlayerName;//[Offset: 0x0, Size: 0x10]
	UInt64Property PlayerId;//[Size: 0x8]
	float Health;//[Offset: 0x18, Size: 0x4]
	float Shield;//[Offset: 0x1c, Size: 0x4]
	float MaxShield;//[Offset: 0x20, Size: 0x4]
	int Score;//[Offset: 0x24, Size: 0x4]
	PlayerInventoryItemInfo[] Items;//[Offset: 0x28, Size: 0x10]
	WeaponSet Weapons;//[Offset: 0x38, Size: 0x80]
	enum CurrentWeaponSlot;//[Offset: 0xb8, Size: 0x1]
	ArkSyncNanoInfo SyncNanoInfo;//[Offset: 0xc0, Size: 0x20]
	int[] PlayerStatistics;//[Offset: 0xe0, Size: 0x10]
	<int,WeaponStatistics> WeaponStatisticsMap;//[Offset: 0xf0, Size: 0x50]
	<FString,int> Statistics_WithComplexKey;//[Offset: 0x140, Size: 0x50]
	ArkPVEPlayerBehaviourData[] PVEBehaviourDataArray;//[Offset: 0x190, Size: 0x10]
	int ExchangeTimes;//[Offset: 0x1a0, Size: 0x4]
	FString[] SuperPerksSchool;//[Offset: 0x1a8, Size: 0x10]
	ArkRelifeItemInfo[] BackHavenSaveDatas;//[Offset: 0x1b8, Size: 0x10]
	<enum,ArkNotebookData> NotebookDataMap;//[Offset: 0x1c8, Size: 0x50]
	ArkNotebookKilledNanoData KilledNotebookNanoData;//[Offset: 0x218, Size: 0x20]
	<FString,SyncStatistics> SyncStatisticsMap;//[Offset: 0x238, Size: 0x50]
	<FString,ArkBattleSurvivorStatistics> HeroStatisticsMap;//[Offset: 0x288, Size: 0x50]
	ArkMimirNetBattleUnlockInfo MimirNetBattleUnlockInfo;//[Offset: 0x2d8, Size: 0x20]

--------------------------------
Class: PlayerInventoryItemInfo
	int ID;//[Offset: 0x0, Size: 0x4]
	int amount;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WeaponSet
	WeaponInfo Pistol;//[Offset: 0x0, Size: 0x20]
	WeaponInfo Melee;//[Offset: 0x20, Size: 0x20]
	WeaponInfo Primary;//[Offset: 0x40, Size: 0x20]
	WeaponInfo Secondary;//[Offset: 0x60, Size: 0x20]

--------------------------------
Class: WeaponInfo
	int WeaponId;//[Offset: 0x0, Size: 0x4]
	int Durability;//[Offset: 0x4, Size: 0x4]
	int AmmoInClip;//[Offset: 0x8, Size: 0x4]
	FString ItemAttributes;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ArkSyncNanoInfo
	bool bHaveNano;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float HealthScale;//[Offset: 0x4, Size: 0x4]
	float DyingRecoverTimer;//[Offset: 0x8, Size: 0x4]
	int ActiveSyncSlot;//[Offset: 0xc, Size: 0x4]
	ArkSyncCoreChipInfo[] EquipedSyncChips;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ArkSyncCoreChipInfo
	int CoreChipID;//[Offset: 0x0, Size: 0x4]
	int[] ModChipIDArray;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ArkPVEPlayerBehaviourData
	FName BehaviourName;//[Offset: 0x0, Size: 0x8]
	int Value;//[Offset: 0x8, Size: 0x4]
	bool bTotal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: ArkPveMatchResult
	ArkHavenStatCount[] GotHavenStats;//[Offset: 0x0, Size: 0x10]
	int BossFragments;//[Offset: 0x10, Size: 0x4]
	int UploadedToken;//[Offset: 0x14, Size: 0x4]
	int DifficultyLv;//[Offset: 0x18, Size: 0x4]
	int LootBoxLv;//[Offset: 0x1c, Size: 0x4]
	bool bKilledBoss;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: ArkHavenStatCount
	FName StatName;//[Offset: 0x0, Size: 0x8]
	int Count;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ArkDensityValueInfo
	float Value;//[Offset: 0x0, Size: 0x4]
	int Index;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ArkInGameEventsManager.ArkManagerBase.Object
	<int,float> RandomWeightPlusMap;//[Offset: 0xa0, Size: 0x50]
	Actor* OwnerPrivate;//[Offset: 0xf0, Size: 0x8]
	DataTable* InGameEventsTable;//[Offset: 0xf8, Size: 0x8]
	ESMInstance*[] ActivatedStateMachineInstances;//[Offset: 0x150, Size: 0x10]
	bool bShowDebugMessage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 0x1]
	bool TriggerStateEvent(out const FName StateMachineName, out const FName EventName);// 0x27f3130
	bool TestEventLocationRule(int EventID, out const Vector TestLocation);// 0x27f3050
	void StopStateMachine(out const FName StateMachineName);// 0x27f2fb0
	bool StartStateMachineByTemplate(out const FName StateMachineName, ESM* Template, Actor* Owner);// 0x27f2ea0
	bool StartStateMachine(out const FName StateMachineName);// 0x27f2df0
	bool StartRandomEventInPool(int PoolID);// 0x27f2d60
	bool StartInGameEvent(int EventID);// 0x27f2cd0
	void RemoveEventLocation(int EventID, int Index);// 0x27f2620
	void OnGameFlowChangeCallback(enum LastMode, enum NewMode, float StartTime);// 0x27f23d0
	bool IsStateMachineActived(out const FName StateMachineName);// 0x27f21c0
	bool IsMachineStateActived(out const FName StateMachineName, out const FName StateName);// 0x27f20d0
	bool HasStateMachine(out const FName StateMachineName);// 0x27f1ee0
	ESMInstance* GetStateMachineInstanceByName(out const FName StateMachineName);// 0x27f1d90
	float GetMachineStateTimeRemaining(out const FName StateMachineName, out const FName StateName);// 0x27f1c30
	float GetMachineStateTimeOut(out const FName StateMachineName, out const FName StateName);// 0x27f1b40
	float GetMachineStateActiveTime(out const FName StateMachineName, out const FName StateName);// 0x27f1a50
	Vector[] GetEventLocationsByID(int EventID);// 0x27f1860
	int GetEventIDbyName(out const FName StateMachineName);// 0x27f17c0
	static ArkInGameEventsManager* Get(const Object* WorldContext);// 0x27f1740
	int AddEventLocation(int EventID, out const Vector NewLocation);// 0x27f14c0

--------------------------------
Class: ESMInstance.Object
	FName ESMName;//[Offset: 0x2c, Size: 0x8]
	Actor* OwnerPrivate;//[Offset: 0x50, Size: 0x8]
	ESM* ESMTemplate;//[Offset: 0x58, Size: 0x8]
	ESMNode*[] NodeInstances;//[Offset: 0x60, Size: 0x10]
	<FName,ESMNode_State*> ActivedEntryMap;//[Offset: 0x70, Size: 0x50]
	<FName,ESMNode_State*> SubStateEntryNodeMap;//[Offset: 0xc0, Size: 0x50]
	void TriggerStateEvent(FName EventName);// 0xb05760
	void TriggerOneStateEvent(FName InEventName);// 0xb054f0
	void ProcessStateTransition(ESMNode_State* TargetState, FName Event);// 0xb051a0
	void OnRep_NodeInstances();// 0xb05180
	Actor* GetOwnerActor();// 0xb04f70

--------------------------------
Class: ESM.Object
	ESMNode_Root* RootNode;//[Offset: 0x28, Size: 0x8]
	<FName,ESMNode_SubStateEntry*> SubStateEntryMap;//[Offset: 0x30, Size: 0x50]
	ESMNode_SubStateEntry*[] SubStateEntryNodes;//[Offset: 0x80, Size: 0x10]
	ESMNode*[] CreatedTemplateNodes;//[Offset: 0x90, Size: 0x10]

--------------------------------
Class: ESMNode_Root.ESMNode.Object
	ESMOutput Next;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: ESMNode.Object
	Actor* OwnerPrivate;//[Offset: 0x28, Size: 0x8]
	int CreatedInstanceIndex;//[Offset: 0x30, Size: 0x4]
	bool IsDedicatedServer();// 0xb05130
	bool IsClient();// 0xb05100
	bool HasAuthority();// 0xb050d0
	World* GetWorld();// 0xb050a0
	float GetServerWorldTimeSeconds();// 0xb04fd0
	int GetNetMode();// 0xb04f40
	ESMInstance* GetESMInstanceOwner();// 0xb04f10

--------------------------------
Class: ESMOutput
	ESMNode* Node;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ESMNode_SubStateEntry.ESMNode.Object
	FName SubStateEntryName;//[Offset: 0x38, Size: 0x8]
	ESMOutput Next;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: ESMNode_State.ESMNode.Object
	FName StateName;//[Offset: 0x3c, Size: 0x8]
	FName[] TransitionEvents;//[Offset: 0x48, Size: 0x10]
	float Timeout;//[Offset: 0x58, Size: 0x4]
	ESMOutput[] Outputs;//[Offset: 0x60, Size: 0x10]
	ESMNode_Task*[] Tasks;//[Offset: 0x70, Size: 0x10]
	delegate NotifyEventNameChanged;//[Offset: 0x80, Size: 0x10]
	delegate NotifyTimeOutChanged;//[Offset: 0x90, Size: 0x10]
	delegate NotifyPropertyChanged;//[Offset: 0xa0, Size: 0x10]
	bool bIsActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	float StartTime;//[Offset: 0xc8, Size: 0x4]
	bool bIsPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]
	float PausedTime;//[Offset: 0xd0, Size: 0x4]
	float PausedStartTime;//[Offset: 0xd8, Size: 0x4]
	void ReceiveOnExit();// 0x305c9c0
	void ReceiveOnEnter();// 0x305c9c0
	void OnRep_IsPaused();// 0xb05160
	float GetTimeOut();// 0xb05080
	float GetRemainingTime();// 0xb04fa0
	float GetActiveTime();// 0xb04ef0
	void Client_ReceiveOnExit();// 0x305c9c0
	void Client_ReceiveOnEnter();// 0x305c9c0
	void Client_OnExit();// 0xb04ed0
	void Client_OnEnter();// 0xb04e90

--------------------------------
Class: ESMNode_Task.ESMNode.Object
	void ReceiveOnExit();// 0x305c9c0
	void ReceiveOnEnter();// 0x305c9c0
	FString GetTaskDescription();// 0xb05000
	void Client_ReceiveOnExit();// 0x305c9c0
	void Client_ReceiveOnEnter();// 0x305c9c0
	void Client_OnExit();// 0xb04e90
	void Client_OnEnter();// 0xb04eb0

--------------------------------
Class: ArkLevelSequenceManager.ArkManagerBase.Object
	<FName,class ArkLevelSequenceBase> LevelSequenceRefMap;//[Offset: 0x98, Size: 0x50]
	ArkLevelSequenceBase*[] CurLevelSequenceObjs;//[Offset: 0xe8, Size: 0x10]
	ArkServerSequenceObjBase*[] CurServerSequenceObjs;//[Offset: 0xf8, Size: 0x10]
	<FName,ArkLevelSequenceCacheInfo> CurPreCacheSequenceResMap;//[Offset: 0x108, Size: 0x50]
	void UnLoadPreSequenceRes(out const FName InSeqObjName);// 0x282aea0
	void PreLoadSequenceRes(out const FName InSeqObjName, out const delegate InPreLoadSucEvent);// 0x282aaa0
	ArkLevelSequenceBase* GetTestNearestPlayingSequenceObj();// 0xb72780
	static ArkLevelSequenceManager* Get(const Object* WorldContext);// 0x282a440
	ArkServerSequenceObjBase* GenerateNewServerSequenceObj(out const FName SequenceTypeName);// 0x282a3a0
	ArkLevelSequenceBase* GenerateNewLevelSequenceObj(out const FName SequenceTypeName);// 0x282a300
	void ExitServerSequenceObj(ArkServerSequenceObjBase* InSequenceObj);// 0x282a280
	void DestoryLevelSequenceObj(ArkLevelSequenceBase* InSequenceObj);// 0x282a200

--------------------------------
Class: ArkLevelSequenceBase.Object
	delegate OnLevelSequenceStart;//[Offset: 0x28, Size: 0x10]
	delegate OnLevelSequenceFinished;//[Offset: 0x38, Size: 0x10]
	ArkLevelSequenceConfig[] LevelSequenceConfigs;//[Offset: 0x48, Size: 0x10]
	ArkPlayer* CurInteractArkPlayer;//[Offset: 0x58, Size: 0x8]
	ArkLevelSequenceInitialInfo[] CurInitialSequenceInfos;//[Offset: 0x60, Size: 0x10]
	LevelSequenceActor* CurLevelSequenceActor;//[Offset: 0x70, Size: 0x8]
	FString BindingTagFormatStr;//[Offset: 0x78, Size: 0x10]
	bool bStartSecondsLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	bool bLoopPlayMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1]
	float StartLoopSecondsTime;//[Offset: 0x8c, Size: 0x4]
	int LoopModeTimes;//[Offset: 0x90, Size: 0x4]
	class ArkCinematicPawn* CinematicPawnClass;//[Offset: 0x98, Size: 0x8]
	bool OpenFadeBlackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bOpenPossedNanoArmEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	enum CurConfigModeType;//[Offset: 0xa2, Size: 0x1]
	bool bAutoUnloadPreRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3, Size: 0x1]
	bool bAutoFlushPressedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1]
	FName CurSequenceTypeName;//[Offset: 0xa8, Size: 0x8]
	ArkWeaponPluginMeshCreater*[] CurWeaponPluginMeshCreatorArray;//[Offset: 0xb0, Size: 0x10]
	ArkSoftSkeletalMeshDisplayItemActor*[] CurSkeletalMeshActorArray;//[Offset: 0xc0, Size: 0x10]
	ArkCinematicPawn*[] CinematicPawns;//[Offset: 0xd0, Size: 0x10]
	ArkLevelSequenceConfig CurLevelSequenceConfig;//[Offset: 0xe0, Size: 0x60]
	Transform SpawnTransformInBlueprint();// 0x305c9c0
	void SetInteractedPlayer(ArkPlayer* InPlayer);// 0xd161c0
	void OnHandleSequenceStartInBlueprint();// 0x305c9c0
	void OnHandleSequencePlayComplete();// 0xcac2b0
	void OnHandleSequenceExitInBlueprint();// 0x305c9c0
	void OnHandleSequenceCompleteInBlueprint();// 0x305c9c0
	void OnHandlePlayerMove(float InVal);// 0x282a720
	bool IsInteractedPlayerLocallyControl();// 0x282a6f0
	bool IsDedicatedServer();// 0x282a6c0
	bool IsClient();// 0x282a690
	void InitArkLevelSequence();// 0x188cec0
	bool HasAuthority();// 0x282a660
	World* GetWorld();// 0xb050a0
	FName GetSequenceTypeName();// 0x282a600
	LevelSequencePlayer* GetLevelSequencePlayer();// 0x282a5b0
	ArkLevelSequenceConfig GetLevelSequenceConfigInBlueprint();// 0x305c9c0
	ArkLevelSequenceInitialInfo[] GetInitialSequenceInfosInBlueprint();// 0x305c9c0
	ArkCinematicPawn* GetCinematicPawn(int InBindID);// 0x282a4c0
	ArkLevelSequenceBindingParam[] GetBindParamsInBlueprint();// 0x305c9c0

--------------------------------
Class: ArkLevelSequenceConfig
	LevelSequence* LevelSequence;//[Offset: 0x0, Size: 0x8]
	LevelSequence* SoftLevelSequence;//[Offset: 0x8, Size: 0x28]
	FName HUDName;//[Offset: 0x30, Size: 0x8]
	FName HUDStateName;//[Offset: 0x38, Size: 0x8]
	FName[] OnlyEnableInputNames;//[Offset: 0x40, Size: 0x10]
	float PreCanMoveableTime;//[Offset: 0x50, Size: 0x4]
	bool bCinematicMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool bHasBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	int CinematicParams;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: ArkLevelSequenceInitialInfo
	int BindId;//[Offset: 0x0, Size: 0x4]
	FString AvatarString;//[Offset: 0x8, Size: 0x10]
	bool bOwnerNanoPossed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	ArkWeaponPluginsInfo WeaponPluginsInfo;//[Offset: 0x20, Size: 0x70]

--------------------------------
Class: ArkCinematicPawn.ArkAvatarPawn.Character.Pawn.Actor.Object
	MaterialInstance* BornWith_Mat;//[Offset: 0x668, Size: 0x8]
	bool bLightingChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x670, Size: 0x1]
	bool bLightingChannel1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x671, Size: 0x1]
	bool bLightingChannel2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x672, Size: 0x1]
	SceneComponent* SceneRoot;//[Offset: 0x678, Size: 0x8]
	class AnimInstance* ArkModelAnimClass;//[Offset: 0x680, Size: 0x8]
	AnimationAsset* AnimToPlay;//[Offset: 0x688, Size: 0x8]
	bool ShowXFaceByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x690, Size: 0x1]
	void SetGunsMaterial(MaterialInstance* invisiableMat);// 0x26d30f0
	void SetGunDissolvePercent(float fPercent, FName MaterialParamterName);// 0x26d3020
	void PlayAnimtoPlay();// 0x267d6d0
	void PlayAnimInEditor(AnimationAsset* Anim);// 0x267d650
	void PlayAnimation(AnimationAsset* Anim);// 0x26d2a90
	void OnSuitLoadOver();// 0x305c9c0
	void OnSuitChangeOver();// 0x26d29d0
	void OnPostMasterMeshSetup(int NewSexualID);// 0x305c9c0
	void OnPostChangeGenderSetup(int OldSexualID, int NewSexualID);// 0x305c9c0
	void OnBeforeMasterMeshSetup(int NewSexualID);// 0x305c9c0
	void OnBeforeChangeGenderSetup(int OldSexualID, int NewSexualID);// 0x305c9c0
	FString GetPlayerIDString();// 0x26d2030
	void CopyPlayerClothes(ArkPlayer* Player);// 0x26d1ad0
	void BpInitAvatar();// 0x305c9c0

--------------------------------
Class: ArkSoftSkeletalMeshDisplayItemActor.ArkAsyncLoadDisplayItemActor.ArkDisplayItemActor.Actor.Object
	ArkSoftSkeletalMeshComponent* MeshComp;//[Offset: 0x378, Size: 0x8]
	ArkSoftSkeletalMeshComponent* GetMeshComp();// 0x2706f40

--------------------------------
Class: ArkAsyncLoadDisplayItemActor.ArkDisplayItemActor.Actor.Object
	byte DisplayItemCollisionType;//[Offset: 0x368, Size: 0x1]
	void OnAnySoftMaterialAsyncLoaded();// 0x2707270
	void OnAnyAsyncLoaded();// 0x2707250

--------------------------------
Class: ArkLevelSequenceBindingParam
	FString BindingName;//[Offset: 0x0, Size: 0x10]
	Actor* BindingActor;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ArkServerSequenceObjBase.ArkLevelSequenceBase.Object
	ArkSequenceStatusInfo CurSequenceStatusInfo;//[Offset: 0x1b8, Size: 0x10]
	float LifeTime;//[Offset: 0x1d0, Size: 0x4]
	bool bCinematicMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 0x1]
	int CinematicParams;//[Offset: 0x1d8, Size: 0x4]
	void OnServerHandleSequenceStartInBlueprint();// 0x305c9c0
	void OnServerHandleSequenceCompleteInBlueprint();// 0x305c9c0
	void OnRep_CurSequenceStatusInfo();// 0x2942ae0
	float GetSequenceServerLifeTime();// 0x29424d0

--------------------------------
Class: ArkSequenceStatusInfo
	enum StatusType;//[Offset: 0x0, Size: 0x1]
	ArkPlayer* InteractedCharacter;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ArkLevelSequenceCacheInfo
	LevelSequence*[] LevelSequenceArray;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ArkPromptManager.ArkManagerBase.Object
	int MaxAutoFinishTime;//[Offset: 0xa8, Size: 0x4]
	delegate OnPromptStartEvent;//[Offset: 0xb0, Size: 0x10]
	delegate OnPromptFinishEvent;//[Offset: 0xc0, Size: 0x10]
	ArkPromptBaseEvent*[] PromptArray;//[Offset: 0xd0, Size: 0x10]
	<int,class ArkPromptBaseEvent> RegisteredPromptMap;//[Offset: 0xe0, Size: 0x50]
	DataTable* PromptConfigTable;//[Offset: 0x138, Size: 0x8]
	void ShowPrompt(ArkPromptBaseEvent* PromptObj, bool ForPreview);// 0x290ad20
	void ShowCurrentPrompt(bool bShow);// 0x290ac90
	void OpenPromptByRowName(FName PromptRowName);// 0x290aab0
	void OnlyFinishPromptEvent(int InPromptID);// 0x290aa30
	void OnInitPrompts();// 0x305c9c0
	bool IsShowingPrompt();// 0x290a4c0
	bool GetPromptFinishStateByPromptID(int InPromptID);// 0x290a430
	ArkPromptBaseEvent* GetPromptByID(int PromptID);// 0x290a3a0
	static ArkPromptManager* Get(const Object* WorldContext);// 0x290a0f0
	void ForceCompleteShowingPrompt();// 0x290a0d0
	void FinishPromptEvent(ArkPromptBaseEvent* PromptObj, bool bIsSpecialFinish);// 0x290a000
	void CompletePromptByName(FName PromptRowName, bool bCheck);// 0x2909eb0
	bool CheckCanOpenPromptByRowName(FName PromptRowName);// 0x2909e20

--------------------------------
Class: ArkNotificationManager.ArkManagerBase.Object
	DataTable* NotificationConfigTable;//[Offset: 0x90, Size: 0x8]
	static ArkNotificationManager* Get(const Object* WorldContext);// 0x2856e50

--------------------------------
Class: ArkSettlementManager.ArkManagerBase.Object
	AkAudioEvent* AkEventOnSettlementMenusOpen;//[Offset: 0xa8, Size: 0x8]
	AkAudioEvent* AkEventOnSettlementMenusClose;//[Offset: 0xb0, Size: 0x8]
	bool bPlayGameFinishSequence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	float NormalDelayShowRankTime;//[Offset: 0xbc, Size: 0x4]
	float FirstRankDelayShowRankTime;//[Offset: 0xc0, Size: 0x4]
	static ArkSettlementManager* Get(const Object* WorldContext);// 0x294eaf0

--------------------------------
Class: ArkShuttleManager.ArkManagerBase.Object
	bool AutoSpawnShuttle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 0x1]
	bool AutoStartShuttleRound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa, Size: 0x1]
	float EnterRadiusTipLastRange;//[Offset: 0xac, Size: 0x4]
	float EnterRadiusTipShowCD;//[Offset: 0xb0, Size: 0x4]
	float EnterRadiusLastTipShowCD;//[Offset: 0xb4, Size: 0x4]
	bool bIgnoreDyingPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	ArkShuttleRoundInfo[] ShuttleRoundInfos;//[Offset: 0xd0, Size: 0x10]
	int CurrentShuttleRound;//[Offset: 0xe0, Size: 0x4]
	void StartShuttleRound(int Round);// 0x295b6d0
	bool ShouldCheckInRadius();// 0x295b6a0
	void OpenEnterRadiusTip(bool bIsLast);// 0x295b120
	void OnRep_ShuttleRoundInfos();// 0x295af30
	void OnRep_CurrentShuttleRound();// 0x295aef0
	bool IsSingleShuttleMode();// 0x295ac00
	bool IsSinglePlayerMdoe();// 0x295abd0
	bool IsShuttleInteraction(interface class Interaction);// 0x295ab20
	bool IsMultiShuttlesMode();// 0x295aa60
	void IsLocalControlledShuttle(int ShuttleID, out enum Branches);// 0x295a990
	bool IsLastShuttle(int ShuttleID);// 0x295a900
	bool IsInRadiusByID(Vector Location, int ShuttleID);// 0x295a820
	bool IsInRadius(Vector Location, ArkShuttleBase* Shuttle);// 0x295a740
	bool IsFirstShuttle(int ShuttleID);// 0x295a6b0
	bool IsCharacterStateValid(enum CharacterState);// 0x295a620
	bool IsAnyPlayerInRadius(int TeamId, int ShuttleID, bool bOnlyAlive);// 0x295a520
	int GetWinnerTeamID(int ShuttleID);// 0x295a490
	ArkShuttleSpawner* GetSpawnerByID(int ShuttleID);// 0x295a3c0
	ArkShuttleBase*[] GetShuttles();// 0x295a310
	FText GetShuttleNameByID(int ShuttleID);// 0x295a190
	int GetShuttleIndexByID(int ShuttleID);// 0x295a100
	int GetShuttleCount();// 0x29596e0
	ArkShuttleBase* GetShuttleByID(int ShuttleID);// 0x295a000
	ArkPlayer*[] GetPlayersInRadiusByID(int ShuttleID, bool bOnlyAlive);// 0x2959ef0
	ArkPlayer*[] GetPlayersInRadius(ArkShuttleBase* Shuttle, bool bOnlyAlive);// 0x2959de0
	ArkPlayer*[] GetPlayersActivated(ArkShuttleBase* Shuttle);// 0x2959d00
	int GetPlayerActiveShuttleID(int TeamId);// 0x2959c70
	int GetLastShuttleID();// 0x2959c10
	ArkShuttleLandingPort* GetLandingPortByID(int ShuttleID);// 0x2959b80
	int GetFirstShuttleID();// 0x2959a50
	ArkShuttleStateInfo GetCurrentStateInfo(int ShuttleID);// 0x29599b0
	int GetCurrentShuttleRound();// 0x2959980
	ArkShuttleBase* GetCurrentShuttle();// 0x2959950
	ArkShuttleRoundInfo GetCurrentRoundInfo_BP();// 0x29598a0
	Vector GetControllerLocationByID(int ShuttleID);// 0x29597c0
	int GetActiveShuttleCount();// 0x2959790
	static ArkShuttleManager* Get(const Object* WorldContext);// 0x2959710
	int GeShuttleCountInConfig();// 0x29596e0
	void CloseEnterRadiusTip();// 0x29596c0

--------------------------------
Class: ArkShuttleRoundInfo
	float CountDown;//[Offset: 0x0, Size: 0x4]
	int[] ShuttleIDs;//[Offset: 0x8, Size: 0x10]
	float StartTime;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ArkShuttleStateInfo
	enum CurrentState;//[Offset: 0x0, Size: 0x1]
	float Duration;//[Offset: 0x4, Size: 0x4]
	enum NextState;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: ArkParticleSpawnSignificanceManager.ArkManagerBase.Object
	float DistanceParam;//[Offset: 0x94, Size: 0x4]
	float FrameParam;//[Offset: 0x98, Size: 0x4]
	float[] SettingParams;//[Offset: 0xa0, Size: 0x10]
	ArkParticleOptimiseConfig[] OptimiseConfigs;//[Offset: 0xb0, Size: 0x10]
	<ArkSoftParticleSystemComponentWithPool*,bool> SpawnedParticles;//[Offset: 0xc0, Size: 0x50]
	<ArkSoftParticleSystemComponentWithPool*,bool> Particles_With_DynamicSpawnRate;//[Offset: 0x110, Size: 0x50]
	CurveFloat* DynamicSpawnRateCurve;//[Offset: 0x160, Size: 0x8]
	ParticleSystem*[] TestEmitterTemplates;//[Offset: 0x168, Size: 0x10]
	Vector TestRandomRadius;//[Offset: 0x178, Size: 0xc]
	bool bEnableDynamicSpawnRateAjust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 0x1]
	<int,float> EngineEmitterSpawnRateScales;//[Offset: 0x188, Size: 0x50]
	float LimitTranslucencyTime;//[Offset: 0x1d8, Size: 0x4]
	float MulParticleGlobalSpawnRateScale;//[Offset: 0x1dc, Size: 0x4]
	float RestSpawnRateScaleDelayTime;//[Offset: 0x1e0, Size: 0x4]
	static ArkParticleSpawnSignificanceManager* Get(const Object* WorldContext);// 0x2879450

--------------------------------
Class: ArkParticleOptimiseConfig
	int MaxNum;//[Offset: 0x0, Size: 0x4]
	int MaxSpawnDistance;//[Offset: 0x4, Size: 0x4]
	enum GraphicLevel;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: ArkPveModifierManager.ArkManagerBase.Object
	float[] ExchangeAllInPercent;//[Offset: 0xe0, Size: 0x10]
	int[] ExchangeAllInWeight;//[Offset: 0xf0, Size: 0x10]
	float ModTypeWeight;//[Offset: 0x100, Size: 0x4]
	int ExchangeAllInItemID;//[Offset: 0x104, Size: 0x4]
	int ModifierID_ElementRevelry;//[Offset: 0x108, Size: 0x4]
	int ModifierID_MoneyManagement;//[Offset: 0x10c, Size: 0x4]
	int ModifierID_LittleSuperman;//[Offset: 0x110, Size: 0x4]
	int ModifierID_SurgicalStrike;//[Offset: 0x114, Size: 0x4]
	bool bIsEnableDisplayModifierLis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	bool bWantToEnableDisplayModifierLis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1]
	Actor* OwnerPrivate;//[Offset: 0x120, Size: 0x8]
	float ElementEffectPer;//[Offset: 0x128, Size: 0x4]
	ArkPveModifierBase*[] AllActivedModifiers;//[Offset: 0x148, Size: 0x10]
	ArkPveModifierBase*[] Old_AllActivedModifiers;//[Offset: 0x158, Size: 0x10]
	<int,class ArkPveModifierBase> RegisterModifierMap;//[Offset: 0x228, Size: 0x50]
	void PickInModifierPool(int PoolID, bool bIsRandomPool);// 0x2913c10
	void OnSubmersibleBubbleStateChanged(int Bubble, enum NewState);// 0x2913b50
	void OnServivingStoreClosed(bool ServicingClosed);// 0x2913ac0
	void OnRep_AllActivedModifiers();// 0x2913a80
	void OnPostPlayerRegisted(ArkPlayer* Player);// 0x2913a00
	void OnGameFlowChange(enum LastMode, enum NewMode, float StartTime);// 0x2913840
	void OnClientShuttleStart();// 0x2913820
	ArkPveModifierTableRow GetModifierConfigByID(int ModifierID);// 0x2913610
	int[] GetAllActivedModifierIDs();// 0x29135d0
	static ArkPveModifierManager* Get(const Object* WorldContext);// 0x2913550
	bool CheckModifierActivedOnClient(int InModifierID);// 0x29134c0
	bool CheckModifierActived(int InModifierID);// 0x2913430
	void ActiveModifierByID(int ModifierID, bool bNotCheckDateTime);// 0x2913370

--------------------------------
Class: ArkPveModifierBase.Object
	World* GetWorld();// 0xb050a0
	FText GetModifierName();// 0x29136e0
	int GetModifierID();// 0x29136b0
	void BPClient_OnStop();// 0x305c9c0
	void BPClient_OnActive();// 0x305c9c0
	void BP_OnTick();// 0x305c9c0
	void BP_OnStop();// 0x305c9c0
	void BP_OnActive();// 0x305c9c0

--------------------------------
Class: ArkPveModifierTableRow.TableRowBase
	int ModifierID;//[Offset: 0x8, Size: 0x4]
	FText ModifierName;//[Offset: 0x10, Size: 0x18]
	bool bIsHideInUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bIsTimeTriggered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	FString ValidStartServerTime;//[Offset: 0x30, Size: 0x10]
	FString ValidEndServerTime;//[Offset: 0x40, Size: 0x10]
	ModifierDescInfo[] ModifierDescInfos;//[Offset: 0x50, Size: 0x10]
	int[] SubModifierIDs;//[Offset: 0x60, Size: 0x10]
	enum NativeModifierType;//[Offset: 0x70, Size: 0x4]
	bool bSyncEffectAsPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	bool bFriendNpcEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 0x1]
	bool bUseBlackList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 0x1]
	int[] BuffID;//[Offset: 0x78, Size: 0x10]
	class ArkGameBuff[] BuffClass;//[Offset: 0x88, Size: 0x10]
	class ArkPveModifierBase[] BPModifierClass;//[Offset: 0x98, Size: 0x10]
	Texture2D* icon;//[Offset: 0xa8, Size: 0x28]
	float SubmersibleRunScoreModifier;//[Offset: 0xd0, Size: 0x4]
	bool bExistAllState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	enum[] EffectStateType;//[Offset: 0xd8, Size: 0x10]
	int DifficultyScore;//[Offset: 0xe8, Size: 0x4]

--------------------------------
Class: ModifierDescInfo
	FText ModifierDesc;//[Offset: 0x0, Size: 0x18]
	FText ModifierShortDesc;//[Offset: 0x18, Size: 0x18]
	bool IsPositive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: ArkPoolManager.ArkManagerBase.Object
	<class Object,ArkPool> AllPools;//[Offset: 0x90, Size: 0x50]
	int ExpectInPVEDefault;//[Offset: 0xe0, Size: 0x4]
	int ExpectInPVPDefault;//[Offset: 0xe4, Size: 0x4]
	ArkActorPreAllocationInfo[] PreAllocationInfos;//[Offset: 0xe8, Size: 0x10]
	Object* PickFromPool(class Object PoolClass);// 0x28e7910
	Actor* PickActorFromPool(class Object PoolClass, out const Transform ActorTransform);// 0x28e77f0
	void OnGameModePostWorldInitFinish();// 0x28e74d0
	static ArkPoolManager* Get(const Object* WorldContext);// 0x28e7380

--------------------------------
Class: ArkPool
	Object*[] FreePool;//[Offset: 0x0, Size: 0x10]
	ArkPendingPickInfo[] PendingPool;//[Offset: 0x10, Size: 0x10]
	Object*[] BusyPool;//[Offset: 0x20, Size: 0x10]
	class Object* PoolClass;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: ArkPendingPickInfo
	Object* PendingPickObject;//[Offset: 0x0, Size: 0x8]
	int RemainingTick;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ArkActorPreAllocationInfo
	class Object[] Classes;//[Offset: 0x0, Size: 0x10]
	int ExpectInPVE;//[Offset: 0x10, Size: 0x4]
	int ExpectInPVP;//[Offset: 0x14, Size: 0x4]
	<FName,int> LimitInSpecificLevels;//[Offset: 0x18, Size: 0x50]
	bool bSpawnOnlyInClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: ArkPreloadManagerInGame.ArkPreloadManagerBase.ArkManagerBase.Object
	DataTable* PreAsyncLoadAssetTable;//[Offset: 0xd0, Size: 0x8]
	<FName,AsyncLoadAssets> CachedPreAsyncLoadAssetsMap;//[Offset: 0xd8, Size: 0x50]
	static void RequestPreloadAssetsFor(const Object* WorldContext, out const FName KeyName);// 0x28fec90

--------------------------------
Class: AsyncLoadAssets
	Object*[] CachedObjectConfigs;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ArkFacilityManager.ArkManagerBase.Object
	bool bOpenCheckValidPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	int LimitMaxFacilityCount;//[Offset: 0xa4, Size: 0x4]
	DataTable* FacilityMetaTable;//[Offset: 0xa8, Size: 0x8]
	DataTable* FacilityAttackDamageAdjustTable;//[Offset: 0xb0, Size: 0x8]
	DataTable* FacilityModTable;//[Offset: 0xb8, Size: 0x8]
	bool bIsPlayerCanAttackBomb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool bIsBombCanExplodeBomb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	class ArkFacilityPowerTap* PowerTapClass;//[Offset: 0x170, Size: 0x8]
	bool StartRepairFacility(ArkPlayer* OwnerPlayer, ArkFacilityBase* Facility);// 0x272b010
	bool PlaceFacilityStart(ArkPlayer* OwnerPlayer, ArkFacilityBase* Facility, bool IsFirstPlace);// 0x272aed0
	bool PlaceFacility(ArkPlayer* OwnerPlayer, ArkFacilityBase* Facility);// 0x272ae10
	static ArkFacilityManager* Get(const Object* WorldContext);// 0x272a560

--------------------------------
Class: ArkFacilityPowerTap.ArkFacilityBase.ArkCharacterBase.Character.Pawn.Actor.Object
	FString CacheTag;//[Offset: 0x1dc0, Size: 0x10]
	ArkPowerTapData PowerTapData;//[Offset: 0x1dd0, Size: 0x78]
	enum PowerTapStatus;//[Offset: 0x1e48, Size: 0x1]
	int SavedResourceValue;//[Offset: 0x1e4c, Size: 0x4]
	float StartupingValue;//[Offset: 0x1e50, Size: 0x4]
	void UpdateStartupingValue_BP(float Value);// 0x305c9c0
	void UpdateSavedResourceValue_BP(int Value);// 0x305c9c0
	void UpdatePowerTapStatus_BP(enum NewStatus, enum OldStatus);// 0x305c9c0
	void OnRep_StartupingValue();// 0x272ad20
	void OnRep_SavedResourceValue();// 0x272acc0
	void OnRep_PowerTapStatus(enum OldStatus);// 0x272ac40
	bool IsActivated();// 0x272aa40

--------------------------------
Class: ArkPowerTapData
	int PowerTapID;//[Offset: 0x0, Size: 0x4]
	float ActivateRadius;//[Offset: 0x4, Size: 0x4]
	float ActivateSpeedPerSecondPerPlayer;//[Offset: 0x8, Size: 0x4]
	float ActivateSavingTime;//[Offset: 0xc, Size: 0x4]
	int GenerateItemId;//[Offset: 0x10, Size: 0x4]
	class ArkGameBuff[] Buffs;//[Offset: 0x18, Size: 0x10]
	<int,ArkPowerTapWaveResources> Resources;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: ArkPowerTapWaveResources
	int AddResources;//[Offset: 0x0, Size: 0x4]
	int MaxLimitResources;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ArkItemShopManager.ArkManagerBase.Object
	DataTable* DefaultItemShopTable;//[Offset: 0x90, Size: 0x8]
	delegate ClientOnExtractBuy;//[Offset: 0x228, Size: 0x10]
	delegate ClientOnExtract;//[Offset: 0x238, Size: 0x10]
	DataTable* DefaultExtractionItemShopTable;//[Offset: 0x248, Size: 0x8]
	DataTable* DefaultExtractionDropLibraryTable;//[Offset: 0x260, Size: 0x8]
	DataTable* DefaultItemEncapsulationInfoTable;//[Offset: 0x278, Size: 0x8]
	int ShopItemLimitMaxBuyFacilityCount;//[Offset: 0x290, Size: 0x4]
	int ChipMaxBuyNum;//[Offset: 0x294, Size: 0x4]
	int GunUpgradeMaxBuyNum;//[Offset: 0x298, Size: 0x4]
	bool IsDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1]
	bool GetItemShopItemInfo(out const ArkItemShopInfo[] ShopItems, enum Type, int ItemId, out FText Name, out FText Label, out int CostItem, out int Count, out int MinNum, out int MaxNum, out SoftObjectPath iconPath);// 0x2818910
	int GetExtractionNumByPlayer(ArkCharacterBase* Player);// 0x28187c0
	int GetCacheWeaponItemID(ArkPlayer* PlayerRef);// 0x28185a0
	static ArkItemShopManager* Get(const Object* WorldContext);// 0x2818520
	void GenerateItemDataByItemID(out const int ItemId, out FText Name, out FText Desc, out int Level, out int MaxBuyNum, out Texture2D* icon);// 0x2818250
	void GenerateItemDataByExtractShopItem(out const ArkShopItemLogic ShopItem, out FText Name, out FText FacilityDesc, out int Level, out int MaxBuyNum, out Object* icon);// 0x2817f10
	<int,ArkShopItemLogic> ExtractionItem(int MaxShopItemNum, ArkPlayer* PlayerRef);// 0x2817dc0
	bool BuyExtraction(ArkPlayer* Player, out const ArkShopItemLogic InBuyItem);// 0x2817c70
	bool Buy(ArkPlayer* Player, out const ArkItemShopInfo[] ShopItems, enum Type, int ItemId);// 0x2817aa0

--------------------------------
Class: ArkItemShopInfo
	enum ShopItemType;//[Offset: 0x0, Size: 0x1]
	int ItemId;//[Offset: 0x4, Size: 0x4]
	int MaxNum;//[Offset: 0x8, Size: 0x4]
	int Num;//[Offset: 0xc, Size: 0x4]
	int CostItemID;//[Offset: 0x10, Size: 0x4]
	int Cost;//[Offset: 0x14, Size: 0x4]
	FText ShopItemLabel;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: ArkShopItemLogic
	ArkShopItemInfo Config;//[Offset: 0x0, Size: 0x20]
	ArkItemEncapsulaLogic ThisOwner;//[Offset: 0x20, Size: 0x40]

--------------------------------
Class: ArkShopItemInfo.TableRowBase
	int ID;//[Offset: 0x8, Size: 0x4]
	enum ShopItemType;//[Offset: 0xc, Size: 0x1]
	int ItemId;//[Offset: 0x10, Size: 0x4]
	int CostItemID;//[Offset: 0x14, Size: 0x4]
	int Cost;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ArkItemEncapsulaLogic
	ArkItemEncapsulationInfo Config;//[Offset: 0x0, Size: 0x18]
	ArkExtractionItemShopInfo ThisOwnerExtraction;//[Offset: 0x18, Size: 0x28]

--------------------------------
Class: ArkItemEncapsulationInfo.TableRowBase
	int ID;//[Offset: 0x8, Size: 0x4]
	int ItemInfoID;//[Offset: 0xc, Size: 0x4]
	int ItemNum;//[Offset: 0x10, Size: 0x4]
	int Weight;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ArkExtractionItemShopInfo.TableRowBase
	int ItemPositionID;//[Offset: 0x8, Size: 0x4]
	int WaveID;//[Offset: 0xc, Size: 0x4]
	int ItemEncapsulationID;//[Offset: 0x10, Size: 0x4]
	FString LevelName;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ArkHeroAnimationEmoteManager.ArkManagerBase.Object
	enum[] PlayWhiteActionState;//[Offset: 0x90, Size: 0x10]
	enum[] BlockWeaponTacticalActiveAction;//[Offset: 0xa0, Size: 0x10]
	enum[] BlockWeaponTacticalActiveAnimAction;//[Offset: 0xb0, Size: 0x10]
	enum[] EmoteIgnorePlayActionState;//[Offset: 0xc0, Size: 0x10]
	FName EmoteWidgetAttackSocketName;//[Offset: 0xd0, Size: 0x8]
	float EmoteDisappearSquareDistance;//[Offset: 0xd8, Size: 0x4]
	Vector2D EmoteBillBoardSize;//[Offset: 0xdc, Size: 0x8]
	Vector EmoteOffset;//[Offset: 0xe4, Size: 0xc]
	Material* WorldDynamicEmoteMaterial;//[Offset: 0xf0, Size: 0x8]
	Material* UMGDynamicEmoteMaterial;//[Offset: 0xf8, Size: 0x8]
	SoftObjectPath HeroAnimationEmoteTable;//[Offset: 0x100, Size: 0x18]
	SoftObjectPath HeroAnimationEmoteDefaultSlotConfigTable;//[Offset: 0x118, Size: 0x18]
	DataTable* AnimationEmoteDataTable;//[Offset: 0x130, Size: 0x8]
	void PlayBubblePoseById(ArkPlayer* InArkPlayer, int ConfigId);// 0x27daaa0
	int GetExclusiveHeroIdByItemId(int ItemId);// 0x27da0b0
	static ArkHeroAnimationEmoteManager* Get(const Object* WorldContext);// 0x27d9df0
	bool CanWeaponTacticalActiveAnimPlay(ArkPlayer* InArkPlayer, enum AppendBlockState);// 0x27d9d30
	bool CanWeaponTacticalActiveAction(ArkPlayer* InArkPlayer, enum AppendBlockState);// 0x27d9c70
	bool CanPlayEmoteInGame(ArkPlayer* InArkPlayer);// 0x27d9be0
	bool CanPlayAnimInGame(ArkPlayer* InArkPlayer);// 0x27d9b50

--------------------------------
Class: ArkNotebookManager.ArkManagerBase.Object
	enum CurrentShowingType;//[Offset: 0x90, Size: 0x1]
	DataTable* NanoConfigTable;//[Offset: 0xa0, Size: 0x8]
	DataTable* PerkConfigTable;//[Offset: 0xa8, Size: 0x8]
	DataTable* ModConfigTable;//[Offset: 0xb0, Size: 0x8]
	DataTable* PromptConfigTable;//[Offset: 0xb8, Size: 0x8]
	void StopShowingPIP();// 0x285ba40
	void ShowNotebookPipTip(enum Type, int NotebookID);// 0x285b710
	bool IsShowingNotebookPIP();// 0x28582d0
	ArkNotebookPromptConfig GetPromptConfigByNotebookID(int NotebookID);// 0x28578b0
	ArkNotebookPerkConfig GetPerkConfigByPerkID(int PerkID);// 0x2857810
	ArkNotebookPerkConfig GetPerkConfigByNotebookID(int NotebookID);// 0x2857770
	ArkNotebookNanoConfig GetNanoConfigByTypeName(FName TypeName);// 0x28575c0
	ArkNotebookNanoConfig GetNanoConfigByNotebookID(int NotebookID);// 0x2857520
	ArkNotebookPerkConfig GetModConfigByNotebookID(int NotebookID);// 0x28573e0
	ArkNotebookPerkConfig GetModConfigByModID(int ModID);// 0x2857340
	static ArkNotebookManager* Get(const Object* WorldContext);// 0x2856dd0

--------------------------------
Class: ArkNotebookPromptConfig.TableRowBase
	int NotebookID;//[Offset: 0x8, Size: 0x4]
	int Priority;//[Offset: 0xc, Size: 0x4]
	int PromptID;//[Offset: 0x10, Size: 0x4]
	FText DisplayName;//[Offset: 0x18, Size: 0x18]
	FText Desc;//[Offset: 0x30, Size: 0x18]
	FText Category;//[Offset: 0x48, Size: 0x18]
	MediaSource* PromptVideo;//[Offset: 0x60, Size: 0x28]
	Texture2D* PromptVideoCover;//[Offset: 0x88, Size: 0x28]

--------------------------------
Class: ArkNotebookPerkConfig.TableRowBase
	int NotebookID;//[Offset: 0x8, Size: 0x4]
	int Priority;//[Offset: 0xc, Size: 0x4]
	int ItemId;//[Offset: 0x10, Size: 0x4]
	int[] ItemIDs;//[Offset: 0x18, Size: 0x10]
	FText DisplayName;//[Offset: 0x28, Size: 0x18]
	FText Category;//[Offset: 0x40, Size: 0x18]
	FString VRTrainingMap;//[Offset: 0x58, Size: 0x10]
	MediaSource* PerkVideo;//[Offset: 0x68, Size: 0x28]
	ArkNotebookPIPConfig PipConfig;//[Offset: 0x90, Size: 0x68]

--------------------------------
Class: ArkNotebookPIPConfig
	FText Title;//[Offset: 0x0, Size: 0x18]
	FText Desc;//[Offset: 0x18, Size: 0x18]
	int PIPTextureIndex;//[Offset: 0x30, Size: 0x4]
	FName DialogEventName;//[Offset: 0x34, Size: 0x8]
	Texture2D* SoftTexture2D;//[Offset: 0x40, Size: 0x28]

--------------------------------
Class: ArkNotebookNanoConfig.TableRowBase
	int NotebookID;//[Offset: 0x8, Size: 0x4]
	int Priority;//[Offset: 0xc, Size: 0x4]
	FName NanoTypeName;//[Offset: 0x10, Size: 0x8]
	FName[] NanoTypeNames;//[Offset: 0x18, Size: 0x10]
	bool bDisplayWeakness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bIsBossType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	class ArkNanoPreviewActor* NanoPreviewActor;//[Offset: 0x30, Size: 0x28]
	FText DisplayName;//[Offset: 0x58, Size: 0x18]
	FText Category;//[Offset: 0x70, Size: 0x18]
	FText AttackType;//[Offset: 0x88, Size: 0x18]
	FText Map;//[Offset: 0xa0, Size: 0x18]
	FText Desc;//[Offset: 0xb8, Size: 0x18]
	FText Ability;//[Offset: 0xd0, Size: 0x18]
	FText[] AbilityList;//[Offset: 0xe8, Size: 0x10]
	Texture2D* SoftWeakPointTexture2D;//[Offset: 0xf8, Size: 0x28]
	int[] LootItems;//[Offset: 0x120, Size: 0x10]
	ArkNotebookPIPConfig PipConfig;//[Offset: 0x130, Size: 0x68]

--------------------------------
Class: ArkNanoPreviewActor.ArkAsyncLoadDisplayItemActor.ArkDisplayItemActor.Actor.Object
	FName MaterialKeyName;//[Offset: 0x378, Size: 0x8]
	int WeaknessMaterialValue;//[Offset: 0x380, Size: 0x4]
	ArkSoftSkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x388, Size: 0x8]
	ArkSoftStaticMeshComponent* BaseStaticMeshComponent;//[Offset: 0x390, Size: 0x8]
	ArrowComponent* ForwardDirComponent;//[Offset: 0x398, Size: 0x8]
	SceneComponent* LightRootComponent;//[Offset: 0x3a0, Size: 0x8]

--------------------------------
Class: ArkMimirNetManager.ArkManagerBase.Object
	FName PipMenuName;//[Offset: 0x90, Size: 0x8]
	DataTable* InteractiveObjTable;//[Offset: 0x98, Size: 0x8]
	DataTable* EventUnlockTable;//[Offset: 0xa0, Size: 0x8]
	float SpecialObjBroadcastRange;//[Offset: 0xa8, Size: 0x4]
	void TriggerEvent_SpecialObjInteracted(ArkPlayer* OwnerPlayer, out const FName SpecialObjTagID);// 0x2842310
	void StopVOEvent(FName VoTag);// 0x2842290
	void PromptVOEvent(FName DialogEventName);// 0x2841cb0
	void MarkMimirNetMainNeedReFocus();// 0x28417e0
	bool IsMimirNetMainExistFocusThemeComp();// 0x2841710
	float GetSpecialObjBroadcastRange();// 0x2841650
	FString GetEventUnlockKey(enum EventType, FString EventParam, int LimitLevelId);// 0x2841410
	static ArkMimirNetManager* Get(const Object* WorldContext);// 0x2841390

--------------------------------
Class: ArkTeamDistinctionObjectManager.ArkManagerBase.Object
	<enum,TeamDistinctionTypeData> TeamDistinctionObjectMap;//[Offset: 0x90, Size: 0x50]
	Actor* LastViewTarget;//[Offset: 0xe0, Size: 0x8]
	FName ParticleScalarParameterName;//[Offset: 0xec, Size: 0x8]
	FName DecalScalarParameterName;//[Offset: 0xf4, Size: 0x8]
	void UnregisterTeamObject(Object* TeamObj, enum ObjType);// 0x298adc0
	void RegisterTeamObject(Object* TeamObj, enum ObjType, int TeamIndex);// 0x298ab80
	void OnViewTargetTeamInfoChanged();// 0x298aa80
	void OnSoftObjectFinishAsyncLoad(Object* SoftObj);// 0x298a270
	void OnLocalViewTargetChanged(Actor* NewViewTarget);// 0x298a130
	void OnComponentBeginDestroyed(SceneComponent* inComp);// 0x298a030
	static ArkTeamDistinctionObjectManager* Get(const Object* WorldContext);// 0x2989c00

--------------------------------
Class: TeamDistinctionTypeData
	<Object*,TeamDistinctionData> ObjectMap;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: TeamDistinctionData
	int TeamIdx;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: ArkStatisticalEventsManager.ArkManagerBase.Object
	float StartTime;//[Offset: 0x90, Size: 0x4]
	int CurTime;//[Offset: 0x94, Size: 0x4]
	StatisticalInfo[] StatisticalInfoList;//[Offset: 0x98, Size: 0x10]
	StatisticalTeamScoreInfo[] StatisticalScoreInfoList;//[Offset: 0xa8, Size: 0x10]
	static ArkStatisticalEventsManager* Get(const Object* WorldContext);// 0x2976770

--------------------------------
Class: ArkDebugManager.ArkManagerBase.Object
	int ClassDisplayLimit;//[Offset: 0x90, Size: 0x4]
	class Object[] ClassDisplayBlacklist;//[Offset: 0x98, Size: 0x10]
	class Object[] ClassDisplayWhitelist;//[Offset: 0xa8, Size: 0x10]
	static ArkDebugManager* Get(const Object* WorldContext);// 0x26fb320

--------------------------------
Class: ArkSystemActivationManager.ArkManagerBase.Object
	SoftObjectPath SystemActivationConfigTablePath;//[Offset: 0x90, Size: 0x18]
	DataTable* LoadedSystemActivationConfigTable;//[Offset: 0xa8, Size: 0x8]
	FString[] GetInactivationWidgetPaths(const FName InMenuName, const int InHavenState);// 0x2984d00
	Widget*[] GetCurrentInactivationWidget(const FName InMenuName);// 0x2984c20
	int GetCurrentHavenState();// 0x2984bf0
	static ArkSystemActivationManager* Get(const Object* WorldContext);// 0x2984ae0

--------------------------------
Class: ArkPipTipManager.ArkManagerBase.Object
	int MaxDisplayCounts;//[Offset: 0x90, Size: 0x4]
	float DisplayCountsRecordDuration;//[Offset: 0x94, Size: 0x4]
	enum[] ShowingPriority;//[Offset: 0xc0, Size: 0x10]
	PipTipExclusionRule[] ExclusionRules;//[Offset: 0xd0, Size: 0x10]
	enum[] AutoReplayTypes;//[Offset: 0xe0, Size: 0x10]
	void OnShowHUDChanged(bool bShowHUD);// 0x2893cc0
	void OnHUDStateChange(out const ArkHUDState NewHUDState);// 0x2893250
	void OnGameFlowChanged(enum LastMode, enum NewMode, float StartTime);// 0x2893150
	bool IsPipTipShowing(enum InPipType);// 0x2892310
	bool IsAnyPipTipShowing();// 0x2891ce0
	static ArkPipTipManager* Get(const Object* WorldContext);// 0x2890470

--------------------------------
Class: ArkHUDState
	int PriorityValue;//[Offset: 0x0, Size: 0x4]
	FName HUDStateName;//[Offset: 0x4, Size: 0x8]
	FName MenuName;//[Offset: 0xc, Size: 0x8]
	ArkPopupMenuBase* MenuInstanceWeakPtr;//[Offset: 0x14, Size: 0x8]
	<enum,ArkHUDStateProperty*> HUDStateProperties;//[Offset: 0x20, Size: 0x50]
	int VisibleWidgetTypeMask;//[Offset: 0x70, Size: 0x4]
	int NotVisibleWidgetTypeMask;//[Offset: 0x74, Size: 0x4]

--------------------------------
Class: ArkHUDStateProperty.Object
	enum PropertyType;//[Offset: 0x28, Size: 0x1]
	ArkPopupMenuBase* OwnerMenuWeakPtr;//[Offset: 0x2c, Size: 0x8]
	bool bModifiedExternally;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: PipTipExclusionRule
	enum[] ExclusiveTypes;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ArkOnBoardingManager.ArkManagerBase.Object
	delegate OnOnBoardingEventFinish;//[Offset: 0x90, Size: 0x10]
	delegate OnTaskSkip;//[Offset: 0xa0, Size: 0x10]
	delegate OnPostGuideWidget;//[Offset: 0xb0, Size: 0x10]
	delegate OnInputEventPreTrigger;//[Offset: 0xc0, Size: 0x10]
	delegate OnInputEventPostTrigger;//[Offset: 0xd0, Size: 0x10]
	delegate OnEnableAllInput;//[Offset: 0xe0, Size: 0x10]
	delegate OnSetActionTipsGrayedOut;//[Offset: 0xf0, Size: 0x10]
	delegate OnWareHouseClosableChanged;//[Offset: 0x100, Size: 0x10]
	delegate OnWidgetPostSelectAndFocus;//[Offset: 0x110, Size: 0x10]
	delegate OnNavigationConfigChanged;//[Offset: 0x120, Size: 0x10]
	SoftObjectPath OnBoardingConfigTablePath;//[Offset: 0x130, Size: 0x18]
	DataTable* LoadedOnBoardingConfigTable;//[Offset: 0x148, Size: 0x8]
	FName[] ConstActionWhiteList;//[Offset: 0x150, Size: 0x10]
	<int,ArkOnBoardingEventConfig> EventRegisterMap;//[Offset: 0x160, Size: 0x50]
	<int,ArkOnBoardingTaskInstanceList> EventInstanceMap;//[Offset: 0x1b0, Size: 0x50]
	UserDefinedEnum* EnumType;//[Offset: 0x210, Size: 0x8]
	void RemoveActionsInWhitelist(FName[] InActionList);// 0x2875cc0
	void RemoveActionInWhitelist(FName InActionName);// 0x2875c30
	bool IsSkipPopupDataBox();// 0x28751e0
	bool IsActionInWhitelist(const FName InActionName);// 0x28750b0
	bool HasActiveOnBoardingTask();// 0x2875080
	bool HasActiveOnBoardingEvent();// 0x2875050
	bool HasActionWhitelist();// 0x2875020
	FName[] GetActionWhitelist();// 0x2874d50
	static ArkOnBoardingManager* Get(const Object* WorldContext);// 0x2874cd0
	bool FinishTargetQuest(FString InTargetQuestName);// 0x2874c20
	void FinishOnBoardingTask(int InTaskID);// 0x2874ba0
	void FinishOnBoardingEvent(int InEventID);// 0x2874b20
	void FinishCurrentOnBoardingEvent();// 0x2874ae0
	void ClearActionWhitelist();// 0x2874a20
	bool CheckTargetQuest(FString InTargetQuestName);// 0x2874970
	bool CheckHavenState(const int InTargetHavenState);// 0x280ccb0
	void AppendActionInWhitelist(FName[] InActionList);// 0x28745a0
	void AddActionInWhitelist(FName InActionName);// 0x2874440
	void ActivateOnBoardingTask(int InTaskID);// 0x28743c0
	void ActivateOnBoardingEvent(int InEventID, bool bInNeedToCheck);// 0x2874300

--------------------------------
Class: ArkOnBoardingEventConfig.TableRowBase
	int EventID;//[Offset: 0x8, Size: 0x4]
	FString Desc;//[Offset: 0x10, Size: 0x10]
	int TargetHavenState;//[Offset: 0x20, Size: 0x4]
	FString TargetQuestName;//[Offset: 0x28, Size: 0x10]
	bool bNeedToFinishQuest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bNeedToTriggerNextOnBoardingEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	int NextEventID;//[Offset: 0x3c, Size: 0x4]
	ArkOnBoardingTaskConfig[] OnBoardingTaskList;//[Offset: 0x40, Size: 0x10]
	bool bNeedToTriggerFirstTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	int FirstTriggerTaskID;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: ArkOnBoardingTaskConfig
	int TaskID;//[Offset: 0x0, Size: 0x4]
	class ArkOnBoardingTaskBase* OnBoardingTask;//[Offset: 0x8, Size: 0x8]
	bool bNeedToTriggerNextTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bNeedToTriggerNextTaskAfterHandleInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	int NextTaskID;//[Offset: 0x14, Size: 0x4]
	bool bNeedToDisableAllInputBeforeActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: ArkOnBoardingTaskBase.Object
	FName PopupMenuName;//[Offset: 0x38, Size: 0x8]
	FName ThreeSlidePageName;//[Offset: 0x40, Size: 0x8]
	enum[] UserDataModelTypes;//[Offset: 0x48, Size: 0x10]
	bool bShouldListenUserDataUpdateAfterActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	TargetWidgetInfo HighlightWidgetInfo;//[Offset: 0x60, Size: 0x70]
	TargetWidgetInfo[] WhiteListWidgetInfos;//[Offset: 0xd0, Size: 0x10]
	FString PostSelectAndFocusWidgetPath;//[Offset: 0xe0, Size: 0x10]
	FString DefaultSelectedWidgetPath;//[Offset: 0xf0, Size: 0x10]
	enum TextDirection;//[Offset: 0x100, Size: 0x1]
	FText GuideText;//[Offset: 0x108, Size: 0x18]
	FText GuideTextGamePad;//[Offset: 0x120, Size: 0x18]
	Vector2D StartPointPercent;//[Offset: 0x138, Size: 0x8]
	bool bEnableExitWithEsc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	bool bHasTimeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x141, Size: 0x1]
	float TimeOutTime;//[Offset: 0x144, Size: 0x4]
	bool bIsInteractableGuideWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	bool bNeedNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 0x1]
	ArkPopupMenuBase* PopupMenuInstance;//[Offset: 0x150, Size: 0x8]
	ArkPopupMenuBase* ShortCutActionTipsInstance;//[Offset: 0x158, Size: 0x8]
	<enum,ArkUserDataModel*> UserDataModels;//[Offset: 0x1b0, Size: 0x50]
	Widget*[] AllWidgets;//[Offset: 0x200, Size: 0x10]
	<Widget*,TargetWidgetNavigationData> CacheNavigationData;//[Offset: 0x210, Size: 0x50]
	void TryFinish();// 0x2875ed0
	void TryActivate();// 0x2875eb0
	void SetKeyTipsLockedState(bool bInIsLocked);// 0x2875da0
	void PreActivate();// 0x188d0c0
	void PostFinish();// 0x2875c10
	void OpenThreeSlidePage();// 0x305c9c0
	void OpenHighLighting(out Widget*[] InWidgets, Widget* InDefaultSelectedWidget);// 0x2875b20
	void OpenFullScreenMask();// 0x2875b00
	void OnSkip();// 0x2875920
	void OnShowHUDChanged(bool bShowHUD);// 0x2875890
	void OnShortcutActionTipsMenuChanged(const ArkPopupMenuBase* ChangedMenu, int ChangedMenuID, bool MenuIsOpenedFlag);// 0x305c9c0
	void OnPostGuideWidgetAction();// 0x305c9c0
	void OnMenuChanged(const ArkPopupMenuBase* ChangedMenu, int ChangedMenuID, bool MenuIsOpenedFlag);// 0x305c9c0
	void OnInputActionTrigger(FString InActionName);// 0x305c9c0
	void OnInputActionPostTrigger();// 0x28756b0
	void NativeOnSkip();// 0x2875210
	bool IsReadyToGuideWidgetAction();// 0x28751b0
	bool IsInit();// 0x2875190
	bool IsGuidePopupDataBox();// 0x2875160
	bool IsActivate();// 0x2875140
	void HandleWidgetPostFocus();// 0x2875000
	void GuideWidgetAction();// 0x2874fe0
	World* GetWorld();// 0xb050a0
	ArkOnBoardingManager* GetOnBoardingManager();// 0x2874ee0
	ArkHavenRPCInterface* GetHavenRPCInterface();// 0x2874e00
	void FinishGuideWidgetAction();// 0x2874b00
	void CloseHighLighting();// 0x2874ac0
	bool CheckPopupMenuInstance(bool bNeedMarkError);// 0x28748e0
	bool CheckNeedPreGuideWidgetAction();// 0x28748b0
	void BP_OnUserDataUpdate(ArkUserDataModel* pUserDataModel, FString sRootNodeName, out const FString[] DirtyKeys);// 0x305c9c0

--------------------------------
Class: TargetWidgetInfo
	FString WidgetPath;//[Offset: 0x0, Size: 0x10]
	FName[] ActionNameList;//[Offset: 0x10, Size: 0x10]
	<enum,WidgetNavigationData> NavigationData;//[Offset: 0x20, Size: 0x50]

--------------------------------
Class: TargetWidgetNavigationData
	WidgetNavigationData Up;//[Offset: 0x0, Size: 0x24]
	WidgetNavigationData Down;//[Offset: 0x24, Size: 0x24]
	WidgetNavigationData Left;//[Offset: 0x48, Size: 0x24]
	WidgetNavigationData Right;//[Offset: 0x6c, Size: 0x24]
	WidgetNavigationData Next;//[Offset: 0x90, Size: 0x24]
	WidgetNavigationData Previous;//[Offset: 0xb4, Size: 0x24]

--------------------------------
Class: ArkOnBoardingTaskInstanceList
	<int,ArkOnBoardingTaskBase*> OnBoardingTaskInstanceList;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: UserDefinedEnum.Enum.Field.Object
	<FName,FText> DisplayNameMap;//[Offset: 0x60, Size: 0x50]

--------------------------------
Class: ArkContentPreviewManager.ArkManagerBase.Object
	class UserWidget* ContentPreviewWidgetClass;//[Offset: 0x90, Size: 0x8]
	SoftObjectPath ContentPreviewConfigTablePath;//[Offset: 0x98, Size: 0x18]
	SoftObjectPath SyncDisplayInfoTablePath;//[Offset: 0xb0, Size: 0x18]
	<int,ArkContentPreviewConfig> ContentPreviewConfigMap;//[Offset: 0xc8, Size: 0x50]
	DataTable* SyncDisplayInfoDataTable;//[Offset: 0x118, Size: 0x8]
	FText ContentPreviewConfirmText;//[Offset: 0x120, Size: 0x18]
	ArkContentPreviewItem CachedPreviewItem;//[Offset: 0x138, Size: 0x110]
	ArkContentPreviewItem[] PreviewItemArray;//[Offset: 0x248, Size: 0x10]
	void OpenContentPreviewBySyncID(int SyncID, FText OverrideTitle);// 0x26ebc20
	void OpenContentPreviewBySuperPerkID(int SuperPerkID, FText OverrideTitle);// 0x26ebb00
	void OpenContentPreviewByItemIDArray(int[] ItemIDArray);// 0x26eba20
	void OpenContentPreviewByItemID(int ItemId, FText OverrideTitle);// 0x26eb900
	void OpenContentPreviewByExchangeItem(ArkExchangeItem ExchangeItem, FText OverrideTitle);// 0x26eb7b0
	void OpenContentPreview(ArkContentPreviewInfo Info, FText OverrideTitle);// 0x26eb530
	DataTable* GetSyncDisplayInfoDataTable();// 0x26eb230
	static ArkContentPreviewManager* Get(const Object* WorldContextObject);// 0x26eaa90
	void CloseDataBox();// 0x26ea8d0
	void BP_InitContentPreviewWidget(UserWidget* CreatedWidget);// 0x305c9c0
	void BP_CloseContentPreview();// 0x305c9c0

--------------------------------
Class: ArkContentPreviewConfig.TableRowBase
	int ID;//[Offset: 0x8, Size: 0x4]
	FText PreviewTitle;//[Offset: 0x10, Size: 0x18]
	FText ContentType;//[Offset: 0x28, Size: 0x18]
	Texture2D* OverrideIcon;//[Offset: 0x40, Size: 0x28]
	MediaSource* Video;//[Offset: 0x68, Size: 0x28]

--------------------------------
Class: ArkContentPreviewItem
	int ID;//[Offset: 0x0, Size: 0x4]
	ArkContentPreviewInfo Info;//[Offset: 0x8, Size: 0x60]
	ArkContentPreviewConfig Config;//[Offset: 0x68, Size: 0x90]
	enum Type;//[Offset: 0xf8, Size: 0x1]
	ArkExchangeItem ExchangeItem;//[Offset: 0xfc, Size: 0x14]

--------------------------------
Class: ArkContentPreviewInfo
	int ContentPreviewID;//[Offset: 0x0, Size: 0x4]
	FText ContentName;//[Offset: 0x8, Size: 0x18]
	FText ContentDesc;//[Offset: 0x20, Size: 0x18]
	Texture2D* ContentIcon;//[Offset: 0x38, Size: 0x28]

--------------------------------
Class: ArkServerErrorCodeManager.ArkManagerBase.Object
	SoftObjectPath ServerErrorCodeConfigTablePath;//[Offset: 0x90, Size: 0x18]
	<int,ArkServerErrorCodeConfig> ErrorCodeConfigMap;//[Offset: 0xa8, Size: 0x50]
	FText PopupMenuConfirmText;//[Offset: 0xf8, Size: 0x18]
	void ShowGameCostNotEnoughErrorMessage(int ErrorCode, FString PlayerName);// 0x2943b20
	bool ShowErrorMessageWithPlayerName(int ErrorCode, FString PlayerName);// 0x2943a00
	bool ShowErrorMessage(int ErrorCode);// 0x2943970
	void ShowDailyZeroErrorMessage(int ErrorCode, FString PlayerName);// 0x2943850
	static ArkServerErrorCodeManager* Get(const Object* WorldContextObject);// 0x2942410
	void CloseDataBox();// 0x26cb690

--------------------------------
Class: ArkServerErrorCodeConfig.TableRowBase
	int ErrorCode;//[Offset: 0x8, Size: 0x4]
	FText ErrorMessage;//[Offset: 0x10, Size: 0x18]
	FText ErrorMessageTitle;//[Offset: 0x28, Size: 0x18]

--------------------------------
Class: ArkShieldGeneratorManager.ArkManagerBase.Object
	ArkShieldGeneratorActor* OwnedShieldGenerator;//[Offset: 0xa8, Size: 0x8]
	class ArkShieldGeneratorActor* ShieldGeneratorTemplate;//[Offset: 0xd0, Size: 0x8]
	float WaitGenerateTime;//[Offset: 0xd8, Size: 0x4]
	float WaitDestoriedGenerateTime;//[Offset: 0xdc, Size: 0x4]
	float ValidLength;//[Offset: 0xe0, Size: 0x4]
	Transform Offset_Transform_Swarm;//[Offset: 0xf0, Size: 0x30]
	class BomberManActor* BomberManTemplate;//[Offset: 0x190, Size: 0x8]
	float BomberManGenerateTime;//[Offset: 0x198, Size: 0x4]
	FName SocketName_BomberMan;//[Offset: 0x19c, Size: 0x8]
	Vector BomberManOffset_Location;//[Offset: 0x1a4, Size: 0xc]
	static ArkShieldGeneratorManager* Get(const Object* WorldContextObject);// 0x294eb70
	void ClearShieldGenerator();// 0x294ead0

--------------------------------
Class: ArkShieldGeneratorActor.Actor.Object
	bool bExploded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	int ExplodedReason;//[Offset: 0x344, Size: 0x4]
	bool bShareableShieldBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]
	bool bShareableShieldFadeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x349, Size: 0x1]
	ArkNpc*[] InShareableShieldNpcs;//[Offset: 0x350, Size: 0x10]
	<ArkNpc*,ParticleSystemComponent*> BeamMap;//[Offset: 0x360, Size: 0x50]
	<ArkNpc*,ParticleSystemComponent*> ShareableShieldMap;//[Offset: 0x3b0, Size: 0x50]
	<enum,int> EndureDamageTier;//[Offset: 0x400, Size: 0x50]
	int[] BackToBiteBuffs;//[Offset: 0x450, Size: 0x10]
	AkAudioEvent* ShareableShield_ActiveSound;//[Offset: 0x460, Size: 0x28]
	ParticleSystem* ShareableShieldBrokenPS;//[Offset: 0x488, Size: 0x28]
	FName SocketName;//[Offset: 0x4b0, Size: 0x8]
	Vector LocationOffset;//[Offset: 0x4b8, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x4c4, Size: 0xc]
	AkAudioEvent* ShareableShield_BrokenSound;//[Offset: 0x4d0, Size: 0x28]
	int MaxShareableShieldNum;//[Offset: 0x4f8, Size: 0x4]
	<enum,int> MaxDamageEnergyTier;//[Offset: 0x500, Size: 0x50]
	float AutoExplodeTime;//[Offset: 0x550, Size: 0x4]
	float LifeSpanAfterExplosion;//[Offset: 0x554, Size: 0x4]
	float DamageHPPer;//[Offset: 0x558, Size: 0x4]
	class DamageType* DamageTypeClass;//[Offset: 0x560, Size: 0x8]
	FName BeamEndPointSocketName;//[Offset: 0x568, Size: 0x8]
	FName BeamAttachToSocketName;//[Offset: 0x570, Size: 0x8]
	ParticleSystem* BeamParticle;//[Offset: 0x578, Size: 0x28]
	ParticleSystem* ShareableShieldParticle;//[Offset: 0x5a0, Size: 0x28]
	FName ShareableShieldSocketName;//[Offset: 0x5c8, Size: 0x8]
	float WeakPointDuration;//[Offset: 0x5d0, Size: 0x4]
	float BeamParticleDelay;//[Offset: 0x5d4, Size: 0x4]
	float ShareableParticleDelay;//[Offset: 0x5d8, Size: 0x4]
	FName ActorSocketName;//[Offset: 0x5dc, Size: 0x8]
	Vector ActorLocationOffset;//[Offset: 0x5e4, Size: 0xc]
	Vector NanoActorLocationOffset;//[Offset: 0x5f0, Size: 0xc]
	float CurDamageEnergy;//[Offset: 0x5fc, Size: 0x4]
	bool bShieldInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x624, Size: 0x1]
	TakeHitInfo[] LastTakeHitInfoArray;//[Offset: 0x8b8, Size: 0x10]
	void ShowShareableShieldBrokenEffect();// 0x294f790
	void PlayShareableShieldFadeOut(out const ParticleSystemComponent*[] InPSCompnents, out const ParticleSystemComponent*[] InBeamPSCompnents);// 0x305c9c0
	void PlayBeamShowIn(out const ParticleSystemComponent*[] InBeamPSCompnents);// 0x305c9c0
	void OnShieldInvincibleChanged__DelegateSignature();// 0x305c9c0
	void OnShareableShieldTakeEffect_Particle();// 0x294f2f0
	void OnShareableShieldBeamTakeEffect_Particle();// 0x294f2d0
	void OnRep_ShieldInvincible();// 0x294f270
	void OnRep_ShareableShieldFadeOut();// 0x294f250
	void OnRep_ShareableBroken();// 0x294f230
	void OnRep_LastTakeHitInfoArray();// 0x294f170
	void OnRep_InShareableShieldNpcs();// 0x294f150
	void OnRep_ExplodedReason();// 0x294f130
	void OnRep_Exploded();// 0x294f110
	void OnRep_CurDamageEnergy();// 0x294f0f0
	void OnExplode__DelegateSignature();// 0x305c9c0
	void DoDestroyEffect(int InExplodedReason);// 0x305c9c0

--------------------------------
Class: BomberManActor.Actor.Object
	bool bExploded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	bool bBomberManHeal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 0x1]
	float CurLifeTime;//[Offset: 0x304, Size: 0x4]
	int GameModeDifficulty;//[Offset: 0x308, Size: 0x4]
	<enum,float> ExplodedDamgeyTier;//[Offset: 0x310, Size: 0x50]
	<enum,BomberExplodeDamageInfo> EnemyExplodedDamageTier;//[Offset: 0x360, Size: 0x50]
	<enum,float> FriendlyExplodedDamageTier;//[Offset: 0x3b0, Size: 0x50]
	float LifeTime;//[Offset: 0x400, Size: 0x4]
	float LifeSpanAfterExplosion;//[Offset: 0x404, Size: 0x4]
	float CutDuringTime;//[Offset: 0x408, Size: 0x4]
	float ExploedRange;//[Offset: 0x40c, Size: 0x4]
	float ExplodeHalfHeight;//[Offset: 0x410, Size: 0x4]
	class DamageType* DamageTypeClass;//[Offset: 0x418, Size: 0x8]
	float HealAliveOwnerHP;//[Offset: 0x420, Size: 0x4]
	float HealDeadOwnerHP;//[Offset: 0x424, Size: 0x4]
	int[] BuffIDs;//[Offset: 0x428, Size: 0x10]
	int BuffID_Icon;//[Offset: 0x438, Size: 0x4]
	ParticleSystem* ExplodeParticle;//[Offset: 0x440, Size: 0x28]
	FName ExplodeParticleSocketName;//[Offset: 0x468, Size: 0x8]
	ParticleSystem* BomberManHealParticle;//[Offset: 0x470, Size: 0x28]
	FName BomberManHealParticleSocketName;//[Offset: 0x498, Size: 0x8]
	float CountdownPlayTime;//[Offset: 0x4a0, Size: 0x4]
	ParticleSystem* BomberManParticle;//[Offset: 0x4a8, Size: 0x28]
	FName BomberManParticleSocketName;//[Offset: 0x4d0, Size: 0x8]
	CurveFloat* BomberManParticleCurve;//[Offset: 0x4d8, Size: 0x8]
	AkAudioEvent* BomberMan_ActiveSound;//[Offset: 0x4e0, Size: 0x28]
	AkAudioEvent* BomberMan_ChargeSound;//[Offset: 0x508, Size: 0x28]
	AkAudioEvent* BomberMan_ExplodeSound;//[Offset: 0x530, Size: 0x28]
	float DelayPlayChargeSound;//[Offset: 0x558, Size: 0x4]
	ArkSoftParticleSystemComponent* BomberManParticleComp;//[Offset: 0x560, Size: 0x8]
	ArkSoftParticleSystemComponent* ExplodeParticleComp;//[Offset: 0x568, Size: 0x8]
	ArkSoftParticleSystemComponent* BomberManHealParticleComp;//[Offset: 0x570, Size: 0x8]
	void OnRep_Exploded();// 0x29dab40
	void OnRep_CurLifeTime();// 0x29dab20
	void OnRep_BomberManHeal();// 0x29dab00
	void OnOwnerHittedByHostile();// 0x29daa80
	void DoExplodeEffect();// 0x305c9c0

--------------------------------
Class: BomberExplodeDamageInfo
	<int,float> NpcLevelDamage;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: ArkCinematicManager.ArkResourceManagerBase.ArkManagerBase.Object
	Actor* OwnerPrivate;//[Offset: 0xc0, Size: 0x8]
	delegate CinematicPhaseTypeChanged;//[Offset: 0x108, Size: 0x10]
	class ArkGameBuff* BuffClass;//[Offset: 0x118, Size: 0x8]
	class Actor* StationActorClass;//[Offset: 0x120, Size: 0x8]
	ArkCinematicInfo DefaultCinematicInfo;//[Offset: 0x128, Size: 0x118]
	float CountTime;//[Offset: 0x240, Size: 0x4]
	bool bGameOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 0x1]
	ArkCMAddedTimeInfo AddedTimeInfo;//[Offset: 0x248, Size: 0x8]
	float TotalGameTime;//[Offset: 0x250, Size: 0x4]
	ArkCinematicInfo CurCinematicInfo;//[Offset: 0x258, Size: 0x118]
	ArkPlayer*[] RegisteredPlayers;//[Offset: 0x388, Size: 0x10]
	enum CurPhaseType;//[Offset: 0x398, Size: 0x1]
	SoftObjectPath CinematicFilterTablePath;//[Offset: 0x428, Size: 0x18]
	ArkCinematicFilterConfig[] CinematicFilterConfigs;//[Offset: 0x440, Size: 0x10]
	<CameraActor*> SavedSequenceCameraActors;//[Offset: 0x450, Size: 0x50]
	MaterialInstanceDynamic*[] SavedFilterInstanceList;//[Offset: 0x4a0, Size: 0x10]
	FName WorkingFilterName;//[Offset: 0x4b0, Size: 0x8]
	void StartCountDownWithDelay();// 0x26d3660
	void SetWorkingFilterName(FName InPostProcessName);// 0x26d3560
	void SetupCinematicMode(int InLevelID);// 0x26d35e0
	void RefreshGameStateCinematicInfo();// 0x26d2de0
	void OnViewTargetChanged(Actor* NewViewTarget);// 0x26d2a10
	void OnRep_TotalGameTime();// 0x26d29b0
	void OnRep_CurPhaseType();// 0x26d2990
	void OnRep_CountTime();// 0x26d2970
	void OnRep_AddedTimeInfo();// 0x26d2930
	void OnPostPlayerRegisted(ArkPlayer* Player);// 0x26d2890
	void OnLocalPlayerReconnect_BP(ArkPlayer* Player);// 0x305c9c0
	void OnGameFlowChange(enum LastMode, enum NewMode, float StartTime);// 0x26d2790
	void OnCinematicGameFlow_BP(enum LastMode, enum NewMode);// 0x305c9c0
	void HandleCinematicInfo();// 0x26d20b0
	float GetInitialCountTime();// 0x26d1fe0
	float GetCountTime();// 0x26d1f20
	ArkCinematicFilterConfig GetCinematicFilterConfig(FString InPostProcessName);// 0x26d1d70
	static ArkCinematicManager* Get(const Object* WorldContext);// 0x26d1bf0
	void CachedCinematicAreaTransform(out const Transform InTranform);// 0x26d19c0

--------------------------------
Class: ArkCinematicFilterConfig.TableRowBase
	FString PostProcessName;//[Offset: 0x8, Size: 0x10]
	Texture2D* FilterIcon;//[Offset: 0x18, Size: 0x28]
	FText Title;//[Offset: 0x40, Size: 0x18]
	FName MixEventName;//[Offset: 0x58, Size: 0x8]
	AkAudioEvent* PlayAudioEvent;//[Offset: 0x60, Size: 0x8]
	AkAudioEvent* StopAudioEvent;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: ArkCinematicInfo.TableRowBase
	int LevelID;//[Offset: 0x8, Size: 0x4]
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float InitialCountTime;//[Offset: 0x10, Size: 0x4]
	float AutoStartCountTime;//[Offset: 0x14, Size: 0x4]
	float MaxCountTime;//[Offset: 0x18, Size: 0x4]
	float DelayStartCountTime;//[Offset: 0x1c, Size: 0x4]
	float ExtraMonsterLootTime_Few;//[Offset: 0x20, Size: 0x4]
	float ExtraMonsterLootTime_Middle;//[Offset: 0x24, Size: 0x4]
	<enum,FName> BaseMonster_LootConfig;//[Offset: 0x28, Size: 0x50]
	<enum,FName> ExtraMonster_LootConfig_Few;//[Offset: 0x78, Size: 0x50]
	<enum,FName> ExtraMonster_LootConfig_Middle;//[Offset: 0xc8, Size: 0x50]

--------------------------------
Class: ArkCMAddedTimeInfo
	float AddedTime;//[Offset: 0x0, Size: 0x4]
	int Index;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ArkAntiCheatManager.ArkResourceManagerBase.ArkManagerBase.Object
	void UpdatePlayerScale();// 0x26683b0
	static ArkAntiCheatManager* Get(const Object* WorldContext);// 0x2667360

--------------------------------
Class: ArkNanoSeedManager.ArkResourceManagerBase.ArkManagerBase.Object
	bool bEnableNanoSeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	float MaxSeedEnergy;//[Offset: 0xc0, Size: 0x4]
	bool bAsyncSpawnForInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]
	int AsyncSpawnNumForInit;//[Offset: 0xc8, Size: 0x4]
	<enum,ArkNanoSeedEnergyConfig> EnergyToConfig;//[Offset: 0xd0, Size: 0x50]
	SoftObjectPath LevelNanoSeedTablePath;//[Offset: 0x120, Size: 0x18]
	SoftObjectPath AINanoSeedBirthTablePath;//[Offset: 0x138, Size: 0x18]
	SoftObjectPath AINanoSeedLootTablePath;//[Offset: 0x150, Size: 0x18]
	SoftObjectPath NanoSeedSpawnPatternTablePath;//[Offset: 0x168, Size: 0x18]
	bool bRuntimeEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 0x1]
	Actor*[] PendingNanoSeedLocator;//[Offset: 0x1c8, Size: 0x10]
	bool bEnableSpawnForPattern;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 0x1]
	ArkNanoSeedSpawnPattern[] SpawnPatterns;//[Offset: 0x1e0, Size: 0x10]
	void SetNanoSeedEffectList(enum[] InEnergyList, ArkCharacterBase* InCharacter);// 0x2846800
	void ResumeSpawnNanoSeed();// 0x2846750
	void RemoveNanoSeedEffect(enum InEnergyType, ArkCharacterBase* InCharacter);// 0x2846670
	void PauseSpawnNanoSeed();// 0x28465b0
	bool IsNanoSeedEnabled();// 0x2846260
	bool IsNanoSeedConfigEnabled();// 0x2846230
	float GetMaxSeedEnergy();// 0x28461a0
	ArkLevelNanoSeedConfig GetCurrentLevelNanoSeedConfig();// 0x2846090
	enum[] GetCharacterEnergyTypes(ArkCharacterBase* InCharacter);// 0x2845fb0
	static ArkNanoSeedManager* Get(const Object* WorldContext);// 0x2845f00
	bool CharacterHasEnergyType(ArkCharacterBase* InCharacter);// 0x2845e70
	void ChangeWorkingPattern(int InPatternIndex);// 0x2845df0
	void AddNanoSeedEffect(enum InEnergyType, ArkCharacterBase* InCharacter);// 0x2845970

--------------------------------
Class: ArkNanoSeedEnergyConfig
	FName BuffTag;//[Offset: 0x0, Size: 0x8]
	class ArkNanoSeedPickup* PickUpClass;//[Offset: 0x8, Size: 0x8]
	float DamagePercentage;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ArkNanoSeedPickup.ArkPickUp.ArkInteractiveActor.ArkStaticActor.Actor.Object
	enum EnergyType;//[Offset: 0x930, Size: 0x1]
	float EnergyNum;//[Offset: 0x934, Size: 0x4]

--------------------------------
Class: ArkNanoSeedSpawnPattern
	int MaxNanoSeed;//[Offset: 0x0, Size: 0x4]
	float SpawnCooldown;//[Offset: 0x4, Size: 0x4]
	int SpawnNum;//[Offset: 0x8, Size: 0x4]
	float DropRange;//[Offset: 0xc, Size: 0x4]
	float DropDistanceFromSpawnPoint;//[Offset: 0x10, Size: 0x4]
	ArkNanoSeedSpawnRandomItem[] RandomArray;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ArkNanoSeedSpawnRandomItem
	class ArkNanoSeedPickup* PickUpClass;//[Offset: 0x0, Size: 0x8]
	int Probability;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ArkLevelNanoSeedConfig.TableRowBase
	int Level;//[Offset: 0x8, Size: 0x4]
	int Round;//[Offset: 0xc, Size: 0x4]
	int Difficulty;//[Offset: 0x10, Size: 0x4]
	bool IsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	int[] CommonBuffIDs;//[Offset: 0x18, Size: 0x10]
	ArkNanoSeedBuffIDsCfg PlayerBufffIDs;//[Offset: 0x28, Size: 0xc]
	ArkNanoSeedBuffIDsCfg NpcBuffIDs;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: ArkNanoSeedBuffIDsCfg
	int OffenseBuffID;//[Offset: 0x0, Size: 0x4]
	int DefenseBuffID;//[Offset: 0x4, Size: 0x4]
	int SkillBuffID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ArkCommodityManager.ArkManagerBase.Object
	<int,int> CurrencySortPriority;//[Offset: 0x98, Size: 0x50]
	delegate OnPurchaseSucceedAnimationFinished;//[Offset: 0xe8, Size: 0x10]
	delegate OnPurchaseSucceedAnimationInit;//[Offset: 0xf8, Size: 0x10]
	delegate OnPurchaseResult;//[Offset: 0x108, Size: 0x10]
	ArkCommodityTypeCombination[] NeedToShowPreItemTipsTypes;//[Offset: 0x118, Size: 0x10]
	FName PurchaseSucceedMenuName;//[Offset: 0x128, Size: 0x8]
	FName PurchaseSucceedMenuHUDStateName;//[Offset: 0x130, Size: 0x8]
	SoftObjectPath CommodityDataConfigTablePath;//[Offset: 0x138, Size: 0x18]
	DataTable* LoadedCommodityDataConfigTable;//[Offset: 0x150, Size: 0x8]
	SoftObjectPath SubMallConfigTablePath;//[Offset: 0x158, Size: 0x18]
	DataTable* LoadedSubMallConfigTable;//[Offset: 0x170, Size: 0x8]
	SoftObjectPath RecommendMallConfigTablePath;//[Offset: 0x178, Size: 0x18]
	DataTable* LoadedRecommendMallConfigTable;//[Offset: 0x190, Size: 0x8]
	bool TryLoadSubMallConfig();// 0x26dc860
	bool TryLoadRecommendMallConfig();// 0x26dc830
	bool TryLoadCommodityDataConfig();// 0x26dc800
	bool TryGetMetaItemDataByCommodityID(int InCommodityID, out ArkMallCommodityMetaDataItem OutMetaDataItem);// 0x26dc700
	void TriggerPurchaseAnimation(int InCommodityID, delegate InOnAnimationFinished);// 0x26dc620
	void SetCommodityStateData(out const ArkMallCommodityOwnerDataItem[] InMallCommodityStat);// 0x26dc450
	void SetCommodityBuyData(out const ArkMallCommodityBuyDataItem[] InCommodityBuyData);// 0x26dc3a0
	void OpenPurchaseCommodityBoxWithCallback(out const delegate InOnPurchaseResult, int InCommodityID, int InBuyCount, bool bNeedCheckFirst);// 0x26dbdb0
	void OpenPurchaseCommodityBox(int InCommodityID, int InBuyCount, bool bNeedCheckFirst);// 0x305c9c0
	void OnHotFixManagerDoUnInit();// 0x26dbc70
	void OnHotFixManagerDoInit();// 0x26dbc50
	void OnDataTableModified(int DataTableID, FString DataTableName, DataTable* DataTable);// 0x305c9c0
	void OnCommodityPurchaseResultInternal(int InErrorCode, int InCommodityID, int InBuyCount);// 0x305c9c0
	void OnCommodityPurchaseResult(int InErrorCode, int InCommodityID, int InBuyCount);// 0x26dba90
	bool IsOwnedCountDirty();// 0x26db960
	bool IsMetaDataReady();// 0x26db930
	bool IsCommodityStateDataReady();// 0x26db910
	bool IsCommodityBuyDataReady();// 0x26db8f0
	<int,ArkHavenSubMallConfig> GetSubMallConfig();// 0x26db820
	<int,ArkHavenRecommendMallConfig> GetRecommendMallConfig();// 0x26db750
	<int,ArkMallCommodityMetaDataItem> GetMetadata();// 0x26db710
	<int,int> GetCurrencySortPriority();// 0x26db560
	ArkHavenAreaMallConfig[] GetCommodityListByMallType(enum InMallType);// 0x26db4c0
	ArkHavenAreaMallConfig[] GetCommodityListByItemID(int inItemID);// 0x26db410
	ArkHavenAreaMallConfig[] GetCommodityListByCommodityType(enum InCommodityType);// 0x26db370
	bool GetCommodityItemByCommodityID(int InCommodityID, out ArkHavenAreaMallConfig OutCommodityItem);// 0x26db120
	<int,ArkHavenAreaMallConfig> GetAllCommodityDataMap();// 0x26dafb0
	ArkHavenAreaMallConfig[] GetAllCommodityData();// 0x26daf60
	static ArkCommodityManager* Get(const Object* WorldContext);// 0x26daee0
	void ClearOwnedCountDirty();// 0x26dad90
	int CallLua_GetCommodityCountByItemCount(int InCommodityID, int InItemCount);// 0x305c9c0
	void CallLua_FireCommodityLimitUpdateEvent(out const int[] InCommodityIDList);// 0x305c9c0
	bool CallLua_CheckCommodityCanBuy(int InCommodityID);// 0x305c9c0

--------------------------------
Class: ArkCommodityTypeCombination
	enum CommodityType;//[Offset: 0x0, Size: 0x1]
	enum ItemType;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: ArkMallCommodityMetaDataItem
	int CommodityID;//[Offset: 0x0, Size: 0x4]
	int ItemId;//[Offset: 0x4, Size: 0x4]
	int OwnedCount;//[Offset: 0x8, Size: 0x4]
	int PreItemID;//[Offset: 0xc, Size: 0x4]
	int EquipItemID;//[Offset: 0x10, Size: 0x4]
	bool bIsPreItemOwned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	bool bForceUnlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]
	int64 ExpireTime;//[Offset: 0x18, Size: 0x8]
	int BuyCount;//[Offset: 0x20, Size: 0x4]
	int RefreshableBuyCount;//[Offset: 0x24, Size: 0x4]
	int64 RefreshableExpireTime;//[Offset: 0x28, Size: 0x8]
	int AreaId;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: ArkMallCommodityOwnerDataItem
	int CommodityID;//[Offset: 0x0, Size: 0x4]
	int ItemId;//[Offset: 0x4, Size: 0x4]
	int OwnedCount;//[Offset: 0x8, Size: 0x4]
	int PreItemID;//[Offset: 0xc, Size: 0x4]
	int EquipItemID;//[Offset: 0x10, Size: 0x4]
	bool bIsPreItemOwned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	bool bForceUnlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]

--------------------------------
Class: ArkMallCommodityBuyDataItem
	int CommodityID;//[Offset: 0x0, Size: 0x4]
	int AreaId;//[Offset: 0x4, Size: 0x4]
	int ItemId;//[Offset: 0x8, Size: 0x4]
	int64 ExpireTime;//[Offset: 0x10, Size: 0x8]
	int BuyCount;//[Offset: 0x18, Size: 0x4]
	int RefreshableBuyCount;//[Offset: 0x1c, Size: 0x4]
	int64 RefreshableExpireTime;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: ArkHavenSubMallConfig.TableRowBase
	int MallID;//[Offset: 0x8, Size: 0x4]
	bool bInUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	enum MallType;//[Offset: 0xd, Size: 0x1]
	FText MallName;//[Offset: 0x10, Size: 0x18]
	Texture2D* MallBackground;//[Offset: 0x28, Size: 0x28]

--------------------------------
Class: ArkHavenRecommendMallConfig.TableRowBase
	int MallConfigID;//[Offset: 0x8, Size: 0x4]
	bool bIsUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	FString StartTime;//[Offset: 0x10, Size: 0x10]
	FString EndTime;//[Offset: 0x20, Size: 0x10]
	bool bIsShowSubTitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	int[] AdsPictureList;//[Offset: 0x38, Size: 0x10]
	int64 RecommendMallVersion;//[Offset: 0x48, Size: 0x8]
	bool bHasVideo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	FString VideoName;//[Offset: 0x58, Size: 0x10]
	int[] RecommendCommodityList;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: ArkHavenAreaMallConfig.TableRowBase
	int CommodityID;//[Offset: 0x8, Size: 0x4]
	enum MallType;//[Offset: 0xc, Size: 0x1]
	enum CommodityType;//[Offset: 0xd, Size: 0x1]
	int ItemId;//[Offset: 0x10, Size: 0x4]
	int ItemCount;//[Offset: 0x14, Size: 0x4]
	int MaxCountOnce;//[Offset: 0x18, Size: 0x4]
	class ArkSizeBoxParamTemplateAsset* IconParam;//[Offset: 0x20, Size: 0x8]
	Texture2D* CommodityIcon;//[Offset: 0x28, Size: 0x28]
	Texture2D* CommodityBG;//[Offset: 0x50, Size: 0x28]
	bool bIsShowFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	bool bIsHideQualityColorGradient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
	int TopSortPriority;//[Offset: 0x7c, Size: 0x4]
	enum AccessType;//[Offset: 0x80, Size: 0x1]
	enum OutputActivity;//[Offset: 0x81, Size: 0x1]
	int FestActivityID;//[Offset: 0x84, Size: 0x4]
	enum PromotionTag;//[Offset: 0x88, Size: 0x1]
	int JumpID;//[Offset: 0x8c, Size: 0x4]
	bool bListFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	MallCommodityPrice[] CommodityPrice;//[Offset: 0x98, Size: 0x10]
	bool bDiscountFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	int ConsistentDiscount;//[Offset: 0xac, Size: 0x4]
	bool bIsShowRemainDiscountTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	MallCommodityDiscountData[] DiscountData;//[Offset: 0xb8, Size: 0x10]
	bool bIsShowRemainDowntime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	MallCommodityListedData[] ListData;//[Offset: 0xd0, Size: 0x10]
	bool bIsShowRemainAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	MallCommoditySellLimitData[] LimitData;//[Offset: 0xe8, Size: 0x10]

--------------------------------
Class: ArkSizeBoxParamTemplateAsset.Object
	ArkSizeBoxParamTemplate SizeBoxParam;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: ArkSizeBoxParamTemplate
	float WidthOverride;//[Offset: 0x8, Size: 0x4]
	float HeightOverride;//[Offset: 0xc, Size: 0x4]
	float MinDesiredWidth;//[Offset: 0x10, Size: 0x4]
	float MinDesiredHeight;//[Offset: 0x14, Size: 0x4]
	float MaxDesiredWidth;//[Offset: 0x18, Size: 0x4]
	float MaxDesiredHeight;//[Offset: 0x1c, Size: 0x4]
	float MinAspectRatio;//[Offset: 0x20, Size: 0x4]
	float MaxAspectRatio;//[Offset: 0x24, Size: 0x4]
	bool bOverride_WidthOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bOverride_HeightOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bOverride_MinDesiredWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bOverride_MinDesiredHeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bOverride_MaxDesiredWidth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool bOverride_MaxDesiredHeight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bOverride_MinAspectRatio;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bOverride_MaxAspectRatio;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	WidgetTransform RenderTransform;//[Offset: 0x2c, Size: 0x1c]
	Vector2D RenderTransformPivot;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: MallCommodityPrice
	int CurrencyID;//[Offset: 0x0, Size: 0x4]
	int CurrencyCost;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MallCommodityDiscountData
	enum DiscountType;//[Offset: 0x0, Size: 0x1]
	int StartDayID;//[Offset: 0x4, Size: 0x4]
	FString StartTime;//[Offset: 0x8, Size: 0x10]
	int EndDayID;//[Offset: 0x18, Size: 0x4]
	FString EndTime;//[Offset: 0x20, Size: 0x10]
	int Discount;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: MallCommodityListedData
	enum ListType;//[Offset: 0x0, Size: 0x1]
	int StartDayID;//[Offset: 0x4, Size: 0x4]
	FString StartTime;//[Offset: 0x8, Size: 0x10]
	int EndDayID;//[Offset: 0x18, Size: 0x4]
	FString EndTime;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MallCommoditySellLimitData
	enum LimitType;//[Offset: 0x0, Size: 0x1]
	int Min;//[Offset: 0x4, Size: 0x4]
	int Max;//[Offset: 0x8, Size: 0x4]
	FString StartTime;//[Offset: 0x10, Size: 0x10]
	FString EndTime;//[Offset: 0x20, Size: 0x10]
	int RefreshTime;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: ArkLootManager.ArkResourceManagerBase.ArkManagerBase.Object
	int MaxSpawnCountForTime;//[Offset: 0xd4, Size: 0x4]
	float SpawnIntervalTime;//[Offset: 0xd8, Size: 0x4]
	float MaxProceedSpawnTime;//[Offset: 0xdc, Size: 0x4]
	SoftObjectPath LootPoolDataTablePath;//[Offset: 0xe8, Size: 0x18]
	SoftObjectPath LootSettingDataTablePath;//[Offset: 0x100, Size: 0x18]
	SoftObjectPath LootShareableDataTablePath;//[Offset: 0x118, Size: 0x18]
	DataTable* CachedLootPoolTable;//[Offset: 0x130, Size: 0x8]
	Actor*[] CurAdditionalActors;//[Offset: 0x138, Size: 0x10]
	ArkLootPickUpInfoInstance*[] SpawnPickUpsByLootName(out const FName rLootName, out const Vector InSpawnPos, const Pawn* InitiatorPawn, const Actor* PassiveActor);// 0x282fcd0
	static ArkLootManager* Get(const Object* WorldContext);// 0x282f070
	ArkLootPickUpInfoInstance*[] GenerateShareableLootItems(out const FName InShareableName, const ArkPlayer* InitiatorPlayer, const Actor* PassiveActor, bool bRightNowCalcuWeightRate);// 0x282eeb0

--------------------------------
Class: ArkLootPickUpInfoInstance.Object
	delegate SpawnPickSucEvent;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: ArkHavenAIManager.ArkManagerBase.Object
	class ArkHavenGhostAIController* AIControllerClass;//[Offset: 0x90, Size: 0x8]
	PendingDeleteList(UInt64Property)[] PendingDeleteList;//[Offset: 0x98, Size: 0x10]
	<PendingAddMap_Key(UInt64Property),ArkTeammateInfo> PendingAddMap;//[Offset: 0xa8, Size: 0x50]
	<PositionRecord_Key(UInt64Property),Vector> PositionRecord;//[Offset: 0xf8, Size: 0x50]
	<GhostControllers_Key(UInt64Property),ArkHavenGhostAIController*> GhostControllers;//[Offset: 0x148, Size: 0x50]
	byte UnusedPlayerIndex;//[Offset: 0x198, Size: 0x1]
	class ArkPlayer* GhostPawnClass;//[Offset: 0x1a0, Size: 0x8]
	LocalPlayerRedirectToGhost(UInt64Property)[] LocalPlayerRedirectToGhost;//[Offset: 0x1a8, Size: 0x10]

--------------------------------
Class: ArkHavenGhostAIController.ArkAIControllerBase.AIController.Controller.Actor.Object
	ArkTeammateInfo CurrentTeammateInfo;//[Offset: 0x450, Size: 0xc0]
	bool bIsShowDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 0x1]
	<int,ArkDSPlayerWeaponSetData> CurrentWeaponSet;//[Offset: 0x518, Size: 0x50]
	ParticleSystem* SpawnFx;//[Offset: 0x568, Size: 0x28]
	ParticleSystem* RemoveFX;//[Offset: 0x590, Size: 0x28]
	ParticleSystem* SwitchWeaponPrimary;//[Offset: 0x5b8, Size: 0x28]
	ParticleSystem* SwitchWeaponSecondary;//[Offset: 0x5e0, Size: 0x28]
	ParticleSystem* SwitchWeaponMelee;//[Offset: 0x608, Size: 0x28]
	FName RootAttachPoint;//[Offset: 0x630, Size: 0x8]
	FName WeaponPrimaryAttachPoint;//[Offset: 0x638, Size: 0x8]
	FName WeaponSecondaryAttachPoint;//[Offset: 0x640, Size: 0x8]
	FName WeaponMeleeAttachPoint;//[Offset: 0x648, Size: 0x8]

--------------------------------
Class: ArkTeammateInfo
	UInt64Property ID;//[Size: 0x8]
	FString Name;//[Offset: 0x8, Size: 0x10]
	int HeroID;//[Offset: 0x18, Size: 0x4]
	int AvatarID;//[Offset: 0x1c, Size: 0x4]
	<int,ArkDSPlayerWeaponSetData> WeaponSet;//[Offset: 0x20, Size: 0x50]
	<int,ArkEquippedPendantData> PendantDataMap;//[Offset: 0x70, Size: 0x50]

--------------------------------
Class: ArkDSPlayerWeaponSetData.ArkDSPlayerWeaponPluginData
	enum NDMQuality;//[Offset: 0x40, Size: 0x1]
	int[] NDMEffects;//[Offset: 0x48, Size: 0x10]
	float[] NDMEffectValues;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: ArkJumpManager.ArkManagerBase.Object
	SoftObjectPath JumpCommandConfigTablePath;//[Offset: 0x98, Size: 0x18]
	<int,ArkJumpCommandConfig> JumpCommandConfigMap;//[Offset: 0xb0, Size: 0x50]
	FText MNA_TitleRichText;//[Offset: 0x100, Size: 0x18]
	FText MNA_DefaultContentRichText;//[Offset: 0x118, Size: 0x18]
	<FName,FText> MNA_ContentRichTextMap;//[Offset: 0x130, Size: 0x50]
	bool MNA_bEscClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	bool MNA_bAutoClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 0x1]
	float MNA_AutoCloseTime;//[Offset: 0x184, Size: 0x4]
	FName MNA_ActionName;//[Offset: 0x188, Size: 0x8]
	FText MNA_ActionText;//[Offset: 0x190, Size: 0x18]
	<FName,ArkCanJumpHavenStatConfig> MenuCanJumpHavenStatMap;//[Offset: 0x1b8, Size: 0x50]
	int LotteryActivityID;//[Offset: 0x208, Size: 0x4]
	int LotteryPageID;//[Offset: 0x20c, Size: 0x4]
	void UnRegisterJumpAction(out const FName ActionName);// 0x28213a0
	void UnRegisterCanJumpAction(out const FName ActionName);// 0x2821310
	void RegisterJumpAction(out const FName ActionName, delegate JumpActionDelegate);// 0x2821060
	void RegisterCanJumpAction(out const FName ActionName, delegate JumpActionDelegate);// 0x2820f60
	void OnMenuChanged(const ArkPopupMenuBase* ChangedMenu, int ChangedMenuID, bool MenuIsOpennedFlag);// 0x2820e60
	bool OnJump_Url(out const FString[] UserParams);// 0x2820ce0
	bool OnJump_HeroPersonalization(out const FString[] UserParams);// 0x2820c00
	bool OnJump_GameletMenu(out const FString[] UserParams);// 0x2820b20
	bool OnJump_ActivityExclusiveMenu(out const FString[] CmdParams);// 0x2820a40
	bool OnJump_ActivityBarMenu(out const FString[] CmdParams);// 0x2820960
	bool OnCanJump_SeasonalGizmo(out const FString[] UserParams);// 0x2820880
	bool OnCanJump_CommercialMain(out const FString[] UserParams);// 0x28207a0
	void JumpByCommandID(const int commandID);// 0x2820680
	void Jump(FString Command);// 0x28205e0
	bool IsMenuAvailable(out const FName MenuName);// 0x2820540
	FString GetParamsFromJumpState(out const ArkJumpState JumpSwitch);// 0x2820070
	FString GetJumpCommand(int ID);// 0x281ff40
	static ArkJumpManager* Get(const Object* WorldContextObject);// 0x281fc20
	void FireMenuNotAvailableWarning(out const FName MenuName);// 0x281fb90
	void CloseDataBox();// 0x26cb690
	bool CanJump(FString Command);// 0x281fae0
	void AutoRegisterJumpAction();// 0xcac2b0

--------------------------------
Class: ArkJumpCommandConfig.TableRowBase
	int ID;//[Offset: 0x8, Size: 0x4]
	FString Command;//[Offset: 0x10, Size: 0x10]
	ArkJumpState JumpState;//[Offset: 0x20, Size: 0x1]
	FText Description;//[Offset: 0x28, Size: 0x18]

--------------------------------
Class: ArkJumpState
	bool bHideAllMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ArkCanJumpHavenStatConfig
	ArkHavenStatPropertyRef HavenStatName;//[Offset: 0x0, Size: 0xc]
	int HavenStatTargetValue;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ArkCountDownManager.ArkResourceManagerBase.ArkManagerBase.Object
	delegate PVECountDownPhaseTypeChanged;//[Offset: 0xc0, Size: 0x10]
	float WarningTime;//[Offset: 0xe0, Size: 0x4]
	FText TipsDescription;//[Offset: 0xe8, Size: 0x18]
	SoftObjectPath CountDownFilterTablePath;//[Offset: 0x100, Size: 0x18]
	float CountTime;//[Offset: 0x118, Size: 0x4]
	Actor* OwnerPrivate;//[Offset: 0x170, Size: 0x8]
	bool bRunCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]
	enum CurPhaseType;//[Offset: 0x191, Size: 0x1]
	void SetMapLevelID(int InMapLevel);// 0x26eebf0
	void SendCountTimeDataForTravel();// 0x26ee6e0
	void PausedCountDown(bool bPaused);// 0x26ee5a0
	void OnRep_PhaseType();// 0x26ee560
	void OnRep_CountTime();// 0x26ee4c0
	void OnGameFlowChange(enum LastMode, enum NewMode, float StartTime);// 0x26ee230
	void HandleCountDownConfig();// 0x26ee1b0
	static ArkCountDownManager* Get(const Object* WorldContext);// 0x26ee130

--------------------------------
Class: ArkCommonCountDownManager.ArkResourceManagerBase.ArkManagerBase.Object
	Actor* OwnerPrivate;//[Offset: 0xb8, Size: 0x8]
	ArkCommonCountDownTips* CountDownWidget;//[Offset: 0xc0, Size: 0x8]
	SoftObjectPath CommonCountDownTablePath;//[Offset: 0xf0, Size: 0x18]
	float SaveServerDataInterval;//[Offset: 0x108, Size: 0x4]
	float RemoveCountDownDataDurationTime;//[Offset: 0x10c, Size: 0x4]
	void UpdateCountDownTipsAddOrSubtractTime(const Object* WorldContextObject, FString InConfigName, int TimeOffset, FString Descriptions, bool PlayAddAnim);// 0x26e28e0
	void UpdateCountDownTips(const Object* WorldContextObject, FString InConfigName, float UpdateTime, enum InType, FString InDescription);// 0x26e2550
	void SetCountDownTipsSpeedUpOrPauseDurationTime(const Object* WorldContextObject, FString InConfigName, float InSetSpeedUpDurationTime, float InSetPauseDurationTime);// 0x26e1d90
	void OpenCountDownTips(const Object* WorldContextObject, FString InConfigName, float InDurationTime, FString InDescription, enum InType, bool InbIsDisplayTimeFormat, float UpdateTime);// 0x26e0d40
	static ArkCommonCountDownManager* Get(const Object* WorldContext);// 0x26dfe80
	bool FindCurrentCountDownByConfigName(FString InConfigName, out ArkOpenSigleCountDownData OutSigleCountDown, out int OutIndex);// 0x26dfcc0
	void AddOrSetCountDownTipsDurationTime(const Object* WorldContextObject, FString InConfigName, float InAddDurationTime, float InSetDurationTime);// 0x26dee70
	void AddCountDownTipsSpeedUpOrPauseDurationTime(const Object* WorldContextObject, FString InConfigName, float InAddSpeedUpDurationTime, float InAddPauseDurationTime);// 0x26dec10

--------------------------------
Class: ArkCommonCountDownTips.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* CountDownTimeText;//[Offset: 0x300, Size: 0x8]
	TextBlock* DescriptionText;//[Offset: 0x308, Size: 0x8]
	TextBlock* CountDownTimeOffsetText;//[Offset: 0x310, Size: 0x8]
	TextBlock* AddOrSubtractText;//[Offset: 0x318, Size: 0x8]
	TextBlock* AddOrSubtractDescriptionText;//[Offset: 0x320, Size: 0x8]
	bool bDisplayTimeFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	bool bCountDownTipsIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 0x1]
	float DurationTime;//[Offset: 0x32c, Size: 0x4]
	enum LastCountDownType;//[Offset: 0x330, Size: 0x1]
	int LastTimeValue;//[Offset: 0x334, Size: 0x4]
	int PreTimeValue;//[Offset: 0x338, Size: 0x4]
	float LastSpeedUpDurationTime;//[Offset: 0x33c, Size: 0x4]
	bool bIsHasOpenSpeedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	bool bIsShouldOpenSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 0x1]
	float LastPauseDurationTime;//[Offset: 0x344, Size: 0x4]
	bool bIsHasOpenPause;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]
	bool bIsShouldOpenPause;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x349, Size: 0x1]
	bool bIsReadyClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34a, Size: 0x1]
	FString TimeOffsetDescriptions;//[Offset: 0x350, Size: 0x10]
	float MinDurationTimeConfig;//[Offset: 0x3b4, Size: 0x4]
	float RequestNetSaveInterval;//[Offset: 0x3b8, Size: 0x4]
	float CloseNotifyTimeOffset;//[Offset: 0x3bc, Size: 0x4]
	FString AddTimeSign;//[Offset: 0x3c0, Size: 0x10]
	FString SubtractTimeSign;//[Offset: 0x3d0, Size: 0x10]
	float SpeedUpAndPauseUpdateInterval;//[Offset: 0x3e0, Size: 0x4]
	float DurationTimeUpdateInterval;//[Offset: 0x3e4, Size: 0x4]
	float CancelPauseThresholdTime;//[Offset: 0x3e8, Size: 0x4]
	bool bOutDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ec, Size: 0x1]
	void UpdateCountDownTipsAddOrSubtractTime(const Object* WorldContextObject, int TimeOffset, FString Descriptions, bool PlayAddAnim);// 0x26e2ac0
	void UpdateCountDownTips(const Object* WorldContextObject, float UpdateTime, enum InType, FString InDescription);// 0x26e2740
	void SetCountDownTipsSpeedUpOrPauseDurationTime(const Object* WorldContextObject, float InSetSpeedUpDurationTime, float InSetPauseDurationTime);// 0x26e1ef0
	void OpenCountDownTips(const Object* WorldContextObject, FString ConfigName, float InDurationTime, FString InDescription, enum InType, bool InbIsDisplayTimeFormat, float UpdateTime);// 0x26e0fb0
	void InitializeReOpenCountDownTips();// 0x26e0460
	static ArkUserDataModel* GetNotifyModel(const Object* WorldContextObject);// 0x26e0250
	static FString GetCountDownNotifyKey(enum NotifyType);// 0x26dff80
	FText ConvertToTimeFormat(int InSeconds);// 0x26df9d0
	void BP_ReadyCloseCountDownTips();// 0x305c9c0
	void BP_OpenCountDownTips();// 0x305c9c0
	void BP_OnSpeedUpOpen();// 0x305c9c0
	void BP_OnSpeedUpClose();// 0x305c9c0
	void BP_OnSpeedUpChange(bool InSpeedUp);// 0x305c9c0
	void BP_OnSetCountDownDescription();// 0x305c9c0
	void BP_OnPauseOpen();// 0x305c9c0
	void BP_OnPauseClose();// 0x305c9c0
	void BP_OnPauseChange(bool InPause);// 0x305c9c0
	void BP_OnChangeCountDownType();// 0x305c9c0
	void BP_OnAddOrSubtractTime(bool InIsAdd, int InValue);// 0x305c9c0
	void BP_DisplayOrHiddenDescription(enum Display);// 0x305c9c0
	void BP_CountDownUpdateTime(int InTime);// 0x305c9c0
	void BP_CloseCountDownTips();// 0x305c9c0
	void ArkCountDownNotifyUpdateTime(const Object* WorldContextObject, int InUpdateTime);// 0x26df890
	void ArkCountDownNotifyType(const Object* WorldContextObject, enum InType);// 0x26df7d0
	void ArkCountDownNotifyTimeOffsetDescriptions(const Object* WorldContextObject, FString Descriptions);// 0x26df6b0
	void ArkCountDownNotifySubtractTime(const Object* WorldContextObject, int InSubtractTime);// 0x26df5f0
	void ArkCountDownNotifySpeedUpTime(const Object* WorldContextObject, float InAddSpeedUpTime);// 0x26df520
	void ArkCountDownNotifyPauseTime(const Object* WorldContextObject, float InAddPauseDurationTime);// 0x26df450
	void ArkCountDownNotifyIsDisplayTimeFormat(const Object* WorldContextObject, bool InIsDisplayTimeFormat);// 0x26df380
	void ArkCountDownNotifyDurationTime(const Object* WorldContextObject, float InDurationTime);// 0x26df2b0
	void ArkCountDownNotifyDescription(const Object* WorldContextObject, FString InDescriptionText);// 0x26df190
	void ArkCountDownNotifyAddTime(const Object* WorldContextObject, int InAddTime);// 0x26df0d0
	void AddOrSetCountDownTipsDurationTime(const Object* WorldContextObject, float InAddDurationTime, float InSetDurationTime);// 0x26defd0
	void AddCountDownTipsSpeedUpOrPauseDurationTime(const Object* WorldContextObject, float InAddSpeedUpDurationTime, float InAddPauseDurationTime);// 0x26ded70

--------------------------------
Class: ArkOpenSigleCountDownData
	float UpdateTime;//[Offset: 0x0, Size: 0x4]
	float DurationTime;//[Offset: 0x4, Size: 0x4]
	FString Description;//[Offset: 0x8, Size: 0x10]
	enum Type;//[Offset: 0x18, Size: 0x1]
	float SpeedDurationTime;//[Offset: 0x1c, Size: 0x4]
	float PauseDurationTime;//[Offset: 0x20, Size: 0x4]
	bool IsDisplayTimeFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	ArkCommonCountDownConfig ArkCommonCountDownConfig;//[Offset: 0x28, Size: 0x20]
	FString DebugName;//[Offset: 0x48, Size: 0x10]
	Object* ExecuteObj;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: ArkCommonCountDownConfig.TableRowBase
	FString ConfigName;//[Offset: 0x8, Size: 0x10]
	int Weight;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ArkUnlockableLevelLoadingManager.Object
	FName[] AlwaysLoadedLayers;//[Offset: 0x28, Size: 0x10]
	ArkSectionUnlockableLayersSpec[] SectionLayerSpec;//[Offset: 0x38, Size: 0x10]
	delegate OnUnlockableLayerShown;//[Offset: 0x48, Size: 0x10]
	delegate OnAllUnlockableLayersShownDelegate;//[Offset: 0x58, Size: 0x10]
	void UnlockableLayerShownDelegate__DelegateSignature(FName InLayerName);// 0x305c9c0
	static ArkUnlockableLevelLoadingManager* Get(const Object* WorldContext);// 0x29b1060
	void AllUnlockableLayersShownDelegate__DelegateSignature();// 0x305c9c0

--------------------------------
Class: ArkSectionUnlockableLayersSpec
	FString SectionPrefix;//[Offset: 0x0, Size: 0x10]
	ArkHavenStatPropertyRef TierUnlockStat;//[Offset: 0x10, Size: 0xc]
	ArkSectionTierSubLevelContainer[] StreamingLevelsPerTier;//[Offset: 0x20, Size: 0x10]
	ArkUnlockableLevelLoadingManager* LoadingManager;//[Offset: 0x30, Size: 0x8]
	UnlockableLayerShownNotificationReceiver*[] PendingShownNotifiers;//[Offset: 0x38, Size: 0x10]
	ArkSectionUpgradeNotificationReceiver* SectionUpgradeNotificationReceiver;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: ArkSectionTierSubLevelContainer
	LevelStreaming*[] Container;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: UnlockableLayerShownNotificationReceiver.Object
	UnlockableLayerSublevelShownNotificationReceiver*[] SublevelShownNotifiers;//[Offset: 0x28, Size: 0x10]
	ArkUnlockableLevelLoadingManager* CallbackReceiver;//[Offset: 0x48, Size: 0x8]
	void OnSubLevelShown(int SubLevelIndex);// 0x29b2cf0

--------------------------------
Class: UnlockableLayerSublevelShownNotificationReceiver.Object
	LevelStreaming* StreamingLevel;//[Offset: 0x2c, Size: 0x8]
	UnlockableLayerShownNotificationReceiver* CallbackReceiver;//[Offset: 0x34, Size: 0x8]
	void OnSubLevelShown();// 0x29b2d70

--------------------------------
Class: ArkSectionUpgradeNotificationReceiver.Object
	void OnSectionTierUpgrade(int PrevTier, int NewTier);// 0x29b2c30

--------------------------------
Class: ArkNavLinkProxy.Actor.Object
	ArkNavLinkComponent* NavLinkComp;//[Offset: 0x2e8, Size: 0x8]

--------------------------------
Class: Haven_C.LevelScriptActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2f0, Size: 0x8]
	FString GetModuleName();// 0x305c9c0
	void ReceiveBeginPlay();// 0x305c9c0
	void ExecuteUbergraph_Haven(int EntryPoint, bool CallFunc_IsDedicatedServer_ReturnValue);// 0x305c9c0

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: ArkGameModeHaven_BP_C.ArkGameModeHaven.ArkGameModeBattle.ArkGameModeBase.DSGameModeBase.GameMode.GameModeBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xcc0, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0xcc8, Size: 0x8]
	byte MetaTutorialSituationMapPveFlag ;//[Offset: 0xcd0, Size: 0x1]
	LevelSequenceActor* CurrentSeq;//[Offset: 0xcd8, Size: 0x8]
	ArkHavenStatPropertyRef GameFlowStatRef;//[Offset: 0xce0, Size: 0xc]
	float DefaultNearDistance;//[Offset: 0xcec, Size: 0x4]
	MetaTutorialManager_C* MetaManager;//[Offset: 0xcf0, Size: 0x8]
	FName[] CheckMenuList;//[Offset: 0xcf8, Size: 0x10]
	bool bSettlementOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd08, Size: 0x1]
	bool NeedOpenActivityMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd09, Size: 0x1]
	bool bShouldPlayAltReturnSeq;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0a, Size: 0x1]
	bool CheckQuestShouldActive(FName RowName, Struct_MetaTutorialQuest CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, enum CallFunc_CheckQuestState_State, int CallFunc_CheckQuestState_CurStep, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x305c9c0
	void ToggleBlackScreen(bool Black);// 0x305c9c0
	void ShouldPlayAltReturnSeq(out bool ShouldPlayAlt, bool CallFunc_CheckQuestShouldActive_ReturnValue, bool CallFunc_ShouldSkipOnBoarding_ReturnValue, bool CallFunc_CheckQuestShouldActive_ReturnValue, bool CallFunc_CheckQuestShouldActive_ReturnValue, bool CallFunc_CheckQuestShouldActive_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, ArkHavenStatPropertyRef K2Node_MakeStruct_ArkHavenStatPropertyRef, bool CallFunc_BooleanOR_ReturnValue, ArkHavenRPCInterface* CallFunc_Get_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int CallFunc_GetHavenStat_OutStat, bool CallFunc_GetHavenStat_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x305c9c0
	bool IsPlayerUIDEven(ArkHavenDataManager* CallFunc_Get_ReturnValue, FString CallFunc_GetPlayerUIDAsString_ReturnValue, FString CallFunc_Right_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x305c9c0
	bool CheckSettlementOpen(ArkUserDataControllerManager* CallFunc_Get_ReturnValue, bool CallFunc_GetBool_ReturnValue);// 0x305c9c0
	bool CheckPreviousMatchSuccess(ArkSaveGameManager* CallFunc_Get_ReturnValue, ArkHavenDataManager* CallFunc_ArkGetHavenDataManager_ReturnValue, ArkSaveGame* CallFunc_GetSaveGame_ReturnValue, int64 CallFunc_GetPlayerID_ReturnValue, ArkMatchInfoLocalSave CallFunc_GetMatchInfoData_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x305c9c0
	bool CheckAnyOpenMenu(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, ArkBattleHUD* CallFunc_GetArkBattleHUD_ReturnValue, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_HasAnyMenu_ReturnValue);// 0x305c9c0
	void ToggleHavenSurvivorVisible(bool Visible, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, ArkHavenSurvivorNpc*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, ArkHavenSurvivorNpc* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x305c9c0
	void SaveLoginDateTime(int64 CurTimeStamp, FString SlotStr, BP_SaveLoginTime_C* CallFunc_CreateSaveGameObject_ReturnValue, bool CallFunc_SaveGameToSlot_ReturnValue);// 0x305c9c0
	void BeginGameOpener(ArkHavenRPCInterface* CallFunc_Get_ReturnValue, bool CallFunc_CheckOuterGameFlow_ReturnValue);// 0x305c9c0
	void ToggleVariousAppearances(bool bNewVisibility, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, ArkHavenVendorBase*[] CallFunc_GetAllActorsOfClass_OutActors, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, ArkHavenVendorBase* CallFunc_Array_Get_Item, bool CallFunc_EqualEqual_NameName_ReturnValue, int CallFunc_Array_Length_ReturnValue, Pawn* CallFunc_GetPlayerPawn_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, BP_VendorHaven_C*[] CallFunc_GetAllActorsOfClass_OutActors, BP_VendorHaven_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x305c9c0
	void PlayBackToHaven();// 0x305c9c0
	void CheckBackToHavenFlow();// 0x305c9c0
	void HideHavenSurvivors(bool Hide);// 0x305c9c0
	void OnMenuChangeDelegate_Event(const ArkPopupMenuBase* ChangedMenu, int ChangedMenuID, bool MenuIsOpennedFlag);// 0x305c9c0
	void OnLevelSequenceFinished_Event();// 0x305c9c0
	void CheckSettlementPage();// 0x305c9c0
	void TriggerOnboardQuest();// 0x305c9c0
	void GameOpener_BackToHaven();// 0x305c9c0
	void GameOpener_OnPlayerRelocated();// 0x305c9c0
	void GameOpener_NewIntro();// 0x305c9c0
	void GameOpener_OnNewIntroFinished();// 0x305c9c0
	void OnMenuChangeDelegate_Event(const ArkPopupMenuBase* ChangedMenu, int ChangedMenuID, bool MenuIsOpennedFlag);// 0x305c9c0
	void NanoBandPrompt();// 0x305c9c0
	void ReceiveBeginPlay();// 0x305c9c0
	void OnPopupActivityClose();// 0x305c9c0
	void OnCheckActivityFinished();// 0x305c9c0
	void ExecuteUbergraph_ArkGameModeHaven_BP(int EntryPoint, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, FName[] CallFunc_GetAllInputEvents_OutAllInputEvents, FName[] K2Node_MakeArray_Array, FName[] CallFunc_GetAllInputEvents_OutAllInputEvents, bool CallFunc_CheckPreviousMatchSuccess_ReturnValue, bool K2Node_CustomEvent_Hide, bool CallFunc_Not_PreBool_ReturnValue, ArkHavenSurvivorNpc*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, ArkUserDataControllerManager* CallFunc_Get_ReturnValue, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_GetBool_ReturnValue, bool CallFunc_K2_TeleportTo_ReturnValue, FString CallFunc_GetString_ReturnValue, ArkUserDataControllerManager* CallFunc_Get_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, FName[] CallFunc_GetAllInputEvents_OutAllInputEvents, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_K2_TeleportTo_ReturnValue, ArkJumpManager* CallFunc_Get_ReturnValue, ArkUserDataControllerManager* CallFunc_Get_ReturnValue, ArkBattleHUD* CallFunc_GetArkBattleHUD_ReturnValue, const ArkPopupMenuBase* K2Node_CustomEvent_ChangedMenu, int K2Node_CustomEvent_ChangedMenuID, bool K2Node_CustomEvent_MenuIsOpennedFlag, FString CallFunc_GetString_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, ArkHavenSettleBaseWidget* K2Node_DynamicCast_AsArk_Haven_Settle_Base_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_CheckSettlementOpen_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, ArkDelegateDispatcher* CallFunc_Get_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, bool CallFunc_CheckSettlementOpen_ReturnValue, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, ArkLevelSequenceManager* CallFunc_Get_ReturnValue, ArkDelegateDispatcher* CallFunc_Get_ReturnValue, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_ShouldPlayAltReturnSeq_ShouldPlayAlt, ArkPlayerControllerBattle* CallFunc_GetArkPlayerControllerBattle_ReturnValue, bool CallFunc_ShouldSkipOnBoarding_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_SetOuterGameFlow_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FName[] CallFunc_GetAllInputEvents_OutAllInputEvents, delegate K2Node_CreateDelegate_OutputDelegate, LevelSequencePlayer* CallFunc_GetSequencePlayer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, ArkPlayerControllerBattle* CallFunc_GetArkPlayerControllerBattle_ReturnValue, bool CallFunc_SetOuterGameFlow_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, ArkPromptManager* CallFunc_GetArkPromptManager_ReturnValue, FName[] K2Node_MakeArray_Array, ArkBattleHUD* CallFunc_GetArkBattleHUD_ReturnValue, const ArkPopupMenuBase* K2Node_CustomEvent_ChangedMenu, int K2Node_CustomEvent_ChangedMenuID, bool K2Node_CustomEvent_MenuIsOpennedFlag, ArkPromptManager* CallFunc_GetArkPromptManager_ReturnValue, ArkPopupMenuNanoBand* K2Node_DynamicCast_AsArk_Popup_Menu_Nano_Band, bool K2Node_DynamicCast_bSuccess, ArkHavenVendorBase* CallFunc_GetActorOfClass_ReturnValue, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, LevelSequenceActor* CallFunc_CreateLevelSequencePlayer_OutActor, LevelSequencePlayer* CallFunc_CreateLevelSequencePlayer_ReturnValue, LevelSequencePlayer* CallFunc_GetSequencePlayer_ReturnValue, FName Temp_name_Variable, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, ArkBattleHUD* CallFunc_GetArkBattleHUD_ReturnValue, ArkBattleHUD* CallFunc_GetArkBattleHUD_ReturnValue, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, ArkPlayerCameraManager* CallFunc_GetLocalPlayerCameraManager_ReturnValue, ArkBattleHUD* CallFunc_GetArkBattleHUD_ReturnValue, bool CallFunc_SetOuterGameFlow_ReturnValue, bool CallFunc_SetOuterGameFlow_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, ArkHavenRPCInterface* CallFunc_Get_ReturnValue, ArkGameStateHaven_BP_C* K2Node_DynamicCast_AsArk_Game_State_Haven_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_CheckOuterGameFlow_ReturnValue, ArkHavenRPCInterface* CallFunc_Get_ReturnValue, bool CallFunc_CheckOuterGameFlow_ReturnValue, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool Temp_bool_Variable, ArkHavenRPCInterface* CallFunc_Get_ReturnValue, FName K2Node_Select_Default, bool CallFunc_CheckOuterGameFlow_ReturnValue, ArkLevelSequenceBase* CallFunc_GenerateNewLevelSequenceObj_ReturnValue, ArkFestActivityManager* CallFunc_Get_ReturnValue, bool CallFunc_IsNeedOpenActivityWidget_ReturnValue, bool CallFunc_IsAllActivityCheckFinished_ReturnValue, bool CallFunc_PopupActivity_ReturnValue, ArkFestActivityManager* CallFunc_Get_ReturnValue, ArkHavenStatPropertyRef K2Node_MakeStruct_ArkHavenStatPropertyRef, int CallFunc_GetHavenStat_OutStat, bool CallFunc_GetHavenStat_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, ArkGameInstance* CallFunc_GetArkGameInstance_ReturnValue, bool CallFunc_GetSkipToMatchmakingEnabled_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, ArkFestActivityManager* CallFunc_Get_ReturnValue);// 0x305c9c0
	LuaOverridesClass LUA_OVERRIDES_ArkGameModeHaven_BP_C;//[Size: 0x0]

--------------------------------
Class: ArkGameModeHaven.ArkGameModeBattle.ArkGameModeBase.DSGameModeBase.GameMode.GameModeBase.Info.Actor.Object
	ArkUnlockableLevelLoadingManager* ArkUnlockableLevelLoadingManager;//[Offset: 0xbf8, Size: 0x8]
	ArkHavenRPCInterface* RPCInterface;//[Offset: 0xc00, Size: 0x8]
	bool bUseDefaultItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc08, Size: 0x1]
	bool bCanAddWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc09, Size: 0x1]
	bool bIsOpener;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0a, Size: 0x1]
	bool bRandomizeEnterHavenStartSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0b, Size: 0x1]
	Vector EnterHavenStartSpotMax;//[Offset: 0xc0c, Size: 0xc]
	Vector EnterHavenStartSpotMin;//[Offset: 0xc18, Size: 0xc]
	ArkHavenAIManager* AIManager;//[Offset: 0xc28, Size: 0x8]
	class PIPAnouncementManager* PIPAnouncementManagerClass;//[Offset: 0xc80, Size: 0x8]
	class ArkHavenNanoBandInfoManager* NanoBandInfoManagerClass;//[Offset: 0xc90, Size: 0x8]
	class ArkHavenNPCAnimFootSyncManager* NPCAnimFootSyncManagerClass;//[Offset: 0xca0, Size: 0x8]
	ArkHavenNPCAnimFootSyncManager* NPCAnimFootSyncManager;//[Offset: 0xca8, Size: 0x8]
	class ArkHavenNPCPropsPool* NPCPropsPoolClass;//[Offset: 0xcb0, Size: 0x8]
	ArkHavenNPCPropsPool* NPCPropsPool;//[Offset: 0xcb8, Size: 0x8]
	void ClearMetaTutorialProgress(int InBitEnum);// 0x275e9a0
	void CallLua_EnterSoloMap(FString MapName);// 0x305c9c0
	void CallLua_ArkPostLoginHaven();// 0x305c9c0

--------------------------------
Class: ArkGameModeBattle.ArkGameModeBase.DSGameModeBase.GameMode.GameModeBase.Info.Actor.Object
	ArkItemLootBoxConfig ItemLootBoxConfig;//[Offset: 0x3d8, Size: 0x50]
	ArkWeaponPrinterConfig WeaponPrinterConfig;//[Offset: 0x428, Size: 0x8]
	<class ArkItem,int> DefaultItemClasses;//[Offset: 0x430, Size: 0x50]
	<class ArkItem,int> AdditiveItemClasses;//[Offset: 0x480, Size: 0x50]
	class ArkGameBuff[] DefaultBuffClasses;//[Offset: 0x4d0, Size: 0x10]
	ArkExchangeGameConfig ExchangeGameConfig;//[Offset: 0x4e0, Size: 0x210]
	ArkServicingStoreConfig ServicingStoreConfig;//[Offset: 0x6f0, Size: 0x90]
	bool bSupportReconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x780, Size: 0x1]
	bool bEnableAutoStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x781, Size: 0x1]
	FName GameBoundarySpecificTag;//[Offset: 0x784, Size: 0x8]
	bool bEnableBattleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78c, Size: 0x1]
	class Actor[] BattleAreaIgnoreClasses;//[Offset: 0x790, Size: 0x10]
	bool bEnableAutoEliminated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a0, Size: 0x1]
	float WaitTimeForRelife;//[Offset: 0x7a4, Size: 0x4]
	float DelayTimeForEnableGiveUp;//[Offset: 0x7a8, Size: 0x4]
	float DelayTimeForEnableDyingGiveUp;//[Offset: 0x7ac, Size: 0x4]
	bool EnableDyingGiveUpToDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b0, Size: 0x1]
	float SceneItemDropRange;//[Offset: 0x7b4, Size: 0x4]
	float BootyItemDropRange;//[Offset: 0x7b8, Size: 0x4]
	float AIItemDropDistanceFromSpawnPoint;//[Offset: 0x7bc, Size: 0x4]
	float PlayerItemDropDistanceFromSpawnPoint;//[Offset: 0x7c0, Size: 0x4]
	float TreasureItemDropDistanceFromSpawnPoint;//[Offset: 0x7c4, Size: 0x4]
	<enum,ArkNanometerFieldInfo> NanometerFieldConfig;//[Offset: 0x7c8, Size: 0x50]
	bool bSpecialDemoVersion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x818, Size: 0x1]
	enum DSGameState;//[Offset: 0x819, Size: 0x1]
	ArkInGameEventsRandomPool[] RandomEventPool;//[Offset: 0x820, Size: 0x10]
	ArkInGameEventLocationRules[] RandomEventLocationRules;//[Offset: 0x830, Size: 0x10]
	float MaxMultiKillInteval;//[Offset: 0x840, Size: 0x4]
	float MaxAssistInteval;//[Offset: 0x844, Size: 0x4]
	bool bIsBeginMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x848, Size: 0x1]
	bool bCachedIntegratedMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x854, Size: 0x1]
	float AutoExitProcessTime;//[Offset: 0x868, Size: 0x4]
	float EmptyDSMatchEndTimeOut;//[Offset: 0x86c, Size: 0x4]
	bool bAllowFriendlyFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x870, Size: 0x1]
	bool bAllowFriendlyHitEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x871, Size: 0x1]
	float FriendlyAIDamageRatio;//[Offset: 0x874, Size: 0x4]
	float DeSyncAIExpPct;//[Offset: 0x878, Size: 0x4]
	bool bGuardMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87c, Size: 0x1]
	bool bFillRobot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87d, Size: 0x1]
	bool bNotAlone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87e, Size: 0x1]
	float WaitRoomAutoStartTime;//[Offset: 0x880, Size: 0x4]
	bool bPVPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x884, Size: 0x1]
	bool bRobotRandHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x885, Size: 0x1]
	bool bRobotBirthWithSyncAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x886, Size: 0x1]
	int RobotRandSkinRate;//[Offset: 0x888, Size: 0x4]
	int RobotRandBagRate;//[Offset: 0x88c, Size: 0x4]
	delegate GameRestartEvent;//[Offset: 0x8a8, Size: 0x10]
	int DefaultActiveScoreNodeCount;//[Offset: 0x8b8, Size: 0x4]
	class ArkRobotBTBPBase* RobotBTBPClass;//[Offset: 0x8c0, Size: 0x28]
	ArkRobotBTBPBase* RobotBTBP;//[Offset: 0x8e8, Size: 0x8]
	float ReOpenServicingStoreMinTime;//[Offset: 0x900, Size: 0x4]
	float RadialDamageToPlayerScale;//[Offset: 0x904, Size: 0x4]
	float RadialDamageWithOutPlayerScale;//[Offset: 0x908, Size: 0x4]
	float ServerCheckHitDistance;//[Offset: 0x90c, Size: 0x4]
	bool ServerLineCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x910, Size: 0x1]
	FName HavenMap;//[Offset: 0x914, Size: 0x8]
	DataTable* RobotTeamTable;//[Offset: 0x920, Size: 0x8]
	DataTable* RobotTeamAbilityTable;//[Offset: 0x928, Size: 0x8]
	FName[] RobotTeams;//[Offset: 0x930, Size: 0x10]
	bool bRobotUseSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x940, Size: 0x1]
	bool bEnableCombatMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x941, Size: 0x1]
	bool bEnableSpawnPickups;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x942, Size: 0x1]
	class ArkBlueprintFragmentPickUp[] SoftBlueprintFragmentClass;//[Offset: 0x948, Size: 0x10]
	class Object[] BlueprintFragmentClass;//[Offset: 0x958, Size: 0x10]
	bool ShouldDropBlueprintFragment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x968, Size: 0x1]
	bool bShouldDropScoreItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x969, Size: 0x1]
	bool bShouldAIGenerateLoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96a, Size: 0x1]
	int MaxTeamMemberCount;//[Offset: 0x96c, Size: 0x4]
	class ArkPlayer* RobotClass;//[Offset: 0x970, Size: 0x8]
	class ArkRobotController[] RobotControlArray;//[Offset: 0x978, Size: 0x10]
	int[] RobotSuitArray;//[Offset: 0x988, Size: 0x10]
	FText[] RobotNameArray;//[Offset: 0x998, Size: 0x10]
	DataTable* DT_RobotNames;//[Offset: 0x9a8, Size: 0x8]
	DataTable* RobotItemTable;//[Offset: 0xa00, Size: 0x8]
	float MaxDefencePercentage;//[Offset: 0xa08, Size: 0x4]
	int NumTeams;//[Offset: 0xa0c, Size: 0x4]
	ArkGameStateBattle* MyGameStateBattle;//[Offset: 0xa10, Size: 0x8]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa18, Size: 0x1]
	<Controller*,int> TeamMap;//[Offset: 0xa20, Size: 0x50]
	<Controller*,PlayerIDMap(UInt64Property)> PlayerIDMap;//[Offset: 0xa70, Size: 0x50]
	bool bCanDropItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf1, Size: 0x1]
	float RobotDamageModifierToPlayer;//[Offset: 0xaf4, Size: 0x4]
	float RobotDamageModifierToNpc;//[Offset: 0xaf8, Size: 0x4]
	float RobotDamageModifierToRobot;//[Offset: 0xafc, Size: 0x4]
	bool bSupportResistDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb00, Size: 0x1]
	bool bSupportResistDeath_OverSea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb01, Size: 0x1]
	bool bSupportRelife;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb02, Size: 0x1]
	int MaxRelifeCount;//[Offset: 0xb04, Size: 0x4]
	bool bSupportSettlement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb08, Size: 0x1]
	float PlayerSpawnInvincibleTime;//[Offset: 0xb0c, Size: 0x4]
	bool SupportSpawnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb10, Size: 0x1]
	bool bSupportRandLandRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb11, Size: 0x1]
	bool bSupportPauseShuttle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb13, Size: 0x1]
	SoftObjectPath MapLootDataTablePath;//[Offset: 0xb18, Size: 0x18]
	int ForbiddenActionState;//[Offset: 0xb30, Size: 0x4]
	int RobotTeamStartIndex;//[Offset: 0xb34, Size: 0x4]
	bool bNoWorldMapProductMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb38, Size: 0x1]
	bool bForceNoInfiniteClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb39, Size: 0x1]
	bool bBornWithFullClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb3a, Size: 0x1]
	bool bInfiniteClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb3b, Size: 0x1]
	bool bCanOpenBag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb3c, Size: 0x1]
	bool bSupportPVE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb3d, Size: 0x1]
	bool bTrackEliteDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb3e, Size: 0x1]
	bool bCanExecuteDyingNpc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb3f, Size: 0x1]
	bool bAllowDyingUponExecution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb40, Size: 0x1]
	ArkServerTSS* ServerTSS;//[Offset: 0xb48, Size: 0x8]
	ArkDSSServer* ServerDSS;//[Offset: 0xb50, Size: 0x8]
	bool bShowDmgNumber;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb60, Size: 0x1]
	<enum> PlayerItemBlacklist;//[Offset: 0xb68, Size: 0x50]
	bool bShouldIgnoreAllDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb8, Size: 0x1]
	ArkShuttleCommonConfig* ShuttleCommonConfig;//[Offset: 0xbc0, Size: 0x8]
	DataTable* ShuttleStateTable;//[Offset: 0xbc8, Size: 0x8]
	DataTable* ShuttleSpawnTable;//[Offset: 0xbd0, Size: 0x8]
	float MasterRate;//[Offset: 0xbd8, Size: 0x4]
	int MasterThreshold;//[Offset: 0xbdc, Size: 0x4]
	int MasterDecimal;//[Offset: 0xbe0, Size: 0x4]
	float MasterAdjustRate;//[Offset: 0xbe4, Size: 0x4]
	bool bAutoExitReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe8, Size: 0x1]
	bool bAutoExitTacReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe9, Size: 0x1]
	bool bAllowRayTracingEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbea, Size: 0x1]
	bool bUseTeamStartWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbeb, Size: 0x1]
	DataTable* TeamStartWeightTable;//[Offset: 0xbf0, Size: 0x8]
	void UpdateDSGameState(enum NewState);// 0x26c22a0
	void TrySetParamFromURL(FString InUrl);// 0x275b0d0
	bool TrackEliteDamage();// 0x275b0b0
	void TeleportToBattleFieldDecideIndexAndStart(ArkPlayerStateBattle* PlayerState, out int OutPlayerIndex, out PlayerStart* OutBestStart);// 0x275af90
	void TeleportToBattleField(Controller* Controller);// 0x275af00
	bool SupportPVE();// 0x275aee0
	void StartUpTheLog(FString StrDSID);// 0x275ae40
	void SpawnTeamRobot(FName TeamName, int TeamId);// 0x275ad80
	ArkPlayer* SpawnTeamMate(class ArkPlayer PlayerClass, int ChooseTeamID, out const Vector Location);// 0x275ac70
	ArkPlayer* SpawnSpecialRobot(int ChooseTeamID, class ArkRobotController ControllerClass, Vector Pos, Rotator Rotator, FName ItemSet, int gender, int SuitID, int HeroID);// 0x275aa20
	void SpawnRobot(int ChooseTeamID, int ControllerIndex, class ArkRobotController ControllerClass);// 0x275a920
	ArkRobotController* SpawnGuard(int ChooseTeamID, out const Vector Location);// 0x275a840
	void SpawnAllRobot();// 0x275a820
	void SetTrainingMode(bool _bIsTrainingMode);// 0x275a7a0
	void SetTeamFightResult(int WinTeamID);// 0x275a670
	void SetShouldAIGenerateLoot(bool _ShouldAIGenerateLoot);// 0x275a5f0
	void SetRobotTeamStartIndex(int InIndex);// 0x275a570
	void SetInfiniteClip(bool InValue);// 0x275a450
	void SetForceNoInfiniteClip(bool InValue);// 0x275a2d0
	void SetCanJoinGame(bool InCanJoinGame);// 0x275a240
	void SetBornWithFullClip(bool InValue);// 0x275a1b0
	void OnTriggerGameplayEventDeath(ArkGameplayEventWrapper* DeathGameplayEvent);// 0x275a030
	void OnTeamSettlementFromGS(int TeamId);// 0x12c2b10
	void OnGameModeBattleStartPlay_BP();// 0x305c9c0
	void OnGameFlowChanged_BP(enum GameFlowType);// 0x305c9c0
	void OnArkWorldInitStatusUpdated(enum NewStatus);// 0x27590c0
	bool IsSoloPVPMode();// 0x2759090
	bool IsSameTeam(Controller* Controller1, Controller* Controller2);// 0x2758fd0
	bool IsMiniPVPMode();// 0x2758f10
	void InitGameplayDataFromGS();// 0x2758e90
	void GotoGameFlow(enum NewMode);// 0x2758de0
	PlayerStart* GetTeamStartPointByName(int TeamId, FString StartPointName);// 0x2758cf0
	PlayerStart* GetTeamStartPoint(int TeamId);// 0x2758c60
	int GetTeamID(Controller* Controller);// 0x2758bd0
	float GetMaxDefencePercentage();// 0x2758bb0
	float GetMatchTimeSecond();// 0x2758b80
	SoftObjectPath GetMapLootDataTablePath();// 0x2758af0
	ArkItemLootBoxConfig GetLootBoxConfig();// 0x2758a00
	bool GetCanJoinGame();// 0x27589b0
	void FinishTutorial();// 0x2758910
	void EndTheGame(int TeamId, int ShuttleID);// 0x2758850
	void CollectScanTargetInfos(out ArkScanSandTableConfig OutConfig, out ArkScanTargetInfo[] OutInfos);// 0x27586f0
	static bool CanExecuteDyingNpc(const Object* WorldContext);// 0x2758630
	bool CallLua_ValidateTicket(FString Ticket);// 0x305c9c0
	void CallLua_UploadPlayerInfoToGS(ArkPlayer* PlayerPtr);// 0x305c9c0
	void CallLua_UploadChartData(bool bSpecifications, FString ChartData);// 0x305c9c0
	void CallLua_TeamSettlement(int TeamId, int ShuttleID);// 0x305c9c0
	void CallLua_StartFight();// 0x305c9c0
	void CallLua_SoloOfflineMatchStart();// 0x305c9c0
	void CallLua_SavePlayerQuestInfo(ArkPlayerStateBattle* PS);// 0x305c9c0
	void CallLua_SaveKeyBinding(FString KeyBindingDataString);// 0x305c9c0
	void CallLua_ReverseRegForFork();// 0x305c9c0
	void CallLua_ReportServerTraveled();// 0x305c9c0
	void CallLua_ReportGameMapInfo();// 0x305c9c0
	void CallLua_ReportDSStatus();// 0x305c9c0
	void CallLua_ReportCanFork();// 0x305c9c0
	void CallLua_PlayerQuitMatch(ArkPlayerStateBattle* PlayerState);// 0x305c9c0
	void CallLua_PlayerEnterSoloOffline();// 0x305c9c0
	void CallLua_OnReconnectionLimit(ArkPlayerStateBattle* PlayerState);// 0x305c9c0
	void CallLua_Login(FString Options, PlayerController* PC);// 0x305c9c0
	bool CallLua_IsCustomRoom();// 0x305c9c0
	int CallLua_GetGSPlayerInfosCount();// 0x305c9c0
	void CallLua_GameFinishedSettlement(int WinTeamID, int DynamicData, out const ArkPlayerStateBattle*[] PlayerStates, bool IsSimulate);// 0x305c9c0
	void CallLua_ForcePlayerQuitMatch(FString PlayerUID);// 0x305c9c0
	void CallLua_FinishTutorial();// 0x305c9c0
	void CallLua_EnterSoloMapByNewURL(FString NewURL, FString PlayerTravelData, FString InRoundInfo);// 0x305c9c0
	void CallLua_EnterSoloMapByLevelID(int LevelID);// 0x305c9c0
	void CallLua_ChangeMapForIntegratedMap();// 0x305c9c0
	bool CallLua_CanJoinGameChanged();// 0x305c9c0
	void CallLua_ArkRobotLogin(ArkPlayerStateBattle* PS);// 0x305c9c0
	void CallLua_ArkPostLogin(PlayerController* PC, ArkPlayerStateBattle* PS);// 0x305c9c0
	void CallLua_ApllyPermanentAttributes(ArkPlayerStateBattle* PS);// 0x305c9c0
	float CalcPlayerRankScore(ArkPlayerStateBattle* PS);// 0x2758590
	void ArkRestartGame();// 0x7fc2b0
	static bool AllowDyingUponExecution(const Object* WorldContext);// 0x2758510
	float AdjustPawnDamageByGameMode(float DamageAmount, ArkCharacterBase* InstigatorChar, ArkCharacterBase* VictimChar, class ArkDamageType DamageTypeClass, out const HitResult Hit, Actor* DamageCauser);// 0x2758300

--------------------------------
Class: ArkGameModeBase.DSGameModeBase.GameMode.GameModeBase.Info.Actor.Object

--------------------------------
Class: DSGameModeBase.GameMode.GameModeBase.Info.Actor.Object
	bool LuaHandleRestartPlayer(Controller* NewPlayer);// 0x305c9c0
	void CallLua_StartPlay();// 0x305c9c0
	void CallLua_StartMatch();// 0x305c9c0
	void CallLua_PreLogin(FString Options, FString Address, FString UniqueId, out FString ErrorMessage);// 0x305c9c0
	void CallLua_PostLogin(PlayerController* NewPlayer);// 0x305c9c0
	void CallLua_Logout(Controller* Exiting);// 0x305c9c0
	FString CallLua_InitNewPlayer(PlayerController* NewPlayerController, FString UniqueId, FString Options, FString Portal);// 0x305c9c0
	void CallLua_InitGame(FString MapName, FString Options, out FString ErrorMessage);// 0x305c9c0
	void CallLua_HandleMatchIsWaitingToStart();// 0x305c9c0
	void CallLua_HandleMatchHasStarted();// 0x305c9c0
	void CallLua_HandleMatchHasEnded();// 0x305c9c0
	void CallLua_HandleMatchAborted();// 0x305c9c0
	void CallLua_HandleLeavingMap();// 0x305c9c0
	void CallLua_EndMatch();// 0x305c9c0

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x388, Size: 0x8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x390, Size: 0x1]
	int NumSpectators;//[Offset: 0x394, Size: 0x4]
	int NumPlayers;//[Offset: 0x398, Size: 0x4]
	int NumBots;//[Offset: 0x39c, Size: 0x4]
	float MinRespawnDelay;//[Offset: 0x3a0, Size: 0x4]
	int NumTravellingPlayers;//[Offset: 0x3a4, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x3a8, Size: 0x8]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x3b0, Size: 0x10]
	float InactivePlayerStateLifeSpan;//[Offset: 0x3c0, Size: 0x4]
	int MaxInactivePlayers;//[Offset: 0x3c4, Size: 0x4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 0x1]
	void StartMatch();// 0x29c4340
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x4b982f0
	void Say(FString Msg);// 0x4b98250
	void RestartGame();// 0x4b97fb0
	bool ReadyToStartMatch();// 0x4b97f80
	bool ReadyToEndMatch();// 0x4b97f50
	void K2_OnSetMatchState(FName NewState);// 0x305c9c0
	bool IsMatchInProgress();// 0x4b6eeb0
	bool HasMatchEnded();// 0x4b97c20
	FName GetMatchState();// 0x4b97b10
	void EndMatch();// 0x29c42e0
	void AbortMatch();// 0x4b973b0

--------------------------------
Class: PIPAnouncementManager.Actor.Object
	bool bRoutineTaskPiped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	ArkHavenRPCInterface* HavenRPCInterface;//[Offset: 0x300, Size: 0x8]
	bool IsPIPEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	int LowWeaponStockThreshold;//[Offset: 0x32c, Size: 0x4]
	int8 DailyState;//[Offset: 0x330, Size: 0x1]
	int8 WeeklyState;//[Offset: 0x331, Size: 0x1]
	void SurvivorFound(byte Result, out const FString[] SurvivorIDs);// 0x29eaa30
	void SetPipEnabled(bool Value);// 0x29ea970
	void RemindWeeklyQuests();// 0xae2270
	void RemindDailyQuests();// 0xae2270
	bool PopFirstPIP(out PIPMessage outValue);// 0x29ea850
	bool IsSectionUnlocked(enum SectionID);// 0x29ea4e0
	bool IsQueueEmpty();// 0x29ea4b0
	void InitPIPManager();// 0x29ea490
	FText GetStringFromStringTable(FName StringTableID, FString Key);// 0x29ea350
	int GetSectionTier(enum SectionID);// 0x29ea2c0
	void EnablePIPMessages(byte EventSource);// 0x29e9380
	void DisablePIPMessages(byte EventSource, bool RemoveWidget);// 0x29e92b0
	void DecideQuestReminderIntoQueue();// 0x29e9290
	void ClearPIPQueue();// 0x29e9190
	bool CanSectionBeUpgraded(enum SectionID);// 0x29e90c0
	void AddPIP(int Priority, FName PIPType, int AnimationTime);// 0x29e8f30

--------------------------------
Class: PIPMessage
	FName Message;//[Offset: 0x0, Size: 0x8]
	int Priority;//[Offset: 0x8, Size: 0x4]
	int AnimationTime;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ArkHavenNanoBandInfoManager.Actor.Object
	bool bIsNanoBandInfoEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	int PlayerLevelCache;//[Offset: 0x2ec, Size: 0x4]
	int NanoBandScoreCache;//[Offset: 0x2f0, Size: 0x4]
	int TargetPlayerLevel;//[Offset: 0x2f4, Size: 0x4]
	int TargetNanoBandScore;//[Offset: 0x2f8, Size: 0x4]
	void UnRegisterAllEvent();// 0x27b04f0
	void SetNanoBandInfoEnabled(bool bIsEnabled);// 0x27b0390
	void RegisterAllEvent();// 0x27b0160
	void OnPlayerLevelUp();// 0xbb6730
	void OnNanoBandChange();// 0x26314b0
	bool IsPlayerLevelInit();// 0x27af8c0
	bool IsNanoBandScoreInit();// 0x27af890
	void InitPlayerLevelCache(int InPlayerLevel);// 0x27af810
	void InitNanoBandInfoManager();// 0x77ed40
	void InitNanoBandInfo();// 0x27af7f0
	void GetNanoBandScoreReq();// 0x27af5f0
	bool GetCurrentPlayerLevel(out int OutCurrentPlayerLevel);// 0x27af190
	bool GetCurrentNanoBandScore(out int OutCurrentNanoBandScore);// 0x27af0f0
	void EnableNanoBandInfo();// 0xcbca30
	void DisableNanoBandInfo(const bool ForceHideWidget);// 0x1892110
	void CheckPlayerLevelUp();// 0x27af000
	void CheckNanoBandChange();// 0x27aefe0

--------------------------------
Class: ArkHavenNPCAnimFootSyncManager.Object
	ArkHavenNPCAnimFootSyncProvider* MoveStateFootSyncProvider;//[Offset: 0x28, Size: 0x8]
	ArkHavenNPCAnimFootSyncProvider* RLMoveToIdleStateFootSyncProvider;//[Offset: 0x30, Size: 0x8]
	ArkHavenNPCAnimFootSyncProvider* LLMoveToIdleStateFootSyncProvider;//[Offset: 0x38, Size: 0x8]
	ArkHavenNPCAnimFootSyncSequence MoveAnimSequence;//[Offset: 0x40, Size: 0x10]
	ArkHavenNPCAnimFootSyncSequence LLMoveToIdleAnimSequence;//[Offset: 0x50, Size: 0x10]
	ArkHavenNPCAnimFootSyncSequence RLMoveToIdleAnimSequence;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: ArkHavenNPCAnimFootSyncProvider.Object
	void GetCurrentSync(SkeletalMeshComponent* SkeletalMesh, out float Time, out float Position);// 0x27af230

--------------------------------
Class: ArkHavenNPCAnimFootSyncSequence
	AnimSequence* AnimSequence;//[Offset: 0x0, Size: 0x8]
	float MaxTime;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ArkHavenNPCPropsPool.Object
	<PrimaryAssetId,ArkHavenNPCPropPool*> PropPools;//[Offset: 0x28, Size: 0x50]
	<enum,FName> AttachmentPoints;//[Offset: 0x78, Size: 0x50]

--------------------------------
Class: PrimaryAssetId
	PrimaryAssetType PrimaryAssetType;//[Offset: 0x0, Size: 0x8]
	FName PrimaryAssetName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: PrimaryAssetType
	FName Name;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ArkHavenNPCPropPool.Object
	ArkHavenNPCPropPoolConfig* Config;//[Offset: 0x28, Size: 0x8]
	ArkHavenNPCProp*[] Props;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: ArkHavenNPCPropPoolConfig.PrimaryDataAsset.DataAsset.Object
	int InitialCount;//[Offset: 0x30, Size: 0x4]
	float UniformScale;//[Offset: 0x34, Size: 0x4]
	float BoundScale;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: ArkHavenNPCProp.Actor.Object

--------------------------------
Class: ArkItemLootBoxConfig
	<int,ArkItemLootBoxGroupConfig> Groups;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: ArkItemLootBoxGroupConfig
	int RandAmountMin;//[Offset: 0x0, Size: 0x4]
	int RandAmountMax;//[Offset: 0x4, Size: 0x4]
	FName[] LootNames;//[Offset: 0x8, Size: 0x10]
	FName[] ShareableLootNames;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ArkWeaponPrinterConfig
	int RandAmountMin;//[Offset: 0x0, Size: 0x4]
	int RandAmountMax;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ArkNanometerFieldInfo
	float RebirthIntervalTime;//[Offset: 0x0, Size: 0x4]
	FName[] LootNameArray;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ArkInGameEventsRandomPool
	int PoolID;//[Offset: 0x0, Size: 0x4]
	<int,float> EventWeight;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: ArkInGameEventLocationRules
	int[] EventIDs;//[Offset: 0x0, Size: 0x10]
	float IntervalDistance;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ArkBlueprintFragmentPickUp.ArkItemPickUp.ArkPickUp.ArkInteractiveActor.ArkStaticActor.Actor.Object
	float BlueprintLootMultiple;//[Offset: 0x968, Size: 0x4]
	float BlueprintLootPowBase;//[Offset: 0x96c, Size: 0x4]
	float BlueprintLootdivisor;//[Offset: 0x970, Size: 0x4]
	bool TeamShare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x974, Size: 0x1]
	int Count;//[Offset: 0x978, Size: 0x4]
	ArkHavenStatPropertyRef HavenStat;//[Offset: 0x97c, Size: 0xc]

--------------------------------
Class: ArkItemPickUp.ArkPickUp.ArkInteractiveActor.ArkStaticActor.Actor.Object
	class ArkItem* OverrideItemClass;//[Offset: 0x930, Size: 0x8]
	int ItemCount;//[Offset: 0x938, Size: 0x4]
	FString ItemAttributes;//[Offset: 0x940, Size: 0x10]
	bool UseItemInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x950, Size: 0x1]
	ArkItem* DefaultItem;//[Offset: 0x958, Size: 0x8]
	bool bSaveToHaven;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x960, Size: 0x1]
	void OnRep_ItemCount();// 0x2814290
	void OnRep_ItemAttributes();// 0xca5a50
	int GetItemQuality();// 0x2813060

--------------------------------
Class: ArkServerTSS.Object
	<ControlChannels_Key(UInt64Property),ArkControlChannel*> ControlChannels;//[Offset: 0xa0, Size: 0x50]
	<UserTSSByUID_Key(UInt64Property),ArkUserTSS*> UserTSSByUID;//[Offset: 0xf0, Size: 0x50]
	<NetConnection*,ArkTssUserInfo> UserInfos;//[Offset: 0x140, Size: 0x50]
	<TssUserInfoUID_Key(UInt64Property),ArkTssUserInfo> TssUserInfoUID;//[Offset: 0x1e0, Size: 0x50]
	void HandlePlayerWeaponFireEvent(ArkGameplayEventWrapper* GameplayEvent);// 0x107d1f0
	void HandlePlayerDeathEvent(ArkGameplayEventWrapper* GameplayEvent);// 0x29425b0
	void HandlePlayerDamageEvent(ArkGameplayEventWrapper* GameplayEvent);// 0x2942530

--------------------------------
Class: ArkControlChannel.ControlChannel.Channel.Object

--------------------------------
Class: ControlChannel.Channel.Object

--------------------------------
Class: ArkUserTSS.Object
	ArkControlChannel* ControlChannel;//[Offset: 0x88, Size: 0x8]
	ArkServerTSS* ServerTSS;//[Offset: 0x90, Size: 0x8]
	void DoServerTick();// 0x29bb370
	void DoGetReportAntiData();// 0x29bb350
	void DoClientTick();// 0x29bb330

--------------------------------
Class: ArkTssUserInfo
	FString StrUserID;//[Offset: 0x0, Size: 0x10]
	UInt64Property UserID;//[Size: 0x8]
	int ChannelID;//[Offset: 0x18, Size: 0x4]
	int AccountType;//[Offset: 0x1c, Size: 0x4]
	int AreaId;//[Offset: 0x20, Size: 0x4]
	FString ClientIp;//[Offset: 0x28, Size: 0x10]
	FString PlayerName;//[Offset: 0x38, Size: 0x10]
	int TeamId;//[Offset: 0x48, Size: 0x4]
	int PlayerLevel;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: ArkDSSServer.Object
	<FString,ArkDSSUserInfo> PlayerMap;//[Offset: 0x30, Size: 0x50]
	<NetConnection*,FString> SessionMapByConnetion;//[Offset: 0x80, Size: 0x50]
	<FString,ArkDSSUserInfo> NewSessionsToDo;//[Offset: 0xd0, Size: 0x50]
	<FString,ArkDSSSessionData> SessionClientData;//[Offset: 0x178, Size: 0x50]
	<FString,ArkDSSSessionData> SessionCursorData;//[Offset: 0x1c8, Size: 0x50]
	ArkDSSCheatingComplaint[] AllCheatingComplaints;//[Offset: 0x218, Size: 0x10]
	void DoServerTick();// 0x12ff820
	void DoSendMessages();// 0x12ff800
	void DoRequestMessages();// 0x12ff7e0

--------------------------------
Class: ArkDSSUserInfo
	FString StrPlayerID;//[Offset: 0x0, Size: 0x10]
	UInt64Property PlayerId;//[Size: 0x8]
	int ChannelID;//[Offset: 0x18, Size: 0x4]
	int AreaId;//[Offset: 0x1c, Size: 0x4]
	FString ClientIp;//[Offset: 0x20, Size: 0x10]
	FString PlayerName;//[Offset: 0x30, Size: 0x10]
	NetConnection* NetConnection;//[Offset: 0x40, Size: 0x8]
	ControlChannel* ControlChannel;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: ArkDSSSessionData
	ArkDSSRawData[] Data;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ArkDSSRawData
	byte[] Data;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ArkDSSCheatingComplaint
	FString ClaimantPlayerId;//[Offset: 0x0, Size: 0x10]
	FString RespondentPlayerId;//[Offset: 0x10, Size: 0x10]
	FString Description;//[Offset: 0x20, Size: 0x10]
	int Timestamp;//[Offset: 0x30, Size: 0x4]
	FString BattleID;//[Offset: 0x38, Size: 0x10]
	FString SessionId;//[Offset: 0x48, Size: 0x10]
	FString[] Categories;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: ArkShuttleCommonConfig.DataAsset.Object
	class Actor* ShuttleClass;//[Offset: 0x30, Size: 0x8]
	class Actor* CinematicShuttleClass;//[Offset: 0x38, Size: 0x8]
	class ArkShuttleInteractiveActor* InteractiveActorClass;//[Offset: 0x40, Size: 0x8]
	float SpawnMaxRadius;//[Offset: 0x48, Size: 0x4]
	float SpawnMinRadius;//[Offset: 0x4c, Size: 0x4]
	float HeightOfIncomingShow;//[Offset: 0x50, Size: 0x4]
	float LandingShipRandomRadiusLevel1;//[Offset: 0x54, Size: 0x4]
	float LandingShipRandomRadiusLevel2;//[Offset: 0x58, Size: 0x4]
	float LandingShipRandomRadiusLevel3;//[Offset: 0x5c, Size: 0x4]
	ParticleSystem* SyncPS;//[Offset: 0x60, Size: 0x28]
	ParticleSystem* DefendPS;//[Offset: 0x88, Size: 0x28]
	ParticleSystem* WarningPS;//[Offset: 0xb0, Size: 0x28]
	bool bSupportPauseState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	class ArkDamageArea* DamageAreaClass;//[Offset: 0xe0, Size: 0x8]
	CurveFloat* CustomTeamZCurve;//[Offset: 0xe8, Size: 0x8]
	CurveVector* LandingLocationCurve;//[Offset: 0xf0, Size: 0x8]
	CurveFloat* LandingYawCurve;//[Offset: 0xf8, Size: 0x8]
	class CameraShake* NearCameraShake;//[Offset: 0x100, Size: 0x8]
	ForceFeedbackEffect* NearForceFeedback;//[Offset: 0x108, Size: 0x8]
	float PlayerShowCheckRadius;//[Offset: 0x110, Size: 0x4]
	AkAudioEvent* FlyEvent;//[Offset: 0x118, Size: 0x8]
	AkAudioEvent* LaunchEvent;//[Offset: 0x120, Size: 0x8]
	AkAudioEvent* FlyByEvent;//[Offset: 0x128, Size: 0x28]
	AkAudioEvent* BlastEvent;//[Offset: 0x150, Size: 0x28]
	AkAudioEvent* MixCutsceneStartEvent;//[Offset: 0x178, Size: 0x8]
	AkAudioEvent* MixCutsceneStopEvent;//[Offset: 0x180, Size: 0x8]
	LevelSequence* GameFinishedSequence;//[Offset: 0x188, Size: 0x8]
	float DelayTimeForEnding;//[Offset: 0x190, Size: 0x4]
	float DelayTimeForFailed;//[Offset: 0x194, Size: 0x4]

--------------------------------
Class: MetaTutorialManager_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1e0, Size: 0x8]
	ArkHavenStatPropertyRef HavenStatGameFlowRef;//[Offset: 0x1e8, Size: 0xc]
	ArkHavenStatPropertyRef HavenUnlockStatRef;//[Offset: 0x1f4, Size: 0xc]
	ArkHavenStatPropertyRef HavenStatQuestActiveRef;//[Offset: 0x200, Size: 0xc]
	ArkHavenStatPropertyRef HavenStatOnboardRef;//[Offset: 0x20c, Size: 0xc]
	bool DebugTestEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1]
	int CurrentTime;//[Offset: 0x21c, Size: 0x4]
	MetaTutorialEventUtility_New_BP_C* MetaTutorialEventUtility;//[Offset: 0x220, Size: 0x8]
	DataTable* PromptConfig;//[Offset: 0x228, Size: 0x8]
	FName[] PromptList;//[Offset: 0x230, Size: 0x10]
	BP_OnboardPrompt_Base_C*[] ActivePromptEventList;//[Offset: 0x240, Size: 0x10]
	bool IsDuringPrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	MetaTutorialQuest_Base_C*[] ActiveQuestList;//[Offset: 0x258, Size: 0x10]
	DataTable* OnboardQuestTable;//[Offset: 0x268, Size: 0x8]
	void IntlReportEvent(const FString EventName, <FString,FString> Empty);// 0x305c9c0
	bool CheckQuestReadyToActive(out const Struct_MetaTutorialQuest Struct_MetaTutorialQuest, bool NeedCheckQuestActive, bool Temp, bool Temp_bool_Variable, bool Temp_bool_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, ArkHavenRPCInterface* CallFunc_GetRPCInterface_ReturnValue, bool CallFunc_CheckBitHavenStat_ReturnValue, bool CallFunc_IsPVESectionPass_Unlocked, bool CallFunc_IsPVESectionPass_Unlocked, bool K2Node_Select_Default, bool K2Node_Select_Default, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_GetTotalMatchCount_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_InRange_IntInt_ReturnValue, bool K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue);// 0x305c9c0
	void IsPlayerUIDEven(out bool IsEven, ArkHavenDataManager* CallFunc_Get_ReturnValue, FString CallFunc_GetPlayerUIDAsString_ReturnValue, FString CallFunc_Right_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x305c9c0
	void SetHavenStateAndUnlock(int State, bool NeedSetServer, class ArkInteractiveActor MailBoxSoft, class ArkInteractiveActor VRChairSoft, ArkHavenVendorBase*[] QuestDeactiveVendors, ArkHavenVendorBase*[] QuestActiveVendors, ArkInteractiveActor*[] InteractionDeactiveGroup, ArkInteractiveActor*[] InteractionActiveGroup, ArkInteractiveActor*[] Temp_object_Variable, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, ArkInteractiveActor*[] Temp_object_Variable, ArkInteractiveActor*[] Temp_object_Variable, ArkInteractiveActor*[] Temp_object_Variable, int Temp_int_Variable, ArkInteractiveActor*[] Temp_object_Variable, ArkInteractiveActor*[] Temp_object_Variable, ArkInteractiveActor*[] Temp_object_Variable, ArkInteractiveActor*[] Temp_object_Variable, ArkInteractiveActor*[] Temp_object_Variable, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsPlayerClearLevel_ReturnValue, ArkHavenVendorBase* CallFunc_GetHavenVendor_ReturnValue, class Object CallFunc_Conv_SoftClassReferenceToClass_ReturnValue, ArkInteractiveActor*[] Temp_object_Variable, class ArkInteractiveActor K2Node_ClassDynamicCast_AsArk_Interactive_Actor, bool K2Node_ClassDynamicCast_bSuccess, ArkInteractiveActor* CallFunc_GetActorOfClass_ReturnValue, ArkHavenVendorBase*[] CallFunc_GetAllActorsOfClass_OutActors, ArkInteractiveActor*[] K2Node_MakeArray_Array, int CallFunc_Array_Length_ReturnValue, ArkInteractiveActor*[] K2Node_MakeArray_Array, int Temp_int_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, FName[] K2Node_MakeArray_Array, ArkHavenVendorBase* CallFunc_Array_Get_Item, ArkHavenRPCInterface* CallFunc_Get_ReturnValue, bool CallFunc_SetHavenStatByClient_ReturnValue, ArkInteractiveActor* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, ArkInteractiveActor* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, ArkHavenSurvivorNpc*[] CallFunc_GetAllActorsOfClass_OutActors, ArkHavenSurvivorNpc* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, ArkHavenVendorBase* CallFunc_GetHavenVendor_ReturnValue, ArkHavenVendorBase* CallFunc_GetHavenVendor_ReturnValue, ArkHavenVendorBase* CallFunc_GetHavenVendor_ReturnValue, ArkHavenVendorBase* CallFunc_GetHavenVendor_ReturnValue, ArkInteractiveActor*[] K2Node_MakeArray_Array, ArkInteractiveActor*[] K2Node_MakeArray_Array, ArkInteractiveActor*[] K2Node_Select_Default, ArkInteractiveActor*[] K2Node_Select_Default);// 0x305c9c0
	MetaTutorialQuest_HavenOnBoard_C* ManualTriggerQuest(FName QuestName, ArkHavenRPCInterface* CallFunc_GetRPCInterface_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Struct_MetaTutorialQuest CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_CheckBitHavenStat_ReturnValue, MetaTutorialQuest_HavenOnBoard_C* CallFunc_TryActiveQuest_ReturnValue);// 0x305c9c0
	void UnlockNextQuests(out const Struct_MetaTutorialQuest Struct_MetaTutorialQuest, int Temp_int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, ArkHavenRPCInterface* CallFunc_GetRPCInterface_ReturnValue, Struct_MetaTutorialQuest CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_CheckBitHavenStat_ReturnValue, MetaTutorialQuest_HavenOnBoard_C* CallFunc_TryActiveQuest_ReturnValue);// 0x305c9c0
	void ToggleOnboardMarkerCompletion(out const ArkHavenStatPropertyRef StatPropertyRef, int InBitEnum, ArkHavenRPCInterface* CallFunc_GetRPCInterface_ReturnValue, bool CallFunc_ToggleBitHavenStat_ReturnValue);// 0x305c9c0
	void CheckQuestState(out const Struct_MetaTutorialQuest Struct_MetaTutorialQuest, bool NeedCheckQuestActive, out enum State, out int CurStep, int CompleteStep, bool CallFunc_CheckQuestReadyToActive_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, ArkHavenRPCInterface* CallFunc_GetRPCInterface_ReturnValue, Struct_MetaTutorialObject CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_CheckBitHavenStat_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x305c9c0
	MetaTutorialQuest_HavenOnBoard_C* TryActiveQuest(out const Struct_MetaTutorialQuest Struct_MetaTutorialQuest, bool NeedCheckQuestActive, enum CallFunc_CheckQuestState_State, int CallFunc_CheckQuestState_CurStep, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FString CallFunc_Concat_StrStr_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, MetaTutorialQuest_HavenOnBoard_C* CallFunc_SpawnObject_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x305c9c0
	void RecordLog(int Step, FString ExtraMessage, ArkHavenRPCInterface* CallFunc_Get_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, float CallFunc_GetGameTimeInSeconds_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_RecordFinishGameStep_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x305c9c0
	bool ToggleGameFlowEventCompletion(byte InByte, ArkHavenRPCInterface* CallFunc_GetRPCInterface_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_ToggleBitHavenStat_ReturnValue);// 0x305c9c0
	bool CheckGameFlowEventState(byte InByte, int CallFunc_Conv_ByteToInt_ReturnValue, ArkHavenRPCInterface* CallFunc_GetRPCInterface_ReturnValue, bool CallFunc_CheckBitHavenStat_ReturnValue);// 0x305c9c0
	void DisplayAllObjectiveState(ArkHavenStatPropertyRef NewLocalVar, ArkHavenStatPropertyRef NewLocalVar, int Temp_int_Variable, int Temp_int_Variable, byte CallFunc_Conv_IntToByte_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, byte CallFunc_GetEnumeratorValueFromIndex_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_MakeLiteralInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, ArkHavenRPCInterface* CallFunc_Get_ReturnValue, bool CallFunc_CheckBitHavenStat_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x305c9c0
	void CheckQuestMarkerState(byte InByte, out bool Completed, int CallFunc_Conv_ByteToInt_ReturnValue, ArkHavenRPCInterface* CallFunc_GetRPCInterface_ReturnValue, bool CallFunc_CheckBitHavenStat_ReturnValue);// 0x305c9c0
	void CheckQuestActiveState(byte InByte, out bool Activated, int CallFunc_Conv_ByteToInt_ReturnValue, ArkHavenRPCInterface* CallFunc_GetRPCInterface_ReturnValue, bool CallFunc_CheckBitHavenStat_ReturnValue);// 0x305c9c0
	void InitializeQuests();// 0x305c9c0
	void OnObjectiveComplete(MetaTutorialQuest_Base_C* Quest, OnboardObjectEvent_Base_C* Obj);// 0x305c9c0
	void SpecialEventOnObjComplete(OnboardObjectEvent_Base_C* Obj);// 0x305c9c0
	void OnQuestComplete(MetaTutorialQuest_Base_C* QuestObj);// 0x305c9c0
	void SkipAllQuests();// 0x305c9c0
	void TestOnboardQuest(FName QuestName);// 0x305c9c0
	void OnOnBoardingEventFinish_Event(int InFinishEventID);// 0x305c9c0
	void InitializeHavenPrompt();// 0x305c9c0
	void OnPromptTriggered(BP_OnboardPrompt_Base_C* Event, out FName[] PromptNames);// 0x305c9c0
	void OnPromptRecycled(BP_OnboardPrompt_Base_C* Event);// 0x305c9c0
	void ReceiveBeginPlay();// 0x305c9c0
	void ExecuteUbergraph_MetaTutorialManager(int EntryPoint, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, MetaTutorialEventUtility_New_BP_C* CallFunc_FinishSpawningActor_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, byte CallFunc_Conv_IntToByte_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, byte CallFunc_GetEnumeratorValueFromIndex_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, int Temp_int_Variable, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, MetaTutorialQuest_Base_C* K2Node_CustomEvent_Quest, OnboardObjectEvent_Base_C* K2Node_CustomEvent_Obj, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, OnboardObjectEvent_Base_C* K2Node_CustomEvent_Obj, MetaTutorialQuest_Base_C* K2Node_CustomEvent_QuestObj, bool K2Node_SwitchEnum_CmpSuccess, MetaTutorialQuest_HavenOnBoard_C* K2Node_DynamicCast_AsMeta_Tutorial_Quest_Haven_on_Board, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Array_RemoveItem_ReturnValue, MetaTutorialQuest_HavenOnBoard_C* CallFunc_ManualTriggerQuest_ReturnValue, ArkHavenRPCInterface* CallFunc_Get_ReturnValue, bool CallFunc_SetOuterGameFlow_ReturnValue, ArkHavenRPCInterface* CallFunc_GetRPCInterface_ReturnValue, ArkHavenRPCInterface* CallFunc_Get_ReturnValue, bool CallFunc_SetOuterGameFlow_ReturnValue, bool CallFunc_SetHavenStatByClient_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_ToggleGameFlowEventCompletion_ReturnValue, FName CallFunc_Array_Get_Item, Struct_MetaTutorialQuest CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, MetaTutorialQuest_HavenOnBoard_C* CallFunc_TryActiveQuest_ReturnValue, bool CallFunc_CheckGameFlowEventState_ReturnValue, ArkHavenRPCInterface* CallFunc_Get_ReturnValue, bool CallFunc_CheckQuestActiveState_Activated, int CallFunc_GetHavenStat_OutStat, bool CallFunc_GetHavenStat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, ArkHavenRPCInterface* CallFunc_GetRPCInterface_ReturnValue, bool CallFunc_CheckQuestActiveState_Activated, bool CallFunc_ToggleBitHavenStat_ReturnValue, bool CallFunc_CheckGameFlowEventState_ReturnValue, bool CallFunc_CheckGameFlowEventState_ReturnValue, ArkUserDataControllerManager* CallFunc_Get_ReturnValue, FName K2Node_CustomEvent_QuestName, FString CallFunc_Conv_NameToString_ReturnValue, bool CallFunc_HasValidData_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, MetaTutorialQuest_HavenOnBoard_C* CallFunc_ManualTriggerQuest_ReturnValue, int Temp_int_Variable, ArkOnBoardingManager* CallFunc_Get_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetEnumeratorValueFromIndex_ReturnValue, int K2Node_CustomEvent_InFinishEventID, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_IsPlayerClearLevel_ReturnValue, int Temp_int_Variable, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_ToggleBitHavenStat_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_MakeLiteralInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, ArkPromptManager* CallFunc_GetArkPromptManager_ReturnValue, ArkHavenSurvivorNpc*[] CallFunc_GetAllActorsOfClass_OutActors, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_MakeLiteralInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, BP_OnboardPrompt_Base_C* K2Node_CustomEvent_Event, FName[] K2Node_CustomEvent_PromptNames, bool Temp_bool_IsClosed_Variable, BP_OnboardPrompt_Base_C* K2Node_CustomEvent_Event, ArkHavenSurvivorNpc*[] CallFunc_GetAllActorsOfClass_OutActors, bool CallFunc_Array_RemoveItem_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x305c9c0

--------------------------------
Class: Struct_MetaTutorialQuest
	int QuestID_2_41AC9DC34B870824DAAC85AC7BD53E0C;//[Offset: 0x0, Size: 0x4]
	int InitQuestTextSequence_68_4EB23B7940EF9FE03D68D781FBE1D362;//[Offset: 0x4, Size: 0x4]
	class MetaTutorialQuest_HavenOnBoard_C* QuestClass_58_0DF65464435100BFAA3FCC8D32F0C8E0;//[Offset: 0x8, Size: 0x8]
	bool QuestNeedSave_55_93324E0643C130E4DDF5AA83872BC1FB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	ArkHavenStatPropertyRef QuestStatsTag_47_D5879B2E4C9F7F303DF6A7BC08C5D5D6;//[Offset: 0x14, Size: 0xc]
	byte ActiveEventEnum_62_24E67AD742C1B310D18D349252F8466B;//[Offset: 0x20, Size: 0x1]
	int UnlockMatchNum_31_35D364864E8B152DF974459A18B91ECD;//[Offset: 0x24, Size: 0x4]
	int TerminateMatchNum_61_3E47C10E4309D1B099C747BD4B7F6482;//[Offset: 0x28, Size: 0x4]
	int UnlockPVELevelID_77_308E0187410137B726DE12B70BE30C3E;//[Offset: 0x2c, Size: 0x4]
	int TerminatePVELevelID_78_0F5EDB534C0DDB70DB7B01BC767A6F4A;//[Offset: 0x30, Size: 0x4]
	Struct_MetaTutorialObject[] Objects_37_674E37F240E28AD69D636B96D3110555;//[Offset: 0x38, Size: 0x10]
	FName[] NextQuestRowNames_43_2F6016F945002224F9B7B883779BECB5;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: MetaTutorialQuest_HavenOnBoard_C.MetaTutorialQuest_Base_C.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x68, Size: 0x8]
	Struct_MetaTutorialQuest QuestStruct;//[Offset: 0x70, Size: 0x58]
	int CompletedStep;//[Offset: 0xc8, Size: 0x4]
	int TempStep;//[Offset: 0xcc, Size: 0x4]
	OnboardObjectEvent_Base_C*[] ActiveObjects;//[Offset: 0xd0, Size: 0x10]
	ArkHavenStatPropertyRef HavenProgressRef;//[Offset: 0xe0, Size: 0xc]
	void CheckUnlockCondition(out bool ConditionMet);// 0x305c9c0
	void CreateNextObject(delegate K2Node_CreateDelegate_OutputDelegate, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, Struct_MetaTutorialObject CallFunc_Array_Get_Item, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, OnboardObjectEvent_Base_C* CallFunc_SpawnObject_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Add_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x305c9c0
	void Reset(MetaTutorialEventUtility_New_BP_C* Utility);// 0x305c9c0
	void ObjectCompleted(OnboardObjectEvent_Base_C* Obj);// 0x305c9c0
	void TryStartQuest();// 0x305c9c0
	void SetQuestUnlockRules();// 0x305c9c0
	void SetQuestTextSequence();// 0x305c9c0
	void ExecuteUbergraph_MetaTutorialQuest_HavenOnBoard(int EntryPoint, bool CallFunc_NotEqual_IntInt_ReturnValue, int Temp_int_Variable, MetaTutorialEventUtility_New_BP_C* K2Node_Event_Utility, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, OnboardObjectEvent_Base_C* K2Node_Event_Obj, bool CallFunc_Array_RemoveItem_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_CheckUnlockCondition_ConditionMet, int Temp_int_Variable, Struct_MetaTutorialObject CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_NotEqual_NameName_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Variable);// 0x305c9c0

--------------------------------
Class: MetaTutorialQuest_Base_C.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x28, Size: 0x8]
	int questID;//[Offset: 0x30, Size: 0x4]
	MetaTutorialEventUtility_New_BP_C* Utility;//[Offset: 0x38, Size: 0x8]
	delegate OnMetaTutorialQuestCompleted;//[Offset: 0x40, Size: 0x10]
	delegate OnObjectCompleted;//[Offset: 0x50, Size: 0x10]
	int CurrentSequenceIndex;//[Offset: 0x60, Size: 0x4]
	void BeginQuest();// 0x305c9c0
	void Reset(MetaTutorialEventUtility_New_BP_C* Utility);// 0x305c9c0
	void QuestCompleted();// 0x305c9c0
	void ObjectCompleted(OnboardObjectEvent_Base_C* Obj);// 0x305c9c0
	void AbortQuest();// 0x305c9c0
	void ExecuteUbergraph_MetaTutorialQuest_Base(int EntryPoint, MetaTutorialEventUtility_New_BP_C* K2Node_CustomEvent_Utility, OnboardObjectEvent_Base_C* K2Node_CustomEvent_Obj);// 0x305c9c0
	void OnObjectCompleted__DelegateSignature(MetaTutorialQuest_Base_C* Quest, OnboardObjectEvent_Base_C* Obj);// 0x305c9c0
	void OnMetaTutorialQuestCompleted__DelegateSignature(MetaTutorialQuest_Base_C* QuestObj);// 0x305c9c0

--------------------------------
Class: OnboardObjectEvent_Base_C.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x28, Size: 0x8]
	delegate TriggerEvent;//[Offset: 0x30, Size: 0x10]
	bool NeedSave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	ArkHavenStatPropertyRef HavenStatsRef;//[Offset: 0x44, Size: 0xc]
	byte EventType;//[Offset: 0x50, Size: 0x1]
	MetaTutorialEventUtility_New_BP_C* Utility;//[Offset: 0x58, Size: 0x8]
	FName ObjEventName;//[Offset: 0x60, Size: 0x8]
	Actor* IndicatorDummy;//[Offset: 0x68, Size: 0x8]
	FName VendorName;//[Offset: 0x70, Size: 0x8]
	byte PresentationType;//[Offset: 0x78, Size: 0x1]
	DataTable* VOTable;//[Offset: 0x80, Size: 0x8]
	FName[] VONames;//[Offset: 0x88, Size: 0x10]
	class Actor* IndicatorTargetClass;//[Offset: 0x98, Size: 0x28]
	FName PromptName;//[Offset: 0xc0, Size: 0x8]
	class ArkConversationDirector* Director;//[Offset: 0xc8, Size: 0x8]
	ESM* ConvoESM;//[Offset: 0xd0, Size: 0x28]
	LevelSequence* SoftSequence;//[Offset: 0xf8, Size: 0x28]
	delegate PresentationStart;//[Offset: 0x120, Size: 0x10]
	delegate PresentationEnd;//[Offset: 0x130, Size: 0x10]
	BP_VendorHaven_C* VendorBP;//[Offset: 0x140, Size: 0x8]
	bool SequenceHidePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	bool NeedSetOnboardState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 0x1]
	bool SequenceAllowSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a, Size: 0x1]
	float SequencePlayDelay;//[Offset: 0x14c, Size: 0x4]
	FName AudioMixPreset;//[Offset: 0x150, Size: 0x8]
	void GetHideActors(out Actor*[] Array, Actor*[] NewLocalVar, Actor*[] CallFunc_GetActorsOfClass_OutActors, int CallFunc_Array_Add_ReturnValue);// 0x305c9c0
	void SetIndicator(Actor* CallFunc_GetActorOfSoftClass_ReturnValue, Actor* CallFunc_SetIndicatorTarget_NewParam, bool CallFunc_IsValid_ReturnValue);// 0x305c9c0
	void Reset(MetaTutorialEventUtility_New_BP_C* MetaTutorialUtility);// 0x305c9c0
	void Recycle();// 0x305c9c0
	void TriggerPresentation();// 0x305c9c0
	void OnPresentationEnd();// 0x305c9c0
	void ExecuteUbergraph_OnboardObjectEvent_Base(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, MetaTutorialEventUtility_New_BP_C* K2Node_CustomEvent_MetaTutorialUtility, bool CallFunc_IsValid_ReturnValue, Actor*[] CallFunc_GetHideActors_Array, ArkHavenVendorBase* CallFunc_GetHavenVendor_ReturnValue, BP_VendorHaven_C* K2Node_DynamicCast_AsBP_Vendor_Haven, bool K2Node_DynamicCast_bSuccess);// 0x305c9c0
	void PresentationEnd__DelegateSignature();// 0x305c9c0
	void PresentationStart__DelegateSignature();// 0x305c9c0
	void TriggerEvent__DelegateSignature(OnboardObjectEvent_Base_C* EventObj);// 0x305c9c0

--------------------------------
Class: MetaTutorialEventUtility_New_BP_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2e8, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2f0, Size: 0x8]
	bool SharedFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	ArkHavenStatPropertyRef HavenStatRef;//[Offset: 0x2fc, Size: 0xc]
	bool IsInConversation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	bool ShouldInterruptVO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 0x1]
	int VOIndex;//[Offset: 0x30c, Size: 0x4]
	LevelSequenceActor* CurrentSeq;//[Offset: 0x310, Size: 0x8]
	OnboardObjectEvent_Base_C* CurrentObject;//[Offset: 0x318, Size: 0x8]
	ArkHavenStatPropertyRef HavenQuestMarkerRef;//[Offset: 0x320, Size: 0xc]
	FName[] CurrentDisabledInputs;//[Offset: 0x330, Size: 0x10]
	FName[] DisableExceptionInputs;//[Offset: 0x340, Size: 0x10]
	void HideGhostPlayers(bool Hide, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, ArkPlayer*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, ArkPlayer* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, Actor*[] CallFunc_GetAttachedActors_OutActors, Actor* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, GhostStateReportComponent* CallFunc_GetComponentByClass_ReturnValue);// 0x305c9c0
	void HideCutsceneActors(bool Hide, out Actor*[] HideActors, bool Temp_bool_Variable, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Vector Temp_struct_Variable, Vector Temp_struct_Variable, Vector K2Node_Select_Default, int Temp_int_Array_Index_Variable, Actor* CallFunc_Array_Get_Item, ArkHavenVendorBase* K2Node_DynamicCast_AsArk_Haven_Vendor_Base, bool K2Node_DynamicCast_bSuccess, HitResult CallFunc_K2_AddActorLocalOffset_SweepHitResult, int Temp_int_Loop_Counter_Variable, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Actor* CallFunc_GetActorOfSoftClass_ReturnValue, SectionNameSpawnerBase* K2Node_DynamicCast_AsSection_Name_Spawner_Base, bool K2Node_DynamicCast_bSuccess);// 0x305c9c0
	void ViewPortFade(bool In, bool Out, float FadeOutDuration, float BlackDuration, float FadeInDuration, bool bShouldDisableInput);// 0x305c9c0
	ArkJumpManager* GetJumpManager(ArkJumpManager* CallFunc_Get_ReturnValue);// 0x305c9c0
	void PopupActivityPage(int WidgetId);// 0x305c9c0
	bool CheckOnboardItemEquipped(byte CallFunc_MakeLiteralByte_ReturnValue, ArkHavenRPCInterface* CallFunc_GetRPCInterface_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_CheckBitHavenStat_ReturnValue);// 0x305c9c0
	void ToggleOnboardItemEquipped(bool On, byte CallFunc_MakeLiteralByte_ReturnValue, ArkHavenRPCInterface* CallFunc_GetRPCInterface_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_ToggleBitHavenStat_ReturnValue);// 0x305c9c0
	bool CheckOnboardState(byte CallFunc_MakeLiteralByte_ReturnValue, ArkHavenRPCInterface* CallFunc_GetRPCInterface_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_CheckBitHavenStat_ReturnValue);// 0x305c9c0
	float GetDeltaSeconds(float CallFunc_GetWorldDeltaSeconds_ReturnValue);// 0x305c9c0
	void ToggleInOnboardState(bool On, byte CallFunc_MakeLiteralByte_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_CheckOnboardState_ReturnValue, bool CallFunc_NotEqual_BoolBool_ReturnValue, ArkHavenRPCInterface* CallFunc_GetRPCInterface_ReturnValue, bool CallFunc_ToggleBitHavenStat_ReturnValue);// 0x305c9c0
	void IsPVESectionPass(const int InLevelID, out bool Unlocked, DataTable* Table, bool CallFunc_IsPlayerClearLevel_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x305c9c0
	void RecordLog(int Step, FString ExtraMessage, ArkHavenRPCInterface* CallFunc_Get_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, float CallFunc_GetGameTimeInSeconds_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_FTrunc_ReturnValue, bool CallFunc_RecordFinishGameStep_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x305c9c0
	void RemoveDisableExceptionInputs(out FName[] In, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue);// 0x305c9c0
	void AddDisableExceptionInputs(out FName[] In, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue);// 0x305c9c0
	void RemoveDisableInputs(out FName[] In, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue);// 0x305c9c0
	void AddDisableInputs(out FName[] In, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue);// 0x305c9c0
	bool CheckQuestMarker(byte QuestMarker, int CallFunc_Conv_ByteToInt_ReturnValue, ArkHavenRPCInterface* CallFunc_GetRPCInterface_ReturnValue, bool CallFunc_CheckBitHavenStat_ReturnValue);// 0x305c9c0
	void ToggleQuestMarker(byte QuestMarker, int CallFunc_Conv_ByteToInt_ReturnValue, ArkHavenRPCInterface* CallFunc_GetRPCInterface_ReturnValue, bool CallFunc_ToggleBitHavenStat_ReturnValue);// 0x305c9c0
	ArkOnBoardingManager* GetOnBoardingManager(ArkOnBoardingManager* CallFunc_Get_ReturnValue);// 0x305c9c0
	void TriggerInventoryCheckEvent(int Queue ID, bool Is Already Consumed, TriggerInventoryCheckQueueEvent K2Node_MakeStruct_TriggerInventoryCheckQueueEvent);// 0x305c9c0
	void GetActorsOfClass(class Actor ActorClass, out Actor*[] OutActors, Actor*[] CallFunc_GetAllActorsOfClass_OutActors);// 0x305c9c0
	Actor* GetActorOfClass(class Actor ActorClass, Actor* CallFunc_GetActorOfClass_ReturnValue);// 0x305c9c0
	void GetActorsOfSoftClass(class Actor ActorClass, out Actor*[] OutActors, class Object CallFunc_Conv_SoftClassReferenceToClass_ReturnValue, class Actor K2Node_ClassDynamicCast_AsActor, bool K2Node_ClassDynamicCast_bSuccess, Actor*[] CallFunc_GetAllActorsOfClass_OutActors);// 0x305c9c0
	void CompletePrompt(FName PromptRowName, ArkPromptManager* CallFunc_GetPromptManager_ReturnValue);// 0x305c9c0
	void MetaTutorialEventUtility_New_BP_AutoGenFunc(ArkQuestInstance* QuestInstance, enum NewState);// 0x305c9c0
	void ToggleSpecificInputs(out FName[] eventNames, bool Enable);// 0x305c9c0
	Actor* GetActorOfSoftClass(class Actor ActorClass, class Object CallFunc_Conv_SoftClassReferenceToClass_ReturnValue, class Actor K2Node_ClassDynamicCast_AsActor, bool K2Node_ClassDynamicCast_bSuccess, Actor* CallFunc_GetActorOfClass_ReturnValue);// 0x305c9c0
	void UpdatePlayerInput(bool ResetInputs, bool DisableMoveInput, bool DisableLookInput, bool DisableAllInputs, bool EnableForceWalking, ArkPlayerControllerBattle* CallFunc_GetArkPlayerControllerBattle_ReturnValue, bool CallFunc_IsValid_ReturnValue, ArkPlayerControllerBattle* CallFunc_GetArkPlayerControllerBattle_ReturnValue, FName[] CallFunc_GetAllInputEvents_OutAllInputEvents, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetAllInputEvents_OutAllInputEvents, bool CallFunc_IsDedicatedServer_ReturnValue, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, FName[] CallFunc_GetAllInputEvents_OutAllInputEvents, FName[] CallFunc_GetAllInputEvents_OutAllInputEvents, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue);// 0x305c9c0
	ArkHavenVendorBase* GetHavenVendor(FName VendorName, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, ArkHavenVendorBase*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, ArkHavenVendorBase* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue);// 0x305c9c0
	BP_MetaTutorial_TriggerVolume_C* SpawnTriggerVolume(class BP_MetaTutorial_TriggerVolume_C Class, Transform SpawnTransform, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_MetaTutorial_TriggerVolume_C* CallFunc_FinishSpawningActor_ReturnValue);// 0x305c9c0
	void ClearIndicatorTarget(Actor* IndicatorDummy);// 0x305c9c0
	void SetIndicatorTarget(Actor* NewIndicatorTarget, float ZOffset, out Actor* NewParam, const Transform CallFunc_GetTransform_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_MetaTutorial_DummyIndicator_C* CallFunc_FinishSpawningActor_ReturnValue, HitResult CallFunc_K2_AddActorLocalOffset_SweepHitResult);// 0x305c9c0
	void RemoveIndicator(enum TargetType, Actor* TargetActorRef);// 0x305c9c0
	void UpdateIndicatorParam(enum TargetType, Actor* TargetActorRef, out const FName TargetParam);// 0x305c9c0
	void AddIndicator(enum TargetType, Actor* TargetActorRef);// 0x305c9c0
	void TriggerQuestCustomEvent(FName CustomName, ArkPlayer* OwnerPlayer, FString CallFunc_Conv_NameToString_ReturnValue);// 0x305c9c0
	void AddQuest(int questID, int StartSequence, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, ArkPlayerStateBattle* K2Node_DynamicCast_AsArk_Player_State_Battle, bool K2Node_DynamicCast_bSuccess, ArkQuestComponent* CallFunc_GetQuestComponent_ReturnValue, ArkQuestInstance* CallFunc_AddInGameQuestByID_ReturnValue);// 0x305c9c0
	void AbortQuest(int questID, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, ArkPlayerStateBattle* K2Node_DynamicCast_AsArk_Player_State_Battle, bool K2Node_DynamicCast_bSuccess, ArkQuestComponent* CallFunc_GetQuestComponent_ReturnValue);// 0x305c9c0
	ArkPromptManager* GetPromptManager(ArkPromptManager* CallFunc_GetArkPromptManager_ReturnValue);// 0x305c9c0
	bool GetGameFlowCompletion(byte EventType, int CallFunc_Conv_ByteToInt_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, ArkGameModeHaven* K2Node_DynamicCast_AsArk_Game_Mode_Haven, bool K2Node_DynamicCast_bSuccess, FString CallFunc_GetDisplayName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_CheckBitHavenStat_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x305c9c0
	void GetMatchCount(out int StatNum, ArkHavenStatPropertyRef StatRef3, ArkHavenStatPropertyRef StatRef2, ArkHavenStatPropertyRef StatRef1, int CallFunc_GetTotalMatchCount_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x305c9c0
	bool IsMapModeOpen(enum TargetMode, bool CallFunc_IsMapModeOpenByServerTime_ReturnValue);// 0x305c9c0
	void GetSurvivorCount(out int NumNonCivilians, out int NumCivilians, ArkHavenRPCInterface* CallFunc_Get_ReturnValue, ArkHavenSurvivorInfo[] CallFunc_GetAllSurvivors_OutSurvivors, int CallFunc_CountNumberOfSurvivors_NumNonCivilians, int CallFunc_CountNumberOfSurvivors_NumCivilians);// 0x305c9c0
	void GetHavenStatProperty(out const ArkHavenStatPropertyRef PropertyRef, out ArkHavenProperty* OutHavenProperty, ArkHavenProperty* CallFunc_GetHavenStat_OutHavenProperty, int CallFunc_GetHavenStat_OutValue);// 0x305c9c0
	void IsTeamLeader(out bool NewParam, bool CallFunc_IsTeamLeaderInMeta_ReturnValue);// 0x305c9c0
	ArkPlayerCameraManager* GetCameraManager(ArkPlayerCameraManager* CallFunc_GetLocalPlayerCameraManager_ReturnValue);// 0x305c9c0
	ArkHavenRPCInterface* GetHavenRPC(ArkHavenRPCInterface* CallFunc_GetRPCInterface_ReturnValue);// 0x305c9c0
	ArkUserDataControllerManager* GetArkUserDataControllerManager(ArkUserDataControllerManager* CallFunc_Get_ReturnValue);// 0x305c9c0
	void GetHavenStats(int Type, out const ArkHavenStatPropertyRef StatPropertyRef, out int StatNum, ArkHavenStatPropertyRef StatRef3, ArkHavenStatPropertyRef StatRef2, ArkHavenStatPropertyRef StatRef1, bool K2Node_SwitchInteger_CmpSuccess, ArkHavenRPCInterface* CallFunc_GetRPCInterface_ReturnValue, int CallFunc_GetTotalMatchCount_ReturnValue, int CallFunc_GetHavenStat_OutStat, bool CallFunc_GetHavenStat_ReturnValue);// 0x305c9c0
	ArkHavenDataManager* ArkGetHavenDataManager(ArkHavenDataManager* CallFunc_ArkGetHavenDataManager_ReturnValue);// 0x305c9c0
	ArkPlayer* GetLocalPlayer(ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue);// 0x305c9c0
	void GetGameMode(out GameModeBase* Return Value, GameModeBase* CallFunc_GetGameMode_ReturnValue);// 0x305c9c0
	void GetArkBattleHUD(out ArkBattleHUD* Return Value, ArkBattleHUD* CallFunc_GetArkBattleHUD_ReturnValue);// 0x305c9c0
	void OnFinishedPlaying_43C15BD24D324536837EB681F491F7BC(Actor* Speaker);// 0x305c9c0
	void PlayDialogueVO(DataTable* VOTable, out const FName[] VONames, ArkHavenVendorBase* InSpeaker, bool CallEndEvent, const bool AffectInput);// 0x305c9c0
	void PlayCutscene(LevelSequence* SoftCutscene, out const Actor*[] HideActors, bool HidePlayer, bool AllowSkip, float SequencePlayDelay, FName AudioMixPrest);// 0x305c9c0
	void CustomEvent(Object* Object);// 0x305c9c0
	void SkipCutscene();// 0x305c9c0
	void CustomEvent();// 0x305c9c0
	void OnMenuChangeDelegate_Event(const ArkPopupMenuBase* ChangedMenu, int ChangedMenuID, bool MenuIsOpennedFlag);// 0x305c9c0
	void StartVendorConversation(ArkHavenVendorBase* Vendor, class ArkConversationDirector Class, ESM* StateMachine);// 0x305c9c0
	void OnConverstionEnd();// 0x305c9c0
	void CustomEvent(Object* Object);// 0x305c9c0
	void StartPresentation(OnboardObjectEvent_Base_C* CalledFromObject, byte Type, DataTable* VOTable, out const FName[] VONames, ArkHavenVendorBase* Vendor, class ArkConversationDirector Director, ESM* StateMachine, LevelSequence* SoftCutscene, out const Actor*[] HideActors, bool HidePlayer, bool AllowSkip, float SequencePlayDelay, FName AudioMixPrest);// 0x305c9c0
	void ToggleCameraFocus(bool On);// 0x305c9c0
	void OpenPrompt(FName PromptRowName);// 0x305c9c0
	void OnPromptFinishEvent_Event();// 0x305c9c0
	void ExecuteUbergraph_MetaTutorialEventUtility_New_BP(int EntryPoint, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Variable, DataTable* K2Node_CustomEvent_VOTable, const FName[] K2Node_CustomEvent_VONames, ArkHavenVendorBase* K2Node_CustomEvent_InSpeaker, bool K2Node_CustomEvent_CallEndEvent, const bool K2Node_CustomEvent_AffectInput, FName CallFunc_Array_Get_Item, ArkPlayDialogueLineAsyncTaskBlueprintProxy* CallFunc_CreateDialogueProxyObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, LevelSequence* K2Node_CustomEvent_SoftCutscene, const Actor*[] K2Node_CustomEvent_HideActors, bool K2Node_CustomEvent_HidePlayer, bool K2Node_CustomEvent_AllowSkip, float K2Node_CustomEvent_SequencePlayDelay, FName K2Node_CustomEvent_AudioMixPrest, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, LevelSequence* K2Node_DynamicCast_AsLevel_Sequence, bool K2Node_DynamicCast_bSuccess, LevelSequenceActor* CallFunc_CreateLevelSequencePlayer_OutActor, LevelSequencePlayer* CallFunc_CreateLevelSequencePlayer_ReturnValue, Object* K2Node_CustomEvent_Object, FName[] K2Node_MakeArray_Array, LevelSequencePlayer* CallFunc_GetSequencePlayer_ReturnValue, ArkBattleHUD* CallFunc_GetArkBattleHUD_ReturnValue, QualifiedFrameTime CallFunc_GetEndTime_ReturnValue, float CallFunc_Conv_QualifiedFrameTimeToSeconds_ReturnValue, ArkBattleHUD* CallFunc_GetArkBattleHUD_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, const ArkPopupMenuBase* K2Node_CustomEvent_ChangedMenu, int K2Node_CustomEvent_ChangedMenuID, bool K2Node_CustomEvent_MenuIsOpennedFlag, int CallFunc_OpenMenu_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, ArkPopupMenuBase* CallFunc_GetMenu_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, Actor* Temp_object_Variable, bool CallFunc_BooleanAND_ReturnValue, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, ArkHavenVendorBase* K2Node_CustomEvent_Vendor, class ArkConversationDirector K2Node_CustomEvent_Class, ESM* K2Node_CustomEvent_StateMachine, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, Transform CallFunc_GetActorTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Object* K2Node_CustomEvent_Object, ArkConversationDirector* CallFunc_FinishSpawningActor_ReturnValue, ESM* K2Node_DynamicCast_AsESM, bool K2Node_DynamicCast_bSuccess, OnboardObjectEvent_Base_C* K2Node_CustomEvent_CalledFromObject, byte K2Node_CustomEvent_Type, DataTable* K2Node_CustomEvent_VOTable, const FName[] K2Node_CustomEvent_VONames, ArkHavenVendorBase* K2Node_CustomEvent_Vendor, class ArkConversationDirector K2Node_CustomEvent_Director, ESM* K2Node_CustomEvent_StateMachine, LevelSequence* K2Node_CustomEvent_SoftCutscene, const Actor*[] K2Node_CustomEvent_HideActors, bool K2Node_CustomEvent_HidePlayer, bool K2Node_CustomEvent_AllowSkip, float K2Node_CustomEvent_SequencePlayDelay, FName K2Node_CustomEvent_AudioMixPrest, bool K2Node_SwitchEnum_CmpSuccess, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, FName[] K2Node_MakeArray_Array, bool K2Node_CustomEvent_On, ArkBattleHUD* CallFunc_GetArkBattleHUD_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, FName[] K2Node_MakeArray_Array, FName[] K2Node_MakeArray_Array, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, ArkPromptManager* CallFunc_GetArkPromptManager_ReturnValue, ArkPlayerCameraManager* CallFunc_GetLocalPlayerCameraManager_ReturnValue, CameraModifier* CallFunc_AddNewCameraModifier_ReturnValue, FName K2Node_CustomEvent_PromptRowName, bool CallFunc_RemoveCameraModifier_ReturnValue, ArkPromptManager* CallFunc_GetPromptManager_ReturnValue, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, Actor* K2Node_CustomEvent_Speaker, ArkSoftParticleSystemComponentWithPool* CallFunc_SpawnSoftEmitterAttached_ReturnValue, ArkPromptManager* CallFunc_GetArkPromptManager_ReturnValue, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue);// 0x305c9c0

--------------------------------
Class: GhostStateReportComponent.ActorComponent.Object
	bool bIsLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	float MoveTickInterval;//[Offset: 0x1e4, Size: 0x4]
	float LastSendMoveTimestamp;//[Offset: 0x1e8, Size: 0x4]
	Vector LastSendMovePosition;//[Offset: 0x1ec, Size: 0xc]
	bool PlayerReportPosition(bool bForce);// 0x29df450
	void PlayerAction(out const ArkTeammateAction Action);// 0x29df390
	void OnStartSwitch_BP();// 0x305c9c0
	void OnStartSpawn_BP();// 0x305c9c0
	void OnStartRemove_BP();// 0x305c9c0

--------------------------------
Class: ArkTeammateAction
	int ActionType;//[Offset: 0x0, Size: 0x4]
	int iParam1;//[Offset: 0x4, Size: 0x4]
	int iParam2;//[Offset: 0x8, Size: 0x4]
	FString strParam1;//[Offset: 0x10, Size: 0x10]
	FString strParam2;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: ArkHavenVendorBase.ArkInteractiveActor.ArkStaticActor.Actor.Object
	float InteractHalfAngle;//[Offset: 0x590, Size: 0x4]
	float InteractRadius;//[Offset: 0x594, Size: 0x4]
	bool bWouldBeKnockedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 0x1]
	ArkSoftSkeletalMeshComponent* MeshComp;//[Offset: 0x5a0, Size: 0x8]
	ChildActorComponent* NewIndicatorWrapComp;//[Offset: 0x5a8, Size: 0x8]
	int VendorID;//[Offset: 0x5b0, Size: 0x4]
	bool bHasVendorQuest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b4, Size: 0x1]
	Actor* LookAtActor;//[Offset: 0x5b8, Size: 0x8]
	ConversationInstance* ConversationInstance;//[Offset: 0x5c0, Size: 0x8]
	FName VendorMenuUIName;//[Offset: 0x5c8, Size: 0x8]
	FName VendorMenuHUDStateName;//[Offset: 0x5d0, Size: 0x8]
	FName VendorQuestUIName;//[Offset: 0x5d8, Size: 0x8]
	FName VendorQuestMenuState;//[Offset: 0x5e0, Size: 0x8]
	ArkDialogueComponent* ArkDialogue;//[Offset: 0x5e8, Size: 0x8]
	class AnimInstance* OverridePostProcessAnimBlueprint;//[Offset: 0x5f0, Size: 0x8]
	ArkAkComponent* AkComp;//[Offset: 0x5f8, Size: 0x8]
	FName VendorName;//[Offset: 0x600, Size: 0x8]
	FString[] AutoRegisterRedPointModules;//[Offset: 0x608, Size: 0x10]
	bool bIsQuestPanelOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 0x1]
	AnimSequence* Anim_TalkStart;//[Offset: 0x620, Size: 0x8]
	AnimSequence* Anim_TalkLoop;//[Offset: 0x628, Size: 0x8]
	AnimSequence* Anim_TalkEnd;//[Offset: 0x630, Size: 0x8]
	int StoreVendorID;//[Offset: 0x638, Size: 0x4]
	void StopConversationForce();// 0x27d58e0
	void StartConversation(ESM* StateMachine, ArkPlayer* Player, ArkConversationDirector* Director, out const delegate OnConversationEnd);// 0x27d5760
	void SetVendorState(enum InVendorState);// 0x27d5600
	void SetQuestVisible(bool Visible);// 0x27d4e70
	void PreOpenVendorMenu();// 0x305c9c0
	void PlayFacialAnim(AnimSequence* FacialAnim, FName Slot, float BlendInTime, float BlendOutTime);// 0x27d42f0
	void PlayDialogue_Quest(bool bIsSubmit, bool bIsAccept);// 0x305c9c0
	void PlayDialogue_Purchase(enum MallType);// 0x305c9c0
	void PlayDialogue_OpenQuestPanel(bool bOpen);// 0x305c9c0
	void PlayDialogue_OpenQuestPage();// 0x305c9c0
	void OpenVendorQuestMenu();// 0x27d42d0
	void OpenVendorMenu(enum _type);// 0x27d4250
	void OpenVendorLotteryMenu();// 0x27d4230
	void OnEventOpenQuestPanel(int InVendorID, bool bOpen);// 0x27d4170
	void OnEventOpenQuestPage();// 0x27d4150
	bool IsRedPointTarget(int64 UserData1, int64 UserData2, Object* Widget, FString UserData3, int ModuleID);// 0x27d3af0
	enum GetInactiveInteraction();// 0x27d26c0
	enum GetActiveInteraction();// 0x27d2230
	void ExecuteDialogue(FName Event, out const delegate OnPlayDialogueEnd, Actor* InteractActor, out enum PlayLineResult);// 0x27d1e40

--------------------------------
Class: ConversationInstance.Object
	ArkPlayer* PlayerCharacter;//[Offset: 0x30, Size: 0x8]
	ArkHavenVendorBase* ResponderVendor;//[Offset: 0x38, Size: 0x8]
	ArkConversationDirector* Director;//[Offset: 0x40, Size: 0x8]
	ESMInstance* ESMInstance;//[Offset: 0x48, Size: 0x8]
	ArkConversationConfig Config;//[Offset: 0x58, Size: 0x18]
	bool bFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool bCurrentSectionSupportSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	ArkConversationSkipConfigCulture CurrentSkipData;//[Offset: 0x78, Size: 0x18]
	FName CurrentPlayEvent;//[Offset: 0x90, Size: 0x8]
	FString CurrentAkEventName;//[Offset: 0x98, Size: 0x10]
	ArkDialogueComponent* PlayingDialogueComp;//[Offset: 0xa8, Size: 0x8]
	float CurrentSectionStartTimestamp;//[Offset: 0xb0, Size: 0x4]
	int CurrentSectionIdentifier;//[Offset: 0xb4, Size: 0x4]
	void StartConversation();// 0x29db490
	void PlayDialogueSection(ArkDialogueComponent* DialogueComp, DataTable* VOTable, FName PlayEvent, out ArkConversationSkipConfig SkipData, out const delegate EndDelegate);// 0x29dabe0
	void OnPlayerPressedSkipInSection();// 0x29daae0
	void OnPlayDialogueSectionEnd();// 0x29daac0
	void OnAkEvent(enum CallbackType, AkCallbackInfo* CallbackInfo);// 0x29da9c0
	void ExecuteConversationCallback();// 0x29da340
	void DirectorRestoreViewport();// 0x29da2a0

--------------------------------
Class: ArkConversationSkipConfig
	<FName,ArkConversationSkipConfigCulture> CulturedSkipTimeData;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: ArkConversationSkipConfigCulture
	FName CultureName;//[Offset: 0x0, Size: 0x8]
	float[] CulturedSkipTime;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ArkConversationConfig.TableRowBase
	int ConversationID;//[Offset: 0x8, Size: 0x4]
	ESM* StateMachine;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: SectionNameSpawnerBase.Actor.Object
	enum HavenSection;//[Offset: 0x2e8, Size: 0x1]
	SectionNameSpawnerTierInfo[] TierInfos;//[Offset: 0x2f0, Size: 0x10]
	bool TryGetTierUpgradeInfo(int Tier, out SectionNameSpawnerTierInfo Info);// 0x29eab40

--------------------------------
Class: SectionNameSpawnerTierInfo
	int UpgradeCost;//[Offset: 0x0, Size: 0x4]
	int RequiredHavenLevel;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: TriggerInventoryCheckQueueEvent
	int QueueID;//[Offset: 0x0, Size: 0x4]
	bool bIsAlreadyConsumed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bNeedToCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]

--------------------------------
Class: BP_MetaTutorial_TriggerVolume_C.Actor.Object
	BoxComponent* TriggerVolume;//[Offset: 0x2e8, Size: 0x8]

--------------------------------
Class: BP_MetaTutorial_DummyIndicator_C.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2e8, Size: 0x8]

--------------------------------
Class: ArkUserDataControllerManager.ArkManagerBase.Object
	ArkPlayerDataController* PlayerDataController;//[Offset: 0x90, Size: 0x8]
	ArkTeamDataController* TeamDataController;//[Offset: 0x98, Size: 0x8]
	ArkSurvivorDataController* SurvivorDataController;//[Offset: 0xa0, Size: 0x8]
	ArkSettlementDataController* SettlementController;//[Offset: 0xa8, Size: 0x8]
	ArkMailDataController* MailController;//[Offset: 0xb0, Size: 0x8]
	ArkQuestDataController* QuestController;//[Offset: 0xb8, Size: 0x8]
	ArkPlayerWeaponDataController* PlayerWeaponDataController;//[Offset: 0xc0, Size: 0x8]
	ArkSyncPresetDataController* SyncPresetController;//[Offset: 0xc8, Size: 0x8]
	ArkPrepareDataController* PrepareController;//[Offset: 0xd0, Size: 0x8]
	ArkGameOpenerDataController* GameOpenerController;//[Offset: 0xd8, Size: 0x8]
	ArkCombatDataController* CombatDataController;//[Offset: 0xe0, Size: 0x8]
	ArkSandTableDataController* SandTableController;//[Offset: 0xe8, Size: 0x8]
	ArkPveChooseInitialBuffController* PveChooseInitialBuffController;//[Offset: 0xf0, Size: 0x8]
	ArkRecruitDataController* RecruitDataController;//[Offset: 0xf8, Size: 0x8]
	ArkIndicatorDataController* IndicatorDataController;//[Offset: 0x100, Size: 0x8]
	ArkPvePermanentAttributeUpgradeController* PvePermanentAttributeUpgradeController;//[Offset: 0x108, Size: 0x8]
	ArkLeaderBoardDataController* LeaderBoardDataController;//[Offset: 0x110, Size: 0x8]
	ArkMapDataController* MapDataController;//[Offset: 0x118, Size: 0x8]
	ArkGlobalDataController* GlobalDataController;//[Offset: 0x120, Size: 0x8]
	ArkCustomRoomController* CustomRoomController;//[Offset: 0x128, Size: 0x8]
	ArkMallDataController* MallDataController;//[Offset: 0x130, Size: 0x8]
	ArkHavenDataController* HavenDataController;//[Offset: 0x138, Size: 0x8]
	ArkCallingCardDataController* CallingCardDataController;//[Offset: 0x140, Size: 0x8]
	ArkSeasonalGizmoDataController* SeasonalGizmoDataController;//[Offset: 0x148, Size: 0x8]
	static ArkUserDataControllerManager* Get(const Object* WorldContext);// 0x29bb450

--------------------------------
Class: ArkPlayerDataController.ArkUserDataControllerBase.Object
	FString[] WareHouseItemSerialList;//[Offset: 0x38, Size: 0x10]
	void WareHouseUpdateItemData(out const ArkWareHouseItem[] ItemList);// 0x28af030
	void WareHouseRemoveItemData(out const ArkWareHouseItem[] ItemList);// 0x28aef60
	void WareHouseAddItemData(out const ArkWareHouseItem[] ItemList);// 0x28aee90
	void UseItemFailedOrSuccess(bool bUseSucess);// 0x28aee00
	void SceneCaptureAnimationFinished();// 0x28ae990
	void ReceiveLootOpenedResult(out const ArkLootBoxRewardData[] RewardItemList, out const ArkLootBoxConveredData[] ConveredItemList);// 0x28ae830
	void ReceiveLootBoxInfo(out const ArkLootBoxConfigRow LootBoxInfo, out const ArkLootRewardCurStateRow[] StateRow);// 0x28ae630
	bool IsLevelUnlocked(int LevelID);// 0x28ae2e0
	bool IsLevelCleared(int LevelID);// 0x28ae250
	int GetHavenStatByItemID(int ItemId);// 0x28ae0d0
	int GetGameMapModeMatchCount(enum[] InGameMapModes);// 0x28adfe0

--------------------------------
Class: ArkUserDataControllerBase.Object
	ArkUserDataModel* UserDataModel;//[Offset: 0x28, Size: 0x8]
	void SetVector2D(FString Key, out const Vector2D Value, bool ForceNotify);// 0x29b7ee0
	void SetUInt8(FString Key, byte Value, bool ForceNotify);// 0x29b7c90
	void SetString(FString Key, FString Value, bool ForceNotify);// 0x29b7b60
	void SetInt64(FString Key, int64 Value, bool ForceNotify);// 0x29b7920
	void SetInt(FString Key, int Value, bool ForceNotify);// 0x29b7a40
	void SetFloat(FString Key, float Value, bool ForceNotify);// 0x29b7800
	void SetDataUpdateNotifyFrequency(FString Key);// 0x29b7760
	void SetBool(FString Key, bool Value, bool ForceNotify);// 0x29b7640
	void SetArrayVector2D(FString Key, out const Vector2D[] Value, bool ForceNotify);// 0x29b74f0
	void SetArrayUInt8(FString Key, out const byte[] Value, bool ForceNotify);// 0x29b73a0
	void SetArrayString(FString Key, out const FString[] Value, bool ForceNotify);// 0x29b7230
	void SetArrayInt64(FString Key, out const int64[] Value, bool ForceNotify);// 0x29b6f90
	void SetArrayInt(FString Key, out const int[] Value, bool ForceNotify);// 0x29b70e0
	void SetArrayFloat(FString Key, out const float[] Value, bool ForceNotify);// 0x29b6e40
	void SetArrayBool(FString Key, out const bool[] Value, bool ForceNotify);// 0x29b6cf0
	void NotifyInt32Data(FString Key);// 0x29b6920
	bool IsValidValue(FString Key);// 0x29b6870
	void InsertArrayVector2D(FString Key, out const Vector2D Value, int Index);// 0x29b6750
	void InsertArrayUInt8(FString Key, byte Value, int Index);// 0x29b6630
	void InsertArrayString(FString Key, FString Value, int Index);// 0x29b6500
	void InsertArrayInt64(FString Key, int64 Value, int Index);// 0x29b62d0
	void InsertArrayInt(FString Key, int Value, int Index);// 0x29b63f0
	void InsertArrayFloat(FString Key, float Value, int Index);// 0x29b61b0
	void InsertArrayEmpty(FString Key, int Index);// 0x29b60d0
	void InsertArrayBool(FString Key, bool Value, int Index);// 0x29b5fb0
	bool HasValidData(FString Key);// 0x29b5f00
	Vector2D GetVector2D(FString Key);// 0x29b5e50
	ArkUserDataModel* GetUserDataModel();// 0x29b5e20
	byte GetUInt8(FString Key);// 0x29b5b40
	FString GetString(FString Key);// 0x29b5a50
	int64 GetInt64(FString Key);// 0x29b58f0
	int GetInt(FString Key);// 0x29b59a0
	float GetFloat(FString Key);// 0x29b5840
	bool GetBool(FString Key);// 0x29b5790
	Vector2D[] GetArrayVector2D(FString Key);// 0x29b56a0
	byte[] GetArrayUInt8(FString Key);// 0x29b55b0
	FString[] GetArrayString(FString Key);// 0x29b5470
	int64[] GetArrayInt64(FString Key);// 0x29b5290
	int[] GetArrayInt(FString Key);// 0x29b5380
	float[] GetArrayFloat(FString Key);// 0x29b51a0
	int GetArrayCount(FString Key);// 0x29b50f0
	bool[] GetArrayBool(FString Key);// 0x29b5000
	void DeleteArrayAt(FString Key, int Index);// 0x29b4e20
	void ClearData(FString Key);// 0x29b4d80
	void ClearAllData();// 0x29b4d60
	void AddArrayVector2D(FString Key, out const Vector2D Value);// 0x29b4c80
	void AddArrayUInt8(FString Key, byte Value);// 0x29b4ba0
	void AddArrayString(FString Key, FString Value);// 0x29b4ab0
	void AddArrayInt64(FString Key, int64 Value);// 0x29b48f0
	void AddArrayInt(FString Key, int Value);// 0x29b49d0
	void AddArrayFloat(FString Key, float Value);// 0x29b4810
	void AddArrayEmpty(FString Key);// 0x29b4770
	void AddArrayBool(FString Key, bool Value);// 0x29b4690

--------------------------------
Class: ArkWareHouseItem
	FString SerialID;//[Offset: 0x0, Size: 0x10]
	int ItemId;//[Offset: 0x10, Size: 0x4]
	int ItemNumber;//[Offset: 0x14, Size: 0x4]
	bool bNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	int ExpiredTime;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ArkLootBoxRewardData
	int Index;//[Offset: 0x0, Size: 0x4]
	bool bCon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	int ItemId;//[Offset: 0x8, Size: 0x4]
	FString AttributeStr;//[Offset: 0x10, Size: 0x10]
	int ItemNumber;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: ArkLootBoxConveredData
	int Index;//[Offset: 0x0, Size: 0x4]
	int ItemId;//[Offset: 0x4, Size: 0x4]
	int ConveredItemID;//[Offset: 0x8, Size: 0x4]
	int ConveredItemNumber;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ArkLootBoxConfigRow.TableRowBase
	int ID;//[Offset: 0x8, Size: 0x4]
	int RandomItemQuantity;//[Offset: 0xc, Size: 0x4]
	int RandomItemQuantityMax;//[Offset: 0x10, Size: 0x4]
	ArkLootBoxItem[] LootItems;//[Offset: 0x18, Size: 0x10]
	int GuaranteedTimes;//[Offset: 0x28, Size: 0x4]
	ArkLootBoxItem[] GuaranteedGroup;//[Offset: 0x30, Size: 0x10]
	float[] Probability;//[Offset: 0x40, Size: 0x10]
	bool IsHideMoreInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: ArkLootBoxItem
	int ItemId;//[Offset: 0x0, Size: 0x4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	int Quantity;//[Offset: 0x8, Size: 0x4]
	int QuantityMax;//[Offset: 0xc, Size: 0x4]
	int Weight;//[Offset: 0x10, Size: 0x4]
	bool bOnCover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	int JumpID;//[Offset: 0x18, Size: 0x4]
	int ShowPriority;//[Offset: 0x1c, Size: 0x4]
	ArkItemDisplayInfo DisPlayInfo;//[Offset: 0x20, Size: 0x90]

--------------------------------
Class: ArkItemDisplayInfo
	enum DisplayType;//[Offset: 0x0, Size: 0x1]
	class ArkSizeBoxParamTemplateAsset* IconParam;//[Offset: 0x8, Size: 0x8]
	Texture2D* IconTexture;//[Offset: 0x10, Size: 0x28]
	Texture2D* DetailTexture;//[Offset: 0x38, Size: 0x28]
	Texture2D* RewardTexture;//[Offset: 0x60, Size: 0x28]
	bool ShowIncreaseProbability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]

--------------------------------
Class: ArkLootRewardCurStateRow
	int ID;//[Offset: 0x0, Size: 0x4]
	bool bOwned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: ArkTeamDataController.ArkUserDataControllerBase.Object
	PingUtilityObject* CurrentPingUtilityObject;//[Offset: 0x88, Size: 0x8]
	void UpdateTeamMemberID(InUID(UInt64Property) InUID, int InMemberID);// 0x298aea0
	void ShowNotPlayableAsTeamMsgBox();// 0x298ada0
	void ShowNotPlayableAsSoloMsgBox();// 0x298ad80
	void ShowGameCostNotEnoughMsgBox(int inItemID);// 0x298ad00
	void OnMatchFoundCDFinish();// 0x298a1b0
	void OnConfirmRequestChange();// 0x298a0d0
	void OnConfirmQuitTeam();// 0x298a0b0
	void OnCancelAndCloseMsgBox();// 0x26cb690
	bool IsPlayerInTeam();// 0x2989fe0

--------------------------------
Class: PingUtilityObject.Object
	ArkServerAreaPing[] ServerAreaPingResult;//[Offset: 0x28, Size: 0x10]
	PingIP*[] PingIPObjects;//[Offset: 0x50, Size: 0x10]
	void OnPingFailed(PingIP* PingOperation, int Area, FString Host);// 0x29ea700
	void OnPingComplete(PingIP* PingOperation, int Area, FString Host, int TimeMS);// 0x29ea570
	ArkServerAreaPing[] GetPingResult();// 0x29e9bd0

--------------------------------
Class: PingIP.Object
	delegate OnPingComplete;//[Offset: 0x58, Size: 0x10]
	delegate OnPingFailure;//[Offset: 0x68, Size: 0x10]
	void SendPing(int iArea, FString hostname);// 0x12f5c50
	void PollThread();// 0x12f5c30

--------------------------------
Class: ArkServerAreaPing
	enum Area;//[Offset: 0x0, Size: 0x1]
	int PingValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ArkSurvivorDataController.ArkUserDataControllerBase.Object

--------------------------------
Class: ArkSettlementDataController.ArkUserDataControllerBase.Object

--------------------------------
Class: ArkMailDataController.ArkUserDataControllerBase.Object
	void SetStringNotify(FString Key, FString Value);// 0x2832f20
	void ClearMailList();// 0x2832bb0
	void AddNewMail(out const ArkMailInfo NewMail);// 0x2832930

--------------------------------
Class: ArkQuestDataController.ArkUserDataControllerBase.Object

--------------------------------
Class: ArkPlayerWeaponDataController.ArkUserDataControllerBase.Object

--------------------------------
Class: ArkSyncPresetDataController.ArkUserDataControllerBase.Object

--------------------------------
Class: ArkPrepareDataController.ArkUserDataControllerBase.Object

--------------------------------
Class: ArkGameOpenerDataController.ArkUserDataControllerBase.Object

--------------------------------
Class: ArkCombatDataController.ArkUserDataControllerBase.Object
	GrandEscapeTeamRankInfo[] CurrentRankInfo;//[Offset: 0x60, Size: 0x10]
	void SetBossName(FString BossName, int BossIndex);// 0x26dc280
	void SetBossLevelBossHealth(float CurStageHealth, int HealthStage, float CurStageMaxHealth, int BossIndex);// 0x26dc130
	void SetBossLevelBattling(bool bBattling, int PhaseNumber, int BossIndex);// 0x26dc030

--------------------------------
Class: GrandEscapeTeamRankInfo
	UInt64Property PlayerId;//[Size: 0x8]
	FString Name;//[Offset: 0x8, Size: 0x10]
	int TeamId;//[Offset: 0x18, Size: 0x4]
	int Score;//[Offset: 0x1c, Size: 0x4]
	float EndTime;//[Offset: 0x20, Size: 0x4]
	bool bIsTeamDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]

--------------------------------
Class: ArkSandTableDataController.ArkUserDataControllerBase.Object

--------------------------------
Class: ArkPveChooseInitialBuffController.ArkUserDataControllerBase.Object
	void OnInitialBuffChosenEvent(int ItemId);// 0x12c2b10

--------------------------------
Class: ArkRecruitDataController.ArkUserDataControllerBase.Object

--------------------------------
Class: ArkIndicatorDataController.ArkUserDataControllerBase.Object

--------------------------------
Class: ArkPvePermanentAttributeUpgradeController.ArkUserDataControllerBase.Object

--------------------------------
Class: ArkLeaderBoardDataController.ArkUserDataControllerBase.Object

--------------------------------
Class: ArkMapDataController.ArkUserDataControllerBase.Object
	<enum,MapActorList> AllActorDataMap;//[Offset: 0x38, Size: 0x50]
	<int,Actor*> AbleMarkerActorMap;//[Offset: 0x98, Size: 0x50]
	ArkPlayer* CurLocalPlayer;//[Offset: 0x100, Size: 0x8]
	ArkTeamInfo* TeamInfo;//[Offset: 0x108, Size: 0x8]
	Actor*[] EliteNPCList;//[Offset: 0x110, Size: 0x10]
	void SetHavenMapGuide(enum HavenMapGuideType, Actor* ActorTmp);// 0x2832e60
	void RemoveHavenMapGuide(enum HavenMapGuideType);// 0x2832dc0
	FName GetMarkerNameFromHavenActor(Actor* ActorTmp);// 0x2832d30
	Actor* GetHavenActorFromVendorID(int VendorID);// 0x2832ca0
	Actor* GetHavenActorFromMarkerName(FName InteractiveMarkerName);// 0x2832c10
	void BP_UnRegisterFromMap(enum MapDataType, Actor* ActorTmp);// 0x2832af0
	void BP_RegisterToMap(enum MapDataType, Actor* ActorTmp);// 0x2832a30

--------------------------------
Class: MapActorList
	Actor*[] ActorList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ArkGlobalDataController.ArkUserDataControllerBase.Object
	void SetReconnectData(bool bPopDisableReconnect);// 0x2780c50
	void SetMatchLevelID(FString LevelIDStr);// 0x27809e0

--------------------------------
Class: ArkCustomRoomController.ArkUserDataControllerBase.Object

--------------------------------
Class: ArkMallDataController.ArkUserDataControllerBase.Object

--------------------------------
Class: ArkHavenDataController.ArkUserDataControllerBase.Object
	ArkMetaDataManager* pArkMetaDataManager;//[Offset: 0x38, Size: 0x8]
	QuestInfo* GetUQuestInfo();// 0x278cb60

--------------------------------
Class: QuestInfo.Object
	GSPlayerQuestInfo[] QuestItems;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: ArkMetaDataManager.ArkManagerBase.Object
	<enum,Object*> ArkMetaObjectMap;//[Offset: 0x90, Size: 0x50]
	static ArkMetaDataManager* Get(const Object* WorldContext);// 0x2841310

--------------------------------
Class: ArkCallingCardDataController.ArkUserDataControllerBase.Object
	void SetPlayerUnlocksSigleInfo(int64 PlayerId, int Type, int ID, int Time);// 0x26a8400
	void SetPlayerUnlocksInfo(int64 PlayerId, int Type, FString Value);// 0x26a82e0
	void SetPlayerSuppressLevel(int64 PlayerId, int SuppressLevel);// 0x26a8220
	void SetPlayerInfo(FString Key, int64 PlayerId, FString Value);// 0x26a7f20
	void SetPlayerEquipInfo(int64 PlayerId, FString Value);// 0x26a7e40
	int GetPlayerSuppressLevel(int64 PlayerId);// 0x26a77f0

--------------------------------
Class: ArkSeasonalGizmoDataController.ArkUserDataControllerBase.Object

--------------------------------
Class: ArkBattleHUD.ArkPlayerHudBase.HUD.Actor.Object
	FName MessageBoxMenuName;//[Offset: 0x488, Size: 0x8]
	FName SubtitleWidgetMenuName;//[Offset: 0x490, Size: 0x8]
	FName DefaultHUDStateName;//[Offset: 0x498, Size: 0x8]
	delegate OnMenuChangeDelegate;//[Offset: 0x4a0, Size: 0x10]
	delegate OnHUDStateChange;//[Offset: 0x4b0, Size: 0x10]
	class ArkHUDWidgetManager* ArkHUDWidgetManagerClass;//[Offset: 0x4c0, Size: 0x8]
	ArkHUDWidgetManager* ArkHUDWidgetManagerInstance;//[Offset: 0x4c8, Size: 0x8]
	ArkHUDState LastHUDState;//[Offset: 0x4d0, Size: 0x78]
	InitiallyOpennedMenuData[] InitiallyOpennedMenuSequence;//[Offset: 0x548, Size: 0x10]
	ArkPopupMenuBase*[] CursorRequestedMenus;//[Offset: 0x558, Size: 0x10]
	void UpdateHUDStateProperties(bool bForcedUpdate);// 0x269e720
	void ShowMouseCursor(ArkPopupMenuBase* TargetMenuForReq, bool ShowCursorFlag);// 0x2699c20
	void ReleaseCache(const ArkPopupMenuBase* TargetMenu);// 0x2698590
	void PushGameFlowHUDState(out const FName TargetHUDStateName, int HUDStatePriorityValue);// 0x26980a0
	void PopGameFlowHUDState(int HUDStatePriorityValue);// 0x2697ea0
	int OpenMenu(out const FName TargetMenuName, out const FName TargetHUDStateName);// 0x26974a0
	void OnMenuChangeWrapperFunc(const ArkPopupMenuBase* ChangedMenu, int ChangedMenuID, bool MenuIsOpennedFlag);// 0x26970b0
	void OnMenuChange__DelegateSignature(const ArkPopupMenuBase* ChangedMenu, int ChangedMenuID, bool MenuIsOpennedFlag);// 0x305c9c0
	void OnHUDStateChangeWrapperFunc(out const ArkHUDState NewHUDState);// 0x2696f00
	void OnHUDStateChange__DelegateSignature(out const ArkHUDState NewHUDState);// 0x305c9c0
	bool HasMenu(int TargetMenuID);// 0x2692b80
	bool HasAnyMenu(out const FName TargetMenuName);// 0x2692a60
	bool HasAnyCloseableMenu();// 0x2692a30
	FName GetTopGameFlowHUDStateName(int TargetHUDStatePriorityValue);// 0x26919d0
	ArkPopupMenuBase* GetMenu(int TargetMenuID);// 0x268eca0
	ArkHUDWidgetManager* GetHUDWidgetManager();// 0x268cb10
	int GetFirstMenuID(out const FName TargetMenuName);// 0x268c5b0
	ArkPopupMenuBase* GetFirstMenu(out const FName TargetMenuName);// 0x268c510
	bool FindPresetHUDState(out const FName StateName, out ArkHUDState HUDStateFound);// 0x2689a00
	void CommitMenuOpen(ArkPopupMenuBase* TargetMenu);// 0x26880e0
	void CommitMenuClose(ArkPopupMenuBase* TargetMenu, bool DoNotCache);// 0x2688010
	bool CloseTopCloseableMenu();// 0x2687e30
	void CloseOpenedPopupMenus_ExceptionWithMenuName(out const FName[] ExceptionMenuNames, bool SkipClosingProcess);// 0x2687d30
	void CloseOpenedPopupMenus(out const class ArkPopupMenuBase[] Exception, bool SkipClosingProcess);// 0x2687c30
	void CloseMenuWithID_BP(int TargetMenuID, bool SkipClosingProcess);// 0x2687aa0
	void CloseMenus(out const FName TargetMenuName, bool SkipClosingProcess);// 0x2687b60
	void CloseMenu(ArkPopupMenuBase* TargetMenu, bool SkipClosingProcess);// 0x26879d0
	void CloseAllCloseableMenu();// 0x26879b0
	void ClearMenus();// 0x26878e0
	void ClearGameFlowHUDState();// 0x26878c0
	void CleanAllMenuCache();// 0x26878a0

--------------------------------
Class: ArkPlayerHudBase.HUD.Actor.Object
	bool bIsCurrentGamepadInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e0, Size: 0x1]
	RuntimeFloatCurve AnalogCursorAccelerationCurve;//[Offset: 0x3e8, Size: 0x90]
	InputComponent* HudInputComponent;//[Offset: 0x480, Size: 0x8]
	void SetHudVisibility(bool bVisible);// 0x28b7480
	void OnInputDeviceChange(bool bGamepadKey);// 0x28b6690
	InputComponent* GetHudInputComponent();// 0x28b6290

--------------------------------
Class: ArkHUDWidgetManager.Object
	delegate OnHUDStateChangeDelegate;//[Offset: 0x28, Size: 0x10]
	delegate OnMenuChangeDelegate;//[Offset: 0x38, Size: 0x10]
	<enum,ArkUserWidgetArray> WidgetTypeMap;//[Offset: 0x48, Size: 0x50]
	ArkHUDMenuDataRegistry MenuDataRegistry;//[Offset: 0x98, Size: 0x1]
	class ArkHUDRootWidgetBase* HUDRootWidgetClass;//[Offset: 0xa0, Size: 0x8]
	ArkHUDRootWidgetBase* HUDRootWidget;//[Offset: 0xa8, Size: 0x8]
	DataTable* PopupMenuConfigDataTable;//[Offset: 0xb0, Size: 0x8]
	<FName,ArkPopupMenuConfig> PopupMenuConfigs;//[Offset: 0xb8, Size: 0x50]
	<int,RuntimeHUDStateGroup> RuntimePriorityHUDStateGroups;//[Offset: 0x108, Size: 0x50]
	<int,ArkPopupMenuBase*> ActiveMenuInstanceMap;//[Offset: 0x158, Size: 0x50]
	ArkMenuCacher* MenuCacher;//[Offset: 0x1a8, Size: 0x8]
	int CurrentMenuID;//[Offset: 0x1b0, Size: 0x4]
	int MaximumMenuIDCount;//[Offset: 0x1b4, Size: 0x4]
	bool HUDDestroyFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b8, Size: 0x1]
	bool HUDShownFlag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1b8, Size: 0x1]
	bool bIsUseUnlockBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c4, Size: 0x1]
	DataTable* MenuFuncConfigDataTable;//[Offset: 0x1c8, Size: 0x8]
	MenuDataBoxConfig MenuDataBoxConfig;//[Offset: 0x1d0, Size: 0x70]
	<FName,ArkMenuFuncConfig> MenuFuncConfigs;//[Offset: 0x240, Size: 0x50]
	ArkPopupMenuBase* CurrentPopupMenu;//[Offset: 0x290, Size: 0x8]
	FName DefaultHUDStateName;//[Offset: 0x298, Size: 0x8]
	DataTable* PresetHUDStateTable;//[Offset: 0x2a0, Size: 0x8]
	<FName,ArkHUDState> PresetHUDStates;//[Offset: 0x2a8, Size: 0x50]
	class ArkHUDStatePropertyHandler[] HUDStatePropertyHandlerClasses;//[Offset: 0x2f8, Size: 0x10]
	ArkHUDStatePropertyHandler*[] HUDStatePropertyHandlers;//[Offset: 0x308, Size: 0x10]
	void OnMenuUnlockBoxConfirmButton();// 0x27ee410
	void OnMenuChange__DelegateSignature(const ArkPopupMenuBase* ChangedMenu, int ChangedMenuID, bool MenuIsOpennedFlag);// 0x305c9c0
	void OnHUDStateChange__DelegateSignature(out const ArkHUDState NewHUDState);// 0x305c9c0

--------------------------------
Class: ArkUserWidgetArray
	ArkUserWidgetBase*[] WidgetArray;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ArkHUDMenuDataRegistry

--------------------------------
Class: ArkHUDRootWidgetBase.UserWidget.Widget.Visual.Object
	void RemoveFromRecycledNode_BP(Widget* InWidget);// 0x305c9c0
	void RemoveFromHUDRoot_BP(Widget* InWidget);// 0x305c9c0
	void InitHUDRootWidget_BP();// 0x305c9c0
	void DestroyHUDRootWidget_BP();// 0x305c9c0
	void AddToRecycledNode_BP(Widget* InWidget);// 0x305c9c0
	void AddToHUDRoot_BP(Widget* InWidget, int InWidgetZOrder);// 0x305c9c0

--------------------------------
Class: ArkPopupMenuConfig.TableRowBase
	int MenuGroupPriority;//[Offset: 0x8, Size: 0x4]
	SoftClassPath MenuClass;//[Offset: 0x10, Size: 0x18]
	class ArkPopupMenuBase* LoadedMenuClass;//[Offset: 0x28, Size: 0x8]
	enum InstancingType;//[Offset: 0x30, Size: 0x1]
	bool NeedPreloadSoftMenuClass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	bool NeedPrewarmOnHUDInit;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1]
	bool SkipInvalidationResetOnMenuOpen;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34, Size: 0x1]
	bool NeedCacheOnMenuClose;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x34, Size: 0x1]
	UInt32Property TimeForCacheAfterClose;//[Size: 0x4]
	bool DebugOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	ArkHUDStatePropertyConfig_InputMode PropertyInputMode;//[Offset: 0x40, Size: 0x18]
	ArkHUDStatePropertyConfig_EscClosable PropertyEscClosable;//[Offset: 0x58, Size: 0x18]
	ArkHUDStatePropertyConfig_InputPreempt PropertyInputPreempt;//[Offset: 0x70, Size: 0x18]
	ArkHUDStatePropertyConfig_MainCameraModifier PropertyMainCameraModifier;//[Offset: 0x88, Size: 0x18]
	ArkHUDStatePropertyConfig_AudioEffect PropertyAudioEffect;//[Offset: 0xa0, Size: 0x18]
	ArkHUDStatePropertyConfig_ControllerInputFlush PropertyInputFlush;//[Offset: 0xb8, Size: 0x18]
	ArkHUDStatePropertyConfig_InputTags PropertyInputTags;//[Offset: 0xd0, Size: 0x20]
	ArkHUDStatePropertyConfig_Cursor PropertyCursor;//[Offset: 0xf0, Size: 0x18]
	ArkHUDStatePropertyConfig_Focus PropertyFocus;//[Offset: 0x108, Size: 0x18]
	ArkHUDStatePropertyConfig_Navigation PropertyNavigation;//[Offset: 0x120, Size: 0x18]
	ArkHUDStatePropertyConfig_Sharpness PropertySharpness;//[Offset: 0x138, Size: 0x18]
	ArkHUDStatePropertyConfig_HideWorldScreenLayer PropertyWorldScreenLayer;//[Offset: 0x150, Size: 0x20]
	ArkHUDStatePropertyConfig_RenderOptimization PropertyRenderOptimization;//[Offset: 0x170, Size: 0x18]
	ArkHUDStatePropertyConfig_GlobalInvalidation PropertyGlobalInvalidation;//[Offset: 0x188, Size: 0x18]

--------------------------------
Class: ArkHUDStatePropertyConfig_InputMode.ArkHUDStatePropertyConfigBase
	enum InputMode;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ArkHUDStatePropertyConfigBase
	bool ConfigEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: ArkHUDStatePropertyConfig_EscClosable.ArkHUDStatePropertyConfigBase
	bool ClosableWithESC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool DontCloseWithCloseAll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ArkHUDStatePropertyConfig_InputPreempt.ArkHUDStatePropertyConfigBase
	bool PreemptUIInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ArkHUDStatePropertyConfig_MainCameraModifier.ArkHUDStatePropertyConfigBase
	bool ToggleOffMainCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool HideLowerMenus;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool ForceMainCameraRender;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ArkHUDStatePropertyConfig_AudioEffect.ArkHUDStatePropertyConfigBase
	bool bActivateAudioEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bForceDisableAudioEffect;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ArkHUDStatePropertyConfig_ControllerInputFlush.ArkHUDStatePropertyConfigBase
	bool bDisableInputFlush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ArkHUDStatePropertyConfig_InputTags.ArkHUDStatePropertyConfigBase
	enum[] DisableInputTags;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ArkHUDStatePropertyConfig_Cursor.ArkHUDStatePropertyConfigBase
	bool ShowCursorFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool ShowCursorForGamepadFlag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool BackgroundCursorFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ArkHUDStatePropertyConfig_Focus.ArkHUDStatePropertyConfigBase
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ArkHUDStatePropertyConfig_Navigation.ArkHUDStatePropertyConfigBase
	class ArkNavigationConfig* NavigationConfigClass;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ArkNavigationConfig.Object

--------------------------------
Class: ArkHUDStatePropertyConfig_Sharpness.ArkHUDStatePropertyConfigBase
	float SharpnessValue;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ArkHUDStatePropertyConfig_HideWorldScreenLayer.ArkHUDStatePropertyConfigBase
	enum[] WorldScreenLayerOpList;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ArkHUDStatePropertyConfig_RenderOptimization.ArkHUDStatePropertyConfigBase
	bool bEnableRenderOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ArkHUDStatePropertyConfig_GlobalInvalidation.ArkHUDStatePropertyConfigBase
	bool bDisableGlobalInvalidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: RuntimeHUDStateGroup
	FName HUDStateGroupName;//[Offset: 0x0, Size: 0x8]
	ArkHUDState[] Stack;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ArkMenuCacher.Object
	<FName,MenuCacheSet> CachedMenuSets;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: MenuCacheSet
	MenuCache[] CachedMenus;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MenuCache
	ArkPopupMenuBase* CachedMenu;//[Offset: 0x0, Size: 0x8]
	bool ShouldCountDownCacheTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	float CacheTimeLeft;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MenuDataBoxConfig
	FText MenuUnlockTitleRich;//[Offset: 0x0, Size: 0x18]
	FText MenuUnlockContentRich;//[Offset: 0x18, Size: 0x18]
	FName ConfirmActionName;//[Offset: 0x30, Size: 0x8]
	FText ConfirmActionText;//[Offset: 0x38, Size: 0x18]
	FName CancelActionName;//[Offset: 0x50, Size: 0x8]
	FText CancelActionText;//[Offset: 0x58, Size: 0x18]

--------------------------------
Class: ArkMenuFuncConfig.TableRowBase
	FString Tag;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ArkHUDStatePropertyHandler.Object
	ArkHUDWidgetManager* OwnerManagerInstance;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: InitiallyOpennedMenuData
	FName MenuName;//[Offset: 0x0, Size: 0x8]
	FName HUDStateName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: BP_VendorHaven_C.ArkHavenVendorBase.ArkInteractiveActor.ArkStaticActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x650, Size: 0x8]
	WidgetComponent* MenuTierUpgradeAvailable;//[Offset: 0x658, Size: 0x8]
	ArkHavenVendorMovementCompBP_C* ArkHavenVendorMovementCompBP;//[Offset: 0x660, Size: 0x8]
	ArkHavenStatPropertyRef VendorStatRef;//[Offset: 0x668, Size: 0xc]
	bool IsFar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x674, Size: 0x1]
	bool IsNear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x675, Size: 0x1]
	float NearDistance;//[Offset: 0x678, Size: 0x4]
	float FarDistTimer;//[Offset: 0x67c, Size: 0x4]
	Vector PlayerHeadLocation;//[Offset: 0x680, Size: 0xc]
	HavenVendorAnimSet AnimSet;//[Offset: 0x690, Size: 0x20]
	FName DialogueMenu;//[Offset: 0x6b0, Size: 0x8]
	FName DialogueHUDStateName;//[Offset: 0x6b8, Size: 0x8]
	FName PlayerOpenMenuSayName;//[Offset: 0x6c0, Size: 0x8]
	enum SectionType;//[Offset: 0x6c8, Size: 0x1]
	FName SectionLvlUpFactKeyName;//[Offset: 0x6cc, Size: 0x8]
	NPCKnockbackAnimSet KnockbackAnimSet;//[Offset: 0x6d8, Size: 0x60]
	Actor* lookAtTarget;//[Offset: 0x738, Size: 0x8]
	ArkEntryIdleStationBase* MutualStation;//[Offset: 0x740, Size: 0x8]
	bool NeedSpecialGreeting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x748, Size: 0x1]
	bool NeedSpecialPreMenuSay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x749, Size: 0x1]
	delegate SpecialPreMenuOpenEvent;//[Offset: 0x750, Size: 0x10]
	delegate SpecialGreetingEvent;//[Offset: 0x760, Size: 0x10]
	delegate SpecialMenuCloseEvent;//[Offset: 0x770, Size: 0x10]
	bool NeedSpecialMenuCloseSay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x780, Size: 0x1]
	bool IsInMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x781, Size: 0x1]
	class ArkConversationDirector* ConversationDirectorClass;//[Offset: 0x788, Size: 0x8]
	bool GreetingReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x790, Size: 0x1]
	bool bIsInteractingWithVendor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x791, Size: 0x1]
	void SetIndicatorVisibility(bool InVisibleFlag);// 0x305c9c0
	void SetThoughtBubbleVisibility(enum InVendorState, enum VendorState, bool Visible, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x305c9c0
	Vector GetInteractiveLookAtLocation(Vector CallFunc_GetInteractiveLookAtLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x305c9c0
	void ReceiveTick(float DeltaSeconds);// 0x305c9c0
	void OnClientGiveInteractTo(ArkCharacterBase* InteractedBy, enum InteractionType);// 0x305c9c0
	void PopupMenuClosed(int Uiid, FName CloseReason);// 0x305c9c0
	void SetVendorState(enum InVendorState);// 0x305c9c0
	void Greeting();// 0x305c9c0
	void StartPreOpenVendorMenu();// 0x305c9c0
	void StopPreOpenVendorMenu();// 0x305c9c0
	void VendorMenuOpened();// 0x305c9c0
	void VendorMenuClosed(FName CloseReason);// 0x305c9c0
	void ReceiveBeginPlay();// 0x305c9c0
	void OnConversationEnd();// 0x305c9c0
	void PlayDialogue_OpenQuestPanel(bool bOpen);// 0x305c9c0
	void PlayDialogue_Quest(bool bIsSubmit, bool bIsAccept);// 0x305c9c0
	void PlayDialogue_Purchase(enum MallType);// 0x305c9c0
	void PlayDialogue_OpenQuestPage();// 0x305c9c0
	void ExecuteUbergraph_BP_VendorHaven(int EntryPoint, const delegate Temp_delegate_Variable, const FName Temp_name_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const FName Temp_name_Variable, const delegate Temp_delegate_Variable, const FName Temp_name_Variable, const delegate Temp_delegate_Variable, const FName Temp_name_Variable, const FName Temp_name_Variable, const delegate Temp_delegate_Variable, bool CallFunc_CheckAndMarkOperationValidByName_ReturnValue, const FName Temp_name_Variable, const delegate Temp_delegate_Variable, const FName Temp_name_Variable, const delegate Temp_delegate_Variable, const FName Temp_name_Variable, const delegate Temp_delegate_Variable, const FName Temp_name_Variable, const delegate Temp_delegate_Variable, const FName Temp_name_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, const FName Temp_name_Variable, bool K2Node_SwitchInteger_CmpSuccess, float K2Node_Event_DeltaSeconds, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Square_ReturnValue, ArkCharacterBase* K2Node_Event_InteractedBy, enum K2Node_Event_InteractionType, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, int K2Node_Event_UIID, FName K2Node_Event_CloseReason, ArkBattleHUD* CallFunc_GetArkBattleHUD_ReturnValue, enum K2Node_Event_InVendorState, int CallFunc_OpenMenu_ReturnValue, int Temp_int_Array_Index_Variable, FName K2Node_CustomEvent_CloseReason, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, PIPAnouncementManager* CallFunc_GetPIPAnouncementManager_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_CanSectionBeUpgraded_ReturnValue, ArkFactDictionary K2Node_MakeStruct_ArkFactDictionary, const delegate Temp_delegate_Variable, bool Temp_bool_Variable, ArkFactDictionary K2Node_MakeStruct_ArkFactDictionary, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, ArkCharacterBase* K2Node_DynamicCast_AsArk_Character_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Vector_DistanceSquared_ReturnValue, MutualStation_BP_C*[] CallFunc_GetAllActorsOfClass_OutActors, bool CallFunc_LessEqual_FloatFloat_ReturnValue, ArkEntryIdleStationBase* CallFunc_Array_Get_Item, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Length_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, Object* CallFunc_Conv_InterfaceToObject_ReturnValue, ArkHavenNpc* K2Node_DynamicCast_AsArk_Haven_Npc, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, enum CallFunc_Say_PlayLineResult, bool K2Node_SwitchEnum_CmpSuccess, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_IsValid_ReturnValue, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, ArkFactDictionary K2Node_MakeStruct_ArkFactDictionary, enum CallFunc_Say_PlayLineResult, bool CallFunc_RandomBool_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, const FName Temp_name_Variable, bool CallFunc_RandomBool_ReturnValue, const delegate Temp_delegate_Variable, enum CallFunc_Say_PlayLineResult, enum CallFunc_Say_PlayLineResult, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum_CmpSuccess, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, FString CallFunc_MakeLiteralString_ReturnValue, FString CallFunc_MakeLiteralString_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, FString CallFunc_MakeLiteralString_ReturnValue, FString CallFunc_MakeLiteralString_ReturnValue, FString[] K2Node_MakeArray_Array, FName CallFunc_MakeLiteralName_ReturnValue, FString CallFunc_Array_Get_Item, bool CallFunc_EqualEqual_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, const FName Temp_name_Variable, enum CallFunc_Say_PlayLineResult, bool K2Node_SwitchEnum_CmpSuccess, const delegate Temp_delegate_Variable, const FName Temp_name_Variable, enum CallFunc_Say_PlayLineResult, bool K2Node_SwitchEnum_CmpSuccess, float CallFunc_RandomFloatInRange_ReturnValue, ArkFactDictionary K2Node_MakeStruct_ArkFactDictionary, enum CallFunc_Say_PlayLineResult, bool K2Node_SwitchEnum_CmpSuccess, ArkFactDictionary K2Node_MakeStruct_ArkFactDictionary, enum CallFunc_Say_PlayLineResult, bool K2Node_SwitchEnum_CmpSuccess, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool K2Node_Event_bOpen, bool K2Node_Event_bIsSubmit, bool K2Node_Event_bIsAccept, enum K2Node_Event_MallType, bool K2Node_SwitchEnum_CmpSuccess, ArkFactDictionary K2Node_MakeStruct_ArkFactDictionary, enum CallFunc_Say_PlayLineResult, enum CallFunc_Say_PlayLineResult, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum_CmpSuccess, enum CallFunc_Say_PlayLineResult, bool K2Node_SwitchEnum_CmpSuccess, ArkFactDictionary K2Node_MakeStruct_ArkFactDictionary, enum CallFunc_Say_PlayLineResult, bool K2Node_SwitchEnum_CmpSuccess, enum CallFunc_Say_PlayLineResult, bool K2Node_SwitchEnum_CmpSuccess);// 0x305c9c0
	void SpecialMenuCloseEvent__DelegateSignature();// 0x305c9c0
	void SpecialGreetingEvent__DelegateSignature();// 0x305c9c0
	void SpecialPreMenuOpenEvent__DelegateSignature();// 0x305c9c0

--------------------------------
Class: ArkHavenVendorMovementCompBP_C.ArkHavenVendorMovementComponent.MovementComponent.ActorComponent.Object

--------------------------------
Class: ArkHavenVendorMovementComponent.MovementComponent.ActorComponent.Object
	Rotator RotationRate;//[Offset: 0x220, Size: 0xc]
	Rotator DesiredRotation;//[Offset: 0x22c, Size: 0xc]
	Vector PivotTranslation;//[Offset: 0x238, Size: 0xc]
	bool bRotationInLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 0x1]
	void SetDesiredRotationRate(Rotator Rate);// 0x27d4990
	void SetDesiredRotation(Rotator rot);// 0x27d4900

--------------------------------
Class: HavenVendorAnimSet
	AnimSequenceBase* Near_7_5C8666D54EDA7A1A900C019BAFC2C14C;//[Offset: 0x0, Size: 0x8]
	AnimSequenceBase* Far_8_2B4F26974DF13CAE67D4C1B0ACF27150;//[Offset: 0x8, Size: 0x8]
	AnimSequenceBase* NearToFar_6_1B5E5A684A50D655B10E469C9C801300;//[Offset: 0x10, Size: 0x8]
	AnimSequenceBase* FarToNear_10_FD5EB96B4A7BC3798C515D8590588E19;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: MutualStation_BP_C.ArkEntryIdleStationBase.ArkAnimStationBase.ArkStationActor.ArkPlayerSpawnerBase.NavigationObjectBase.Actor.Object

--------------------------------
Class: ArkEntryIdleStationBase.ArkAnimStationBase.ArkStationActor.ArkPlayerSpawnerBase.NavigationObjectBase.Actor.Object
	RandomPlayerNoRepeatGroups Entries;//[Offset: 0x4e8, Size: 0x10]
	int MinAnimsToPlay;//[Offset: 0x4f8, Size: 0x4]
	int MaxAnimsToPlay;//[Offset: 0x4fc, Size: 0x4]
	bool bRemainInStation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 0x1]
	AnimSequence* ExitToMoveAnim;//[Offset: 0x508, Size: 0x8]
	AnimSequence* ExitToIdleAnim;//[Offset: 0x510, Size: 0x8]
	AnimSequence* InStationIntroAnim;//[Offset: 0x518, Size: 0x8]
	AnimSequence* InStationExitAnim;//[Offset: 0x520, Size: 0x8]
	bool IsExitToMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 0x1]
	AnimSequence* SelectedExitSequence;//[Offset: 0x530, Size: 0x8]

--------------------------------
Class: RandomPlayerNoRepeatGroups
	RandomPlayerNoRepeatGroup[] Groups;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: RandomPlayerNoRepeatGroup
	float ChanceToPlay;//[Offset: 0x0, Size: 0x4]
	int SleepSequenceCount;//[Offset: 0x4, Size: 0x4]
	RandomPlayerNoRepeatSequenceEntry[] SequenceEntries;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: RandomPlayerNoRepeatSequenceEntry
	AnimSequence* Sequence;//[Offset: 0x0, Size: 0x8]
	int MinLoopCount;//[Offset: 0x8, Size: 0x4]
	int MaxLoopCount;//[Offset: 0xc, Size: 0x4]
	float MinPlayRate;//[Offset: 0x10, Size: 0x4]
	float MaxPlayRate;//[Offset: 0x14, Size: 0x4]
	AlphaBlend BlendIn;//[Offset: 0x18, Size: 0x30]

--------------------------------
Class: NPCKnockbackAnimSet
	AnimSequenceBase* Run_BL_11_5C8666D54EDA7A1A900C019BAFC2C14C;//[Offset: 0x0, Size: 0x8]
	AnimSequenceBase* Run_BR_12_2B4F26974DF13CAE67D4C1B0ACF27150;//[Offset: 0x8, Size: 0x8]
	AnimSequenceBase* Run_FL_13_1B5E5A684A50D655B10E469C9C801300;//[Offset: 0x10, Size: 0x8]
	AnimSequenceBase* Run_FR_14_FD5EB96B4A7BC3798C515D8590588E19;//[Offset: 0x18, Size: 0x8]
	AnimSequenceBase* Run_L_19_AE9F53054C63688B86EB40B9D604C7D1;//[Offset: 0x20, Size: 0x8]
	AnimSequenceBase* Run_R_20_0DE3A58A4254B6D84C4A85BD83C873AF;//[Offset: 0x28, Size: 0x8]
	AnimSequenceBase* Walk_BL_27_A3542C134B2A7736C6001CA7775244E5;//[Offset: 0x30, Size: 0x8]
	AnimSequenceBase* Walk_BR_28_067DDAA04FBFCE8ECCF4FAA7C97A5357;//[Offset: 0x38, Size: 0x8]
	AnimSequenceBase* Walk_FL_29_B15F0F2549B8CA339AC58A875CC8E695;//[Offset: 0x40, Size: 0x8]
	AnimSequenceBase* Walk_FR_30_132F20B7470190268050C5B2BF239BB2;//[Offset: 0x48, Size: 0x8]
	AnimSequenceBase* Walk_L_31_FF79977B44FD7C9CD8EC1CBB644E0524;//[Offset: 0x50, Size: 0x8]
	AnimSequenceBase* Walk_R_32_CBEA3A4947AD1CE9AEE5DB9B9199256E;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: Struct_MetaTutorialObject
	bool NeedSave_26_DBBBE9C9444B6E9C61C034A8C7E49E77;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	ArkHavenStatPropertyRef ObjectStatsTag_23_8923F9A64423D4ADAAAFE6BB4A5E26BF;//[Offset: 0x4, Size: 0xc]
	byte ObjectEventEnum_20_0545614447D99871B14653963C99DD89;//[Offset: 0x10, Size: 0x1]
	class OnboardObjectEvent_Base_C* ObjectEventClass_22_DA8F623B462EDC0C3207AD95BD34CF3A;//[Offset: 0x18, Size: 0x8]
	FName ObjectEventName_19_C6E397D7445F51DCC8514C8F641D8943;//[Offset: 0x20, Size: 0x8]
	class Actor* IndicatorTargetClass_29_253B3E8F44AA012753D8CCAA581FE712;//[Offset: 0x28, Size: 0x28]

--------------------------------
Class: BP_OnboardPrompt_Base_C.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x28, Size: 0x8]
	delegate EventTriggerPrompt;//[Offset: 0x30, Size: 0x10]
	FName[] PromptNames;//[Offset: 0x40, Size: 0x10]
	MetaTutorialEventUtility_New_BP_C* Utility;//[Offset: 0x50, Size: 0x8]
	delegate EventRecycle;//[Offset: 0x58, Size: 0x10]
	int Sequence;//[Offset: 0x68, Size: 0x4]
	void Reset();// 0x305c9c0
	void Recycle();// 0x305c9c0
	void TriggerEvent();// 0x305c9c0
	void ReadyToTrigger();// 0x305c9c0
	void ReadyToRecycle();// 0x305c9c0
	void ExecuteUbergraph_BP_OnboardPrompt_Base(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, FString CallFunc_GetDisplayName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0x305c9c0
	void EventRecycle__DelegateSignature(BP_OnboardPrompt_Base_C* Event);// 0x305c9c0
	void EventTriggerPrompt__DelegateSignature(BP_OnboardPrompt_Base_C* Event, out FName[] PromptNames);// 0x305c9c0

--------------------------------
Class: ArkSaveGameManager.ArkManagerBase.Object
	ArkSaveGame* ArkSaveGame;//[Offset: 0x90, Size: 0x8]
	void MakeSaveGameDirty();// 0x293a150
	ArkSaveGame* GetSaveGame();// 0x2939b70
	static ArkSaveGameManager* Get(const Object* WorldContextObject);// 0x2936370

--------------------------------
Class: ArkSaveGame.SaveGame.Object
	ArkSettingSystemLocalSaveInfo SettingSystemSaveInfo;//[Offset: 0x28, Size: 0x30]
	ArkMatchInfoLocalSave[] MatchInfoDatas;//[Offset: 0x58, Size: 0x10]
	ArkHavenAreaMallLocalSave[] HavenAreaMallDataList;//[Offset: 0x68, Size: 0x10]
	ArkGearChipGained[] GearChipGainedDatas;//[Offset: 0x78, Size: 0x10]
	<int64,int> PurchasedSeasonalEventCommodityIDs;//[Offset: 0x88, Size: 0x50]
	ArkGameModeUnlockAnimPlayed[] UnlockAnimPlayedGameModeDatas;//[Offset: 0xd8, Size: 0x10]
	ArKBattleSeasonSave[] BattleSeasonSaves;//[Offset: 0xe8, Size: 0x10]
	bool bShouldSkipOnBoarding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	FString CinematicModeFilterName;//[Offset: 0x100, Size: 0x10]
	bool bAlreadyShowSeasonalChallengeThreeSlide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	ArkHeroGained[] HeroGainedDataList;//[Offset: 0x118, Size: 0x10]
	ArkWeaponGained[] WeaponGainedDataList;//[Offset: 0x128, Size: 0x10]
	void SetPurchasedSeasonalEventCommodityID(int64 PlayerId, int CommodityID);// 0x293a720
	void SetGameModeUnlockAnimationPlayed(int64 InPlayerId, FString InGameModeName);// 0x293a530
	void SetBattleSeasonIntroPlayed(int64 InPlayerId, int InSeasonID);// 0x293a470
	void SaveOpenMallVersion(int64 InPlayerId, int InCurrentVersion);// 0x293a3b0
	ArkWeaponGained GetWeaponGainedData(int64 PlayerId);// 0x293a0a0
	ArkGameModeUnlockAnimPlayed GetUnlockAnimPlayedGameModeList(int64 PlayerId);// 0x293a000
	int GetPurchasedSeasonalEventCommodityID(int64 PlayerId);// 0x2939970
	ArkMatchInfoLocalSave GetMatchInfoData(int64 PlayerId);// 0x2937b50
	ArkHeroGained GetHeroGainedData(int64 PlayerId);// 0x2937920
	ArkHavenAreaMallLocalSave GetHavenAreaMallData(int64 InPlayerId);// 0x29376c0
	ArkGearChipGained GetGearChipGainedData(int64 PlayerId);// 0x2937610
	bool GetGameModeUnlockAnimationPlayed(int64 InPlayerId, FString InGameModeName);// 0x29374e0
	ArKBattleSeasonSave GetBattleSeasonSaveData(int64 InPlayerId);// 0x2936c30
	bool GetBattleSeasonIntroPlayed(int64 InPlayerId, int InSeasonID);// 0x2936b70

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: ArkWeaponGained
	int64 PlayerId;//[Offset: 0x0, Size: 0x8]
	<int> StoredWeaponItemIDSet;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: ArkGameModeUnlockAnimPlayed
	int64 PlayerId;//[Offset: 0x0, Size: 0x8]
	<FString> StoredGameModeName;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: ArkMatchInfoLocalSave
	int64 PlayerId;//[Offset: 0x0, Size: 0x8]
	enum LastGameMapMode;//[Offset: 0x8, Size: 0x1]
	bool LastGameWin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	int LastGameLevelID;//[Offset: 0xc, Size: 0x4]
	int MatchPVPStreak;//[Offset: 0x10, Size: 0x4]
	int MatchPVEStreak;//[Offset: 0x14, Size: 0x4]
	int MatchPVPCount;//[Offset: 0x18, Size: 0x4]
	int MatchPVECount;//[Offset: 0x1c, Size: 0x4]
	int LastGameIsVRTraining;//[Offset: 0x20, Size: 0x4]
	DateTime LastGameDateTime;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: DateTime

--------------------------------
Class: ArkHeroGained
	int64 PlayerId;//[Offset: 0x0, Size: 0x8]
	<int> StoredHeroItemIDSet;//[Offset: 0x8, Size: 0x50]
	<int> StoredSuitItemIDSet;//[Offset: 0x58, Size: 0x50]

--------------------------------
Class: ArkHavenAreaMallLocalSave
	int64 PlayerId;//[Offset: 0x0, Size: 0x8]
	int LastOpenMallVersion;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ArkGearChipGained
	int64 PlayerId;//[Offset: 0x0, Size: 0x8]
	<FString> StoredGearChipIDs;//[Offset: 0x8, Size: 0x50]
	<int> StoredGearItemIDs;//[Offset: 0x58, Size: 0x50]

--------------------------------
Class: ArKBattleSeasonSave
	int64 PlayerId;//[Offset: 0x0, Size: 0x8]
	<int> IntroPlayedSeasons;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: ArkSettingSystemLocalSaveInfo
	FString AccountIDStr;//[Offset: 0x0, Size: 0x10]
	FName MainVersionName;//[Offset: 0x10, Size: 0x8]
	FName LanguageCodeName;//[Offset: 0x18, Size: 0x8]
	ArkSettingSystemLocalSaveItemInfo[] SettingItemInfoArray;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: ArkSettingSystemLocalSaveItemInfo
	FName KeyName;//[Offset: 0x0, Size: 0x8]
	FString ResultValue;//[Offset: 0x8, Size: 0x10]
	FName Version;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: BP_SaveLoginTime_C.SaveGame.Object
	int64 LastHavenLoginTime;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ArkHavenSettleBaseWidget.ArkPopupMenuBase.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	ArkHavenSettleDetailBaseWidget* CurDetailWidget;//[Offset: 0x4e0, Size: 0x8]
	FName DefaultMenuStateName;//[Offset: 0x4e8, Size: 0x8]
	FName PreMenuName;//[Offset: 0x4f0, Size: 0x8]
	FName NextMenuName;//[Offset: 0x4f8, Size: 0x8]
	int PageIndex;//[Offset: 0x500, Size: 0x4]
	int TotalPage;//[Offset: 0x504, Size: 0x4]
	FText PageFormatText;//[Offset: 0x508, Size: 0x18]
	bool bOnlyInitOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 0x1]
	CanvasPanel* CanvasPanel_Detail;//[Offset: 0x528, Size: 0x8]
	ArkKeyTipsButton* KeyTipButton_Continue;//[Offset: 0x530, Size: 0x8]
	ArkKeyTipsButton* KeyTipButton_Pre;//[Offset: 0x538, Size: 0x8]
	ArkKeyTipsButton* KeyTipButton_Next;//[Offset: 0x540, Size: 0x8]
	ArkCommonButton* CommonButton_Pre;//[Offset: 0x548, Size: 0x8]
	ArkCommonButton* CommonButton_Next;//[Offset: 0x550, Size: 0x8]
	class ArkHavenSettleDetailBaseWidget* SettleDetailWidgetRef;//[Offset: 0x558, Size: 0x8]
	void StartPreFadeInProcess();// 0x305c9c0
	void StartFadeInProcess();// 0x305c9c0
	void OnRefreshStepTitle();// 0x305c9c0
	void OnClickPreButton();// 0x2c90e90
	void OnClickNextButton();// 0x2c90e70
	void OnClickConfirmButton();// 0x2c90e50
	ArkHavenSettleDetailBaseWidget* GetCurDetailWidget();// 0x2c90e30
	void GenerateDetailWidget();// 0x2c90e10

--------------------------------
Class: ArkHavenSettleDetailBaseWidget.ArkUserDataWidget.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	ArkUserDataModel* CurSettlementDataModel;//[Offset: 0x320, Size: 0x8]
	WidgetAnimation* Anim_FadeIn;//[Offset: 0x328, Size: 0x8]
	void PlayFadeInAnim();// 0x2c90ff0
	void OnHandlePlayAnimToCompleteInBlueprint();// 0x305c9c0
	void BP_OnOpenSettleDetailWidget();// 0x305c9c0
	void BP_OnCloseSettleDetailWidget();// 0x305c9c0

--------------------------------
Class: ArkUserDataWidget.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	ArkUserDataModel*[] ModelsRegistered;//[Offset: 0x300, Size: 0x10]

--------------------------------
Class: ArkKeyTipsButton.ArkCommonButton.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	delegate OnActionTriggeredEvent;//[Offset: 0x420, Size: 0x10]
	delegate OnActionStateChangeEvent;//[Offset: 0x430, Size: 0x10]
	delegate OnHoveredTriggererEvent;//[Offset: 0x440, Size: 0x10]
	delegate OnUnHoveredTriggererEvent;//[Offset: 0x450, Size: 0x10]
	class ArkCommonButtonStyleAsset* ButtonStyleAssetForGamepad;//[Offset: 0x460, Size: 0x8]
	bool bPreferStyleForGamepad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x468, Size: 0x1]
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x468, Size: 0x1]
	FName ActionName;//[Offset: 0x46c, Size: 0x8]
	FText ActionText;//[Offset: 0x478, Size: 0x18]
	bool bLimitTextWidth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x490, Size: 0x1]
	int MaxTextWidth;//[Offset: 0x494, Size: 0x4]
	int ActionPriorityID;//[Offset: 0x498, Size: 0x4]
	bool bStopNextActions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49c, Size: 0x1]
	SlateColor ActionTextColor;//[Offset: 0x4a0, Size: 0x28]
	bool bUseUpperCaseText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c8, Size: 0x1]
	ArkKeyTipsWidget* KeyTipsWidget;//[Offset: 0x4d0, Size: 0x8]
	bool bConsumeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4d8, Size: 0x1]
	bool bShowMouseTextOnHold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4d8, Size: 0x1]
	FText MouseTextOnHold;//[Offset: 0x4e0, Size: 0x18]
	bool bDisableActionTriggerWhenHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 0x1]
	AkAudioEvent* AkEventOnPressed;//[Offset: 0x500, Size: 0x28]
	AkAudioEvent* AkEventOnReleased;//[Offset: 0x528, Size: 0x28]
	AkAudioEvent* AkEventOnStartHold;//[Offset: 0x550, Size: 0x28]
	AkAudioEvent* AkEventOnHoldFinish;//[Offset: 0x578, Size: 0x28]
	AkAudioEvent* AkEventOnHoldCancel;//[Offset: 0x5a0, Size: 0x28]
	void SetTextColor(out const SlateColor InTextColor);// 0x2cb7930
	void SetShowMouseTextOnHold(bool InShowFlag);// 0x2cb7810
	void SetMouseTextOnHold(out const FText InMouseText);// 0x2cb73b0
	void SetInputEnabled(bool InEnableFlag);// 0x2cb6980
	void SetHoldProgress(float InProgress);// 0x2cb67f0
	void SetGrayedOut(bool InGrayedOutFlag);// 0x2cb66d0
	void SetActionText(out const FText InActionText);// 0x2cb6290
	void SetActionPriority(bool InStopNext, int InPriority);// 0x2cb6110
	void SetActionName(out const FName InActionName);// 0x2cb5ff0
	bool GetInputEnabled();// 0x2cb5af0

--------------------------------
Class: ArkCommonButton.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	bool bNeedPlaySelectedSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	class ArkCommonButtonStyleAsset* ButtonStyleAsset;//[Offset: 0x338, Size: 0x8]
	byte ClickMethod;//[Offset: 0x340, Size: 0x1]
	byte TouchMethod;//[Offset: 0x341, Size: 0x1]
	byte PressMethod;//[Offset: 0x342, Size: 0x1]
	bool bIsSelectable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x343, Size: 0x1]
	bool bIsClickedPlayerInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 0x1]
	SlateSound SelectedSlateSound;//[Offset: 0x3d8, Size: 0x18]
	SlateSound TriggeredSlateSound;//[Offset: 0x3f0, Size: 0x18]
	void SetSelected(bool bInIsSelected);// 0x2c61720
	void SetIsSelectable(bool InIsSelectable);// 0x2c616a0
	void PlayTriggeredSound();// 0x2c61660
	void PlaySelectedSound();// 0x2c61640
	bool IsSelected();// 0x2c61150
	void BP_OnUnselected();// 0x305c9c0
	void BP_OnUnhovered();// 0x305c9c0
	void BP_OnSelected();// 0x305c9c0
	void BP_OnMouseInput(enum InputEvent, out const Key Key, float HoldTime);// 0x305c9c0
	void BP_OnHovered();// 0x305c9c0
	void BP_OnClicked();// 0x305c9c0

--------------------------------
Class: ArkCommonButtonStyleAsset.Object
	ArkCommonButtonStyle ButtonStyle;//[Offset: 0x28, Size: 0x2b0]

--------------------------------
Class: ArkCommonButtonStyle
	ButtonStyle ButtonStyle;//[Offset: 0x8, Size: 0x278]
	SlateSound SelectedSlateSound;//[Offset: 0x280, Size: 0x18]
	SlateSound TriggeredSlateSound;//[Offset: 0x298, Size: 0x18]

--------------------------------
Class: ArkKeyTipsWidget.UserWidget.Widget.Visual.Object
	delegate OnActionTriggeredDM;//[Offset: 0x240, Size: 0x10]
	Border* RootBorder;//[Offset: 0x258, Size: 0x8]
	SizeBox* KeyIconSizeNode;//[Offset: 0x260, Size: 0x8]
	ScaleBox* KeyIconScaleNode;//[Offset: 0x268, Size: 0x8]
	Image* KeyIconImage;//[Offset: 0x270, Size: 0x8]
	Widget* ProgressNode;//[Offset: 0x278, Size: 0x8]
	Widget* CircleHoldNode;//[Offset: 0x280, Size: 0x8]
	Image* CircleHoldProgressImage;//[Offset: 0x288, Size: 0x8]
	Widget* RectangleHoldNode;//[Offset: 0x290, Size: 0x8]
	Image* RectangleHoldBGImage;//[Offset: 0x298, Size: 0x8]
	Image* RectangleHoldProgressImage;//[Offset: 0x2a0, Size: 0x8]
	SizeBox* TextSizeNode;//[Offset: 0x2a8, Size: 0x8]
	TextBlock* ActionTextBlock;//[Offset: 0x2b0, Size: 0x8]
	Widget* BGImageNode;//[Offset: 0x2b8, Size: 0x8]
	Spacer* BGImageSpacer;//[Offset: 0x2c0, Size: 0x8]
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8, Size: 0x1]
	bool bDisableActionTriggerWhenHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 0x1]
	LinearColor ColorEnabled;//[Offset: 0x2cc, Size: 0x10]
	LinearColor ColorDisabled;//[Offset: 0x2dc, Size: 0x10]
	bool bLimitTextWidth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ec, Size: 0x1]
	int MaxTextWidth;//[Offset: 0x2f0, Size: 0x4]
	bool bShowBackgroundImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f4, Size: 0x1]
	bool bUseUpperCaseText;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f4, Size: 0x1]
	bool IsExternalHoldInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f4, Size: 0x1]
	FName CircleProgressParamName;//[Offset: 0x2f8, Size: 0x8]
	FName RectProgressParamName;//[Offset: 0x300, Size: 0x8]
	FName RectProgressWidthParamName;//[Offset: 0x308, Size: 0x8]
	FName RectProgressHeightParamName;//[Offset: 0x310, Size: 0x8]
	FName RectProgressBGWidthParamName;//[Offset: 0x318, Size: 0x8]
	FName RectProgressBGHeightParamName;//[Offset: 0x320, Size: 0x8]
	float HoldBGImageExtra;//[Offset: 0x328, Size: 0x4]
	float ProgressLineWidth;//[Offset: 0x32c, Size: 0x4]
	AkAudioEvent* AkEventOnPressed;//[Offset: 0x330, Size: 0x28]
	AkAudioEvent* AkEventOnReleased;//[Offset: 0x358, Size: 0x28]
	AkAudioEvent* AkEventOnStartHold;//[Offset: 0x380, Size: 0x28]
	AkAudioEvent* AkEventOnHoldFinish;//[Offset: 0x3a8, Size: 0x28]
	AkAudioEvent* AkEventOnHoldCancel;//[Offset: 0x3d0, Size: 0x28]
	FName ActionName;//[Offset: 0x3f8, Size: 0x8]
	FText ActionText;//[Offset: 0x400, Size: 0x18]
	int ActionPriorityID;//[Offset: 0x418, Size: 0x4]
	bool bStopNextActions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 0x1]
	bool bShowMouseTextOnHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41d, Size: 0x1]
	FText MouseTextOnHold;//[Offset: 0x420, Size: 0x18]
	bool bConsumeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x438, Size: 0x1]
	bool bOnlyShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 0x1]
	enum FallbackInputEvent;//[Offset: 0x43a, Size: 0x1]
	bool bNeedIsHoldPrefixForHoldInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x43b, Size: 0x1]
	FText IsHoldPrefixText;//[Offset: 0x440, Size: 0x18]
	float ExternalPressExpireTime;//[Offset: 0x468, Size: 0x4]
	bool bIsCurrentlyGamePadInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x46e, Size: 0x1]
	bool bInputBeginFlag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x46e, Size: 0x1]
	bool bConsumeCurrentInputFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x46e, Size: 0x1]
	bool bHoldInputPressExpiredFlag;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x46e, Size: 0x1]
	ActionKeyInfo[] ActionKeys;//[Offset: 0x470, Size: 0x10]
	delegate OnHoldProgressDelegate;//[Offset: 0x558, Size: 0x10]
	bool UsingKeyEventFound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x568, Size: 0x1]
	ArkInputConfig UsingKeyEvent;//[Offset: 0x570, Size: 0x100]
	void SetUseUpperCaseText(bool InUseFlag);// 0x2cb7ba0
	void SetTextColor(out const SlateColor InTextColor);// 0x2cb7a00
	void SetShowMouseTextOnHold(bool InShowFlag);// 0x2cb78a0
	void SetShowBackgroundImage(bool InShowFlag);// 0x2cb76b0
	void SetMouseTextOnHold(out const FText InMouseText);// 0x2cb7480
	void SetLimitTextWidth(bool InLimitFlag, int InMaxWidth);// 0x2cb72f0
	void SetIsExternalHoldInput(bool InIsHoldInputFlag);// 0x2cb6aa0
	void SetInputEnabled(bool InEnableFlag);// 0x2cb6a10
	void SetHoldProgress(float InProgress);// 0x2cb6870
	void SetGrayedOut(bool InGrayedOutFlag);// 0x2cb6760
	void SetFallbackInputType(enum InFallbackInputType);// 0x2cb6650
	void SetConsumeInput(const bool InConsumeInput);// 0x2cb65c0
	void SetBreakOffHold();// 0x2cb6430
	void SetActionText(out const FText InActionText);// 0x2cb6360
	void SetActionPriority(bool InStopNext, int InPriority);// 0x2cb61d0
	void SetActionName(out const FName InActionName);// 0x2cb6080
	void OnOnBoardingSetGrayedOut();// 0x2cb5fd0
	void OnKeyBindingChangeFromUserSettings(ArkGameplayEventWrapper* InGameplayEvent);// 0x2cb5f50
	void OnInputDeviceChange(bool bGamePad);// 0x2cb5ec0
	void OnExecuteActionEx(out const Key InKey, enum HoldEvent, float InDuration, float inElapsedTime);// 0x2cb5bd0
	void OnExecuteAction();// 0x2cb5bb0
	bool GetInputEnabled();// 0x2cb5b20
	FName GetActionName();// 0x2cb5a50

--------------------------------
Class: ScaleBox.ContentWidget.PanelWidget.Widget.Visual.Object
	byte Stretch;//[Offset: 0x138, Size: 0x1]
	byte StretchDirection;//[Offset: 0x139, Size: 0x1]
	float UserSpecifiedScale;//[Offset: 0x13c, Size: 0x4]
	bool IgnoreInheritedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	void SetUserSpecifiedScale(float InUserSpecifiedScale);// 0x4157f60
	void SetStretchDirection(byte InStretchDirection);// 0x4157d90
	void SetStretch(byte InStretch);// 0x4157d10
	void SetIgnoreInheritedScale(bool bInIgnoreInheritedScale);// 0x4157270

--------------------------------
Class: ActionKeyInfo
	Key ActionKey;//[Offset: 0x0, Size: 0x18]
	bool IsHoldInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	bool IsRectangleHold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: ArkDelegateDispatcher.ArkManagerBase.Object
	delegate OnUpdateLandPointDelegate;//[Offset: 0xc0, Size: 0x10]
	delegate OnGameFlowChange;//[Offset: 0xd0, Size: 0x10]
	delegate OnToggleGVoiceRoom;//[Offset: 0xe0, Size: 0x10]
	delegate OnPveShowEndScreen;//[Offset: 0xf0, Size: 0x10]
	delegate OnArkPVEShowEndReasonChanged;//[Offset: 0x100, Size: 0x10]
	delegate OnPlayerKillCameraEnabled;//[Offset: 0x110, Size: 0x10]
	delegate OnPartyRegisteredDelegate;//[Offset: 0x120, Size: 0x10]
	delegate OnSwitchSkyDelegate;//[Offset: 0x130, Size: 0x10]
	delegate OnRecruitStartIndexChangeDelegate;//[Offset: 0x140, Size: 0x10]
	delegate OnCurrentBattleSurvivorIDChangeDelegate;//[Offset: 0x150, Size: 0x10]
	delegate OnRecruitSurvivorScreenFinishedDelegate;//[Offset: 0x160, Size: 0x10]
	delegate OnLastDeathLocationChangeDelegate;//[Offset: 0x170, Size: 0x10]
	delegate OnShowPveEndFlowTimer;//[Offset: 0x180, Size: 0x10]
	delegate OnFoundObjectiveDelegate;//[Offset: 0x190, Size: 0x10]
	delegate OnShowObjectiveGoblinSecondProgress;//[Offset: 0x1a0, Size: 0x10]
	delegate OnShowObjectiveHealth;//[Offset: 0x1b0, Size: 0x10]
	delegate OnExitNewDarkErosionPortalHud;//[Offset: 0x1c0, Size: 0x10]
	delegate OnArkAllPlayerNewDarkErosionPortalGateMapChanged;//[Offset: 0x1d0, Size: 0x10]
	delegate OnClientDensityGearChange;//[Offset: 0x1e0, Size: 0x10]
	delegate LevelSequenceInitStartGameState;//[Offset: 0x1f0, Size: 0x10]
	delegate OnArkDownEliteDelegate;//[Offset: 0x200, Size: 0x10]
	delegate OnArkOrderAIAlliesDelegate;//[Offset: 0x210, Size: 0x10]
	delegate OnSyncAISuccessedDelegate;//[Offset: 0x220, Size: 0x10]
	delegate OnArkEliteDeadDelegate;//[Offset: 0x230, Size: 0x10]
	delegate OnLocalPlayerCharacterStateChanged;//[Offset: 0x240, Size: 0x10]
	delegate OnArkSpawnPreviousSyncNanoDelegate;//[Offset: 0x250, Size: 0x10]
	delegate OnMapMarkerSpawned;//[Offset: 0x260, Size: 0x10]
	delegate OnCurrentRoundChanged;//[Offset: 0x270, Size: 0x10]
	delegate OnArkTakeAnyDamageGlobal;//[Offset: 0x280, Size: 0x10]
	delegate OnHeroRosterFocusDelegate;//[Offset: 0x290, Size: 0x10]
	delegate OnShowWeaponNewItem;//[Offset: 0x2a0, Size: 0x10]
	delegate OnHavenGameModeEndPlay;//[Offset: 0x2b0, Size: 0x10]
	delegate OnHavenSpawnHeroSurvivorNPC;//[Offset: 0x2c0, Size: 0x10]
	delegate OnHavenPreSyncToNewHero;//[Offset: 0x2d0, Size: 0x10]
	delegate OnHavenPostSyncToNewHero;//[Offset: 0x2e0, Size: 0x10]
	delegate OnQuest2HavenVendor;//[Offset: 0x2f0, Size: 0x10]
	delegate OnClickTabHavenVendor;//[Offset: 0x300, Size: 0x10]
	delegate OnOpenQuestPanel;//[Offset: 0x310, Size: 0x10]
	delegate OnOpenQuestPage;//[Offset: 0x320, Size: 0x10]
	delegate OnRangeWeaponReloaded;//[Offset: 0x330, Size: 0x10]
	delegate OnEventQuestFinished;//[Offset: 0x340, Size: 0x10]
	delegate OnEventFestActivityStateChanged;//[Offset: 0x350, Size: 0x10]
	delegate OnEventHavenPlayEffectsUpdate;//[Offset: 0x360, Size: 0x10]
	delegate OnGameletContentCreated;//[Offset: 0x370, Size: 0x10]
	delegate OnGameletContentAboutToDestory;//[Offset: 0x380, Size: 0x10]
	delegate OnGameletEntranceStatusChanged;//[Offset: 0x390, Size: 0x10]
	delegate OnGameletPatFaceReady;//[Offset: 0x3a0, Size: 0x10]
	delegate OnMimirNetDataRefresh;//[Offset: 0x3b0, Size: 0x10]
	delegate OnMimirNetVoFinished;//[Offset: 0x3c0, Size: 0x10]
	delegate OnEventLocalPlayerPlayBubblePose;//[Offset: 0x3d0, Size: 0x10]
	delegate OnClickedNanoBandActor;//[Offset: 0x3e0, Size: 0x10]
	delegate OnHoverNanoBandActor;//[Offset: 0x3f0, Size: 0x10]
	delegate OnNanoBandAnimationPlayingChanged;//[Offset: 0x400, Size: 0x10]
	delegate OnSpawnPatternSpawned;//[Offset: 0x410, Size: 0x10]
	delegate OnPostNpcBirth;//[Offset: 0x420, Size: 0x10]
	delegate OnPollutionSourceDead;//[Offset: 0x430, Size: 0x10]
	delegate OnNewDarkErosionEndGlobal;//[Offset: 0x440, Size: 0x10]
	delegate OnKeyMonsterBorn;//[Offset: 0x450, Size: 0x10]
	delegate OnDebugDispatcher;//[Offset: 0x460, Size: 0x10]
	delegate OnShowIndicatorForHUDFade;//[Offset: 0x470, Size: 0x10]
	delegate OnShowAllInfoForHUDFade;//[Offset: 0x480, Size: 0x10]
	delegate OnNpcDying;//[Offset: 0x490, Size: 0x10]
	delegate OnNpcDeath;//[Offset: 0x4a0, Size: 0x10]
	delegate OnCleanZoneSpawn;//[Offset: 0x4b0, Size: 0x10]
	delegate OnPostPlayerRegisted;//[Offset: 0x4c0, Size: 0x10]
	delegate OnSyncAIRegisted;//[Offset: 0x4d0, Size: 0x10]
	delegate OnLevelSequencePlayEnd;//[Offset: 0x4e0, Size: 0x10]
	delegate OnArkPlayerDeathSimpleSignature;//[Offset: 0x4f0, Size: 0x10]
	delegate OnClientShuttleStart;//[Offset: 0x500, Size: 0x10]
	delegate OnShowHUDChangeDelegate;//[Offset: 0x510, Size: 0x10]
	delegate OnGunTechMagazineRecovered;//[Offset: 0x520, Size: 0x10]
	delegate OnArkPVEShowCountDown;//[Offset: 0x530, Size: 0x10]
	delegate LeaderboardAnimDelegate;//[Offset: 0x540, Size: 0x10]
	delegate OnPlatformTeamInviteEventProcessed;//[Offset: 0x550, Size: 0x10]
	delegate OnSubmersibleBubbleStateChanged;//[Offset: 0x560, Size: 0x10]
	delegate OnSubmersibleBubbleFinished;//[Offset: 0x570, Size: 0x10]
	delegate OnSubmersibleBubbleWaveStarted;//[Offset: 0x580, Size: 0x10]
	delegate OnSubmersibleBubbleWaveFinished;//[Offset: 0x590, Size: 0x10]
	delegate OnSubmersibleSpawnAIPattern;//[Offset: 0x5a0, Size: 0x10]
	delegate OnDensityAccumulatorEvent;//[Offset: 0x5b0, Size: 0x10]
	delegate OnDensityValueChanged;//[Offset: 0x5c0, Size: 0x10]
	delegate OnMaterialRunTrapTreasureBoxStateChanged;//[Offset: 0x5d0, Size: 0x10]
	delegate OnMaterialRunTrapTreasureBoxFinished;//[Offset: 0x5e0, Size: 0x10]
	delegate OnMaterialRunTrapTreasureBoxWaveStarted;//[Offset: 0x5f0, Size: 0x10]
	delegate OnMaterialRunTrapTreasureBoxWaveFinished;//[Offset: 0x600, Size: 0x10]
	delegate OnMaterialRunTrapTreasureBoxWaitFinish;//[Offset: 0x610, Size: 0x10]
	delegate OnServivingStoreClosed;//[Offset: 0x620, Size: 0x10]
	delegate OnDelayFinishedExecuteCloneAttack;//[Offset: 0x630, Size: 0x10]
	delegate OnToggleCurrencyWidgetUpdatePerChanged;//[Offset: 0x640, Size: 0x10]
	delegate OnStartCurrencyWidgetUpdateAmountAnim;//[Offset: 0x650, Size: 0x10]
	delegate OnPlayerTeamInfoChangeDelegate;//[Offset: 0x660, Size: 0x10]
	delegate OnBackToHaven;//[Offset: 0x910, Size: 0x10]
	delegate OnNotebookPipTipShowStart;//[Offset: 0x930, Size: 0x10]
	delegate OnNotebookPipTipShowStop;//[Offset: 0x940, Size: 0x10]
	delegate OnNotebookPipTipShowFinished;//[Offset: 0x950, Size: 0x10]
	delegate OnInGamePlayerAddLike;//[Offset: 0x960, Size: 0x10]
	delegate OnMistTowerStateChange;//[Offset: 0x970, Size: 0x10]
	delegate OnMistModeFinish;//[Offset: 0x980, Size: 0x10]
	delegate OnMistyModeSucceed;//[Offset: 0x990, Size: 0x10]
	delegate OnMistyModeFailed;//[Offset: 0x9a0, Size: 0x10]
	delegate OnObjectiveInstanceQuestCountChange;//[Offset: 0x9b0, Size: 0x10]
	delegate OnPickupGameLifeTimeDelegate;//[Offset: 0x9c0, Size: 0x10]
	delegate OnCinematicStatisticsTypeChangedDelegate;//[Offset: 0x9d0, Size: 0x10]
	delegate OnUsedHealthPackDelegate;//[Offset: 0x9e0, Size: 0x10]
	delegate OnEnterDarkErosionPortal;//[Offset: 0x9f0, Size: 0x10]
	delegate OnLeaveDarkErosionPortal;//[Offset: 0xa00, Size: 0x10]
	delegate OnForceTeamMateInPVPMenu;//[Offset: 0xa10, Size: 0x10]
	delegate OnCommodityPurchased;//[Offset: 0xa20, Size: 0x10]
	delegate OnEventRewardCardRspInfoChanged;//[Offset: 0xa30, Size: 0x10]
	void OnMapMarkerSpawned__DelegateSignature(int OwnerPlayerID);// 0x305c9c0
	void OnGameFlowChange__DelegateSignature(enum LastMode, enum NewMode, float StartTime);// 0x305c9c0
	static ArkDelegateDispatcher* Get(const Object* WorldContext);// 0x26fb420

--------------------------------
Class: ArkPopupMenuNanoBand.ArkPopupMenuBase.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TextBlock_PlayerName;//[Offset: 0x4e0, Size: 0x8]
	TextBlock* TextBlock_PlayerGrade;//[Offset: 0x4e8, Size: 0x8]
	TextBlock* TextBlock_CurXP;//[Offset: 0x4f0, Size: 0x8]
	TextBlock* TextBlock_MaxXP;//[Offset: 0x4f8, Size: 0x8]
	ProgressBar* ProgressBar_ExpProgress;//[Offset: 0x500, Size: 0x8]
	TextBlock* TextBlock_NanoPointScore;//[Offset: 0x508, Size: 0x8]
	ArkNanoBandSchemePreset* WBP_EditScheme;//[Offset: 0x510, Size: 0x8]
	ArkNanoBandCardPreset* WBP_CardPreset;//[Offset: 0x518, Size: 0x8]
	ArkNanoBandWeaponPreset* WBP_WeaponPreset;//[Offset: 0x520, Size: 0x8]
	ArkNanoBandHeroPreset* WBP_HeroPreset;//[Offset: 0x528, Size: 0x8]
	ArkNanoBandStartButton* WBP_StartButton;//[Offset: 0x530, Size: 0x8]
	ArkKeyTipsButton* CancelButton;//[Offset: 0x538, Size: 0x8]
	WidgetAnimation* Anim_CloseUI;//[Offset: 0x540, Size: 0x8]
	WidgetAnimation* Anim_NanoBandUI;//[Offset: 0x548, Size: 0x8]
	ArkPgosPlayerAvatar* WBP_PgosPlayerAvatar;//[Offset: 0x550, Size: 0x8]
	ArkUserDataModel* PlayerDataModel;//[Offset: 0x558, Size: 0x8]
	ArkUserDataModel* SurvivorDataModel;//[Offset: 0x560, Size: 0x8]
	ArkUserDataModel* TeamDataModel;//[Offset: 0x568, Size: 0x8]
	ArkUserDataModel* WeaponDataModel;//[Offset: 0x570, Size: 0x8]
	FName SchemeUIMenu;//[Offset: 0x588, Size: 0x8]
	FName CardUIMenu;//[Offset: 0x590, Size: 0x8]
	FName WeaponUIMenu;//[Offset: 0x598, Size: 0x8]
	FName HeroUIMenu;//[Offset: 0x5a0, Size: 0x8]
	FName MatchingEntranceUIMenu;//[Offset: 0x5a8, Size: 0x8]
	float ProgressChangeSpeed;//[Offset: 0x5b0, Size: 0x4]
	ArkCommonButton*[] MenuButtonList;//[Offset: 0x5c8, Size: 0x10]
	void ValidSceneTransitionAnim();// 0x2cf40a0
	void UpdateEntranceStates();// 0x2cfc570
	bool ShouldSkipHandleEntrance(enum Type);// 0x2cfc4e0
	void SetOnlyHandleEntrance(enum Type);// 0x2cfc460
	void SetCurrentSelectIndex(int InSelectIndex);// 0x2cfc3e0
	ArkCommonButton* SelectNextWidget(enum NavigationOperation);// 0x2cfc350
	bool SelectNanoBandMenuButton(int ButtonIndex);// 0x2cfc2c0
	void ResetOnlyHandleEntrance();// 0x2cfc2a0
	void PlaySceneTransitionAnim(bool bForward, bool bReset);// 0x2cfc170
	void OnWeaponPresetClicked();// 0x2cfc150
	void OnSyncToSurvivor(ArkPlayer* NPC, FString SurvivorID);// 0x2cfc070
	void OnStartButtonClicked();// 0x2cfc050
	void OnPreSyncToNewHero(ArkPlayer* NPC, FString SurvivorID);// 0x2cfbf50
	void OnHeroPresetClicked();// 0x2cfbd30
	void OnEditSchemeClicked();// 0x2cfbcf0
	void OnCloseUIAnimFinished();// 0x28f98f0
	void OnCardPresetClicked();// 0x2cfbb90
	void OnCancelAction();// 0x2cfbb70
	void GMSetHandleEntrance(int Entrance);// 0x2cfb7e0
	void BP_SetEntranceStatesInTutorial();// 0x305c9c0
	void BP_ResetEntranceStates();// 0x305c9c0
	void BP_OnSetOnlyHandleEntrance(enum Type);// 0x305c9c0
	void BP_OnResetOnlyHandleEntrance();// 0x305c9c0

--------------------------------
Class: ArkNanoBandSchemePreset.ArkHandleKeyTipsButton.ArkCommonButton.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	WidgetAnimation* Anim_NormalToHover;//[Offset: 0x550, Size: 0x8]
	ArkShortCutActionTipsItemData PresetActionTipsItemData;//[Offset: 0x558, Size: 0x128]
	void SetInputEnabled(bool bEnabled);// 0x2cd66d0
	void NativeOnClicked();// 0x278d000

--------------------------------
Class: ArkHandleKeyTipsButton.ArkCommonButton.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	bool bShouldAutoHandleKeyTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1]
	bool bShouldAutoHandleOnMouseInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x421, Size: 0x1]
	bool bShouldSetFocusOnClicked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x422, Size: 0x1]
	bool bShouldSetSelectionOnFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x423, Size: 0x1]
	bool bShouldAutoHandleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 0x1]
	bool bShouldDelaySetSelectionOnHovered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x425, Size: 0x1]
	bool bShouldClearSelectionOnUnHovered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x426, Size: 0x1]
	bool bShouldClearSelectionOnAllExtendedWidgetsUnhovered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x427, Size: 0x1]
	float DelayTime;//[Offset: 0x428, Size: 0x4]
	WidgetAnimation* Anim_NormalToHovered;//[Offset: 0x430, Size: 0x8]
	WidgetAnimation* Anim_HoveredToSelected;//[Offset: 0x438, Size: 0x8]
	WidgetAnimation* Anim_NormalToSelected;//[Offset: 0x440, Size: 0x8]
	Widget*[] ExtendedWidgets;//[Offset: 0x490, Size: 0x10]
	void ShowKeyTips();// 0x2c8cdf0
	bool IsKeyTipsShow();// 0x28e7b20
	void InitButtonState();// 0x2c8ba00
	void HideKeyTips();// 0x2c8b9e0
	void BP_OnKeyTipsShow();// 0x305c9c0
	void BP_OnKeyTipsHide();// 0x305c9c0
	void BP_OnButtonStateChanged(bool bInIsHovered, bool bInIsSelected);// 0x305c9c0

--------------------------------
Class: ArkShortCutActionTipsItemData
	FName InputActionName;//[Offset: 0x0, Size: 0x8]
	FText ActionText;//[Offset: 0x8, Size: 0x18]
	bool bActionDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
	enum ShortCutButtonIconType;//[Offset: 0x21, Size: 0x1]
	PaperSprite* ShortCutButtonIconSprite;//[Offset: 0x28, Size: 0x28]
	AkAudioEvent* AkEventOnPressed;//[Offset: 0x50, Size: 0x28]
	AkAudioEvent* AkEventOnReleased;//[Offset: 0x78, Size: 0x28]
	AkAudioEvent* AkEventOnStartHold;//[Offset: 0xa0, Size: 0x28]
	AkAudioEvent* AkEventOnHoldFinish;//[Offset: 0xc8, Size: 0x28]
	AkAudioEvent* AkEventOnHoldCancel;//[Offset: 0xf0, Size: 0x28]

--------------------------------
Class: ArkNanoBandCardPreset.ArkCommonButton.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	WidgetAnimation* Anim_NormalToHover;//[Offset: 0x420, Size: 0x8]
	ArkShortCutActionTipsItemData PresetActionTipsItemData;//[Offset: 0x430, Size: 0x128]
	void SetInputEnabled(bool bEnabled);// 0x2cd18c0
	void NativeOnClicked();// 0x278d000

--------------------------------
Class: ArkNanoBandWeaponPreset.ArkCommonButton.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	ArkReadyUpWeaponItemWidget* WBP_WeaponPrimary;//[Offset: 0x420, Size: 0x8]
	ArkReadyUpWeaponItemWidget* WBP_WeaponPistol;//[Offset: 0x428, Size: 0x8]
	ArkReadyUpWeaponItemWidget* WBP_WeaponMelee;//[Offset: 0x430, Size: 0x8]
	WidgetAnimation* Anim_NormalToHover;//[Offset: 0x438, Size: 0x8]
	ArkShortCutActionTipsItemData PresetActionTipsItemData;//[Offset: 0x440, Size: 0x128]
	ArkUserDataModel* PlayerDataModel;//[Offset: 0x568, Size: 0x8]
	ReadyUpHeroWeaponInfo WeaponInfoPrimary;//[Offset: 0x570, Size: 0x48]
	ReadyUpHeroWeaponInfo WeaponInfoPistol;//[Offset: 0x5b8, Size: 0x48]
	ReadyUpHeroWeaponInfo WeaponInfoMelee;//[Offset: 0x600, Size: 0x48]
	void SetInputEnabled(bool bEnabled);// 0x2cd67f0
	void RefreshWeaponPresetWidget(int PrimaryItemID, int PistolItemID, int MeleeItemID);// 0x2cd65d0
	void OnChangeWeaponQuick();// 0x305c9c0
	void NativeOnClicked();// 0x278d000

--------------------------------
Class: ArkReadyUpWeaponItemWidget.UserWidget.Widget.Visual.Object
	TextBlock* TextBlock_WeaponName;//[Offset: 0x238, Size: 0x8]
	TextBlock* TextBlock_Quality;//[Offset: 0x240, Size: 0x8]
	ArkAvatarImage* WBP_Weapon;//[Offset: 0x248, Size: 0x8]
	Overlay* Overlay_GT;//[Offset: 0x250, Size: 0x8]
	Image* GunTechIcon;//[Offset: 0x258, Size: 0x8]
	int WeaponQuality;//[Offset: 0x260, Size: 0x4]
	LinearColor WeaponQualityColor;//[Offset: 0x264, Size: 0x10]

--------------------------------
Class: ArkAvatarImage.ArkCommonWidgetBase.UserWidget.Widget.Visual.Object
	Image* AvatarImage;//[Offset: 0x240, Size: 0x8]
	Widget* LoadingAnimationWidget;//[Offset: 0x248, Size: 0x8]
	Vector2D AvatarResolution;//[Offset: 0x250, Size: 0x8]
	ArkCaptureItemInfo CurrentItemInfo;//[Offset: 0x260, Size: 0x20]
	void SetImageGray(bool bGray);// 0x2c5ca80
	void RequestAdvancedLoad(FString ItemString, enum CaptureType, int ItemCaptureConfigID);// 0x2c5c850
	void OnAvatarJobDone(int JobID, Texture* PlayerIcon, bool isFailed);// 0x2c5c200

--------------------------------
Class: ReadyUpHeroWeaponInfo
	int ItemId;//[Offset: 0x0, Size: 0x4]
	FText Name;//[Offset: 0x8, Size: 0x18]
	int Quality;//[Offset: 0x20, Size: 0x4]
	LinearColor IconQualityColor;//[Offset: 0x24, Size: 0x10]
	FString EquipmentAvatarStr;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: ArkNanoBandHeroPreset.ArkCommonButton.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	Image* Image_Hero;//[Offset: 0x420, Size: 0x8]
	TextBlock* TextBlock_HeroName;//[Offset: 0x428, Size: 0x8]
	Image* Image_Nano;//[Offset: 0x430, Size: 0x8]
	TextBlock* TextBlock_NanoName;//[Offset: 0x438, Size: 0x8]
	HorizontalBox* HorizontalBox;//[Offset: 0x440, Size: 0x8]
	WidgetAnimation* Anim_NormalToHover;//[Offset: 0x448, Size: 0x8]
	ArkShortCutActionTipsItemData PresetActionTipsItemData;//[Offset: 0x450, Size: 0x128]
	ArkUserDataModel* SurvivorDataModel;//[Offset: 0x578, Size: 0x8]
	void SetInputEnabled(bool bEnabled);// 0x2cd1950
	void RefreshHeroPresetWidget(int HeroID);// 0x2cd1840
	void NativeOnClicked();// 0x278d000

--------------------------------
Class: HorizontalBox.PanelWidget.Widget.Visual.Object
	HorizontalBoxSlot* AddChildToHorizontalBox(Widget* Content);// 0x414be90

--------------------------------
Class: HorizontalBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10]
	SlateChildSize Size;//[Offset: 0x50, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x414e6d0
	void SetSize(SlateChildSize InSize);// 0x414e540
	void SetPadding(Margin InPadding);// 0x414df90
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x414db40

--------------------------------
Class: ArkNanoBandStartButton.ArkCommonButton.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	WidgetAnimation* Anim_NormalToHover;//[Offset: 0x420, Size: 0x8]
	ArkShortCutActionTipsItemData PresetActionTipsItemData;//[Offset: 0x428, Size: 0x128]
	void SetInputEnabled(bool bEnabled);// 0x2cd6760
	void NativeOnClicked();// 0x278d000

--------------------------------
Class: ArkPgosPlayerAvatar.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	Image* Image_icon;//[Offset: 0x300, Size: 0x8]
	Image* Image_frame;//[Offset: 0x308, Size: 0x8]
	<FString,Texture2D*> LocalProfileAvatarMap;//[Offset: 0x320, Size: 0x50]
	ArkUserDataModel* PlayerDataModel;//[Offset: 0x370, Size: 0x8]
	AsyncTaskDownloadImage* ThisDownloadImageManager;//[Offset: 0x378, Size: 0x8]
	void SetLocallyPlayerMemberID();// 0x28836e0
	void OnGetTexture2D(Texture2DDynamic* _texture);// 0x28833f0
	void CacheMemberIDInAvatar(out const int64 InMemberID);// 0x2883090
	void BP_HandleUrlAvatarEquip(Texture2DDynamic* DynamicTexture);// 0x305c9c0
	void BP_HandleAvatarEquip(enum Type, out const Texture2D* SoftTexture);// 0x305c9c0

--------------------------------
Class: AsyncTaskDownloadImage.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFail;//[Offset: 0x40, Size: 0x10]
	static AsyncTaskDownloadImage* DownloadImage(FString URL);// 0x4143b30

--------------------------------
Class: BlueprintAsyncActionBase.Object
	void Activate();// 0x188cec0

--------------------------------
Class: ArkGameStateHaven_BP_C.ArkGameStateHaven.ArkGameStateBattle.ArkGameStateBase.GameState.GameStateBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x6a0, Size: 0x8]
	MetaTutorialManager_C* MetaTutorialManager;//[Offset: 0x6a8, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6b0, Size: 0x8]
	void ReceiveBeginPlay();// 0x305c9c0
	void ExecuteUbergraph_ArkGameStateHaven_BP(int EntryPoint);// 0x305c9c0

--------------------------------
Class: ArkGameStateHaven.ArkGameStateBattle.ArkGameStateBase.GameState.GameStateBase.Info.Actor.Object
	bool bForceTestAnimStationsOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x698, Size: 0x1]
	void SetForceTestAnimStationsOnly(const bool State);// 0x27763d0
	bool GetForceTestAnimStationsOnly();// 0x2775720

--------------------------------
Class: ArkGameSession.GameSession.Info.Actor.Object

--------------------------------
Class: ArkAICommandUtility_BP_C.ArkAICommandUtility.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2e8, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2f0, Size: 0x8]
	<FName,int> SpecifiedAITypes;//[Offset: 0x2f8, Size: 0x50]
	float MinSpawnRadius;//[Offset: 0x348, Size: 0x4]
	float MaxSpawnRadius;//[Offset: 0x34c, Size: 0x4]
	float AIAttractRadius;//[Offset: 0x350, Size: 0x4]
	void ReceiveBeginPlay();// 0x305c9c0
	void AttractAI();// 0x305c9c0
	void VolumeAttractAI(Volume* boundVolume);// 0x305c9c0
	void AttractAIAtLocation(Vector Location);// 0x305c9c0
	void ForceAILookAt();// 0x305c9c0
	void AttractAIAtRangeAtLocation(Vector Location, float Range, enum AIEmotion);// 0x305c9c0
	void ExecuteUbergraph_ArkAICommandUtility_BP(int EntryPoint, Vector K2Node_CustomEvent_Location, float K2Node_CustomEvent_Range, enum K2Node_CustomEvent_AIEmotion, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Volume* K2Node_CustomEvent_BoundVolume, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, Vector K2Node_CustomEvent_Location, bool CallFunc_HasAuthority_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue);// 0x305c9c0

--------------------------------
Class: ArkAvatarFaceLightActor.Actor.Object
	SceneComponent* SceneRoot;//[Offset: 0x2f0, Size: 0x8]
	float LightDistanceToPlayer;//[Offset: 0x2f8, Size: 0x4]
	float IntencityRateToMainDLight;//[Offset: 0x2fc, Size: 0x4]
	float SpecularScale;//[Offset: 0x300, Size: 0x4]
	PointLightComponent* curLight;//[Offset: 0x310, Size: 0x8]
	DirectionalLightComponent* CurDirectLight;//[Offset: 0x318, Size: 0x8]
	Actor* curPlayer;//[Offset: 0x320, Size: 0x8]
	Actor* curCamera;//[Offset: 0x328, Size: 0x8]
	DirectionalLight* mainLight;//[Offset: 0x330, Size: 0x8]
	SphereComponent* testSphere;//[Offset: 0x338, Size: 0x8]
	World* ParentWorld;//[Offset: 0x390, Size: 0x8]
	void SetCurPlayer(Actor* Player);// 0x267db80
	void SetCurCamera(Actor* Camera);// 0x267db00
	void ChangeLightState();// 0x267ced0

--------------------------------
Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float ShadowCascadeBiasDistribution;//[Offset: 0x508, Size: 0x4]
	bool bEnableLightShaftOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50c, Size: 0x1]
	float OcclusionMaskDarkness;//[Offset: 0x510, Size: 0x4]
	float OcclusionDepthRange;//[Offset: 0x514, Size: 0x4]
	Vector LightShaftOverrideDirection;//[Offset: 0x518, Size: 0xc]
	float WholeSceneDynamicShadowRadius;//[Offset: 0x524, Size: 0x4]
	float DynamicShadowDistanceMovableLight;//[Offset: 0x528, Size: 0x4]
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x52c, Size: 0x4]
	bool bCloseFitShadowCaster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 0x1]
	int DynamicShadowCascades;//[Offset: 0x534, Size: 0x4]
	float CascadeDistributionExponent;//[Offset: 0x538, Size: 0x4]
	float CascadeTransitionFraction;//[Offset: 0x53c, Size: 0x4]
	float ShadowDistanceFadeoutFraction;//[Offset: 0x540, Size: 0x4]
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x544, Size: 0x1]
	int FarShadowCascadeCount;//[Offset: 0x548, Size: 0x4]
	float FarShadowDistance;//[Offset: 0x54c, Size: 0x4]
	float DistanceFieldShadowDistance;//[Offset: 0x550, Size: 0x4]
	float LightSourceAngle;//[Offset: 0x554, Size: 0x4]
	float LightSourceSoftAngle;//[Offset: 0x558, Size: 0x4]
	float ShadowSourceAngleFactor;//[Offset: 0x55c, Size: 0x4]
	float TraceDistance;//[Offset: 0x560, Size: 0x4]
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x564, Size: 0x1]
	int AtmosphereSunLightIndex;//[Offset: 0x568, Size: 0x4]
	LinearColor AtmosphereSunDiskColorScale;//[Offset: 0x56c, Size: 0x10]
	bool bPerPixelAtmosphereTransmittance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x57c, Size: 0x1]
	bool bCastShadowsOnClouds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x57c, Size: 0x1]
	bool bCastShadowsOnAtmosphere;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x57c, Size: 0x1]
	bool bCastCloudShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x57c, Size: 0x1]
	float CloudShadowStrength;//[Offset: 0x580, Size: 0x4]
	float CloudShadowOnAtmosphereStrength;//[Offset: 0x584, Size: 0x4]
	float CloudShadowOnSurfaceStrength;//[Offset: 0x588, Size: 0x4]
	float CloudShadowDepthBias;//[Offset: 0x58c, Size: 0x4]
	float CloudShadowExtent;//[Offset: 0x590, Size: 0x4]
	float CloudShadowMapResolutionScale;//[Offset: 0x594, Size: 0x4]
	float CloudShadowRaySampleCountScale;//[Offset: 0x598, Size: 0x4]
	LinearColor CloudScatteredLuminanceScale;//[Offset: 0x59c, Size: 0x10]
	LightmassDirectionalLightSettings LightmassSettings;//[Offset: 0x5ac, Size: 0x10]
	bool bCastModulatedShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5bc, Size: 0x1]
	Color ModulatedShadowColor;//[Offset: 0x5c0, Size: 0x4]
	Texture2D* ShadowQuadTreeData;//[Offset: 0x5c8, Size: 0x28]
	Texture2D* ShadowQuadTreeAuxData;//[Offset: 0x5f0, Size: 0x28]
	BoxSphereBounds SceneBounds;//[Offset: 0x618, Size: 0x1c]
	bool bUseCompressedShadowMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x634, Size: 0x1]
	float ShadowAmount;//[Offset: 0x638, Size: 0x4]
	void SetShadowDistanceFadeoutFraction(float NewValue);// 0x4b83ee0
	void SetShadowAmount(float NewValue);// 0x4b83e60
	void SetOcclusionMaskDarkness(float NewValue);// 0x4b83de0
	void SetLightShaftOverrideDirection(Vector NewValue);// 0x4b83d50
	void SetEnableLightShaftOcclusion(bool bNewValue);// 0x4b83a70
	void SetDynamicShadowDistanceStationaryLight(float NewValue);// 0x4b839f0
	void SetDynamicShadowDistanceMovableLight(float NewValue);// 0x4b83970
	void SetDynamicShadowCascades(int NewValue);// 0x4b838f0
	void SetCascadeTransitionFraction(float NewValue);// 0x4b83770
	void SetCascadeDistributionExponent(float NewValue);// 0x4b836f0
	void SetAtmosphereSunLightIndex(int NewValue);// 0x4b83670
	void SetAtmosphereSunLight(bool bNewValue);// 0x4b835e0

--------------------------------
Class: LightmassDirectionalLightSettings.LightmassLightSettings
	float LightSourceAngle;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: DirectionalLight.Light.Actor.Object

--------------------------------
Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x2e8, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f0, Size: 0x1]
	void ToggleEnabled();// 0x4c22c30
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x4c223c0
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x4c222c0
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x4c221c0
	void SetLightColor(LinearColor NewLightColor);// 0x4c21ff0
	void SetEnabled(bool bSetEnabled);// 0x4c21c50
	void SetCastShadows(bool bNewValue);// 0x4c21970
	void SetBrightness(float NewBrightness);// 0x4c218f0
	void SetAffectTranslucentLighting(bool bNewValue);// 0x4c21550
	void OnRep_bEnabled();// 0x26314b0
	bool IsEnabled();// 0x4c20ff0
	LinearColor GetLightColor();// 0x4c20f70
	float GetBrightness();// 0x4c20f10

--------------------------------
Class: ArkPCHaven_BP_C.ArkPC_BP_C.ArkPlayerControllerBattle.ArkPlayerControllerBattleBase.ArkPlayerControllerBase.PlayerController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xf38, Size: 0x8]
	ArkHavenStatPropertyRef NewVar;//[Offset: 0xf40, Size: 0xc]
	Actor*[] NewVar;//[Offset: 0xf50, Size: 0x10]
	void ExecuteUbergraph_ArkPCHaven_BP(int EntryPoint);// 0x305c9c0
	LuaOverridesClass LUA_OVERRIDES_ArkPCHaven_BP_C;//[Size: 0x0]

--------------------------------
Class: ArkPC_BP_C.ArkPlayerControllerBattle.ArkPlayerControllerBattleBase.ArkPlayerControllerBase.PlayerController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xf08, Size: 0x8]
	ArkAutoPlayerComponent* ArkAutoPlayer;//[Offset: 0xf10, Size: 0x8]
	delegate OnEnterEpisode;//[Offset: 0xf18, Size: 0x10]
	enum PreviousSyncState;//[Offset: 0xf28, Size: 0x1]
	float RandomFloat;//[Offset: 0xf2c, Size: 0x4]
	bool HasSpawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf30, Size: 0x1]
	void Update Low Health PP(bool CallFunc_IsDedicatedServer_ReturnValue, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, Pawn* CallFunc_GetLocalControlledPawnOrSpectator_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, ArkPlayer* K2Node_DynamicCast_AsArk_Player, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsAlive_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsResistingDeath_ReturnValue, bool CallFunc_IsLowHealth_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x305c9c0
	void ForwardTrace(float Length, bool ReturnFarestIfNotHit, out bool IsHit, out Vector HitLocation, Pawn* CallFunc_K2_GetPawn_ReturnValue, const Actor*[] K2Node_MakeArray_Array, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, Vector CallFunc_GetActorForwardVector_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd);// 0x305c9c0
	void PlayWayPointVO();// 0x305c9c0
	void PlayMarkerEventVO();// 0x305c9c0
	void PlayWheelMarkerVO();// 0x305c9c0
	void ExecuteUbergraph_ArkPC_BP(int EntryPoint, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable);// 0x305c9c0
	void OnEnterEpisode__DelegateSignature();// 0x305c9c0

--------------------------------
Class: ArkAutoPlayerComponent.ActorComponent.Object
	class ArkRobotController* RobotClass;//[Offset: 0x208, Size: 0x8]
	ArkRobotStrategyOption StrategyOption;//[Offset: 0x210, Size: 0x20]
	ArkRobotActionScore ActionScore;//[Offset: 0x230, Size: 0x128]
	ArkRobotHostileInfo HostileInfo;//[Offset: 0x358, Size: 0x80]
	RobotHostileInfo[] HostileList;//[Offset: 0x3d8, Size: 0x10]
	Actor* CurTarget;//[Offset: 0x3e8, Size: 0x8]
	ArkPlayerControllerBattle* MyPC;//[Offset: 0x3f0, Size: 0x8]
	delegate OnServiceFindPathEnd;//[Offset: 0x3f8, Size: 0x10]
	delegate OnShuttleLand;//[Offset: 0x408, Size: 0x10]
	delegate OnPickUped;//[Offset: 0x418, Size: 0x10]
	ArkAutoPlayerTaskGroup* CurrentTaskGroup;//[Offset: 0x430, Size: 0x8]
	void Stop();// 0x2d6e020
	void Start(out FString OpenCommand);// 0x2d6df70
	void ServerUnBindFunctionOnGameEnd();// 0x283b020
	void ServerSetPlayerLoc(Vector NewLoc);// 0x2d6dee0
	void ServerNotifyShuttleStateChanged(enum LastState, enum NewState, float StartTime, int OwnShuttleID);// 0x2d6dda0
	void ServerFindPath(Vector GoalLoc);// 0x2d6dcd0
	void ServerBindShuttleStateChanged();// 0x27bb600
	void ServerBindFunctionOnGameEnd();// 0x283b040
	void OnGameFlowChange(enum LastMode, enum NewMode, float StartTime);// 0x2d6d930
	void NotifyShuttleStateChanged(Actor* Shuttle);// 0x2d6d8a0
	void NotifyGameEnd();// 0x2917d50
	void ClientOnFindPath(const Vector[] Path, const PathNavLinkIDs(UInt32Property)[] PathNavLinkIDs);// 0x2d6d5f0
	void ClientCheckCommand();// 0xcbd8c0

--------------------------------
Class: ArkRobotStrategyOption.TableRowBase
	bool ShouldAttackNpc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	enum AttackNpcOption;//[Offset: 0x9, Size: 0x1]
	bool ShouldAttackPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool ShouldAttackRobot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]
	bool StrickBackNpc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool StrickBackPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	bool EvadeNpc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1]
	bool AttackNpcForSyncSocre;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 0x1]
	float ReachedRange;//[Offset: 0x10, Size: 0x4]
	float OutRange;//[Offset: 0x14, Size: 0x4]
	float LeaveTime;//[Offset: 0x18, Size: 0x4]
	float TeamRange;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ArkRobotActionScore.TableRowBase
	float HitTargetScore;//[Offset: 0x8, Size: 0x4]
	float SpotNpcScore;//[Offset: 0xc, Size: 0x4]
	float CoverScore;//[Offset: 0x10, Size: 0x4]
	float LocalCoverScore;//[Offset: 0x14, Size: 0x4]
	float AttackMoveTimeScore;//[Offset: 0x18, Size: 0x4]
	float AttackMoveMaxTime;//[Offset: 0x1c, Size: 0x4]
	float StandInitScore;//[Offset: 0x20, Size: 0x4]
	float StandTime;//[Offset: 0x24, Size: 0x4]
	float StandEndScore;//[Offset: 0x28, Size: 0x4]
	float LastHitScore;//[Offset: 0x2c, Size: 0x4]
	float InRoomScore;//[Offset: 0x30, Size: 0x4]
	float NearNpcScore;//[Offset: 0x34, Size: 0x4]
	float RangeNpcScore;//[Offset: 0x38, Size: 0x4]
	float DistScore;//[Offset: 0x3c, Size: 0x4]
	float EnemyDistScore;//[Offset: 0x40, Size: 0x4]
	float NearPlayerScore;//[Offset: 0x44, Size: 0x4]
	float WeaponPickUpScore;//[Offset: 0x48, Size: 0x4]
	float AmmoPickUpScore;//[Offset: 0x4c, Size: 0x4]
	float SupplyPickUpScore;//[Offset: 0x50, Size: 0x4]
	float ShieldPickUpScore;//[Offset: 0x54, Size: 0x4]
	float SyncPickUpScore;//[Offset: 0x58, Size: 0x4]
	float ScorePickUpScore;//[Offset: 0x5c, Size: 0x4]
	float TeamTogetherScore;//[Offset: 0x60, Size: 0x4]
	float GuardPlayerScore;//[Offset: 0x64, Size: 0x4]
	float GuardPlayerCloseScore;//[Offset: 0x68, Size: 0x4]
	float SpotPlayerScore;//[Offset: 0x6c, Size: 0x4]
	float SaveTeamMateScore;//[Offset: 0x70, Size: 0x4]
	float LocalScore;//[Offset: 0x74, Size: 0x4]
	float HighlandScore;//[Offset: 0x78, Size: 0x4]
	float WeaponRangeScore;//[Offset: 0x7c, Size: 0x4]
	float SameRoomScore;//[Offset: 0x80, Size: 0x4]
	float FleeDisScore;//[Offset: 0x84, Size: 0x4]
	float TargetBackScore;//[Offset: 0x88, Size: 0x4]
	float TargetForwardScore;//[Offset: 0x8c, Size: 0x4]
	float CombatVolumeScore;//[Offset: 0x90, Size: 0x4]
	float NpcSyncScore;//[Offset: 0x94, Size: 0x4]
	CurveFloat* DistScoreCurve;//[Offset: 0x98, Size: 0x8]
	CurveFloat* EnemyDistScoreCurve;//[Offset: 0xa0, Size: 0x8]
	bool bWeaponFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	bool bTargeting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 0x1]
	bool bRandSpecialMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa, Size: 0x1]
	bool bBlcokShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab, Size: 0x1]
	bool bMoveShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 0x1]
	bool bMoveShootTargetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad, Size: 0x1]
	bool bIgnoreCoverBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae, Size: 0x1]
	bool CheckStopMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf, Size: 0x1]
	bool bIgnoreHarmlessNpc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	float PickUpSearchRange;//[Offset: 0xb4, Size: 0x4]
	float TeamTogetherRange;//[Offset: 0xb8, Size: 0x4]
	float GuardPlayerRange;//[Offset: 0xbc, Size: 0x4]
	float GuardPlayerCloseRange;//[Offset: 0xc0, Size: 0x4]
	float ShipRange;//[Offset: 0xc4, Size: 0x4]
	float MoveSearchRange;//[Offset: 0xc8, Size: 0x4]
	float SepcialSearchRange;//[Offset: 0xcc, Size: 0x4]
	float FarTargetRange;//[Offset: 0xd0, Size: 0x4]
	float NearPlayerRange;//[Offset: 0xd4, Size: 0x4]
	float BackSearchMinRange;//[Offset: 0xd8, Size: 0x4]
	float BackSearchMaxRange;//[Offset: 0xdc, Size: 0x4]
	float CautionInRange;//[Offset: 0xe0, Size: 0x4]
	float CautionOutRange;//[Offset: 0xe4, Size: 0x4]
	float RoomSearchRange;//[Offset: 0xe8, Size: 0x4]
	float KeepTargetRange;//[Offset: 0xec, Size: 0x4]
	float HighlandHeight;//[Offset: 0xf0, Size: 0x4]
	float BlockShotMinDist;//[Offset: 0xf4, Size: 0x4]
	float TargetForwardAngle;//[Offset: 0xf8, Size: 0x4]
	float TargetForwardRange;//[Offset: 0x100, Size: 0x4]
	float TargetBackAngle;//[Offset: 0x104, Size: 0x4]
	float EnterCoverAngle;//[Offset: 0x10c, Size: 0x4]
	float ExitCoverAngle;//[Offset: 0x114, Size: 0x4]
	float LostPlayerSenedTime;//[Offset: 0x11c, Size: 0x4]
	float InteractionScore;//[Offset: 0x120, Size: 0x4]

--------------------------------
Class: ArkRobotHostileInfo.TableRowBase
	float NpcDistMaxTime;//[Offset: 0x8, Size: 0x4]
	float NpcNearRange;//[Offset: 0xc, Size: 0x4]
	float NpcNearIncreaseHostile;//[Offset: 0x10, Size: 0x4]
	float NpcFarRange;//[Offset: 0x14, Size: 0x4]
	float NpcFarDecreaseHostile;//[Offset: 0x18, Size: 0x4]
	float NpcDamageMaxTime;//[Offset: 0x1c, Size: 0x4]
	float NpcDamageHostile;//[Offset: 0x20, Size: 0x4]
	float NpcCanHitMaxTime;//[Offset: 0x24, Size: 0x4]
	float NpcCanHitInCreaseHostile;//[Offset: 0x28, Size: 0x4]
	float NpcCanNotHitDeCreaseHostile;//[Offset: 0x2c, Size: 0x4]
	float NpcInitHostile;//[Offset: 0x30, Size: 0x4]
	float PlayerDistMaxTime;//[Offset: 0x34, Size: 0x4]
	float PlayerNearRange;//[Offset: 0x38, Size: 0x4]
	float PlayerNearIncreaseHostile;//[Offset: 0x3c, Size: 0x4]
	float PlayerFarRange;//[Offset: 0x40, Size: 0x4]
	float PlayerFarDecreaseHostile;//[Offset: 0x44, Size: 0x4]
	float PlayerDamageMaxTime;//[Offset: 0x48, Size: 0x4]
	float PlayerDamageHostile;//[Offset: 0x4c, Size: 0x4]
	float PlayerCanHitMaxTime;//[Offset: 0x50, Size: 0x4]
	float PlayerCanHitInCreaseHostile;//[Offset: 0x54, Size: 0x4]
	float PlayerCanNotHitDeCreaseHostile;//[Offset: 0x58, Size: 0x4]
	float PlayerInitHostile;//[Offset: 0x5c, Size: 0x4]
	float TeamHostile;//[Offset: 0x60, Size: 0x4]
	float RobotPlayerHostileScale;//[Offset: 0x64, Size: 0x4]
	float DyingPlayerHostileScale;//[Offset: 0x68, Size: 0x4]
	float EliteNpcHostileScale;//[Offset: 0x6c, Size: 0x4]
	float HarmlessNpcHostileScale;//[Offset: 0x70, Size: 0x4]
	float HotFullHealthScale;//[Offset: 0x74, Size: 0x4]
	float ChangeTargetHostileThreshold;//[Offset: 0x78, Size: 0x4]
	float MinTargetHostile;//[Offset: 0x7c, Size: 0x4]

--------------------------------
Class: ArkAutoPlayerTaskGroup.Actor.Object
	<class ArkAutoPlayerTaskBase,int> ConfigTasks;//[Offset: 0x2e8, Size: 0x50]
	ArkAutoPlayerTaskBase*[] Tasks;//[Offset: 0x338, Size: 0x10]
	ArkAutoPlayerTaskBase* CurTask;//[Offset: 0x348, Size: 0x8]
	Performance[] RecordPerformances;//[Offset: 0x350, Size: 0x10]
	Task[] RecordTasks;//[Offset: 0x360, Size: 0x10]
	AutoPlayerBlackBoard Board;//[Offset: 0x370, Size: 0x78]
	ArkAutoPlayerServiceBase*[] Services;//[Offset: 0x3e8, Size: 0x10]
	ArkAutoPlayerServiceMoveTo* ServiceMoveTo;//[Offset: 0x3f8, Size: 0x8]
	class ArkAutoPlayerServiceBase[] ServiceClass;//[Offset: 0x420, Size: 0x10]

--------------------------------
Class: ArkAutoPlayerTaskBase.Object
	float ExecuteDuraion;//[Offset: 0x28, Size: 0x4]
	float ExecuteColdTime;//[Offset: 0x2c, Size: 0x4]
	ArkAutoPlayerTaskGroup* MyGroup;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: Performance

--------------------------------
Class: Task

--------------------------------
Class: AutoPlayerBlackBoard
	ArkAutoPlayerComponent* MyAuto;//[Offset: 0x0, Size: 0x8]
	ArkPlayerControllerBattle* MyPC;//[Offset: 0x8, Size: 0x8]
	ArkPlayer* MyPlayer;//[Offset: 0x10, Size: 0x8]
	Actor* TargetAct;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: ArkAutoPlayerServiceBase.Object
	ArkAutoPlayerTaskGroup* MyGroup;//[Offset: 0x28, Size: 0x8]
	ArkPlayer* MyPlayer;//[Offset: 0x38, Size: 0x8]
	ArkPlayerControllerBattle* MyPC;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: ArkAutoPlayerServiceMoveTo.ArkAutoPlayerServiceBase.Object
	NavLinkIDs(UInt32Property)[] NavLinkIDs;//[Offset: 0x90, Size: 0x10]
	Vector[] FollowPath;//[Offset: 0xa0, Size: 0x10]
	ArkAutoPlayerTaskBase* OwnerTask;//[Offset: 0x110, Size: 0x8]
	void OnStopMove();// 0x2d6db60
	void OnNeedMove(out ArkAutoPlayerNeedMove MoveInfo);// 0x2d6da30
	void NotifyGetPathFollow(out const Vector[] Path, out const PathNavLinkIDs(UInt32Property)[] PathNavLinkIDs);// 0x2d6d700

--------------------------------
Class: ArkAutoPlayerNeedMove

--------------------------------
Class: ArkPlayerState_BP_C.ArkPlayerStateBattle.ArkPlayerStateBase.PlayerState.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1108, Size: 0x8]
	QuestStateManager_PVP_C* QuestStateManager_PVP;//[Offset: 0x1110, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x1118, Size: 0x8]
	void ReceiveBeginPlay();// 0x305c9c0
	void ExecuteUbergraph_ArkPlayerState_BP(int EntryPoint, GameModeBase* CallFunc_GetGameMode_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, ArkGameModeShuttleBase* K2Node_DynamicCast_AsArk_Game_Mode_Shuttle_Base, bool K2Node_DynamicCast_bSuccess);// 0x305c9c0

--------------------------------
Class: ArkGameModeShuttleBase.ArkGameModeBattle.ArkGameModeBase.DSGameModeBase.GameMode.GameModeBase.Info.Actor.Object
	float KillScoreModeFactor;//[Offset: 0xc20, Size: 0x4]
	float RankScoreMultiFactor;//[Offset: 0xc24, Size: 0x4]
	float KillScoreNormalize;//[Offset: 0xc28, Size: 0x4]
	int WaitingTotalPlayerCount;//[Offset: 0xc2c, Size: 0x4]
	int WaitingTotalPlayerTeamCount;//[Offset: 0xc30, Size: 0x4]
	float DelayStartTimeout;//[Offset: 0xc34, Size: 0x4]
	bool bShouldCheckInRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc3c, Size: 0x1]
	void SetTotalPlayerCount(int InPlayerCount, int InTeamCount);// 0x275fb60
	void SetFinishSettlementTeamCount(int InVal);// 0x275f8f0
	void OnShuttleStateChanged(enum LastState, enum NewState, float StartTime, int OwnShuttleID);// 0x275f530
	void InitRankScoreBaseline();// 0x275efd0
	ArkGameStateGrandEscape* GetGameStateGrandEscape();// 0x275eae0
	void BP_OnShuttleRoundStateChanged(int CurrentRound, enum NewState);// 0x305c9c0
	void BP_OnMatchStart();// 0x305c9c0

--------------------------------
Class: ArkGameStateGrandEscape.ArkGameStateShuttleBase.ArkGameStateBattle.ArkGameStateBase.GameState.GameStateBase.Info.Actor.Object
	GrandEscapeTeamRankInfo[] TeamRank;//[Offset: 0x698, Size: 0x10]
	float ShuttleEnterIncomingTime;//[Offset: 0x6b8, Size: 0x4]
	int CurRound;//[Offset: 0x6bc, Size: 0x4]
	ArkEventProgressEventData[] CurRoundTimeData;//[Offset: 0x6c0, Size: 0x10]
	ArkShuttleScoreData[] CurShuttleScoreData;//[Offset: 0x6d0, Size: 0x10]
	ArkShuttleTeamScoreData[] CurShuttleTeamScoreData;//[Offset: 0x6e0, Size: 0x10]
	void SendPlayerStatisticalEvents(int WinningTeamID, CurrentPlayerID(UInt64Property) CurrentPlayerID, int TotalScore);// 0x27761d0
	void OnRep_TeamRankChanged();// 0x2776070
	void OnRep_CurShuttleScoreDataChanged();// 0xae2270
	void OnRep_CurShuttleRoundTimeDataChanged();// 0x2775ed0
	void InitCurRoundShuttleAndEventTimeData(int CurRoundParam);// 0x2775bd0
	int GetTeamRankIndex(int TeamId);// 0x2775a60
	void EndShuttleRound();// 0x2775460
	void AddTimeDataToGameState(float DelayTimer, enum EventType);// 0x2775160
	void AddShuttleScoreToGameState(PlayerId(UInt64Property) PlayerId, int ShuttleID, int ShuttleScore);// 0x2774f60

--------------------------------
Class: ArkEventProgressEventData
	float DelayTimer;//[Offset: 0x0, Size: 0x4]
	enum EventType;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: ArkShuttleScoreData
	UInt64Property PlayerId;//[Size: 0x8]
	int ShuttleID;//[Offset: 0x8, Size: 0x4]
	int ShuttleScore;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ArkShuttleTeamScoreData
	int TeamId;//[Offset: 0x0, Size: 0x4]
	int ShuttleID;//[Offset: 0x4, Size: 0x4]
	int ShuttleScore;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: QuestStateManager_PVP_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1e0, Size: 0x8]
	int QuestID_CollectResources;//[Offset: 0x1e8, Size: 0x4]
	int QuestID_PrepareForArkShuttle1;//[Offset: 0x1ec, Size: 0x4]
	int QuestID_PrepareForArkShuttle2;//[Offset: 0x1f0, Size: 0x4]
	int QuestID_SyncArkShuttle1;//[Offset: 0x1f4, Size: 0x4]
	int QuestID_SyncArkShuttle2;//[Offset: 0x1f8, Size: 0x4]
	int QuestID_DefendArkShuttle1;//[Offset: 0x1fc, Size: 0x4]
	int QuestID_DefendArkShuttle2;//[Offset: 0x200, Size: 0x4]
	int QuestID_IncomingForArkShuttle1;//[Offset: 0x204, Size: 0x4]
	int QuestID_IncomingForArkShuttle2;//[Offset: 0x208, Size: 0x4]
	int QuestID_LandForArkShuttle1;//[Offset: 0x20c, Size: 0x4]
	int QuestID_LandForArkShuttle2;//[Offset: 0x210, Size: 0x4]
	int QuestID_ReachForArkShuttle1;//[Offset: 0x214, Size: 0x4]
	int QuestID_ReachForArkShuttle2;//[Offset: 0x218, Size: 0x4]
	float InitDelaySeconds;//[Offset: 0x21c, Size: 0x4]
	ArkPlayerStateBattle* MyPlayerState;//[Offset: 0x220, Size: 0x8]
	bool bHasTakeOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	bool bIsInVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 0x1]
	class ArkShuttleUIDataDetector* ShuttleDataDetectorClass;//[Offset: 0x230, Size: 0x8]
	ArkShuttleUIDataDetector* FirstShuttleDataDetector;//[Offset: 0x238, Size: 0x8]
	ArkShuttleUIDataDetector* SecondShuttleDataDetector;//[Offset: 0x240, Size: 0x8]
	void TriggerWithShuttleActorEvent(FName CustomName, int ShuttleID, ArkShuttleManager* CallFunc_Get_ReturnValue, ArkShuttleBase* CallFunc_GetShuttleByID_ReturnValue, ArkPlayer* K2Node_DynamicCast_AsArk_Player, bool K2Node_DynamicCast_bSuccess);// 0x305c9c0
	void InitGlobalShuttleDelegates(delegate K2Node_CreateDelegate_OutputDelegate, ArkShuttleDelegates* CallFunc_Get_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, ArkShuttleDelegates* CallFunc_Get_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, ArkShuttleDelegates* CallFunc_Get_ReturnValue);// 0x305c9c0
	void InitShuttleDataDetector(delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, ArkShuttleManager* CallFunc_Get_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetLastShuttleID_ReturnValue, int CallFunc_GetFirstShuttleID_ReturnValue, bool CallFunc_IsValid_ReturnValue, ArkShuttleUIDataDetector* CallFunc_SpawnObject_ReturnValue, ArkShuttleUIDataDetector* CallFunc_SpawnObject_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x305c9c0
	void HasTeammates(out ArkPlayer*[] players, out bool Return, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, ArkPlayer* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, ArkPlayer* K2Node_DynamicCast_AsArk_Player, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsSameTeam_ReturnValue, bool CallFunc_IsAlive_ReturnValue);// 0x305c9c0
	void TriggerCustomEvent(FName CustomName, ArkPlayer* K2Node_DynamicCast_AsArk_Player, bool K2Node_DynamicCast_bSuccess);// 0x305c9c0
	void Log(FString StringContent, int ShuttleID, enum ShuttleState);// 0x305c9c0
	void GetShuttleIndex(int ShuttleID, out int ShuttleIndex, ArkShuttleManager* CallFunc_Get_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetLastShuttleID_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetFirstShuttleID_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x305c9c0
	void UpdateQuestByShuttleState(int ShuttleID, enum ShuttleState, FName Temp_name_Variable, bool K2Node_SwitchEnum_CmpSuccess, int CallFunc_GetShuttleIndex_ShuttleIndex, int CallFunc_GetShuttleIndex_ShuttleIndex, int CallFunc_GetShuttleIndex_ShuttleIndex, int Temp_int_Variable, FName Temp_name_Variable, FName Temp_name_Variable, bool CallFunc_IsValid_ReturnValue, FName K2Node_Select_Default, FName Temp_name_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetTeamID_ReturnValue, FName Temp_name_Variable, ArkShuttleManager* CallFunc_Get_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetFirstShuttleID_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, FName Temp_name_Variable, ArkShuttleManager* CallFunc_Get_ReturnValue, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, FName K2Node_Select_Default, int CallFunc_GetWinnerTeamID_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, ArkShuttleBase* CallFunc_GetShuttleByID_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Variable, FName K2Node_Select_Default);// 0x305c9c0
	void Update Quest Defend Ark Shuttle(bool FailedFlag);// 0x305c9c0
	void Update Quest Sync Ark Shuttle(bool FailedFlag, int ShuttleID);// 0x305c9c0
	void Trigger Quest Land for Ark Shuttle(int ShuttleID, int Temp_int_Variable, int CallFunc_GetShuttleIndex_ShuttleIndex, bool CallFunc_IsValid_ReturnValue, ArkQuestComponent* CallFunc_GetQuestComponent_ReturnValue, int K2Node_Select_Default, ArkQuestInstance* CallFunc_AddInGameQuestByID_ReturnValue);// 0x305c9c0
	void Trigger Quest Incoming for Ark Shuttle(int ShuttleID, int Temp_int_Variable, int CallFunc_GetShuttleIndex_ShuttleIndex, bool CallFunc_IsValid_ReturnValue, ArkQuestComponent* CallFunc_GetQuestComponent_ReturnValue, int K2Node_Select_Default, ArkQuestInstance* CallFunc_AddInGameQuestByID_ReturnValue);// 0x305c9c0
	void Trigger Quest Prepare for Ark Shuttle(int ShuttleID, int Temp_int_Variable, int CallFunc_GetShuttleIndex_ShuttleIndex, bool CallFunc_IsValid_ReturnValue, ArkQuestComponent* CallFunc_GetQuestComponent_ReturnValue, int K2Node_Select_Default, ArkQuestInstance* CallFunc_AddInGameQuestByID_ReturnValue);// 0x305c9c0
	void Trigger Quest Sync Ark Shuttle(int ShuttleID, int Temp_int_Variable, int CallFunc_GetShuttleIndex_ShuttleIndex, bool CallFunc_IsValid_ReturnValue, ArkQuestComponent* CallFunc_GetQuestComponent_ReturnValue, int K2Node_Select_Default, ArkQuestInstance* CallFunc_AddInGameQuestByID_ReturnValue);// 0x305c9c0
	void Trigger Quest Defend Ark Shuttle(int ShuttleID, int Temp_int_Variable, int CallFunc_GetShuttleIndex_ShuttleIndex, bool CallFunc_IsValid_ReturnValue, ArkQuestComponent* CallFunc_GetQuestComponent_ReturnValue, int K2Node_Select_Default, ArkQuestInstance* CallFunc_AddInGameQuestByID_ReturnValue);// 0x305c9c0
	void Trigger Quest Reach Ark Shuttle(int ShuttleID, int Temp_int_Variable, int CallFunc_GetShuttleIndex_ShuttleIndex, bool CallFunc_IsValid_ReturnValue, ArkQuestComponent* CallFunc_GetQuestComponent_ReturnValue, int K2Node_Select_Default, ArkQuestInstance* CallFunc_AddInGameQuestByID_ReturnValue);// 0x305c9c0
	void OnActivatedTeamIDChange_Event(int ShuttleID, int TeamId);// 0x305c9c0
	void OnShuttleStateChange_Event(enum LastState, enum NewState, float StartTime, int OwnShuttleID);// 0x305c9c0
	void OnBoardingShuttle_Event(out const ArkPlayerStateBattle*[] WinningPlayers);// 0x305c9c0
	void OnLastShuttleInRangeChange(bool InRangeNow);// 0x305c9c0
	void OnPlayerCountInLastShuttleRangeChange(int NewPlayerCount);// 0x305c9c0
	void OnLastShuttleActivatedUIStateChange(enum NewActivatedState);// 0x305c9c0
	void OnLastShuttleActivatingProgressChange(float NewProgress);// 0x305c9c0
	void OnLastShuttleActivatingUIStateChange(enum NewActivatingState);// 0x305c9c0
	void OnFirstShuttleInRangeChange(bool InRangeNow);// 0x305c9c0
	void OnPlayerCountInFirstShuttleRangeChange(int NewPlayerCount);// 0x305c9c0
	void OnFirstShuttleActivatedUIStateChange(enum NewActivatedState);// 0x305c9c0
	void OnFirstShuttleActivatingProgressChange(float NewProgress);// 0x305c9c0
	void OnFirstShuttleActivatingUIStateChange(enum NewActivatingState);// 0x305c9c0
	void OnActiveVolumeEnter(int ShuttleID, out const ArkPlayer*[] EnterPlayers, out const ArkPlayer*[] AllPlayersInVolume);// 0x305c9c0
	void ArrangeQuest(ArkPlayerStateBattle* PlayerState);// 0x305c9c0
	void OnActiveVolumeActivatedEnd(int TeamId, int ShuttleID);// 0x305c9c0
	void OnActiveVolumeExit(int ShuttleID, out const ArkPlayer*[] ExitPlayers, out const ArkPlayer*[] AllPlayersInVolume);// 0x305c9c0
	void OnGameFlowChange_Event(enum LastMode, enum NewMode, float StartTime);// 0x305c9c0
	void ExecuteUbergraph_QuestStateManager_PVP(int EntryPoint, int Temp_int_Variable, int K2Node_CustomEvent_ShuttleID, int K2Node_CustomEvent_TeamID, int CallFunc_GetTeamID_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, enum K2Node_CustomEvent_LastState, enum K2Node_CustomEvent_NewState, float K2Node_CustomEvent_StartTime, int K2Node_CustomEvent_OwnShuttleID, ArkQuestComponent* CallFunc_GetQuestComponent_ReturnValue, ArkPlayer* K2Node_DynamicCast_AsArk_Player, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, ArkQuestInstance* CallFunc_AddInGameQuestByID_ReturnValue, ArkQuestInstance* CallFunc_AddInGameQuestByID_ReturnValue, ArkShuttleManager* CallFunc_Get_ReturnValue, ArkQuestComponent* CallFunc_GetQuestComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, ArkQuestInstance* CallFunc_AddInGameQuestByID_ReturnValue, int CallFunc_GetWinnerTeamID_ReturnValue, const ArkPlayerStateBattle*[] K2Node_CustomEvent_WinningPlayers, int CallFunc_GetTeamID_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool K2Node_CustomEvent_InRangeNow, int K2Node_CustomEvent_NewPlayerCount, enum K2Node_CustomEvent_NewActivatedState, float K2Node_CustomEvent_NewProgress, bool K2Node_SwitchEnum_CmpSuccess, enum K2Node_CustomEvent_NewActivatingState, ArkShuttleManager* CallFunc_Get_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetLastShuttleID_ReturnValue, ArkShuttleManager* CallFunc_Get_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetLastShuttleID_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetTeamID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, ArkShuttleManager* CallFunc_Get_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetLastShuttleID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetWinnerTeamID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool K2Node_CustomEvent_InRangeNow, bool CallFunc_IsValid_ReturnValue, ArkPlayer* K2Node_DynamicCast_AsArk_Player, bool K2Node_DynamicCast_bSuccess, int K2Node_CustomEvent_NewPlayerCount, bool CallFunc_IsAlive_ReturnValue, enum K2Node_CustomEvent_NewActivatedState, bool K2Node_SwitchEnum_CmpSuccess, float K2Node_CustomEvent_NewProgress, enum K2Node_CustomEvent_NewActivatingState, ArkShuttleManager* CallFunc_Get_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetFirstShuttleID_ReturnValue, ArkShuttleManager* CallFunc_Get_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetFirstShuttleID_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, ArkShuttleManager* CallFunc_Get_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetFirstShuttleID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetWinnerTeamID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FName Temp_name_Variable, FName Temp_name_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetTeamID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_GetTeamID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int K2Node_CustomEvent_ShuttleID, const ArkPlayer*[] K2Node_CustomEvent_EnterPlayers, const ArkPlayer*[] K2Node_CustomEvent_AllPlayersInVolume, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_GetShuttleIndex_ShuttleIndex, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, ArkPlayerStateBattle* K2Node_CustomEvent_PlayerState, int K2Node_CustomEvent_TeamID, int K2Node_CustomEvent_ShuttleID, int Temp_int_Variable, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int K2Node_CustomEvent_ShuttleID, const ArkPlayer*[] K2Node_CustomEvent_ExitPlayers, const ArkPlayer*[] K2Node_CustomEvent_AllPlayersInVolume, bool CallFunc_Array_Contains_ReturnValue, int CallFunc_GetShuttleIndex_ShuttleIndex, FName K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, ArkShuttleManager* CallFunc_Get_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetLastShuttleID_ReturnValue, ArkShuttleBase* CallFunc_GetShuttleByID_ReturnValue, int CallFunc_GetFirstShuttleID_ReturnValue, bool CallFunc_IsValid_ReturnValue, ArkShuttleBase* CallFunc_GetShuttleByID_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, ArkShuttleManager* CallFunc_Get_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetWinnerTeamID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FName Temp_name_Variable, enum K2Node_CustomEvent_LastMode, enum K2Node_CustomEvent_NewMode, float K2Node_CustomEvent_StartTime, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, ArkPlayer* K2Node_DynamicCast_AsArk_Player, bool K2Node_DynamicCast_bSuccess, FName Temp_name_Variable, bool CallFunc_Array_Contains_ReturnValue, FName K2Node_Select_Default, bool CallFunc_IsAlive_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x305c9c0

--------------------------------
Class: ArkShuttleDelegates.ArkManagerBase.Object
	delegate OnShuttleSpawned;//[Offset: 0x90, Size: 0x10]
	delegate OnShuttleWasBroken;//[Offset: 0xa0, Size: 0x10]
	delegate OnAnimStateChange;//[Offset: 0xb0, Size: 0x10]
	delegate OnShuttleStateChange;//[Offset: 0xc0, Size: 0x10]
	delegate OnGotoLaunchState;//[Offset: 0xd0, Size: 0x10]
	delegate OnGotoEndState;//[Offset: 0xe0, Size: 0x10]
	delegate OnShuttleWasActivated;//[Offset: 0xf0, Size: 0x10]
	delegate OnShuttleWasRegistered;//[Offset: 0x100, Size: 0x10]
	delegate OnShuttleLandingWave;//[Offset: 0x110, Size: 0x10]
	delegate OnShuttleLaunchBlast;//[Offset: 0x120, Size: 0x10]
	delegate OnShuttleIncomingShow;//[Offset: 0x130, Size: 0x10]
	delegate OnPlayerCanSyncShuttle;//[Offset: 0x140, Size: 0x10]
	delegate OnPlayerStartSyncShuttle;//[Offset: 0x150, Size: 0x10]
	delegate OnPlayerClearShuttleEnemy;//[Offset: 0x160, Size: 0x10]
	delegate OnPlayerLeaveSyncShuttleRadius;//[Offset: 0x170, Size: 0x10]
	delegate OnPlayerSyncShuttleFinish;//[Offset: 0x180, Size: 0x10]
	delegate OnActiveVolumeActivateStart;//[Offset: 0x190, Size: 0x10]
	delegate OnActiveVolumeActivateTick;//[Offset: 0x1a0, Size: 0x10]
	delegate OnActiveVolumeActivateStop;//[Offset: 0x1b0, Size: 0x10]
	delegate OnActiveVolumeActivateEnd;//[Offset: 0x1c0, Size: 0x10]
	delegate OnActiveVolumeEnter;//[Offset: 0x1d0, Size: 0x10]
	delegate OnActiveVolumeExit;//[Offset: 0x1e0, Size: 0x10]
	delegate OnLastInVolume;//[Offset: 0x1f0, Size: 0x10]
	delegate OnShuttleSpawnedWeapons;//[Offset: 0x200, Size: 0x10]
	delegate OnShuttleActivatedWeapons;//[Offset: 0x210, Size: 0x10]
	delegate OnStateCountDown;//[Offset: 0x220, Size: 0x10]
	delegate OnShuttleInteract;//[Offset: 0x230, Size: 0x10]
	delegate OnShuttleLeaveStateAnimFinished;//[Offset: 0x240, Size: 0x10]
	delegate OnShuttleVictoryCineFinished;//[Offset: 0x250, Size: 0x10]
	delegate OnShuttleDrawCineFinished;//[Offset: 0x260, Size: 0x10]
	delegate OnOpenerGoToShuttleStage;//[Offset: 0x270, Size: 0x10]
	delegate OnShuttleFinished;//[Offset: 0x280, Size: 0x10]
	delegate OnActivatedTeamIDChange;//[Offset: 0x290, Size: 0x10]
	delegate OnProgressChange;//[Offset: 0x2a0, Size: 0x10]
	delegate OnTeamIDsInRadiusChanged;//[Offset: 0x2b0, Size: 0x10]
	delegate OnPlayerIDsInRadiusChanged;//[Offset: 0x2c0, Size: 0x10]
	delegate OnActivePlayerIDsInRadiusChanged;//[Offset: 0x2d0, Size: 0x10]
	delegate OnLastTryActivateTeamIDChanged;//[Offset: 0x2e0, Size: 0x10]
	delegate OnStartMatchEndCamera;//[Offset: 0x2f0, Size: 0x10]
	delegate OnBoardingShuttle;//[Offset: 0x300, Size: 0x10]
	delegate OnTeamActivatedShuttleIDChanged;//[Offset: 0x310, Size: 0x10]
	delegate OnArkShuttleFlyingBy;//[Offset: 0x320, Size: 0x10]
	delegate OnShuttleLandingLevelChange;//[Offset: 0x330, Size: 0x10]
	void OnStateCountDown__DelegateSignature(int ShuttleID, int Seconds, enum State);// 0x305c9c0
	void OnShuttleWasRegistered__DelegateSignature(int ShuttleID, int TeamId);// 0x305c9c0
	void OnShuttleWasBroken__DelegateSignature(int ShuttleID);// 0x305c9c0
	void OnShuttleWasActivated__DelegateSignature(int ShuttleID, int TeamId);// 0x305c9c0
	void OnShuttleVictoryCineFinished__DelegateSignature();// 0x305c9c0
	void OnShuttleStateChange__DelegateSignature(enum LastState, enum NewState, float StartTime, int OwnShuttleID);// 0x305c9c0
	void OnShuttleSpawnedWeapons__DelegateSignature(int ShuttleID, out const ArkDroneGuard*[] WeapontList);// 0x305c9c0
	void OnShuttleSpawned__DelegateSignature(ArkShuttleBase* Shuttle);// 0x305c9c0
	void OnShuttleLeaveStateAnimFinished__DelegateSignature(int ShuttleID);// 0x305c9c0
	void OnShuttleLaunchBlast__DelegateSignature(int ShuttleID, bool bActive);// 0x305c9c0
	void OnShuttleLandingWave__DelegateSignature(int ShuttleID, float Radius, bool bPush);// 0x305c9c0
	void OnShuttleInteract__DelegateSignature(bool bInteracted);// 0x305c9c0
	void OnShuttleIncomingShow__DelegateSignature(int ShuttleID);// 0x305c9c0
	void OnShuttleDrawCineFinished__DelegateSignature();// 0x305c9c0
	void OnShuttleActivatedWeapons__DelegateSignature(int ShuttleID, out const ArkDroneGuard*[] WeapontList);// 0x305c9c0
	void OnPlayerSyncShuttleFinish__DelegateSignature(int ShuttleID);// 0x305c9c0
	void OnPlayerStartSyncShuttle__DelegateSignature(int ShuttleID, ArkPlayer* SyncPlayer);// 0x305c9c0
	void OnPlayerLeaveSyncShuttleRadius__DelegateSignature(int ShuttleID);// 0x305c9c0
	void OnPlayerClearShuttleEnemy__DelegateSignature(int ShuttleID);// 0x305c9c0
	void OnPlayerCanSyncShuttle__DelegateSignature(int ShuttleID);// 0x305c9c0
	void OnLastInVolume__DelegateSignature(int ShuttleID, int TeamId);// 0x305c9c0
	void OnGotoLaunchState__DelegateSignature(enum LastState, enum NewState, float StartTime, int OwnShuttleID);// 0x305c9c0
	void OnGotoEndState__DelegateSignature(enum LastState, enum NewState, float StartTime, int OwnShuttleID);// 0x305c9c0
	void OnAnimStateChange__DelegateSignature(enum LastAnimState, enum NewAnimState);// 0x305c9c0
	void OnActiveVolumeExit__DelegateSignature(int ShuttleID, out const ArkPlayer*[] ExitPlayers, out const ArkPlayer*[] AllPlayersInVolume);// 0x305c9c0
	void OnActiveVolumeEnter__DelegateSignature(int ShuttleID, out const ArkPlayer*[] EnterPlayers, out const ArkPlayer*[] AllPlayersInVolume);// 0x305c9c0
	void OnActiveVolumeActivateTick__DelegateSignature(int TeamId, int ShuttleID, float Radio, out const int[] PlayerIDList);// 0x305c9c0
	void OnActiveVolumeActivateStop__DelegateSignature(int TeamId, int ShuttleID);// 0x305c9c0
	void OnActiveVolumeActivateStart__DelegateSignature(int TeamId, float StartTime, int ShuttleID);// 0x305c9c0
	void OnActiveVolumeActivateEnd__DelegateSignature(int TeamId, int ShuttleID);// 0x305c9c0
	void OnActivatedTeamIDChange__DelegateSignature(int ShuttleID, int TeamId);// 0x305c9c0
	static ArkShuttleDelegates* Get(const Object* WorldContext);// 0x2956d10
	void ArkTeamActivatedShuttleIDChanged__DelegateSignature(int ShuttleID, int TeamId);// 0x305c9c0
	void ArkStartMatchEndCamera__DelegateSignature(int ShuttleID, bool bWin, bool bDraw, int WinTeamID);// 0x305c9c0
	void ArkShuttleLandingLevelChange__DelegateSignature(int LandingLevel);// 0x305c9c0
	void ArkShuttleFlyingBy__DelegateSignature();// 0x305c9c0
	void ArkOpenerGoToShuttleStage__DelegateSignature();// 0x305c9c0
	void ArkOnTeamIDsInRadiusChanged__DelegateSignature(ArkShuttleBase* Shuttle, out const int[] TeamIDsInRadius);// 0x305c9c0
	void ArkOnShuttleFinished__DelegateSignature(int WinnerTeamID, int OwnShuttleID);// 0x305c9c0
	void ArkOnProgressChanged__DelegateSignature(ArkShuttleBase* Shuttle, float Progress);// 0x305c9c0
	void ArkOnPlayerIDsInRadiusChanged__DelegateSignature(ArkShuttleBase* Shuttle, FString[] PlayerIDsInRadius);// 0x305c9c0
	void ArkOnLastTryActivateTeamIDChanged__DelegateSignature(ArkShuttleBase* Shuttle, int LastTryActivateTeamID);// 0x305c9c0
	void ArkBoardingShuttle__DelegateSignature(out const ArkPlayerStateBattle*[] WinningPlayers);// 0x305c9c0
	void ArkActivePlayerIDsInRadiusChanged__DelegateSignature(ArkShuttleBase* Shuttle, FString[] ActivePlayerIDsInRadius);// 0x305c9c0

--------------------------------
Class: ArkDroneGuard.ArkCharacterBase.Character.Pawn.Actor.Object
	class ArkRangeWeapon* WeaponClass;//[Offset: 0x1b50, Size: 0x8]
	FName WeaponAttachSocket;//[Offset: 0x1b58, Size: 0x8]
	ParticleSystemComponent* AimFx;//[Offset: 0x1b60, Size: 0x8]
	FName AimLengthParam;//[Offset: 0x1b68, Size: 0x8]
	SceneComponent* BarrelComp;//[Offset: 0x1b70, Size: 0x8]
	SceneComponent* MuzzleComp;//[Offset: 0x1b78, Size: 0x8]
	float kIntroHangDuration;//[Offset: 0x1b80, Size: 0x4]
	float kMoveSpeedHorizon;//[Offset: 0x1b84, Size: 0x4]
	float kMoveUpSpeedVertical;//[Offset: 0x1b88, Size: 0x4]
	float kMoveAcceleration;//[Offset: 0x1b8c, Size: 0x4]
	float kMoveDeceleration;//[Offset: 0x1b90, Size: 0x4]
	Vector2D kADHDDistanceRand;//[Offset: 0x1b94, Size: 0x8]
	Vector2D kADHDTimeRand;//[Offset: 0x1b9c, Size: 0x8]
	float kHoverPrepareTime;//[Offset: 0x1ba4, Size: 0x4]
	Vector2D kHoverHeightRand;//[Offset: 0x1ba8, Size: 0x8]
	Vector2D kHoverCycleRand;//[Offset: 0x1bb0, Size: 0x8]
	float kBarrelRotateSpeed;//[Offset: 0x1bb8, Size: 0x4]
	float kBodyRotateSpeed;//[Offset: 0x1bbc, Size: 0x4]
	float kMaxAttackRange;//[Offset: 0x1bc0, Size: 0x4]
	Vector2D kChaseMarginRand;//[Offset: 0x1bc4, Size: 0x8]
	Vector2D kFollowDistance;//[Offset: 0x1bcc, Size: 0x8]
	float kMaxFireTargetDeviation;//[Offset: 0x1bd4, Size: 0x4]
	float kBackToIdleTime;//[Offset: 0x1bd8, Size: 0x4]
	float kAimSecondsBeforeFiring;//[Offset: 0x1bdc, Size: 0x4]
	float kFirePrepareTime;//[Offset: 0x1be0, Size: 0x4]
	bool bPreparingFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1be4, Size: 0x1]
	Actor* CurrentTarget;//[Offset: 0x1be8, Size: 0x8]
	bool bTargetIsFriend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bf0, Size: 0x1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x1bf8, Size: 0x8]
	enum AIState;//[Offset: 0x1c00, Size: 0x1]
	ArkDronePath MovePath;//[Offset: 0x1c08, Size: 0x20]
	float StartTimeOfAIState;//[Offset: 0x1c28, Size: 0x4]
	ShapeComponent* GuardArea;//[Offset: 0x1c30, Size: 0x8]
	Actor* GuardTarget;//[Offset: 0x1c38, Size: 0x8]
	ArkRangeWeapon* mWeapon;//[Offset: 0x1c50, Size: 0x8]
	void StopMovement();// 0x27115b0
	void SetTeamFriendship(int TeamId, bool bFriend);// 0x27114f0
	void SetMovePath(out const ArkDronePath NewMovePath);// 0x2711090
	void SetMoveDestination(out const Vector NewMoveDestination);// 0x2711000
	void SetBarrelRotation_BP(out const Rotator NewRotation);// 0x305c9c0
	void SetAIState(enum NewAIState);// 0x2710de0
	float PlayIntro();// 0x305c9c0
	void OnStateChanged();// 0x2710720
	void OnRep_Weapon();// 0x2710640
	void OnRep_TargetIsFriend();// 0x27105e0
	void OnRep_MovePath();// 0x2710600
	void OnRep_CurrentTarget();// 0x27105e0
	void OnRep_bPreparingFire();// 0x2710660
	void OnRep_bInCombat();// 0x27105e0
	void OnRep_AIState();// 0x27105c0
	void OnAIStateChange_BP(enum OldAIState, enum NewAIState);// 0x305c9c0
	bool IsFriend(Actor* pChar);// 0x27103f0
	bool IsFollowingAPath();// 0x27103b0
	bool IsAITargetValid(bool bCheckAlive);// 0x2710320
	void Guard(Actor* NewGuardTarget, Vector Offset, bool FollowGuardTarget);// 0x27101e0
	Transform GetMuzzleTransform();// 0x27100d0
	Transform GetBarrelTransform();// 0x270ff70
	void Activate(bool bNewActive, out const ArkDronePath PathToGuardLocation, ShapeComponent* _GuardArea);// 0x270fc40

--------------------------------
Class: ArkDronePath
	Vector[] Points;//[Offset: 0x0, Size: 0x10]
	float[] StayDurations;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ArkShuttleUIDataDetector.Object
	delegate OnShuttleActivatingUIStateChange;//[Offset: 0x28, Size: 0x10]
	delegate OnShuttleActivatedUIStateChange;//[Offset: 0x38, Size: 0x10]
	delegate OnShuttleActivatingProgressChange;//[Offset: 0x48, Size: 0x10]
	delegate OnActivatingPlayerCountInRangeChange;//[Offset: 0x58, Size: 0x10]
	delegate OnPlayerInShuttleActivatingRangeChange;//[Offset: 0x68, Size: 0x10]
	delegate OnPlayerIsActivatingShuttle;//[Offset: 0x78, Size: 0x10]
	delegate OnShuttleStateChange;//[Offset: 0x88, Size: 0x10]
	delegate OnShuttleStateCountDownChanged;//[Offset: 0x98, Size: 0x10]
	int DetectingShuttleID;//[Offset: 0xa8, Size: 0x4]
	ArkPlayer* DetectingPlayer;//[Offset: 0xb0, Size: 0x8]
	ArkPlayerStateBattle* DetectingState;//[Offset: 0xb8, Size: 0x8]
	float CheckRangeIntervalTime;//[Offset: 0xc0, Size: 0x4]
	float CheckRangeElapseTime;//[Offset: 0xc4, Size: 0x4]
	enum CurrentActivatingState;//[Offset: 0xc8, Size: 0x1]
	enum CurrentActivatedState;//[Offset: 0xc9, Size: 0x1]
	int ActivatedTeamID;//[Offset: 0xcc, Size: 0x4]
	float DetectingLatestProgress;//[Offset: 0xd0, Size: 0x4]
	bool PlayerInShuttleActivatingRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	int DetectedLatestTryActivatingTeamID;//[Offset: 0xd8, Size: 0x4]
	int DetectedCurrentTryActivatingTeamID;//[Offset: 0xdc, Size: 0x4]
	int[] InTeamIDsInRadiusCache;//[Offset: 0xe0, Size: 0x10]
	int LatestTryActivatingPlayerCount;//[Offset: 0xf0, Size: 0x4]
	bool PlayerIsSyncingShuttle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1]
	void UnInitDetector();// 0x2960430
	void StopDetect();// 0x2960350
	void StartDetectWithPlayerState(int InShuttleID, ArkPlayerStateBattle* InDetectingState, float InCheckRangeInterval);// 0x2960240
	void StartDetect(int InShuttleID, ArkPlayer* InDetectingPlayer, float InCheckRangeInterval);// 0x2960130
	void OnTeamIDsInRadiusChanged(ArkShuttleBase* InShuttle, out const int[] InTeamIDsInRadius);// 0x2960040
	void OnShuttleStateCountDown(int ShuttleID, int CountDownTime, enum CurrentState);// 0x295fdc0
	void OnShuttleStateChanged(enum LastState, enum NewState, float StartTime, int OwnShuttleID);// 0x295fc70
	void OnProgressChange(ArkShuttleBase* InShuttle, float InProgress);// 0x295f6d0
	void OnPlayerIDsInRadiusChanged(ArkShuttleBase* InShuttle, FString[] PlayerIDsInRadius);// 0x295f400
	void OnLastTryActivateTeamIDChanged(ArkShuttleBase* InShuttle, int LastTryActivateTeamID);// 0x295f320
	void OnActivePlayerIDsInRadiusChanged(ArkShuttleBase* InShuttle, FString[] ActivePlayerIDsInRadius);// 0x295f070
	void OnActivatedTeamIDChange(int InShuttleID, int InActivatedTeamID);// 0x295ef30
	void InitDetector();// 0x295eee0
	enum GetShuttleActivatingUIState();// 0x1092be0
	enum GetShuttleActivatedUIState();// 0x295ee90
	float GetActivatingProgress();// 0x295ee70
	int GetActivatedTeamID();// 0x1092490
	void ArkOnShuttleStateCountDown__DelegateSignature(int CountDownTime, enum CurrentState);// 0x305c9c0
	void ArkOnShuttleStateChange__DelegateSignature(enum LastState, enum NewState);// 0x305c9c0
	void ArkOnShuttleActivatingUIStateChange__DelegateSignature(enum NewActivatingState);// 0x305c9c0
	void ArkOnShuttleActivatingProgressChange__DelegateSignature(float NewProgress);// 0x305c9c0
	void ArkOnShuttleActivatedUIStateChange__DelegateSignature(enum NewActivatedState);// 0x305c9c0
	void ArkOnPlayerIsActivatingShuttle__DelegateSignature(bool InPlayerIsActivatingShuttle);// 0x305c9c0
	void ArkOnPlayerInShuttleActivatingRangeChange__DelegateSignature(bool InPlayerInShuttleActivatingRange);// 0x305c9c0
	void ArkOnPlayerCountInShuttleRangeChange__DelegateSignature(int NewPlayerCount);// 0x305c9c0

--------------------------------
Class: ArkPlayerCameraMgr_BP_C.ArkPlayerCameraManager.ArkPlayerCameraManagerBase.PlayerCameraManager.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x30d0, Size: 0x8]
	float AutoFocus_TL_alpha_78323E684BA9EDB31019C0BAD7B37244;//[Offset: 0x30d8, Size: 0x4]
	byte AutoFocus_TL__Direction_78323E684BA9EDB31019C0BAD7B37244;//[Offset: 0x30dc, Size: 0x1]
	TimelineComponent* AutoFocus_TL;//[Offset: 0x30e0, Size: 0x8]
	float lerpSpeed;//[Offset: 0x30e8, Size: 0x4]
	PostProcessSettings configSettings;//[Offset: 0x30f0, Size: 0x640]
	PostProcessSettings currentSettings;//[Offset: 0x3730, Size: 0x640]
	float EnterSprintEffectTime;//[Offset: 0x3d70, Size: 0x4]
	void AutoFocus_TL__FinishedFunc();// 0x305c9c0
	void AutoFocus_TL__UpdateFunc();// 0x305c9c0
	void PlayEnterSprintEffect();// 0x305c9c0
	void PlayBlindingEffect(float Duration);// 0x305c9c0
	void ReceiveBeginPlay();// 0x305c9c0
	void ExecuteUbergraph_ArkPlayerCameraMgr_BP(int EntryPoint, enum CallFunc_GetCharacterState_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, float K2Node_Event_Duration, bool CallFunc_BooleanOR_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue);// 0x305c9c0

--------------------------------
Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0x1e0, Size: 0x98]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x278, Size: 0x1]
	void Stop();// 0x4cb1bb0
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0x4cb1af0
	void SetTimelineLengthMode(byte NewLengthMode);// 0x4cb1a70
	void SetTimelineLength(float NewLength);// 0x4cb19f0
	void SetPlayRate(float NewRate);// 0x4cb1860
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0x4cb18e0
	void SetNewTime(float NewTime);// 0x4cb17e0
	void SetLooping(bool bNewLooping);// 0x4cb1750
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0x4cb1690
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0x4cb1600
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0x4cb1540
	void ReverseFromEnd();// 0x4cb1520
	void Reverse();// 0x4cb1500
	void PlayFromStart();// 0x4cb14e0
	void Play();// 0x4cb14c0
	void OnRep_Timeline();// 0x4cb14a0
	bool IsReversing();// 0x4cb1470
	bool IsPlaying();// 0x4cb1440
	bool IsLooping();// 0x4cb1410
	float GetTimelineLength();// 0x4cb13e0
	float GetPlayRate();// 0x4cb12d0
	float GetPlaybackPosition();// 0x4cb1300
	bool GetIgnoreTimeDilation();// 0x4cb12a0

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	float Length;//[Offset: 0x4, Size: 0x4]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float Position;//[Offset: 0xc, Size: 0x4]
	TimelineEventEntry[] Events;//[Offset: 0x10, Size: 0x10]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 0x10]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x30, Size: 0x10]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x40, Size: 0x10]
	delegate TimelinePostUpdateFunc;//[Offset: 0x50, Size: 0x10]
	delegate TimelineFinishedFunc;//[Offset: 0x60, Size: 0x10]
	Object* PropertySetObject;//[Offset: 0x70, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 0x4]
	delegate EventFunc;//[Offset: 0x4, Size: 0x10]

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName VectorPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName FloatPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: ArkPlayerHudHaven_BP_C.ArkPlayerHudHaven.ArkBattleHUD.ArkPlayerHudBase.HUD.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x590, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x598, Size: 0x8]
	void ReceiveBeginPlay();// 0x305c9c0
	void ExecuteUbergraph_ArkPlayerHudHaven_BP(int EntryPoint);// 0x305c9c0

--------------------------------
Class: ArkPlayerHudHaven.ArkBattleHUD.ArkPlayerHudBase.HUD.Actor.Object
	ArkHavenHudWidgetBase* HavenWidget;//[Offset: 0x578, Size: 0x8]
	void ShowWaitroomHUDActionHint(bool Show);// 0x28b7840
	void ShowWaitroomHUD(bool Show);// 0x28b77b0
	void SetWidgetLevelOverrideEnable(bool bEnableOverride);// 0x28b7670
	void SetWidgetDisplayLevelOverride(int Level);// 0x28b75f0
	void SetPopupMenuClosedReceiver(int UUID, interface class Receiver);// 0x28b7510
	ArkHavenHudWidgetBase* GetHavenHUDWidget();// 0x28b6260

--------------------------------
Class: ArkHavenHudWidgetBase.ArkPopupMenuBase.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	FName OkButtonAction;//[Offset: 0x4e4, Size: 0x8]
	FText OkButtonText;//[Offset: 0x4f0, Size: 0x18]
	bool bLevelOverrideEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 0x1]
	int MedbayAllocated;//[Offset: 0x50c, Size: 0x4]
	int MedbayTotal;//[Offset: 0x510, Size: 0x4]
	ArkHavenStatPropertyRef HavenMedbayStatPropertyRef;//[Offset: 0x514, Size: 0xc]
	FName NavigationMenuName;//[Offset: 0x520, Size: 0x8]
	FName NavigationMenuHUDStateName;//[Offset: 0x528, Size: 0x8]
	bool bToShowNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 0x1]
	bool bToShowSurvey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x531, Size: 0x1]
	bool bHideEntranceWidgets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x532, Size: 0x1]
	ArkQuickRunWidget* QuickRunWidget;//[Offset: 0x538, Size: 0x8]
	ArkActivityEntranceWidget* ActivityEntrance;//[Offset: 0x540, Size: 0x8]
	float TickInterval;//[Offset: 0x548, Size: 0x4]
	bool bPopupMenuOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c, Size: 0x1]
	ArkHavenRPCInterface* HavenRPCInterface;//[Offset: 0x558, Size: 0x8]
	ArkUserDataModel* CustomRoomDataModel;//[Offset: 0x568, Size: 0x8]
	ArkUserDataModel* PlayerDataModel;//[Offset: 0x578, Size: 0x8]
	ArkUserDataModel* TeamDataModel;//[Offset: 0x588, Size: 0x8]
	void UpdateMedbayStats();// 0x27953d0
	void ShowWaitroomHUD(bool Show);// 0x305c9c0
	void ShowWaitroomActionHint(bool Show);// 0x305c9c0
	void ShowReminderWidget_BP(bool bToShow);// 0x305c9c0
	void ShowMessageBox(out const FText Message);// 0x2795040
	void SetSurvivorShowFullCapacity(Timespan InTime);// 0x305c9c0
	void SetSurvivorRefreshTime(Timespan InTime);// 0x305c9c0
	void SetLevelOverrideEnable(bool bEnableOverride);// 0x2794c70
	void SetLevelOverride(int Level);// 0x2794bf0
	void SetEventCenterOnBoardingState(bool bIsOnBoarding);// 0x305c9c0
	void OnUpgradeSuccess();// 0x305c9c0
	void OnUpgradeFailed();// 0x305c9c0
	void OnTriggerNavigationMenuKeyTips();// 0x2794b70
	void OnSetLevelOverrideEnable(bool bOverride);// 0x305c9c0
	void OnSetLevelOverride(int Level);// 0x305c9c0
	void OnRPCInterfaceCreated(ArkHavenRPCInterface* InRPCInterface);// 0x305c9c0
	void OnMessageBoxConfirm();// 0x26cb690
	void OnMenuChanged(const ArkPopupMenuBase* ChangedMenu, int ChangedMenuID, bool MenuIsOpenedFlag);// 0x2794a30
	void OnMedbayStatUpdated();// 0x305c9c0
	void OnHavenUpgradeSection(byte Result, out const ArkHavenBaseInfo BaseInfo);// 0x2794730
	void OnHavenSurvivorReleased(FString SurvivorID);// 0x2794690
	void OnHavenSurvivorChange(out const ArkHavenSurvivorInfo NewSurvivorState);// 0x27944c0
	void OnHavenRPCDataReady(enum ReadyDataType);// 0x2794440
	void OnHavenInstaHealSurvivor(byte Result, FString SurvivorID);// 0x2794360
	void OnGrowthGuideRequest();// 0x2794340
	bool IsThisWidgetQuickMatch(Widget* InWidget);// 0x305c9c0
	bool IsThisWidgetEventCenter(Widget* InWidget);// 0x305c9c0
	void HideEntranceWidgetsTemp(bool bHide);// 0x27941c0
	void HideEntranceWidgets(bool bHide);// 0x2794130
	bool HasAnyPopMenu();// 0x27940d0
	void GetMedbayStats(out int Allocated, out int TotalMedbay);// 0x2793ee0
	bool CombineWithIfPlayerHasDoneSurvey(bool bSurveyPermission);// 0x2793e20

--------------------------------
Class: Timespan

--------------------------------
Class: ArkQuickRunWidget.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	WidgetAnimation* Anim_FadeIn_Locked;//[Offset: 0x300, Size: 0x8]
	WidgetAnimation* Anim_FadeIn_MapMode;//[Offset: 0x308, Size: 0x8]
	WidgetAnimation* Anim_BreathLoop;//[Offset: 0x310, Size: 0x8]
	Overlay* Overlay_Locked;//[Offset: 0x318, Size: 0x8]
	Overlay* Overlay_MapMode;//[Offset: 0x320, Size: 0x8]
	TextBlock* Text_MapMode;//[Offset: 0x328, Size: 0x8]
	WidgetSwitcher* Switcher_MatchType;//[Offset: 0x330, Size: 0x8]
	void RefreshWidget();// 0x291d440
	void QuickRun();// 0x291d420
	void HideQuickRun(bool bHide);// 0x291c9d0
	void BP_QuickRunButtonFadeIn();// 0x305c9c0
	void BP_LockQuickRunButton(bool bLock);// 0x305c9c0

--------------------------------
Class: ArkActivityEntranceWidget.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	UserWidget* RedPointWidget;//[Offset: 0x300, Size: 0x8]
	WidgetAnimation* Anima_FadeIn;//[Offset: 0x308, Size: 0x8]
	float TickInterval;//[Offset: 0x310, Size: 0x4]
	int JumpCommandID;//[Offset: 0x314, Size: 0x4]
	FString[] ModuleNames;//[Offset: 0x318, Size: 0x10]
	ArkHavenRPCInterface* RPCInterface;//[Offset: 0x328, Size: 0x8]
	void SetOnBoardingState(bool IsOnBoarding);// 0x260c010
	void OpenEventCenter();// 0x260bff0
	void HideWidget(bool bHide);// 0x260b650
	void BindRedPointModules();// 0x260b140

--------------------------------
Class: AbstractNavData.NavigationData.Actor.Object

--------------------------------
Class: BP_BattlePass_Vendor_C.BP_VendorHaven_C.ArkHavenVendorBase.ArkInteractiveActor.ArkStaticActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x798, Size: 0x8]
	void ReceiveBeginPlay();// 0x305c9c0
	void PlayDialogue_OpenQuestPanel(bool bOpen);// 0x305c9c0
	void ExecuteUbergraph_BP_BattlePass_Vendor(int EntryPoint, bool K2Node_Event_bOpen);// 0x305c9c0

--------------------------------
Class: BP_NewContentIndicator_Vendor_C.BP_NewContentIndicator_C.ArkHavenIndicatorActor.Actor.Object

--------------------------------
Class: BP_NewContentIndicator_C.ArkHavenIndicatorActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2f8, Size: 0x8]
	ArkSoftParticleSystemComponent* ArkSoftParticleSystem;//[Offset: 0x300, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x308, Size: 0x8]
	void BP_SetIndicatorHidden(bool InHidden);// 0x305c9c0
	void ExecuteUbergraph_BP_NewContentIndicator(int EntryPoint, bool K2Node_Event_InHidden, bool CallFunc_Not_PreBool_ReturnValue);// 0x305c9c0

--------------------------------
Class: ArkHavenIndicatorActor.Actor.Object
	float VisibleDistance;//[Offset: 0x2e8, Size: 0x4]
	bool IsIndicatorVisible();// 0x27942b0
	float GetVisibleDistance();// 0x27940b0
	void BP_SetIndicatorHidden(bool InHidden);// 0x305c9c0

--------------------------------
Class: BP_ResearchCenter_Vendor_C.BP_VendorHaven_C.ArkHavenVendorBase.ArkInteractiveActor.ArkStaticActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x798, Size: 0x8]
	ArkHavenStatPropertyRef SectionTierPropertyRef;//[Offset: 0x7a0, Size: 0xc]
	ArkHavenStatPropertyRef LastViewedTierPropertyRef;//[Offset: 0x7ac, Size: 0xc]
	void ShowMenuTierUpgradevailable(ArkHavenRPCInterface* CallFunc_Get_ReturnValue, ArkHavenRPCInterface* CallFunc_Get_ReturnValue, int CallFunc_GetHavenStat_OutStat, bool CallFunc_GetHavenStat_ReturnValue, int CallFunc_GetHavenStat_OutStat, bool CallFunc_GetHavenStat_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x305c9c0
	void OnSectionUpgrade(byte Result, out const ArkHavenBaseInfo BaseInfo);// 0x305c9c0
	void ReceiveBeginPlay();// 0x305c9c0
	void VendorMenuOpened();// 0x305c9c0
	void ExecuteUbergraph_BP_ResearchCenter_Vendor(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, ArkHavenRPCInterface* CallFunc_Get_ReturnValue, byte K2Node_CustomEvent_Result, const ArkHavenBaseInfo K2Node_CustomEvent_BaseInfo, ArkHavenRPCInterface* CallFunc_Get_ReturnValue, bool CallFunc_SetResearchCenterMaxViewedTier_ReturnValue);// 0x305c9c0

--------------------------------
Class: BP_Situation_Vendor_C.BP_VendorHaven_ThreeWayIntro_C.BP_VendorHaven_C.ArkHavenVendorBase.ArkInteractiveActor.ArkStaticActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x820, Size: 0x8]
	BP_SituationMap_C* SituationMap;//[Offset: 0x828, Size: 0x8]
	bool IsMatchMaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x830, Size: 0x1]
	bool IsInSituationMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x831, Size: 0x1]
	bool bMatchFound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x832, Size: 0x1]
	enum NewVar_0;//[Offset: 0x833, Size: 0x1]
	void OnMatchFoundVO(const delegate Temp_delegate_Variable, const FName Temp_name_Variable, ArkFactDictionary K2Node_MakeStruct_ArkFactDictionary, enum CallFunc_Say_PlayLineResult, bool K2Node_SwitchEnum_CmpSuccess);// 0x305c9c0
	void OnMatchMakingStartVO(enum Selection, int LevelID, const delegate Temp_delegate_Variable, int CallFunc_Conv_ByteToInt_ReturnValue, const FName Temp_name_Variable, ArkFactDictionary K2Node_MakeStruct_ArkFactDictionary, enum CallFunc_Say_PlayLineResult, bool K2Node_SwitchEnum_CmpSuccess);// 0x305c9c0
	void OnMatchmakingBegin_Event(enum GameMode, int Maplevel);// 0x305c9c0
	void OnMatchMakingCancel_Event();// 0x305c9c0
	void VendorMenuClosed(FName CloseReason);// 0x305c9c0
	void OnClientGiveInteractTo(ArkCharacterBase* InteractedBy, enum InteractionType);// 0x305c9c0
	void CustomEvent();// 0x305c9c0
	void DummyEvent(UserWidget* CreatedWidget);// 0x305c9c0
	void OnMatchmakingBegin(enum GameMode, int Maplevel);// 0x305c9c0
	void OnMatchFound();// 0x305c9c0
	void StartPreOpenVendorMenu();// 0x305c9c0
	void OnConversationEnd();// 0x305c9c0
	void Greeting();// 0x305c9c0
	void VendorMenuOpened();// 0x305c9c0
	void ReceiveBeginPlay();// 0x305c9c0
	void PlayDialogue_OpenQuestPanel(bool bOpen);// 0x305c9c0
	void ExecuteUbergraph_BP_Situation_Vendor(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, const delegate Temp_delegate_Variable, const FName Temp_name_Variable, const delegate Temp_delegate_Variable, const FName Temp_name_Variable, const FName Temp_name_Variable, const delegate Temp_delegate_Variable, const FName Temp_name_Variable, const delegate Temp_delegate_Variable, const FName Temp_name_Variable, const delegate Temp_delegate_Variable, const FName Temp_name_Variable, enum K2Node_CustomEvent_GameMode, int K2Node_CustomEvent_MapLevel, FName K2Node_Event_CloseReason, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, ArkCharacterBase* K2Node_Event_InteractedBy, enum K2Node_Event_InteractionType, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_SituationMapInteractionValidation_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, UserWidget* K2Node_CustomEvent_CreatedWidget, BP_SituationMap_C* CallFunc_GetActorOfClass_ReturnValue, enum K2Node_CustomEvent_GameMode, int K2Node_CustomEvent_MapLevel, BP_SituationMap_C* CallFunc_GetActorOfClass_ReturnValue, ArkFactDictionary K2Node_MakeStruct_ArkFactDictionary, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, enum CallFunc_Say_PlayLineResult, bool CallFunc_RandomBool_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, delegate K2Node_CreateDelegate_OutputDelegate, enum CallFunc_Say_PlayLineResult, bool K2Node_SwitchEnum_CmpSuccess, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, PIPAnouncementManager* CallFunc_GetPIPAnouncementManager_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_CanSectionBeUpgraded_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, ArkFactDictionary K2Node_MakeStruct_ArkFactDictionary, DataBoxOperateButton K2Node_MakeStruct_DataBoxOperateButton, enum CallFunc_Say_PlayLineResult, DataBoxOperateButton[] K2Node_MakeArray_Array, bool K2Node_SwitchEnum_CmpSuccess, DataBoxPureTextTypeData K2Node_MakeStruct_DataBoxPureTextTypeData, enum CallFunc_Say_PlayLineResult, bool K2Node_SwitchEnum_CmpSuccess, float CallFunc_RandomFloatInRange_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, ArkFactDictionary K2Node_MakeStruct_ArkFactDictionary, enum CallFunc_Say_PlayLineResult, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_Event_bOpen, delegate K2Node_CreateDelegate_OutputDelegate);// 0x305c9c0

--------------------------------
Class: BP_VendorHaven_ThreeWayIntro_C.BP_VendorHaven_C.ArkHavenVendorBase.ArkInteractiveActor.ArkStaticActor.Actor.Object
	HavenVendorThreeWayAnimSet AnimSetThreeWay;//[Offset: 0x798, Size: 0x80]
	AnimSequence* KnockbackBlendIn;//[Offset: 0x818, Size: 0x8]

--------------------------------
Class: HavenVendorThreeWayAnimSet
	AnimSequenceBase* NearLeft_15_5C8666D54EDA7A1A900C019BAFC2C14C;//[Offset: 0x0, Size: 0x8]
	AnimSequenceBase* NearLeftToFar_16_1B5E5A684A50D655B10E469C9C801300;//[Offset: 0x8, Size: 0x8]
	AnimSequenceBase* FarToNearLeft_17_FD5EB96B4A7BC3798C515D8590588E19;//[Offset: 0x10, Size: 0x8]
	AnimSequenceBase* Far_8_2B4F26974DF13CAE67D4C1B0ACF27150;//[Offset: 0x18, Size: 0x8]
	AnimSequenceBase* NearRight_18_F56472F74611C3FBACC859B5FA6E166B;//[Offset: 0x20, Size: 0x8]
	AnimSequenceBase* NearRightToFar_19_6EAD3E3245C42EA45628FC8E4B3629BE;//[Offset: 0x28, Size: 0x8]
	AnimSequenceBase* FarToNearRight_22_81EEEB1A4E3B0EAAA0CAEB9A2C1677E9;//[Offset: 0x30, Size: 0x8]
	AnimSequenceBase* RightToLeft_25_72069988467EF8B042167D8892677BE7;//[Offset: 0x38, Size: 0x8]
	AnimSequenceBase* LeftToRight_26_D2C244624E6D5D5CC237B2AA90B77B7C;//[Offset: 0x40, Size: 0x8]
	AnimSequenceBase* NearFront_30_614C994A4E6C71024C2D878618FE3B5D;//[Offset: 0x48, Size: 0x8]
	AnimSequenceBase* FarToNearFront_39_88C90BB04A5D512B0DED4FAA04DDB6E1;//[Offset: 0x50, Size: 0x8]
	AnimSequenceBase* NearFrontToFar_40_A747BA7541F3110DC0F06A8AACE4ADEF;//[Offset: 0x58, Size: 0x8]
	AnimSequenceBase* FrontToRight_41_9C2542134FBBFB362F7934B4A8FDC06A;//[Offset: 0x60, Size: 0x8]
	AnimSequenceBase* FrontToLeft_42_E38D6EC04336A39647724387C248CED4;//[Offset: 0x68, Size: 0x8]
	AnimSequenceBase* LeftToFront_43_1DAEF3534DE3664C2E29F58A698BD30F;//[Offset: 0x70, Size: 0x8]
	AnimSequenceBase* RightToFront_44_7C171F5446A643B18A63DAAAA8D600EA;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: BP_SituationMap_C.ArkSituationMapBase.ArkInteractiveActor.ArkStaticActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x620, Size: 0x8]
	ArkAkComponent* ArkAk;//[Offset: 0x628, Size: 0x8]
	WidgetComponent* IconWidget;//[Offset: 0x630, Size: 0x8]
	StaticMeshComponent* SM_SIT_Situation_Table_001;//[Offset: 0x638, Size: 0x8]
	SceneComponent* TeleportLocator;//[Offset: 0x640, Size: 0x8]
	ChildActorComponent* Situation table;//[Offset: 0x648, Size: 0x8]
	enum State;//[Offset: 0x650, Size: 0x1]
	FName SituationMapUIName;//[Offset: 0x654, Size: 0x8]
	int SituationMapUIID;//[Offset: 0x65c, Size: 0x4]
	ArkHavenSituationMapCameraBase* GlobeCameraActor;//[Offset: 0x660, Size: 0x8]
	LevelSequenceActor* EnterSequence;//[Offset: 0x668, Size: 0x8]
	FName ArsenalUIName;//[Offset: 0x670, Size: 0x8]
	FName ArsenalUIState;//[Offset: 0x678, Size: 0x8]
	Actor* PlayerCamera;//[Offset: 0x680, Size: 0x8]
	FName MatchMakingInProgressUIName;//[Offset: 0x688, Size: 0x8]
	FName ReadyUpUIName;//[Offset: 0x690, Size: 0x8]
	CameraActor* TableCameraActor;//[Offset: 0x698, Size: 0x8]
	int ReadyUpUIID;//[Offset: 0x6a0, Size: 0x4]
	LevelSequenceActor* ShowGameMapSeq;//[Offset: 0x6a8, Size: 0x8]
	float CameraEnterTime;//[Offset: 0x6b0, Size: 0x4]
	float CameraExitTime;//[Offset: 0x6b4, Size: 0x4]
	FName WaitingForTeamUIIName;//[Offset: 0x6b8, Size: 0x8]
	int WaitingForTeamUIID;//[Offset: 0x6c0, Size: 0x4]
	int MatchMakingInProgressUUID;//[Offset: 0x6c4, Size: 0x4]
	int MatchingLevelID;//[Offset: 0x6c8, Size: 0x4]
	enum MatchmakingGameMode;//[Offset: 0x6cc, Size: 0x1]
	delegate OnMatchmakingBegin;//[Offset: 0x6d0, Size: 0x10]
	delegate OnMatchFound;//[Offset: 0x6e0, Size: 0x10]
	LevelSequenceActor* HideGlobeSeq;//[Offset: 0x6f0, Size: 0x8]
	LevelSequenceActor* ShowARLandSeq;//[Offset: 0x6f8, Size: 0x8]
	float DistanceToggleWidgetOn;//[Offset: 0x700, Size: 0x4]
	float DistanceToggleWidgetOff;//[Offset: 0x704, Size: 0x4]
	float HeightDelta;//[Offset: 0x708, Size: 0x4]
	delegate OnMatchMakingCancel;//[Offset: 0x710, Size: 0x10]
	ArkLevelSequenceBase* CurrentSeq;//[Offset: 0x720, Size: 0x8]
	bool bGameStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x728, Size: 0x1]
	void InitSequence(bool IsMatchMaking, FName CallFunc_MakeLiteralName_ReturnValue, bool CallFunc_IsValid_ReturnValue, ArkLevelSequenceManager* CallFunc_Get_ReturnValue, BP_SituationMapSeqBase_C* K2Node_DynamicCast_AsBP_Situation_Map_Seq_Base, bool K2Node_DynamicCast_bSuccess, ArkLevelSequenceBase* CallFunc_GenerateNewLevelSequenceObj_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x305c9c0
	void ToggleIconWidget(bool NewVisibility, float CallFunc_Square_ReturnValue, float CallFunc_Square_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Pawn* CallFunc_GetPlayerPawn_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Vector_DistanceSquared_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0x305c9c0
	void GetTransformToTeleport(out Vector WorldLocation, out Rotator WorldRotation, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Rotator CallFunc_K2_GetComponentRotation_ReturnValue);// 0x305c9c0
	void Instant Switch to Situation Map Camera(out const delegate IOnLerpComplete, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, SkeletalMeshComponent* CallFunc_GetComponentByClass_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, bool CallFunc_K2_TeleportTo_ReturnValue, ArkCharacterBase* K2Node_DynamicCast_AsArk_Character_Base, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_SwitchToCamera_ReturnValue);// 0x305c9c0
	enum InternalShouldShowInteractionInfo(ArkCharacterBase* InteractedBy, enum InteractionType, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool CallFunc_NotEqual_ByteByte_ReturnValue, enum K2Node_Select_Default);// 0x305c9c0
	void OnInteractionStoppedBy(ArkCharacterBase* InteractedBy, enum InteractionType, float RemainingTime, bool bCancelled);// 0x305c9c0
	void ReceiveBeginPlay();// 0x305c9c0
	void OnSituationMapUICancel();// 0x305c9c0
	void Open Situation Map Menu(ArkCharacterBase* Interacted By);// 0x305c9c0
	void OnRevert();// 0x305c9c0
	void CustomEvent();// 0x305c9c0
	void OnStartMatchMaking(enum Matchmaking Game Mode);// 0x305c9c0
	void PopupMenuClosed(int Uiid, FName CloseReason);// 0x305c9c0
	void OnSwitchToTableCamera();// 0x305c9c0
	void OnSequenceGlobeHidden();// 0x305c9c0
	void OnMatchmakingComplete();// 0x305c9c0
	void TableTransitionGlobeCamera();// 0x305c9c0
	void ShowReadyUpConfirm();// 0x305c9c0
	void OnSwitchToSituationMapReadyUpConfirm();// 0x305c9c0
	void OnSequenceGlobeHiddenFinished();// 0x305c9c0
	void OnAlreadyInGame_BP();// 0x305c9c0
	void OnMatchMakingStarted_BP();// 0x305c9c0
	void OnMatchMakingCanceled_BP();// 0x305c9c0
	void OnMatchMakingCompleted_BP();// 0x305c9c0
	void OnStartMatch_BP();// 0x305c9c0
	void OnSetupParty_BP();// 0x305c9c0
	void ReceiveTick(float DeltaSeconds);// 0x305c9c0
	void OnJoinMatchMakingRsp_Event(int ErrorCode);// 0x305c9c0
	void OnMatchMakingStateChange(enum NewState);// 0x305c9c0
	void ExecuteUbergraph_BP_SituationMap(int EntryPoint, ArkHavenRPCInterface* CallFunc_Get_ReturnValue, ArkCharacterBase* K2Node_Event_InteractedBy, enum K2Node_Event_InteractionType, float K2Node_Event_RemainingTime, bool K2Node_Event_bCancelled, ArkCharacterBase* K2Node_CustomEvent_Interacted_By, delegate K2Node_CreateDelegate_OutputDelegate, LevelSequencePlayer* CallFunc_GetSequencePlayer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, enum K2Node_CustomEvent_Matchmaking_Game_Mode, int K2Node_Event_UIID, FName K2Node_Event_CloseReason, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, ArkPlayerHudHaven* K2Node_DynamicCast_AsArk_Player_Hud_Haven, bool K2Node_DynamicCast_bSuccess, LevelSequencePlayer* CallFunc_GetSequencePlayer_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, const delegate Temp_delegate_Variable, FString CallFunc_Conv_IntToString_ReturnValue, const delegate Temp_delegate_Variable, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_OpenMatchFlowPopup_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, ArkHavenRPCInterface* CallFunc_Get_ReturnValue, const delegate Temp_delegate_Variable, ArkHavenRPCInterface* CallFunc_Get_ReturnValue, bool CallFunc_GetPartyStatus_IsPartyHost, bool CallFunc_GetPartyStatus_IsPartyTeammate, bool CallFunc_GetPartyStatus_YouReady, bool CallFunc_GetPartyStatus_PartyReady, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_GetPartyStatus_IsPartyHost, bool CallFunc_GetPartyStatus_IsPartyTeammate, bool CallFunc_GetPartyStatus_YouReady, bool CallFunc_GetPartyStatus_PartyReady, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_GetPartyStatus_IsPartyHost, bool CallFunc_GetPartyStatus_IsPartyTeammate, bool CallFunc_GetPartyStatus_YouReady, bool CallFunc_GetPartyStatus_PartyReady, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, ArkPlayerHudHaven* K2Node_DynamicCast_AsArk_Player_Hud_Haven, bool K2Node_DynamicCast_bSuccess, ArkBattleHUD* CallFunc_GetArkBattleHUD_ReturnValue, const delegate Temp_delegate_Variable, bool CallFunc_Not_PreBool_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Actor* CallFunc_SwitchToCamera_ReturnValue, ArkBattleHUD* CallFunc_GetArkBattleHUD_ReturnValue, bool CallFunc_GetPartyStatus_IsPartyHost, bool CallFunc_GetPartyStatus_IsPartyTeammate, bool CallFunc_GetPartyStatus_YouReady, bool CallFunc_GetPartyStatus_PartyReady, bool CallFunc_Not_PreBool_ReturnValue, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, bool CallFunc_Not_PreBool_ReturnValue, LevelSequencePlayer* CallFunc_GetSequencePlayer_ReturnValue, LevelSequencePlayer* CallFunc_GetSequencePlayer_ReturnValue, QualifiedFrameTime CallFunc_GetDuration_ReturnValue, float CallFunc_Conv_QualifiedFrameTimeToSeconds_ReturnValue, QualifiedFrameTime CallFunc_GetDuration_ReturnValue, float CallFunc_Conv_QualifiedFrameTimeToSeconds_ReturnValue, LevelSequencePlayer* CallFunc_GetSequencePlayer_ReturnValue, LevelSequencePlayer* CallFunc_GetSequencePlayer_ReturnValue, QualifiedFrameTime CallFunc_GetDuration_ReturnValue, float CallFunc_Conv_QualifiedFrameTimeToSeconds_ReturnValue, QualifiedFrameTime CallFunc_GetDuration_ReturnValue, float CallFunc_Conv_QualifiedFrameTimeToSeconds_ReturnValue, LevelSequencePlayer* CallFunc_GetSequencePlayer_ReturnValue, int CallFunc_PostAkEvent_OutPlayingID, ArkAkComponent* CallFunc_PostAkEvent_ReturnValue, QualifiedFrameTime CallFunc_GetDuration_ReturnValue, float CallFunc_Conv_QualifiedFrameTimeToSeconds_ReturnValue, int CallFunc_PostAkEvent_OutPlayingID, ArkAkComponent* CallFunc_PostAkEvent_ReturnValue, int CallFunc_PostAkEvent_OutPlayingID, ArkAkComponent* CallFunc_PostAkEvent_ReturnValue, int CallFunc_PostAkEvent_OutPlayingID, ArkAkComponent* CallFunc_PostAkEvent_ReturnValue, float K2Node_Event_DeltaSeconds, int CallFunc_PostAkEvent_OutPlayingID, ArkAkComponent* CallFunc_PostAkEvent_ReturnValue, int CallFunc_PostAkEvent_OutPlayingID, ArkAkComponent* CallFunc_PostAkEvent_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Actor* CallFunc_SwitchToCamera_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, ArkLevelSequenceManager* CallFunc_Get_ReturnValue, ArkLevelSequenceManager* CallFunc_Get_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, const AkAudioEvent*[] K2Node_MakeArray_Array, ArkAkComponent* CallFunc_PostLoopEventAsync_ReturnValue, enum CallFunc_GetGameMapModeByLevelID_ReturnValue, ArkUserDataControllerManager* CallFunc_Get_ReturnValue, int CallFunc_GetInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Actor* CallFunc_SwitchToCamera_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int K2Node_CustomEvent_ErrorCode, ArkHavenRPCInterface* CallFunc_GetHavenMetagameInterface_MetagameInteface, bool CallFunc_NotEqual_IntInt_ReturnValue, enum K2Node_CustomEvent_NewState, bool K2Node_SwitchEnum_CmpSuccess);// 0x305c9c0
	void OnMatchMakingCancel__DelegateSignature();// 0x305c9c0
	void OnMatchFound__DelegateSignature();// 0x305c9c0
	void OnMatchmakingBegin__DelegateSignature(enum GameMode, int Maplevel);// 0x305c9c0

--------------------------------
Class: ArkSituationMapBase.ArkInteractiveActor.ArkStaticActor.Actor.Object
	ArkHavenSituationMapEditable* MapActor;//[Offset: 0x588, Size: 0x8]
	FName HUDStateName;//[Offset: 0x590, Size: 0x8]
	FName InteractionMenuName;//[Offset: 0x598, Size: 0x8]
	FName InteractionHUDStateName;//[Offset: 0x5a0, Size: 0x8]
	FText TitleText_SituationTableNotInteractable;//[Offset: 0x5a8, Size: 0x18]
	FText ContentText_SituationTableNotInteractable;//[Offset: 0x5c0, Size: 0x18]
	FName ActionName_ConfirmDataBox;//[Offset: 0x5d8, Size: 0x8]
	FText ActionText_ConfirmDataBox;//[Offset: 0x5e0, Size: 0x18]
	delegate OnLerpComplete;//[Offset: 0x5f8, Size: 0x10]
	bool TryToGetCurrentMatchingMapMode(out enum OutMapMode);// 0x2963fe0
	Actor* SwitchToCamera(Actor* Destination, float Time, out const delegate IOnLerpComplete);// 0x2963e90
	void StartMatchmaking(enum ArkGameMapMode);// 0x26c22a0
	void ShowSituationMapInfo();// 0x2963cb0
	void SetMenuClosedReceiver(int UUID);// 0x2963b80
	void OpenUI(out const FName InMenuName);// 0x2963670
	void OpenNetworkErrorDialog(int ErrorCode);// 0x29635f0
	int OpenMatchFlowPopup(FName UIName);// 0x2963560
	void OnStartMatch_BP();// 0x305c9c0
	void OnSetupParty_BP();// 0x305c9c0
	void OnMatchMakingStateChanged_BP(enum NewState, enum OldState);// 0x305c9c0
	void OnMatchMakingStarted_BP();// 0x305c9c0
	void OnMatchMakingCompleted_BP();// 0x305c9c0
	void OnMatchMakingCanceled_BP();// 0x305c9c0
	void OnLerpComplete__DelegateSignature();// 0x305c9c0
	void OnConfirmErrorDataBox();// 0x26cb690
	void OnAlreadyInGame_BP();// 0x305c9c0
	void InternalOnLerpComplete();// 0x29632c0
	void EnableInputTags();// 0x29631e0
	void DisableInputTags();// 0x29631c0
	void CloseUI();// 0x29631a0

--------------------------------
Class: ArkHavenSituationMapCameraBase.CameraActor.Actor.Object

--------------------------------
Class: BP_SituationMapSeqBase_C.ArkLevelSequenceBase.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1b0, Size: 0x8]
	bool IsMatchMaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 0x1]
	int MatchingLevelID;//[Offset: 0x1bc, Size: 0x4]
	ArkLevelSequenceConfig GetLevelSequenceConfigInBlueprint(DataTable* Table, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, ArkLevelSequenceConfig CallFunc_Array_Get_Item, bool CallFunc_Not_PreBool_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, Struct_SituationMapSequenceConfig CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, LevelSequence* K2Node_Select_Default, ArkLevelSequenceConfig K2Node_MakeStruct_ArkLevelSequenceConfig);// 0x305c9c0
	void OnHandleSequenceStartInBlueprint();// 0x305c9c0
	void ExecuteUbergraph_BP_SituationMapSeqBase(int EntryPoint);// 0x305c9c0

--------------------------------
Class: Struct_SituationMapSequenceConfig
	int LevelID_20_21BD66AB444293551EC26F9BDD21A359;//[Offset: 0x0, Size: 0x4]
	LevelSequence* MatchmakingSequence_17_137D5AC645EE0A441BC35EADAFF85DE9;//[Offset: 0x8, Size: 0x28]
	LevelSequence* WaitingRoomSequence_19_5F9DADA848BFB5836F732AA07C665556;//[Offset: 0x30, Size: 0x28]

--------------------------------
Class: DataBoxOperateButton
	FName ActionName;//[Offset: 0x0, Size: 0x8]
	FText ActionText;//[Offset: 0x8, Size: 0x18]
	delegate OnButtonClicked;//[Offset: 0x20, Size: 0x10]
	int FunctionID;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: DataBoxPureTextTypeData
	float AutoCloseTime;//[Offset: 0x0, Size: 0x4]
	bool bEscCloseMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bUseWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	FText TitleRichText;//[Offset: 0x8, Size: 0x18]
	class UserWidget* TitleWidgetClass;//[Offset: 0x20, Size: 0x8]
	float TitleCountDownTimer;//[Offset: 0x28, Size: 0x4]
	FText ContentRichText;//[Offset: 0x30, Size: 0x18]
	DataBoxOperateButton[] OperateButtonList;//[Offset: 0x48, Size: 0x10]
	delegate OnTitleWidgetCreated;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: BP_SyncLab_Vendor_C.BP_VendorHaven_ThreeWayIntro_C.BP_VendorHaven_C.ArkHavenVendorBase.ArkInteractiveActor.ArkStaticActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x820, Size: 0x8]
	ArkHavenStatPropertyRef SectionTierPropertyRef;//[Offset: 0x828, Size: 0xc]
	ArkHavenStatPropertyRef LastViewedTierPropertyRef;//[Offset: 0x834, Size: 0xc]
	void ShowMenuTierUpgradevailable(ArkHavenRPCInterface* CallFunc_Get_ReturnValue, ArkHavenRPCInterface* CallFunc_Get_ReturnValue, int CallFunc_GetHavenStat_OutStat, bool CallFunc_GetHavenStat_ReturnValue, int CallFunc_GetHavenStat_OutStat, bool CallFunc_GetHavenStat_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x305c9c0
	void ReceiveBeginPlay();// 0x305c9c0
	void ExecuteUbergraph_BP_SyncLab_Vendor(int EntryPoint);// 0x305c9c0

--------------------------------
Class: BP_MedicBay_Vendor_C.BP_VendorHaven_ThreeWayIntro_C.BP_VendorHaven_C.ArkHavenVendorBase.ArkInteractiveActor.ArkStaticActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x820, Size: 0x8]
	void MarkAsPlayed(FName VOLineName, ArkHavenRPCInterface* CallFunc_Get_ReturnValue, bool CallFunc_SetVOLineNameFinishedOneTime_ReturnValue);// 0x305c9c0
	void HasNewlyReachedMedbayLevel(int CurrentLevel, int TargetLevel, FName VOLineName, out bool Result, ArkHavenRPCInterface* CallFunc_Get_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_CheckVOLineNameFinishedOneTime_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x305c9c0
	void ReceiveBeginPlay();// 0x305c9c0
	void Greeting();// 0x305c9c0
	void ExecuteUbergraph_BP_MedicBay_Vendor(int EntryPoint, const delegate Temp_delegate_Variable, const ArkFactDictionary Temp_struct_Variable, const FName Temp_name_Variable, enum CallFunc_Say_PlayLineResult, bool K2Node_SwitchEnum_CmpSuccess);// 0x305c9c0

--------------------------------
Class: VendorQuestCameraActor.CameraActor.Actor.Object
	int VendorID;//[Offset: 0x960, Size: 0x4]
	byte BlendFunction;//[Offset: 0x965, Size: 0x1]
	float BlendTime;//[Offset: 0x968, Size: 0x4]
	float BlendExp;//[Offset: 0x96c, Size: 0x4]
	float EnterFadeoutDuaration;//[Offset: 0x970, Size: 0x4]
	float EnterBlackDuaration;//[Offset: 0x974, Size: 0x4]
	float EnterFadeinDuaration;//[Offset: 0x978, Size: 0x4]
	bool EnterDisableInputWhenFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97c, Size: 0x1]
	float TimeToHidePlayer;//[Offset: 0x980, Size: 0x4]
	float TimeToMoveCamera;//[Offset: 0x984, Size: 0x4]
	float LeaveFadeoutDuaration;//[Offset: 0x988, Size: 0x4]
	float LeaveBlackDuaration;//[Offset: 0x98c, Size: 0x4]
	float LeaveFadeinDuaration;//[Offset: 0x990, Size: 0x4]
	bool LeaveDisableInputWhenFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x994, Size: 0x1]
	Vector OffSetPos;//[Offset: 0x998, Size: 0xc]
	VendorQuestCameraActor* ViewStartActor;//[Offset: 0x9a8, Size: 0x8]
	CurveFloat* FocalDistanceCurve;//[Offset: 0x9b0, Size: 0x8]
	void OnQuest2HavenVendor(ArkHavenVendorBase* Vendor, bool EnterOrLeave);// 0x29ee920
	void OnClickTabHavenVendor(ArkHavenVendorBase* Vendor, bool EnterOrLeave);// 0x29ee750
	void BP_PlayFadeOutAnimation();// 0x305c9c0
	void BP_PlayFadeInAnimation();// 0x305c9c0

--------------------------------
Class: testGuidSpline_C.ArkProjectileGuideSpline.ArkSplineTemplate.Actor.Object

--------------------------------
Class: Haven_PIPManager_C.PIPAnouncementManager.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x338, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x340, Size: 0x8]
	TimerHandle TimerHandle;//[Offset: 0x348, Size: 0x8]
	PIPMessage CurrentMessage;//[Offset: 0x350, Size: 0x10]
	bool InteractionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	bool InGameMenuEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x361, Size: 0x1]
	bool bHasPIPMessage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x362, Size: 0x1]
	void SetHasPIPMessage(bool HasPIPMessage, ArkHavenNanoBandInfoManager* CallFunc_GetNanoBandInfoManager_ReturnValue);// 0x305c9c0
	void HasPIPMessage(out bool bHasPIPMessage);// 0x305c9c0
	bool IsInOnboard(ArkHavenStatPropertyRef LocalHavenRef, byte CallFunc_MakeLiteralByte_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, ArkHavenRPCInterface* CallFunc_GetRPCInterface_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_CheckBitHavenStat_ReturnValue, bool CallFunc_CheckBitHavenStat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x305c9c0
	void Try To Display PIP();// 0x305c9c0
	void OnMessageShowFinished();// 0x305c9c0
	void StartPIP();// 0x305c9c0
	void EnablePIPMessages(byte EventSource);// 0x305c9c0
	void DisablePIPMessages(byte EventSource, bool RemoveWidget);// 0x305c9c0
	void OnAddPIP(int Priority, FName PIPType, int Animation Time);// 0x305c9c0
	void ExecuteUbergraph_Haven_PIPManager(int EntryPoint, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, const delegate Temp_delegate_Variable, const <FString,float> Temp_string_Variable, const FString[] Temp_string_Variable, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, Controller* CallFunc_GetController_ReturnValue, ArkPlayerArmBandComponent* CallFunc_GetPlayerArmBandComponent_ReturnValue, ArkPlayerControllerBase* K2Node_DynamicCast_AsArk_Player_Controller_Base, bool K2Node_DynamicCast_bSuccess, FName CallFunc_GetArmBandAttachPointName_ReturnValue, bool CallFunc_IsInCinematicMode_ReturnValue, int CallFunc_PostAkEventAttached_OutPlayingID, ArkAkComponent* CallFunc_PostAkEventAttached_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, UserWidget* CallFunc_AddWidget_ReturnValue, UserWidget* CallFunc_GetWidget_ReturnValue, WBP_HVN_PipMessage_C* K2Node_DynamicCast_AsWBP_HVN_Pip_Message, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, byte K2Node_Event_EventSource, bool CallFunc_IsQueueEmpty_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, byte K2Node_Event_EventSource, bool K2Node_Event_RemoveWidget, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_K2_TimerExistsHandle_ReturnValue, int K2Node_CustomEvent_Priority, FName K2Node_CustomEvent_PIPType, int K2Node_CustomEvent_Animation_Time, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, PIPMessage CallFunc_PopFirstPIP_OutValue, bool CallFunc_PopFirstPIP_ReturnValue, bool CallFunc_IsValid_ReturnValue, ArkPlayerArmBandComponent* CallFunc_GetPlayerArmBandComponent_ReturnValue, UserWidget* CallFunc_GetWidget_ReturnValue, WBP_HVN_PipMessage_C* K2Node_DynamicCast_AsWBP_HVN_Pip_Message, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_NameToString_ReturnValue, FText CallFunc_GetStringFromStringTable_ReturnValue, bool CallFunc_IsInOnboard_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x305c9c0

--------------------------------
Class: WBP_HVN_PipMessage_C.ArkHavenPipMessage.ArkUserDataWidget.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x330, Size: 0x8]
	WidgetAnimation* Anim_Outro;//[Offset: 0x338, Size: 0x8]
	WidgetAnimation* Anim_Loop;//[Offset: 0x340, Size: 0x8]
	WidgetAnimation* Anim_Intro;//[Offset: 0x348, Size: 0x8]
	Image* Background;//[Offset: 0x350, Size: 0x8]
	Image* Deco;//[Offset: 0x358, Size: 0x8]
	Image* Deco;//[Offset: 0x360, Size: 0x8]
	Image* Gradient;//[Offset: 0x368, Size: 0x8]
	Image* Image;//[Offset: 0x370, Size: 0x8]
	Image* Img_BG;//[Offset: 0x378, Size: 0x8]
	Image* Img_BG_Dot;//[Offset: 0x380, Size: 0x8]
	Image* Img_BG_Gradient;//[Offset: 0x388, Size: 0x8]
	Image* Img_CircleGradient;//[Offset: 0x390, Size: 0x8]
	Image* Img_Deco;//[Offset: 0x398, Size: 0x8]
	Image* Img_Deco;//[Offset: 0x3a0, Size: 0x8]
	Image* Img_Deco2;//[Offset: 0x3a8, Size: 0x8]
	Image* Img_Deco2;//[Offset: 0x3b0, Size: 0x8]
	Image* Img_Dot;//[Offset: 0x3b8, Size: 0x8]
	Image* Img_Dot;//[Offset: 0x3c0, Size: 0x8]
	Image* Img_Dot;//[Offset: 0x3c8, Size: 0x8]
	Image* Img_Dot;//[Offset: 0x3d0, Size: 0x8]
	Image* Img_Frame;//[Offset: 0x3d8, Size: 0x8]
	Image* Img_FrameBG;//[Offset: 0x3e0, Size: 0x8]
	Image* Img_FrameBG;//[Offset: 0x3e8, Size: 0x8]
	Image* Img_FrameBG;//[Offset: 0x3f0, Size: 0x8]
	Image* Img_Icon;//[Offset: 0x3f8, Size: 0x8]
	Image* Img_IconCircle;//[Offset: 0x400, Size: 0x8]
	Image* Img_Line;//[Offset: 0x408, Size: 0x8]
	Image* Img_Line;//[Offset: 0x410, Size: 0x8]
	Image* Img_Line;//[Offset: 0x418, Size: 0x8]
	Image* Img_line_01;//[Offset: 0x420, Size: 0x8]
	Image* Img_Triangle;//[Offset: 0x428, Size: 0x8]
	void Remove Myself();// 0x305c9c0
	void PlayIdle();// 0x305c9c0
	void PlayOutro();// 0x305c9c0
	void StartPlayAnimation(int AnimationTime);// 0x305c9c0
	void ExecuteUbergraph_WBP_HVN_PipMessage(int EntryPoint, int K2Node_Event_AnimationTime, float CallFunc_Conv_IntToFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, ArkPlayer* K2Node_DynamicCast_AsArk_Player, bool K2Node_DynamicCast_bSuccess, PIPAnouncementManager* CallFunc_GetPIPAnouncementManager_ReturnValue, ArkPlayerArmBandComponent* CallFunc_GetPlayerArmBandComponent_ReturnValue, Haven_PIPManager_C* K2Node_DynamicCast_AsHaven_PIPManager, bool K2Node_DynamicCast_bSuccess, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool CallFunc_IsAnimationPlaying_ReturnValue);// 0x305c9c0

--------------------------------
Class: ArkHavenPipMessage.ArkUserDataWidget.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* MessageText;//[Offset: 0x320, Size: 0x8]
	ArkUserDataModel* PlayerModel;//[Offset: 0x328, Size: 0x8]
	void StartPlayAnimation(int AnimationTime);// 0x305c9c0

--------------------------------
Class: Haven_NanoBandInfoManager_C.ArkHavenNanoBandInfoManager.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x308, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x310, Size: 0x8]
	TimerHandle TryDisplayNanoBandInfoTimer;//[Offset: 0x318, Size: 0x8]
	TimerHandle CheckPipMessageTimer;//[Offset: 0x320, Size: 0x8]
	TimerHandle PlayerLevelUpTimer;//[Offset: 0x328, Size: 0x8]
	bool IsNanoBandScoreAnimationPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	FName NanoBandScoreMenuName;//[Offset: 0x334, Size: 0x8]
	int ScoreMenuID;//[Offset: 0x33c, Size: 0x4]
	TimerHandle LevelUpAnimation;//[Offset: 0x340, Size: 0x8]
	TimerHandle SetLevelTextTimer;//[Offset: 0x348, Size: 0x8]
	TimerHandle NanoBandChangeTimer;//[Offset: 0x350, Size: 0x8]
	bool bIsNanoBandScoreWidgetEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	void CheckCanDisplay(out bool bCanDisplay, out bool bForceHideWidget, ArkHavenStatPropertyRef HavenUnlockStatRef, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_IsInCinematicMode_ReturnValue, Controller* CallFunc_GetController_ReturnValue, ArkPlayerControllerBase* K2Node_DynamicCast_AsArk_Player_Controller_Base, bool K2Node_DynamicCast_bSuccess, ArkHavenRPCInterface* CallFunc_Get_ReturnValue, bool CallFunc_IsInCinematicMode_ReturnValue, int CallFunc_GetHavenStat_OutStat, bool CallFunc_GetHavenStat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, PIPAnouncementManager* CallFunc_GetPIPAnouncementManager_ReturnValue, Haven_PIPManager_C* K2Node_DynamicCast_AsHaven_PIPManager, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasPIPMessage_bHasPIPMessage, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x305c9c0
	bool IsInOnboard(ArkHavenStatPropertyRef LocalHavenRef, byte CallFunc_MakeLiteralByte_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, ArkHavenRPCInterface* CallFunc_GetRPCInterface_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_CheckBitHavenStat_ReturnValue, bool CallFunc_CheckBitHavenStat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x305c9c0
	void EnableNanoBandInfo();// 0x305c9c0
	void DisableNanoBandInfo(const bool ForceHideWidget);// 0x305c9c0
	void StartNanoBandInfoDisplay();// 0x305c9c0
	void TryDisplayNanoBandInfo();// 0x305c9c0
	void EndNanoBandInfoDisplay(bool ForceHideWidget);// 0x305c9c0
	void InitNanoBandInfoManager();// 0x305c9c0
	void CheckPipMessage();// 0x305c9c0
	void ReceiveEndPlay(byte EndPlayReason);// 0x305c9c0
	void OnPlayerLevelUp();// 0x305c9c0
	void TrySetLevelUp();// 0x305c9c0
	void OnNanoBandChange();// 0x305c9c0
	void TryPlayLevelUpAnimation();// 0x305c9c0
	void TrySetNanoBandScoreText();// 0x305c9c0
	void OnBackToHaven();// 0x305c9c0
	void ExecuteUbergraph_Haven_NanoBandInfoManager(int EntryPoint, ArkDelegateDispatcher* CallFunc_Get_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsNanoBandScoreInit_ReturnValue, bool CallFunc_IsPlayerLevelInit_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, ArkPlayerArmBandComponent* CallFunc_GetPlayerArmBandComponent_ReturnValue, UserWidget* CallFunc_GetWidget_ReturnValue, UserWidget* CallFunc_AddWidget_ReturnValue, WBP_HVN_ArmbandMessage_C* K2Node_DynamicCast_AsWBP_HVN_Armband_Message, bool K2Node_DynamicCast_bSuccess, WBP_HVN_ArmbandMessage_C* K2Node_DynamicCast_AsWBP_HVN_Armband_Message, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsObjectValid_ReturnValue, bool CallFunc_IsObjectValid_ReturnValue, bool CallFunc_IsObjectValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, ArkPlayerArmBandComponent* CallFunc_GetPlayerArmBandComponent_ReturnValue, bool CallFunc_IsObjectValid_ReturnValue, UserWidget* CallFunc_GetWidget_ReturnValue, WBP_HVN_ArmbandMessage_C* K2Node_DynamicCast_AsWBP_HVN_Armband_Message, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsObjectValid_ReturnValue, bool CallFunc_IsObjectValid_ReturnValue, ArkBattleHUD* CallFunc_GetArkBattleHUD_ReturnValue, bool CallFunc_IsObjectValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, ArkHavenDataManager* CallFunc_ArkGetHavenDataManager_ReturnValue, FString CallFunc_GetPlayerUIDAsStringInt64_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, ArkUserDataManager* CallFunc_Get_ReturnValue, ArkUserDataModel* CallFunc_GetUserDataModel_ReturnValue, bool CallFunc_HasValidData_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_IsInCinematicMode_ReturnValue, ArkPlayerArmBandComponent* CallFunc_GetPlayerArmBandComponent_ReturnValue, bool CallFunc_IsObjectValid_ReturnValue, UserWidget* CallFunc_GetWidget_ReturnValue, WBP_HVN_ArmbandMessage_C* K2Node_DynamicCast_AsWBP_HVN_Armband_Message, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsObjectValid_ReturnValue, bool CallFunc_IsObjectValid_ReturnValue, Controller* CallFunc_GetController_ReturnValue, ArkPlayerControllerBase* K2Node_DynamicCast_AsArk_Player_Controller_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsInCinematicMode_ReturnValue, const bool K2Node_Event_ForceHideWidget, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_K2_TimerExistsHandle_ReturnValue, bool K2Node_CustomEvent_ForceHideWidget, byte K2Node_Event_EndPlayReason, bool CallFunc_K2_TimerExistsHandle_ReturnValue, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, ArkPlayerArmBandComponent* CallFunc_GetPlayerArmBandComponent_ReturnValue, UserWidget* CallFunc_GetWidget_ReturnValue, bool CallFunc_IsObjectValid_ReturnValue, WBP_HVN_ArmbandMessage_C* K2Node_DynamicCast_AsWBP_HVN_Armband_Message, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsObjectValid_ReturnValue, bool CallFunc_IsObjectValid_ReturnValue, ArkPopupMenuBase* CallFunc_GetMenu_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_TimerExistsHandle_ReturnValue, PIPAnouncementManager* CallFunc_GetPIPAnouncementManager_ReturnValue, Haven_PIPManager_C* K2Node_DynamicCast_AsHaven_PIPManager, bool K2Node_DynamicCast_bSuccess, bool CallFunc_K2_TimerExistsHandle_ReturnValue, bool CallFunc_CheckCanDisplay_bCanDisplay, bool CallFunc_CheckCanDisplay_bForceHideWidget, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_IsInCinematicMode_ReturnValue, Controller* CallFunc_GetController_ReturnValue, ArkPlayerControllerBase* K2Node_DynamicCast_AsArk_Player_Controller_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsInCinematicMode_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, ArkPlayer* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, ArkSoftParticleSystemComponentWithPool* CallFunc_SpawnSoftEmitterAttached_ReturnValue, bool CallFunc_IsObjectValid_ReturnValue, const delegate Temp_delegate_Variable, int CallFunc_PostAkEvent_OutPlayingID, ArkAkComponent* CallFunc_PostAkEvent_ReturnValue);// 0x305c9c0

--------------------------------
Class: WBP_HVN_ArmbandMessage_C.ArkArmBandMessage.ArkUserDataWidget.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x328, Size: 0x8]
	WidgetAnimation* Anim_Intro;//[Offset: 0x330, Size: 0x8]
	WBP_KeyTips_Button_C* AnimEmoteButton;//[Offset: 0x338, Size: 0x8]
	WBP_KeyTips_WithText_C* KeyTips_Emotes;//[Offset: 0x340, Size: 0x8]
	WBP_KeyTips_WithText_C* KeyTips_NanoBand;//[Offset: 0x348, Size: 0x8]
	Overlay* Overlay;//[Offset: 0x350, Size: 0x8]
	Overlay* Overlay_NanoBandLv;//[Offset: 0x358, Size: 0x8]
	Overlay* Overlay_NervaPoint;//[Offset: 0x360, Size: 0x8]
	TextBlock* TextBlock_NanoPoint;//[Offset: 0x368, Size: 0x8]
	TextBlock* TextBlock_NanoPoint;//[Offset: 0x370, Size: 0x8]
	WBP_HavenNewRedDot_C* WBP_HavenNewRedDot;//[Offset: 0x378, Size: 0x8]
	TimerHandle IdleTimer;//[Offset: 0x380, Size: 0x8]
	bool IsDisplayLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 0x1]
	float Duration;//[Offset: 0x38c, Size: 0x4]
	bool LevelUpFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	void SetNanoBandValue(int NanoBandScore, FText CallFunc_Conv_IntToText_ReturnValue);// 0x305c9c0
	void SetLevelValue(int PlayerLevel, FText CallFunc_Conv_IntToText_ReturnValue);// 0x305c9c0
	void DisplayNanoBand();// 0x305c9c0
	void DisplayLevel();// 0x305c9c0
	void ResetWidgetState();// 0x305c9c0
	void Construct();// 0x305c9c0
	void PlayIdle();// 0x305c9c0
	void FadeOut();// 0x305c9c0
	void RemoveMyself();// 0x305c9c0
	void HideWidget();// 0x305c9c0
	void PlayLevelUpAnimation(int PlayerLevel);// 0x305c9c0
	void StopDisplay(const bool ForceHideWidget);// 0x305c9c0
	void StartDisplay();// 0x305c9c0
	void FadeIn();// 0x305c9c0
	void ExecuteUbergraph_WBP_HVN_ArmbandMessage(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, const delegate Temp_delegate_Variable, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_PostAkEvent_OutPlayingID, ArkAkComponent* CallFunc_PostAkEvent_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, int CallFunc_PostAkEvent_OutPlayingID, ArkAkComponent* CallFunc_PostAkEvent_ReturnValue, int CallFunc_PostAkEvent_OutPlayingID, ArkAkComponent* CallFunc_PostAkEvent_ReturnValue, const delegate Temp_delegate_Variable, int CallFunc_PostAkEvent_OutPlayingID, ArkAkComponent* CallFunc_PostAkEvent_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, ArkPlayer* K2Node_DynamicCast_AsArk_Player, bool K2Node_DynamicCast_bSuccess, ArkPlayerArmBandComponent* CallFunc_GetPlayerArmBandComponent_ReturnValue, bool CallFunc_IsAnimationPlaying_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimationReverse_ReturnValue, int K2Node_CustomEvent_PlayerLevel, const bool K2Node_Event_ForceHideWidget, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimationReverse_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate);// 0x305c9c0

--------------------------------
Class: ArkArmBandMessage.ArkUserDataWidget.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	ArkPgosPlayerAvatar* WBP_PgosPlayerAvatar;//[Offset: 0x320, Size: 0x8]
	void StopDisplay(const bool ForceHideWidget);// 0x305c9c0
	void StartDisplay();// 0x305c9c0
	void CacheAvatarImageInfo();// 0x2c55060

--------------------------------
Class: WBP_KeyTips_Button_C.ArkKeyTipsButton.ArkCommonButton.ArkUserWidgetBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x5d8, Size: 0x8]
	NamedSlot* FX_Slot;//[Offset: 0x5e0, Size: 0x8]
	Image* Image_lock;//[Offset: 0x5e8, Size: 0x8]
	Image* Image_Mask;//[Offset: 0x5f0, Size: 0x8]
	Overlay* Overlay_LockNode;//[Offset: 0x5f8, Size: 0x8]
	Overlay* Overlay_Root;//[Offset: 0x600, Size: 0x8]
	bool bShowBackgroundImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608, Size: 0x1]
	void LockButton(bool bLock, bool CallFunc_Not_PreBool_ReturnValue);// 0x305c9c0
	void PreConstruct(bool IsDesignTime);// 0x305c9c0
	void ExecuteUbergraph_WBP_KeyTips_Button(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x305c9c0

--------------------------------
Class: NamedSlot.ContentWidget.PanelWidget.Widget.Visual.Object

--------------------------------
Class: WBP_KeyTips_WithText_C.ArkKeyTipsWidget.UserWidget.Widget.Visual.Object
	Image* DecoImage;//[Offset: 0x670, Size: 0x8]
	Image* Image;//[Offset: 0x678, Size: 0x8]

--------------------------------
Class: WBP_HavenNewRedDot_C.MRedPointWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x250, Size: 0x8]
	WidgetAnimation* JumpAnima_Blue;//[Offset: 0x258, Size: 0x8]
	WidgetAnimation* JumpAnima;//[Offset: 0x260, Size: 0x8]
	WidgetAnimation* LoopAnima;//[Offset: 0x268, Size: 0x8]
	Image* Image_Better;//[Offset: 0x270, Size: 0x8]
	Image* Image_Better;//[Offset: 0x278, Size: 0x8]
	Image* Image_Better;//[Offset: 0x280, Size: 0x8]
	Image* Img_ExclamationMark;//[Offset: 0x288, Size: 0x8]
	Image* Img_Gradient;//[Offset: 0x290, Size: 0x8]
	Image* Img_Icon;//[Offset: 0x298, Size: 0x8]
	Image* Img_Icon_Number;//[Offset: 0x2a0, Size: 0x8]
	RetainerBox* RetainerBox;//[Offset: 0x2a8, Size: 0x8]
	void StopAni();// 0x305c9c0
	void PlayAni(UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x305c9c0
	void BP_ShowRedPointWidget(enum RedPointType, int Count);// 0x305c9c0
	void BP_HideRedPointWidget();// 0x305c9c0
	void ExecuteUbergraph_WBP_HavenNewRedDot(int EntryPoint, enum K2Node_Event_RedPointType, int K2Node_Event_Count);// 0x305c9c0

--------------------------------
Class: RetainerBox.ContentWidget.PanelWidget.Widget.Visual.Object
	bool RenderOnInvalidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	bool RenderOnPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1]
	int Phase;//[Offset: 0x13c, Size: 0x4]
	int PhaseCount;//[Offset: 0x140, Size: 0x4]
	MaterialInterface* EffectMaterial;//[Offset: 0x148, Size: 0x8]
	FName TextureParameter;//[Offset: 0x150, Size: 0x8]
	void SetTextureParameter(FName TextureParameter);// 0x4152d10
	void SetRenderingPhase(int RenderPhase, int TotalPhases);// 0x41529e0
	void SetEffectMaterial(MaterialInterface* EffectMaterial);// 0x4152280
	void RequestRender();// 0x41521e0
	MaterialInstanceDynamic* GetEffectMaterial();// 0x4151bf0

--------------------------------
Class: MT_SwarmNano_C.ComplxInstancedSkeletalMeshActor.InstancedSkeletalMeshActor.InstancedSkeletalMeshBase.Actor.Object
